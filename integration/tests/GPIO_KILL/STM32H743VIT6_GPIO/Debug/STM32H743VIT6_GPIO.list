
STM32H743VIT6_GPIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004908  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004ba0  08004ba0  00014ba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08004be0  08004be0  00014be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08004be8  08004be8  00014be8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08004bec  08004bec  00014bec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  08004bf0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000b0  24000010  08004c00  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240000c0  08004c00  000200c0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000f5ea  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001b82  00000000  00000000  0002f628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000009f0  00000000  00000000  000311b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000958  00000000  00000000  00031ba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000351fe  00000000  00000000  000324f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000d68d  00000000  00000000  000676f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001552e1  00000000  00000000  00074d83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001ca064  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002864  00000000  00000000  001ca0b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08004b88 	.word	0x08004b88

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08004b88 	.word	0x08004b88

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e0:	f000 faba 	bl	8000b58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e4:	f000 f81a 	bl	800061c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e8:	f000 f8ce 	bl	8000788 <MX_GPIO_Init>
  MX_UART7_Init();
 80005ec:	f000 f880 	bl	80006f0 <MX_UART7_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart7,"Led on", 6, 1000);
 80005f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005f4:	2206      	movs	r2, #6
 80005f6:	4906      	ldr	r1, [pc, #24]	; (8000610 <main+0x34>)
 80005f8:	4806      	ldr	r0, [pc, #24]	; (8000614 <main+0x38>)
 80005fa:	f003 f9e3 	bl	80039c4 <HAL_UART_Transmit>
  HAL_Delay(5000);
 80005fe:	f241 3088 	movw	r0, #5000	; 0x1388
 8000602:	f000 fb3b 	bl	8000c7c <HAL_Delay>
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_6);
 8000606:	2140      	movs	r1, #64	; 0x40
 8000608:	4803      	ldr	r0, [pc, #12]	; (8000618 <main+0x3c>)
 800060a:	f000 fe14 	bl	8001236 <HAL_GPIO_TogglePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800060e:	e7fe      	b.n	800060e <main+0x32>
 8000610:	08004ba0 	.word	0x08004ba0
 8000614:	2400002c 	.word	0x2400002c
 8000618:	58020c00 	.word	0x58020c00

0800061c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b09c      	sub	sp, #112	; 0x70
 8000620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000622:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000626:	224c      	movs	r2, #76	; 0x4c
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f004 faa4 	bl	8004b78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000630:	1d3b      	adds	r3, r7, #4
 8000632:	2220      	movs	r2, #32
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f004 fa9e 	bl	8004b78 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800063c:	2002      	movs	r0, #2
 800063e:	f000 fe15 	bl	800126c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000642:	2300      	movs	r3, #0
 8000644:	603b      	str	r3, [r7, #0]
 8000646:	4b28      	ldr	r3, [pc, #160]	; (80006e8 <SystemClock_Config+0xcc>)
 8000648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800064a:	4a27      	ldr	r2, [pc, #156]	; (80006e8 <SystemClock_Config+0xcc>)
 800064c:	f023 0301 	bic.w	r3, r3, #1
 8000650:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000652:	4b25      	ldr	r3, [pc, #148]	; (80006e8 <SystemClock_Config+0xcc>)
 8000654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000656:	f003 0301 	and.w	r3, r3, #1
 800065a:	603b      	str	r3, [r7, #0]
 800065c:	4b23      	ldr	r3, [pc, #140]	; (80006ec <SystemClock_Config+0xd0>)
 800065e:	699b      	ldr	r3, [r3, #24]
 8000660:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000664:	4a21      	ldr	r2, [pc, #132]	; (80006ec <SystemClock_Config+0xd0>)
 8000666:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800066a:	6193      	str	r3, [r2, #24]
 800066c:	4b1f      	ldr	r3, [pc, #124]	; (80006ec <SystemClock_Config+0xd0>)
 800066e:	699b      	ldr	r3, [r3, #24]
 8000670:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000674:	603b      	str	r3, [r7, #0]
 8000676:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000678:	bf00      	nop
 800067a:	4b1c      	ldr	r3, [pc, #112]	; (80006ec <SystemClock_Config+0xd0>)
 800067c:	699b      	ldr	r3, [r3, #24]
 800067e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000682:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000686:	d1f8      	bne.n	800067a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000688:	2302      	movs	r3, #2
 800068a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800068c:	2301      	movs	r3, #1
 800068e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000690:	2340      	movs	r3, #64	; 0x40
 8000692:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000694:	2300      	movs	r3, #0
 8000696:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000698:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800069c:	4618      	mov	r0, r3
 800069e:	f000 fe1f 	bl	80012e0 <HAL_RCC_OscConfig>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0x90>
  {
    Error_Handler();
 80006a8:	f000 f8f4 	bl	8000894 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ac:	233f      	movs	r3, #63	; 0x3f
 80006ae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006b0:	2300      	movs	r3, #0
 80006b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80006bc:	2300      	movs	r3, #0
 80006be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80006c0:	2340      	movs	r3, #64	; 0x40
 80006c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80006c8:	2300      	movs	r3, #0
 80006ca:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006cc:	1d3b      	adds	r3, r7, #4
 80006ce:	2101      	movs	r1, #1
 80006d0:	4618      	mov	r0, r3
 80006d2:	f001 fa33 	bl	8001b3c <HAL_RCC_ClockConfig>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006dc:	f000 f8da 	bl	8000894 <Error_Handler>
  }
}
 80006e0:	bf00      	nop
 80006e2:	3770      	adds	r7, #112	; 0x70
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	58000400 	.word	0x58000400
 80006ec:	58024800 	.word	0x58024800

080006f0 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 80006f4:	4b22      	ldr	r3, [pc, #136]	; (8000780 <MX_UART7_Init+0x90>)
 80006f6:	4a23      	ldr	r2, [pc, #140]	; (8000784 <MX_UART7_Init+0x94>)
 80006f8:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 80006fa:	4b21      	ldr	r3, [pc, #132]	; (8000780 <MX_UART7_Init+0x90>)
 80006fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000700:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8000702:	4b1f      	ldr	r3, [pc, #124]	; (8000780 <MX_UART7_Init+0x90>)
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000708:	4b1d      	ldr	r3, [pc, #116]	; (8000780 <MX_UART7_Init+0x90>)
 800070a:	2200      	movs	r2, #0
 800070c:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800070e:	4b1c      	ldr	r3, [pc, #112]	; (8000780 <MX_UART7_Init+0x90>)
 8000710:	2200      	movs	r2, #0
 8000712:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8000714:	4b1a      	ldr	r3, [pc, #104]	; (8000780 <MX_UART7_Init+0x90>)
 8000716:	220c      	movs	r2, #12
 8000718:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800071a:	4b19      	ldr	r3, [pc, #100]	; (8000780 <MX_UART7_Init+0x90>)
 800071c:	2200      	movs	r2, #0
 800071e:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000720:	4b17      	ldr	r3, [pc, #92]	; (8000780 <MX_UART7_Init+0x90>)
 8000722:	2200      	movs	r2, #0
 8000724:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000726:	4b16      	ldr	r3, [pc, #88]	; (8000780 <MX_UART7_Init+0x90>)
 8000728:	2200      	movs	r2, #0
 800072a:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800072c:	4b14      	ldr	r3, [pc, #80]	; (8000780 <MX_UART7_Init+0x90>)
 800072e:	2200      	movs	r2, #0
 8000730:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000732:	4b13      	ldr	r3, [pc, #76]	; (8000780 <MX_UART7_Init+0x90>)
 8000734:	2200      	movs	r2, #0
 8000736:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8000738:	4811      	ldr	r0, [pc, #68]	; (8000780 <MX_UART7_Init+0x90>)
 800073a:	f003 f8f3 	bl	8003924 <HAL_UART_Init>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8000744:	f000 f8a6 	bl	8000894 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000748:	2100      	movs	r1, #0
 800074a:	480d      	ldr	r0, [pc, #52]	; (8000780 <MX_UART7_Init+0x90>)
 800074c:	f004 f926 	bl	800499c <HAL_UARTEx_SetTxFifoThreshold>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 8000756:	f000 f89d 	bl	8000894 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800075a:	2100      	movs	r1, #0
 800075c:	4808      	ldr	r0, [pc, #32]	; (8000780 <MX_UART7_Init+0x90>)
 800075e:	f004 f95b 	bl	8004a18 <HAL_UARTEx_SetRxFifoThreshold>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8000768:	f000 f894 	bl	8000894 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 800076c:	4804      	ldr	r0, [pc, #16]	; (8000780 <MX_UART7_Init+0x90>)
 800076e:	f004 f8dc 	bl	800492a <HAL_UARTEx_DisableFifoMode>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8000778:	f000 f88c 	bl	8000894 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800077c:	bf00      	nop
 800077e:	bd80      	pop	{r7, pc}
 8000780:	2400002c 	.word	0x2400002c
 8000784:	40007800 	.word	0x40007800

08000788 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b08a      	sub	sp, #40	; 0x28
 800078c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078e:	f107 0314 	add.w	r3, r7, #20
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]
 8000798:	609a      	str	r2, [r3, #8]
 800079a:	60da      	str	r2, [r3, #12]
 800079c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800079e:	4b3a      	ldr	r3, [pc, #232]	; (8000888 <MX_GPIO_Init+0x100>)
 80007a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007a4:	4a38      	ldr	r2, [pc, #224]	; (8000888 <MX_GPIO_Init+0x100>)
 80007a6:	f043 0304 	orr.w	r3, r3, #4
 80007aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007ae:	4b36      	ldr	r3, [pc, #216]	; (8000888 <MX_GPIO_Init+0x100>)
 80007b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007b4:	f003 0304 	and.w	r3, r3, #4
 80007b8:	613b      	str	r3, [r7, #16]
 80007ba:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007bc:	4b32      	ldr	r3, [pc, #200]	; (8000888 <MX_GPIO_Init+0x100>)
 80007be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007c2:	4a31      	ldr	r2, [pc, #196]	; (8000888 <MX_GPIO_Init+0x100>)
 80007c4:	f043 0310 	orr.w	r3, r3, #16
 80007c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007cc:	4b2e      	ldr	r3, [pc, #184]	; (8000888 <MX_GPIO_Init+0x100>)
 80007ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007d2:	f003 0310 	and.w	r3, r3, #16
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007da:	4b2b      	ldr	r3, [pc, #172]	; (8000888 <MX_GPIO_Init+0x100>)
 80007dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007e0:	4a29      	ldr	r2, [pc, #164]	; (8000888 <MX_GPIO_Init+0x100>)
 80007e2:	f043 0301 	orr.w	r3, r3, #1
 80007e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007ea:	4b27      	ldr	r3, [pc, #156]	; (8000888 <MX_GPIO_Init+0x100>)
 80007ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007f0:	f003 0301 	and.w	r3, r3, #1
 80007f4:	60bb      	str	r3, [r7, #8]
 80007f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007f8:	4b23      	ldr	r3, [pc, #140]	; (8000888 <MX_GPIO_Init+0x100>)
 80007fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007fe:	4a22      	ldr	r2, [pc, #136]	; (8000888 <MX_GPIO_Init+0x100>)
 8000800:	f043 0308 	orr.w	r3, r3, #8
 8000804:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000808:	4b1f      	ldr	r3, [pc, #124]	; (8000888 <MX_GPIO_Init+0x100>)
 800080a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800080e:	f003 0308 	and.w	r3, r3, #8
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000816:	4b1c      	ldr	r3, [pc, #112]	; (8000888 <MX_GPIO_Init+0x100>)
 8000818:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800081c:	4a1a      	ldr	r2, [pc, #104]	; (8000888 <MX_GPIO_Init+0x100>)
 800081e:	f043 0302 	orr.w	r3, r3, #2
 8000822:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000826:	4b18      	ldr	r3, [pc, #96]	; (8000888 <MX_GPIO_Init+0x100>)
 8000828:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800082c:	f003 0302 	and.w	r3, r3, #2
 8000830:	603b      	str	r3, [r7, #0]
 8000832:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8000834:	2201      	movs	r2, #1
 8000836:	2101      	movs	r1, #1
 8000838:	4814      	ldr	r0, [pc, #80]	; (800088c <MX_GPIO_Init+0x104>)
 800083a:	f000 fce3 	bl	8001204 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_SET);
 800083e:	2201      	movs	r2, #1
 8000840:	2140      	movs	r1, #64	; 0x40
 8000842:	4813      	ldr	r0, [pc, #76]	; (8000890 <MX_GPIO_Init+0x108>)
 8000844:	f000 fcde 	bl	8001204 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000848:	2301      	movs	r3, #1
 800084a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084c:	2301      	movs	r3, #1
 800084e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000854:	2300      	movs	r3, #0
 8000856:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000858:	f107 0314 	add.w	r3, r7, #20
 800085c:	4619      	mov	r1, r3
 800085e:	480b      	ldr	r0, [pc, #44]	; (800088c <MX_GPIO_Init+0x104>)
 8000860:	f000 fb20 	bl	8000ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000864:	2340      	movs	r3, #64	; 0x40
 8000866:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000868:	2311      	movs	r3, #17
 800086a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000870:	2300      	movs	r3, #0
 8000872:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000874:	f107 0314 	add.w	r3, r7, #20
 8000878:	4619      	mov	r1, r3
 800087a:	4805      	ldr	r0, [pc, #20]	; (8000890 <MX_GPIO_Init+0x108>)
 800087c:	f000 fb12 	bl	8000ea4 <HAL_GPIO_Init>

}
 8000880:	bf00      	nop
 8000882:	3728      	adds	r7, #40	; 0x28
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	58024400 	.word	0x58024400
 800088c:	58020800 	.word	0x58020800
 8000890:	58020c00 	.word	0x58020c00

08000894 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000898:	b672      	cpsid	i
}
 800089a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800089c:	e7fe      	b.n	800089c <Error_Handler+0x8>
	...

080008a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008a6:	4b0a      	ldr	r3, [pc, #40]	; (80008d0 <HAL_MspInit+0x30>)
 80008a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80008ac:	4a08      	ldr	r2, [pc, #32]	; (80008d0 <HAL_MspInit+0x30>)
 80008ae:	f043 0302 	orr.w	r3, r3, #2
 80008b2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80008b6:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <HAL_MspInit+0x30>)
 80008b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80008bc:	f003 0302 	and.w	r3, r3, #2
 80008c0:	607b      	str	r3, [r7, #4]
 80008c2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008c4:	bf00      	nop
 80008c6:	370c      	adds	r7, #12
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr
 80008d0:	58024400 	.word	0x58024400

080008d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b0b8      	sub	sp, #224	; 0xe0
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008dc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	605a      	str	r2, [r3, #4]
 80008e6:	609a      	str	r2, [r3, #8]
 80008e8:	60da      	str	r2, [r3, #12]
 80008ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008ec:	f107 0310 	add.w	r3, r7, #16
 80008f0:	22bc      	movs	r2, #188	; 0xbc
 80008f2:	2100      	movs	r1, #0
 80008f4:	4618      	mov	r0, r3
 80008f6:	f004 f93f 	bl	8004b78 <memset>
  if(huart->Instance==UART7)
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	4a25      	ldr	r2, [pc, #148]	; (8000994 <HAL_UART_MspInit+0xc0>)
 8000900:	4293      	cmp	r3, r2
 8000902:	d142      	bne.n	800098a <HAL_UART_MspInit+0xb6>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8000904:	2302      	movs	r3, #2
 8000906:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000908:	2300      	movs	r3, #0
 800090a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800090e:	f107 0310 	add.w	r3, r7, #16
 8000912:	4618      	mov	r0, r3
 8000914:	f001 fc9e 	bl	8002254 <HAL_RCCEx_PeriphCLKConfig>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800091e:	f7ff ffb9 	bl	8000894 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8000922:	4b1d      	ldr	r3, [pc, #116]	; (8000998 <HAL_UART_MspInit+0xc4>)
 8000924:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000928:	4a1b      	ldr	r2, [pc, #108]	; (8000998 <HAL_UART_MspInit+0xc4>)
 800092a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800092e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000932:	4b19      	ldr	r3, [pc, #100]	; (8000998 <HAL_UART_MspInit+0xc4>)
 8000934:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000938:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800093c:	60fb      	str	r3, [r7, #12]
 800093e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000940:	4b15      	ldr	r3, [pc, #84]	; (8000998 <HAL_UART_MspInit+0xc4>)
 8000942:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000946:	4a14      	ldr	r2, [pc, #80]	; (8000998 <HAL_UART_MspInit+0xc4>)
 8000948:	f043 0310 	orr.w	r3, r3, #16
 800094c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000950:	4b11      	ldr	r3, [pc, #68]	; (8000998 <HAL_UART_MspInit+0xc4>)
 8000952:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000956:	f003 0310 	and.w	r3, r3, #16
 800095a:	60bb      	str	r3, [r7, #8]
 800095c:	68bb      	ldr	r3, [r7, #8]
    /**UART7 GPIO Configuration
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800095e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000962:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000966:	2302      	movs	r3, #2
 8000968:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000972:	2300      	movs	r3, #0
 8000974:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8000978:	2307      	movs	r3, #7
 800097a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800097e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000982:	4619      	mov	r1, r3
 8000984:	4805      	ldr	r0, [pc, #20]	; (800099c <HAL_UART_MspInit+0xc8>)
 8000986:	f000 fa8d 	bl	8000ea4 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 800098a:	bf00      	nop
 800098c:	37e0      	adds	r7, #224	; 0xe0
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40007800 	.word	0x40007800
 8000998:	58024400 	.word	0x58024400
 800099c:	58021000 	.word	0x58021000

080009a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009a4:	e7fe      	b.n	80009a4 <NMI_Handler+0x4>

080009a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009a6:	b480      	push	{r7}
 80009a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009aa:	e7fe      	b.n	80009aa <HardFault_Handler+0x4>

080009ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009b0:	e7fe      	b.n	80009b0 <MemManage_Handler+0x4>

080009b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009b6:	e7fe      	b.n	80009b6 <BusFault_Handler+0x4>

080009b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009bc:	e7fe      	b.n	80009bc <UsageFault_Handler+0x4>

080009be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009be:	b480      	push	{r7}
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009c2:	bf00      	nop
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr

080009cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr

080009da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009da:	b480      	push	{r7}
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009de:	bf00      	nop
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr

080009e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009ec:	f000 f926 	bl	8000c3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009f0:	bf00      	nop
 80009f2:	bd80      	pop	{r7, pc}

080009f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80009f8:	4b37      	ldr	r3, [pc, #220]	; (8000ad8 <SystemInit+0xe4>)
 80009fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009fe:	4a36      	ldr	r2, [pc, #216]	; (8000ad8 <SystemInit+0xe4>)
 8000a00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a08:	4b34      	ldr	r3, [pc, #208]	; (8000adc <SystemInit+0xe8>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f003 030f 	and.w	r3, r3, #15
 8000a10:	2b06      	cmp	r3, #6
 8000a12:	d807      	bhi.n	8000a24 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a14:	4b31      	ldr	r3, [pc, #196]	; (8000adc <SystemInit+0xe8>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	f023 030f 	bic.w	r3, r3, #15
 8000a1c:	4a2f      	ldr	r2, [pc, #188]	; (8000adc <SystemInit+0xe8>)
 8000a1e:	f043 0307 	orr.w	r3, r3, #7
 8000a22:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000a24:	4b2e      	ldr	r3, [pc, #184]	; (8000ae0 <SystemInit+0xec>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a2d      	ldr	r2, [pc, #180]	; (8000ae0 <SystemInit+0xec>)
 8000a2a:	f043 0301 	orr.w	r3, r3, #1
 8000a2e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000a30:	4b2b      	ldr	r3, [pc, #172]	; (8000ae0 <SystemInit+0xec>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000a36:	4b2a      	ldr	r3, [pc, #168]	; (8000ae0 <SystemInit+0xec>)
 8000a38:	681a      	ldr	r2, [r3, #0]
 8000a3a:	4929      	ldr	r1, [pc, #164]	; (8000ae0 <SystemInit+0xec>)
 8000a3c:	4b29      	ldr	r3, [pc, #164]	; (8000ae4 <SystemInit+0xf0>)
 8000a3e:	4013      	ands	r3, r2
 8000a40:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a42:	4b26      	ldr	r3, [pc, #152]	; (8000adc <SystemInit+0xe8>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	f003 0308 	and.w	r3, r3, #8
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d007      	beq.n	8000a5e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a4e:	4b23      	ldr	r3, [pc, #140]	; (8000adc <SystemInit+0xe8>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	f023 030f 	bic.w	r3, r3, #15
 8000a56:	4a21      	ldr	r2, [pc, #132]	; (8000adc <SystemInit+0xe8>)
 8000a58:	f043 0307 	orr.w	r3, r3, #7
 8000a5c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000a5e:	4b20      	ldr	r3, [pc, #128]	; (8000ae0 <SystemInit+0xec>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000a64:	4b1e      	ldr	r3, [pc, #120]	; (8000ae0 <SystemInit+0xec>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000a6a:	4b1d      	ldr	r3, [pc, #116]	; (8000ae0 <SystemInit+0xec>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000a70:	4b1b      	ldr	r3, [pc, #108]	; (8000ae0 <SystemInit+0xec>)
 8000a72:	4a1d      	ldr	r2, [pc, #116]	; (8000ae8 <SystemInit+0xf4>)
 8000a74:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000a76:	4b1a      	ldr	r3, [pc, #104]	; (8000ae0 <SystemInit+0xec>)
 8000a78:	4a1c      	ldr	r2, [pc, #112]	; (8000aec <SystemInit+0xf8>)
 8000a7a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000a7c:	4b18      	ldr	r3, [pc, #96]	; (8000ae0 <SystemInit+0xec>)
 8000a7e:	4a1c      	ldr	r2, [pc, #112]	; (8000af0 <SystemInit+0xfc>)
 8000a80:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000a82:	4b17      	ldr	r3, [pc, #92]	; (8000ae0 <SystemInit+0xec>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000a88:	4b15      	ldr	r3, [pc, #84]	; (8000ae0 <SystemInit+0xec>)
 8000a8a:	4a19      	ldr	r2, [pc, #100]	; (8000af0 <SystemInit+0xfc>)
 8000a8c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000a8e:	4b14      	ldr	r3, [pc, #80]	; (8000ae0 <SystemInit+0xec>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000a94:	4b12      	ldr	r3, [pc, #72]	; (8000ae0 <SystemInit+0xec>)
 8000a96:	4a16      	ldr	r2, [pc, #88]	; (8000af0 <SystemInit+0xfc>)
 8000a98:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000a9a:	4b11      	ldr	r3, [pc, #68]	; (8000ae0 <SystemInit+0xec>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000aa0:	4b0f      	ldr	r3, [pc, #60]	; (8000ae0 <SystemInit+0xec>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a0e      	ldr	r2, [pc, #56]	; (8000ae0 <SystemInit+0xec>)
 8000aa6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000aaa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000aac:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <SystemInit+0xec>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000ab2:	4b10      	ldr	r3, [pc, #64]	; (8000af4 <SystemInit+0x100>)
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	4b10      	ldr	r3, [pc, #64]	; (8000af8 <SystemInit+0x104>)
 8000ab8:	4013      	ands	r3, r2
 8000aba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000abe:	d202      	bcs.n	8000ac6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000ac0:	4b0e      	ldr	r3, [pc, #56]	; (8000afc <SystemInit+0x108>)
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000ac6:	4b0e      	ldr	r3, [pc, #56]	; (8000b00 <SystemInit+0x10c>)
 8000ac8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000acc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000ace:	bf00      	nop
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr
 8000ad8:	e000ed00 	.word	0xe000ed00
 8000adc:	52002000 	.word	0x52002000
 8000ae0:	58024400 	.word	0x58024400
 8000ae4:	eaf6ed7f 	.word	0xeaf6ed7f
 8000ae8:	02020200 	.word	0x02020200
 8000aec:	01ff0000 	.word	0x01ff0000
 8000af0:	01010280 	.word	0x01010280
 8000af4:	5c001000 	.word	0x5c001000
 8000af8:	ffff0000 	.word	0xffff0000
 8000afc:	51008108 	.word	0x51008108
 8000b00:	52004000 	.word	0x52004000

08000b04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000b04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b3c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b08:	f7ff ff74 	bl	80009f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b0c:	480c      	ldr	r0, [pc, #48]	; (8000b40 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b0e:	490d      	ldr	r1, [pc, #52]	; (8000b44 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b10:	4a0d      	ldr	r2, [pc, #52]	; (8000b48 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b14:	e002      	b.n	8000b1c <LoopCopyDataInit>

08000b16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b1a:	3304      	adds	r3, #4

08000b1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b20:	d3f9      	bcc.n	8000b16 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b22:	4a0a      	ldr	r2, [pc, #40]	; (8000b4c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b24:	4c0a      	ldr	r4, [pc, #40]	; (8000b50 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b28:	e001      	b.n	8000b2e <LoopFillZerobss>

08000b2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b2c:	3204      	adds	r2, #4

08000b2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b30:	d3fb      	bcc.n	8000b2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b32:	f003 fffd 	bl	8004b30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b36:	f7ff fd51 	bl	80005dc <main>
  bx  lr
 8000b3a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b3c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000b40:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000b44:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000b48:	08004bf0 	.word	0x08004bf0
  ldr r2, =_sbss
 8000b4c:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000b50:	240000c0 	.word	0x240000c0

08000b54 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b54:	e7fe      	b.n	8000b54 <ADC3_IRQHandler>
	...

08000b58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b5e:	2003      	movs	r0, #3
 8000b60:	f000 f96e 	bl	8000e40 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000b64:	f001 f9a0 	bl	8001ea8 <HAL_RCC_GetSysClockFreq>
 8000b68:	4602      	mov	r2, r0
 8000b6a:	4b15      	ldr	r3, [pc, #84]	; (8000bc0 <HAL_Init+0x68>)
 8000b6c:	699b      	ldr	r3, [r3, #24]
 8000b6e:	0a1b      	lsrs	r3, r3, #8
 8000b70:	f003 030f 	and.w	r3, r3, #15
 8000b74:	4913      	ldr	r1, [pc, #76]	; (8000bc4 <HAL_Init+0x6c>)
 8000b76:	5ccb      	ldrb	r3, [r1, r3]
 8000b78:	f003 031f 	and.w	r3, r3, #31
 8000b7c:	fa22 f303 	lsr.w	r3, r2, r3
 8000b80:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000b82:	4b0f      	ldr	r3, [pc, #60]	; (8000bc0 <HAL_Init+0x68>)
 8000b84:	699b      	ldr	r3, [r3, #24]
 8000b86:	f003 030f 	and.w	r3, r3, #15
 8000b8a:	4a0e      	ldr	r2, [pc, #56]	; (8000bc4 <HAL_Init+0x6c>)
 8000b8c:	5cd3      	ldrb	r3, [r2, r3]
 8000b8e:	f003 031f 	and.w	r3, r3, #31
 8000b92:	687a      	ldr	r2, [r7, #4]
 8000b94:	fa22 f303 	lsr.w	r3, r2, r3
 8000b98:	4a0b      	ldr	r2, [pc, #44]	; (8000bc8 <HAL_Init+0x70>)
 8000b9a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000b9c:	4a0b      	ldr	r2, [pc, #44]	; (8000bcc <HAL_Init+0x74>)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ba2:	200f      	movs	r0, #15
 8000ba4:	f000 f814 	bl	8000bd0 <HAL_InitTick>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	e002      	b.n	8000bb8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000bb2:	f7ff fe75 	bl	80008a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bb6:	2300      	movs	r3, #0
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	3708      	adds	r7, #8
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	58024400 	.word	0x58024400
 8000bc4:	08004ba8 	.word	0x08004ba8
 8000bc8:	24000004 	.word	0x24000004
 8000bcc:	24000000 	.word	0x24000000

08000bd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000bd8:	4b15      	ldr	r3, [pc, #84]	; (8000c30 <HAL_InitTick+0x60>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d101      	bne.n	8000be4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000be0:	2301      	movs	r3, #1
 8000be2:	e021      	b.n	8000c28 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000be4:	4b13      	ldr	r3, [pc, #76]	; (8000c34 <HAL_InitTick+0x64>)
 8000be6:	681a      	ldr	r2, [r3, #0]
 8000be8:	4b11      	ldr	r3, [pc, #68]	; (8000c30 <HAL_InitTick+0x60>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	4619      	mov	r1, r3
 8000bee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bf2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f000 f945 	bl	8000e8a <HAL_SYSTICK_Config>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000c06:	2301      	movs	r3, #1
 8000c08:	e00e      	b.n	8000c28 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	2b0f      	cmp	r3, #15
 8000c0e:	d80a      	bhi.n	8000c26 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c10:	2200      	movs	r2, #0
 8000c12:	6879      	ldr	r1, [r7, #4]
 8000c14:	f04f 30ff 	mov.w	r0, #4294967295
 8000c18:	f000 f91d 	bl	8000e56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c1c:	4a06      	ldr	r2, [pc, #24]	; (8000c38 <HAL_InitTick+0x68>)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c22:	2300      	movs	r3, #0
 8000c24:	e000      	b.n	8000c28 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000c26:	2301      	movs	r3, #1
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	3708      	adds	r7, #8
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	2400000c 	.word	0x2400000c
 8000c34:	24000000 	.word	0x24000000
 8000c38:	24000008 	.word	0x24000008

08000c3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c40:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <HAL_IncTick+0x20>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	461a      	mov	r2, r3
 8000c46:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <HAL_IncTick+0x24>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4413      	add	r3, r2
 8000c4c:	4a04      	ldr	r2, [pc, #16]	; (8000c60 <HAL_IncTick+0x24>)
 8000c4e:	6013      	str	r3, [r2, #0]
}
 8000c50:	bf00      	nop
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	2400000c 	.word	0x2400000c
 8000c60:	240000bc 	.word	0x240000bc

08000c64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  return uwTick;
 8000c68:	4b03      	ldr	r3, [pc, #12]	; (8000c78 <HAL_GetTick+0x14>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	240000bc 	.word	0x240000bc

08000c7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c84:	f7ff ffee 	bl	8000c64 <HAL_GetTick>
 8000c88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c94:	d005      	beq.n	8000ca2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c96:	4b0a      	ldr	r3, [pc, #40]	; (8000cc0 <HAL_Delay+0x44>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ca2:	bf00      	nop
 8000ca4:	f7ff ffde 	bl	8000c64 <HAL_GetTick>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	68bb      	ldr	r3, [r7, #8]
 8000cac:	1ad3      	subs	r3, r2, r3
 8000cae:	68fa      	ldr	r2, [r7, #12]
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	d8f7      	bhi.n	8000ca4 <HAL_Delay+0x28>
  {
  }
}
 8000cb4:	bf00      	nop
 8000cb6:	bf00      	nop
 8000cb8:	3710      	adds	r7, #16
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	2400000c 	.word	0x2400000c

08000cc4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000cc8:	4b03      	ldr	r3, [pc, #12]	; (8000cd8 <HAL_GetREVID+0x14>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	0c1b      	lsrs	r3, r3, #16
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr
 8000cd8:	5c001000 	.word	0x5c001000

08000cdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b085      	sub	sp, #20
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	f003 0307 	and.w	r3, r3, #7
 8000cea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cec:	4b0b      	ldr	r3, [pc, #44]	; (8000d1c <__NVIC_SetPriorityGrouping+0x40>)
 8000cee:	68db      	ldr	r3, [r3, #12]
 8000cf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cf2:	68ba      	ldr	r2, [r7, #8]
 8000cf4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d04:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <__NVIC_SetPriorityGrouping+0x44>)
 8000d06:	4313      	orrs	r3, r2
 8000d08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d0a:	4a04      	ldr	r2, [pc, #16]	; (8000d1c <__NVIC_SetPriorityGrouping+0x40>)
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	60d3      	str	r3, [r2, #12]
}
 8000d10:	bf00      	nop
 8000d12:	3714      	adds	r7, #20
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	e000ed00 	.word	0xe000ed00
 8000d20:	05fa0000 	.word	0x05fa0000

08000d24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d28:	4b04      	ldr	r3, [pc, #16]	; (8000d3c <__NVIC_GetPriorityGrouping+0x18>)
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	0a1b      	lsrs	r3, r3, #8
 8000d2e:	f003 0307 	and.w	r3, r3, #7
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr
 8000d3c:	e000ed00 	.word	0xe000ed00

08000d40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	6039      	str	r1, [r7, #0]
 8000d4a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000d4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	db0a      	blt.n	8000d6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	b2da      	uxtb	r2, r3
 8000d58:	490c      	ldr	r1, [pc, #48]	; (8000d8c <__NVIC_SetPriority+0x4c>)
 8000d5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d5e:	0112      	lsls	r2, r2, #4
 8000d60:	b2d2      	uxtb	r2, r2
 8000d62:	440b      	add	r3, r1
 8000d64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d68:	e00a      	b.n	8000d80 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	b2da      	uxtb	r2, r3
 8000d6e:	4908      	ldr	r1, [pc, #32]	; (8000d90 <__NVIC_SetPriority+0x50>)
 8000d70:	88fb      	ldrh	r3, [r7, #6]
 8000d72:	f003 030f 	and.w	r3, r3, #15
 8000d76:	3b04      	subs	r3, #4
 8000d78:	0112      	lsls	r2, r2, #4
 8000d7a:	b2d2      	uxtb	r2, r2
 8000d7c:	440b      	add	r3, r1
 8000d7e:	761a      	strb	r2, [r3, #24]
}
 8000d80:	bf00      	nop
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	e000e100 	.word	0xe000e100
 8000d90:	e000ed00 	.word	0xe000ed00

08000d94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b089      	sub	sp, #36	; 0x24
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	60f8      	str	r0, [r7, #12]
 8000d9c:	60b9      	str	r1, [r7, #8]
 8000d9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	f003 0307 	and.w	r3, r3, #7
 8000da6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000da8:	69fb      	ldr	r3, [r7, #28]
 8000daa:	f1c3 0307 	rsb	r3, r3, #7
 8000dae:	2b04      	cmp	r3, #4
 8000db0:	bf28      	it	cs
 8000db2:	2304      	movcs	r3, #4
 8000db4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	3304      	adds	r3, #4
 8000dba:	2b06      	cmp	r3, #6
 8000dbc:	d902      	bls.n	8000dc4 <NVIC_EncodePriority+0x30>
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	3b03      	subs	r3, #3
 8000dc2:	e000      	b.n	8000dc6 <NVIC_EncodePriority+0x32>
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dcc:	69bb      	ldr	r3, [r7, #24]
 8000dce:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd2:	43da      	mvns	r2, r3
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	401a      	ands	r2, r3
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ddc:	f04f 31ff 	mov.w	r1, #4294967295
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	fa01 f303 	lsl.w	r3, r1, r3
 8000de6:	43d9      	mvns	r1, r3
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dec:	4313      	orrs	r3, r2
         );
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3724      	adds	r7, #36	; 0x24
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
	...

08000dfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	3b01      	subs	r3, #1
 8000e08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e0c:	d301      	bcc.n	8000e12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e0e:	2301      	movs	r3, #1
 8000e10:	e00f      	b.n	8000e32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e12:	4a0a      	ldr	r2, [pc, #40]	; (8000e3c <SysTick_Config+0x40>)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	3b01      	subs	r3, #1
 8000e18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e1a:	210f      	movs	r1, #15
 8000e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e20:	f7ff ff8e 	bl	8000d40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e24:	4b05      	ldr	r3, [pc, #20]	; (8000e3c <SysTick_Config+0x40>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e2a:	4b04      	ldr	r3, [pc, #16]	; (8000e3c <SysTick_Config+0x40>)
 8000e2c:	2207      	movs	r2, #7
 8000e2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e30:	2300      	movs	r3, #0
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	e000e010 	.word	0xe000e010

08000e40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e48:	6878      	ldr	r0, [r7, #4]
 8000e4a:	f7ff ff47 	bl	8000cdc <__NVIC_SetPriorityGrouping>
}
 8000e4e:	bf00      	nop
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}

08000e56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e56:	b580      	push	{r7, lr}
 8000e58:	b086      	sub	sp, #24
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	60b9      	str	r1, [r7, #8]
 8000e60:	607a      	str	r2, [r7, #4]
 8000e62:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e64:	f7ff ff5e 	bl	8000d24 <__NVIC_GetPriorityGrouping>
 8000e68:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e6a:	687a      	ldr	r2, [r7, #4]
 8000e6c:	68b9      	ldr	r1, [r7, #8]
 8000e6e:	6978      	ldr	r0, [r7, #20]
 8000e70:	f7ff ff90 	bl	8000d94 <NVIC_EncodePriority>
 8000e74:	4602      	mov	r2, r0
 8000e76:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e7a:	4611      	mov	r1, r2
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff ff5f 	bl	8000d40 <__NVIC_SetPriority>
}
 8000e82:	bf00      	nop
 8000e84:	3718      	adds	r7, #24
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	b082      	sub	sp, #8
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e92:	6878      	ldr	r0, [r7, #4]
 8000e94:	f7ff ffb2 	bl	8000dfc <SysTick_Config>
 8000e98:	4603      	mov	r3, r0
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
	...

08000ea4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b089      	sub	sp, #36	; 0x24
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000eb2:	4b89      	ldr	r3, [pc, #548]	; (80010d8 <HAL_GPIO_Init+0x234>)
 8000eb4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000eb6:	e194      	b.n	80011e2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	2101      	movs	r1, #1
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000ec8:	693b      	ldr	r3, [r7, #16]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	f000 8186 	beq.w	80011dc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f003 0303 	and.w	r3, r3, #3
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d005      	beq.n	8000ee8 <HAL_GPIO_Init+0x44>
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f003 0303 	and.w	r3, r3, #3
 8000ee4:	2b02      	cmp	r3, #2
 8000ee6:	d130      	bne.n	8000f4a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	689b      	ldr	r3, [r3, #8]
 8000eec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	2203      	movs	r2, #3
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	43db      	mvns	r3, r3
 8000efa:	69ba      	ldr	r2, [r7, #24]
 8000efc:	4013      	ands	r3, r2
 8000efe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	68da      	ldr	r2, [r3, #12]
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f1e:	2201      	movs	r2, #1
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	43db      	mvns	r3, r3
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	091b      	lsrs	r3, r3, #4
 8000f34:	f003 0201 	and.w	r2, r3, #1
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	69ba      	ldr	r2, [r7, #24]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	69ba      	ldr	r2, [r7, #24]
 8000f48:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f003 0303 	and.w	r3, r3, #3
 8000f52:	2b03      	cmp	r3, #3
 8000f54:	d017      	beq.n	8000f86 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	68db      	ldr	r3, [r3, #12]
 8000f5a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	2203      	movs	r2, #3
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	43db      	mvns	r3, r3
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	689a      	ldr	r2, [r3, #8]
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f003 0303 	and.w	r3, r3, #3
 8000f8e:	2b02      	cmp	r3, #2
 8000f90:	d123      	bne.n	8000fda <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	08da      	lsrs	r2, r3, #3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	3208      	adds	r2, #8
 8000f9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	f003 0307 	and.w	r3, r3, #7
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	220f      	movs	r2, #15
 8000faa:	fa02 f303 	lsl.w	r3, r2, r3
 8000fae:	43db      	mvns	r3, r3
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	691a      	ldr	r2, [r3, #16]
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	f003 0307 	and.w	r3, r3, #7
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	08da      	lsrs	r2, r3, #3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	3208      	adds	r2, #8
 8000fd4:	69b9      	ldr	r1, [r7, #24]
 8000fd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	2203      	movs	r2, #3
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	43db      	mvns	r3, r3
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f003 0203 	and.w	r2, r3, #3
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	4313      	orrs	r3, r2
 8001006:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001016:	2b00      	cmp	r3, #0
 8001018:	f000 80e0 	beq.w	80011dc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800101c:	4b2f      	ldr	r3, [pc, #188]	; (80010dc <HAL_GPIO_Init+0x238>)
 800101e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001022:	4a2e      	ldr	r2, [pc, #184]	; (80010dc <HAL_GPIO_Init+0x238>)
 8001024:	f043 0302 	orr.w	r3, r3, #2
 8001028:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800102c:	4b2b      	ldr	r3, [pc, #172]	; (80010dc <HAL_GPIO_Init+0x238>)
 800102e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001032:	f003 0302 	and.w	r3, r3, #2
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800103a:	4a29      	ldr	r2, [pc, #164]	; (80010e0 <HAL_GPIO_Init+0x23c>)
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	089b      	lsrs	r3, r3, #2
 8001040:	3302      	adds	r3, #2
 8001042:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001046:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	f003 0303 	and.w	r3, r3, #3
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	220f      	movs	r2, #15
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	43db      	mvns	r3, r3
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	4013      	ands	r3, r2
 800105c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a20      	ldr	r2, [pc, #128]	; (80010e4 <HAL_GPIO_Init+0x240>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d052      	beq.n	800110c <HAL_GPIO_Init+0x268>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a1f      	ldr	r2, [pc, #124]	; (80010e8 <HAL_GPIO_Init+0x244>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d031      	beq.n	80010d2 <HAL_GPIO_Init+0x22e>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4a1e      	ldr	r2, [pc, #120]	; (80010ec <HAL_GPIO_Init+0x248>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d02b      	beq.n	80010ce <HAL_GPIO_Init+0x22a>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a1d      	ldr	r2, [pc, #116]	; (80010f0 <HAL_GPIO_Init+0x24c>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d025      	beq.n	80010ca <HAL_GPIO_Init+0x226>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4a1c      	ldr	r2, [pc, #112]	; (80010f4 <HAL_GPIO_Init+0x250>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d01f      	beq.n	80010c6 <HAL_GPIO_Init+0x222>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a1b      	ldr	r2, [pc, #108]	; (80010f8 <HAL_GPIO_Init+0x254>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d019      	beq.n	80010c2 <HAL_GPIO_Init+0x21e>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4a1a      	ldr	r2, [pc, #104]	; (80010fc <HAL_GPIO_Init+0x258>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d013      	beq.n	80010be <HAL_GPIO_Init+0x21a>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4a19      	ldr	r2, [pc, #100]	; (8001100 <HAL_GPIO_Init+0x25c>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d00d      	beq.n	80010ba <HAL_GPIO_Init+0x216>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a18      	ldr	r2, [pc, #96]	; (8001104 <HAL_GPIO_Init+0x260>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d007      	beq.n	80010b6 <HAL_GPIO_Init+0x212>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a17      	ldr	r2, [pc, #92]	; (8001108 <HAL_GPIO_Init+0x264>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d101      	bne.n	80010b2 <HAL_GPIO_Init+0x20e>
 80010ae:	2309      	movs	r3, #9
 80010b0:	e02d      	b.n	800110e <HAL_GPIO_Init+0x26a>
 80010b2:	230a      	movs	r3, #10
 80010b4:	e02b      	b.n	800110e <HAL_GPIO_Init+0x26a>
 80010b6:	2308      	movs	r3, #8
 80010b8:	e029      	b.n	800110e <HAL_GPIO_Init+0x26a>
 80010ba:	2307      	movs	r3, #7
 80010bc:	e027      	b.n	800110e <HAL_GPIO_Init+0x26a>
 80010be:	2306      	movs	r3, #6
 80010c0:	e025      	b.n	800110e <HAL_GPIO_Init+0x26a>
 80010c2:	2305      	movs	r3, #5
 80010c4:	e023      	b.n	800110e <HAL_GPIO_Init+0x26a>
 80010c6:	2304      	movs	r3, #4
 80010c8:	e021      	b.n	800110e <HAL_GPIO_Init+0x26a>
 80010ca:	2303      	movs	r3, #3
 80010cc:	e01f      	b.n	800110e <HAL_GPIO_Init+0x26a>
 80010ce:	2302      	movs	r3, #2
 80010d0:	e01d      	b.n	800110e <HAL_GPIO_Init+0x26a>
 80010d2:	2301      	movs	r3, #1
 80010d4:	e01b      	b.n	800110e <HAL_GPIO_Init+0x26a>
 80010d6:	bf00      	nop
 80010d8:	58000080 	.word	0x58000080
 80010dc:	58024400 	.word	0x58024400
 80010e0:	58000400 	.word	0x58000400
 80010e4:	58020000 	.word	0x58020000
 80010e8:	58020400 	.word	0x58020400
 80010ec:	58020800 	.word	0x58020800
 80010f0:	58020c00 	.word	0x58020c00
 80010f4:	58021000 	.word	0x58021000
 80010f8:	58021400 	.word	0x58021400
 80010fc:	58021800 	.word	0x58021800
 8001100:	58021c00 	.word	0x58021c00
 8001104:	58022000 	.word	0x58022000
 8001108:	58022400 	.word	0x58022400
 800110c:	2300      	movs	r3, #0
 800110e:	69fa      	ldr	r2, [r7, #28]
 8001110:	f002 0203 	and.w	r2, r2, #3
 8001114:	0092      	lsls	r2, r2, #2
 8001116:	4093      	lsls	r3, r2
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	4313      	orrs	r3, r2
 800111c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800111e:	4938      	ldr	r1, [pc, #224]	; (8001200 <HAL_GPIO_Init+0x35c>)
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	089b      	lsrs	r3, r3, #2
 8001124:	3302      	adds	r3, #2
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800112c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	43db      	mvns	r3, r3
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	4013      	ands	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001146:	2b00      	cmp	r3, #0
 8001148:	d003      	beq.n	8001152 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	4313      	orrs	r3, r2
 8001150:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001152:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001156:	69bb      	ldr	r3, [r7, #24]
 8001158:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800115a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	43db      	mvns	r3, r3
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	4013      	ands	r3, r2
 800116a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001174:	2b00      	cmp	r3, #0
 8001176:	d003      	beq.n	8001180 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	4313      	orrs	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001180:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001184:	69bb      	ldr	r3, [r7, #24]
 8001186:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	43db      	mvns	r3, r3
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	4013      	ands	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d003      	beq.n	80011ac <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	43db      	mvns	r3, r3
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	4013      	ands	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d003      	beq.n	80011d6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	3301      	adds	r3, #1
 80011e0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	fa22 f303 	lsr.w	r3, r2, r3
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	f47f ae63 	bne.w	8000eb8 <HAL_GPIO_Init+0x14>
  }
}
 80011f2:	bf00      	nop
 80011f4:	bf00      	nop
 80011f6:	3724      	adds	r7, #36	; 0x24
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr
 8001200:	58000400 	.word	0x58000400

08001204 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	460b      	mov	r3, r1
 800120e:	807b      	strh	r3, [r7, #2]
 8001210:	4613      	mov	r3, r2
 8001212:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001214:	787b      	ldrb	r3, [r7, #1]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d003      	beq.n	8001222 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800121a:	887a      	ldrh	r2, [r7, #2]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001220:	e003      	b.n	800122a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001222:	887b      	ldrh	r3, [r7, #2]
 8001224:	041a      	lsls	r2, r3, #16
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	619a      	str	r2, [r3, #24]
}
 800122a:	bf00      	nop
 800122c:	370c      	adds	r7, #12
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr

08001236 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001236:	b480      	push	{r7}
 8001238:	b085      	sub	sp, #20
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
 800123e:	460b      	mov	r3, r1
 8001240:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	695b      	ldr	r3, [r3, #20]
 8001246:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001248:	887a      	ldrh	r2, [r7, #2]
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	4013      	ands	r3, r2
 800124e:	041a      	lsls	r2, r3, #16
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	43d9      	mvns	r1, r3
 8001254:	887b      	ldrh	r3, [r7, #2]
 8001256:	400b      	ands	r3, r1
 8001258:	431a      	orrs	r2, r3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	619a      	str	r2, [r3, #24]
}
 800125e:	bf00      	nop
 8001260:	3714      	adds	r7, #20
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
	...

0800126c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001274:	4b19      	ldr	r3, [pc, #100]	; (80012dc <HAL_PWREx_ConfigSupply+0x70>)
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	f003 0304 	and.w	r3, r3, #4
 800127c:	2b04      	cmp	r3, #4
 800127e:	d00a      	beq.n	8001296 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001280:	4b16      	ldr	r3, [pc, #88]	; (80012dc <HAL_PWREx_ConfigSupply+0x70>)
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	f003 0307 	and.w	r3, r3, #7
 8001288:	687a      	ldr	r2, [r7, #4]
 800128a:	429a      	cmp	r2, r3
 800128c:	d001      	beq.n	8001292 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e01f      	b.n	80012d2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001292:	2300      	movs	r3, #0
 8001294:	e01d      	b.n	80012d2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001296:	4b11      	ldr	r3, [pc, #68]	; (80012dc <HAL_PWREx_ConfigSupply+0x70>)
 8001298:	68db      	ldr	r3, [r3, #12]
 800129a:	f023 0207 	bic.w	r2, r3, #7
 800129e:	490f      	ldr	r1, [pc, #60]	; (80012dc <HAL_PWREx_ConfigSupply+0x70>)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80012a6:	f7ff fcdd 	bl	8000c64 <HAL_GetTick>
 80012aa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80012ac:	e009      	b.n	80012c2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80012ae:	f7ff fcd9 	bl	8000c64 <HAL_GetTick>
 80012b2:	4602      	mov	r2, r0
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80012bc:	d901      	bls.n	80012c2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e007      	b.n	80012d2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80012c2:	4b06      	ldr	r3, [pc, #24]	; (80012dc <HAL_PWREx_ConfigSupply+0x70>)
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80012ce:	d1ee      	bne.n	80012ae <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80012d0:	2300      	movs	r3, #0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3710      	adds	r7, #16
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	58024800 	.word	0x58024800

080012e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b08c      	sub	sp, #48	; 0x30
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d102      	bne.n	80012f4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	f000 bc1d 	b.w	8001b2e <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f003 0301 	and.w	r3, r3, #1
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	f000 8087 	beq.w	8001410 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001302:	4b99      	ldr	r3, [pc, #612]	; (8001568 <HAL_RCC_OscConfig+0x288>)
 8001304:	691b      	ldr	r3, [r3, #16]
 8001306:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800130a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800130c:	4b96      	ldr	r3, [pc, #600]	; (8001568 <HAL_RCC_OscConfig+0x288>)
 800130e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001310:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001314:	2b10      	cmp	r3, #16
 8001316:	d007      	beq.n	8001328 <HAL_RCC_OscConfig+0x48>
 8001318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800131a:	2b18      	cmp	r3, #24
 800131c:	d110      	bne.n	8001340 <HAL_RCC_OscConfig+0x60>
 800131e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001320:	f003 0303 	and.w	r3, r3, #3
 8001324:	2b02      	cmp	r3, #2
 8001326:	d10b      	bne.n	8001340 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001328:	4b8f      	ldr	r3, [pc, #572]	; (8001568 <HAL_RCC_OscConfig+0x288>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001330:	2b00      	cmp	r3, #0
 8001332:	d06c      	beq.n	800140e <HAL_RCC_OscConfig+0x12e>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d168      	bne.n	800140e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 800133c:	2301      	movs	r3, #1
 800133e:	e3f6      	b.n	8001b2e <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001348:	d106      	bne.n	8001358 <HAL_RCC_OscConfig+0x78>
 800134a:	4b87      	ldr	r3, [pc, #540]	; (8001568 <HAL_RCC_OscConfig+0x288>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a86      	ldr	r2, [pc, #536]	; (8001568 <HAL_RCC_OscConfig+0x288>)
 8001350:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001354:	6013      	str	r3, [r2, #0]
 8001356:	e02e      	b.n	80013b6 <HAL_RCC_OscConfig+0xd6>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d10c      	bne.n	800137a <HAL_RCC_OscConfig+0x9a>
 8001360:	4b81      	ldr	r3, [pc, #516]	; (8001568 <HAL_RCC_OscConfig+0x288>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a80      	ldr	r2, [pc, #512]	; (8001568 <HAL_RCC_OscConfig+0x288>)
 8001366:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800136a:	6013      	str	r3, [r2, #0]
 800136c:	4b7e      	ldr	r3, [pc, #504]	; (8001568 <HAL_RCC_OscConfig+0x288>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a7d      	ldr	r2, [pc, #500]	; (8001568 <HAL_RCC_OscConfig+0x288>)
 8001372:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001376:	6013      	str	r3, [r2, #0]
 8001378:	e01d      	b.n	80013b6 <HAL_RCC_OscConfig+0xd6>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001382:	d10c      	bne.n	800139e <HAL_RCC_OscConfig+0xbe>
 8001384:	4b78      	ldr	r3, [pc, #480]	; (8001568 <HAL_RCC_OscConfig+0x288>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a77      	ldr	r2, [pc, #476]	; (8001568 <HAL_RCC_OscConfig+0x288>)
 800138a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800138e:	6013      	str	r3, [r2, #0]
 8001390:	4b75      	ldr	r3, [pc, #468]	; (8001568 <HAL_RCC_OscConfig+0x288>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a74      	ldr	r2, [pc, #464]	; (8001568 <HAL_RCC_OscConfig+0x288>)
 8001396:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800139a:	6013      	str	r3, [r2, #0]
 800139c:	e00b      	b.n	80013b6 <HAL_RCC_OscConfig+0xd6>
 800139e:	4b72      	ldr	r3, [pc, #456]	; (8001568 <HAL_RCC_OscConfig+0x288>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a71      	ldr	r2, [pc, #452]	; (8001568 <HAL_RCC_OscConfig+0x288>)
 80013a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013a8:	6013      	str	r3, [r2, #0]
 80013aa:	4b6f      	ldr	r3, [pc, #444]	; (8001568 <HAL_RCC_OscConfig+0x288>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a6e      	ldr	r2, [pc, #440]	; (8001568 <HAL_RCC_OscConfig+0x288>)
 80013b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013b4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d013      	beq.n	80013e6 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013be:	f7ff fc51 	bl	8000c64 <HAL_GetTick>
 80013c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80013c4:	e008      	b.n	80013d8 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013c6:	f7ff fc4d 	bl	8000c64 <HAL_GetTick>
 80013ca:	4602      	mov	r2, r0
 80013cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ce:	1ad3      	subs	r3, r2, r3
 80013d0:	2b64      	cmp	r3, #100	; 0x64
 80013d2:	d901      	bls.n	80013d8 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80013d4:	2303      	movs	r3, #3
 80013d6:	e3aa      	b.n	8001b2e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80013d8:	4b63      	ldr	r3, [pc, #396]	; (8001568 <HAL_RCC_OscConfig+0x288>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d0f0      	beq.n	80013c6 <HAL_RCC_OscConfig+0xe6>
 80013e4:	e014      	b.n	8001410 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e6:	f7ff fc3d 	bl	8000c64 <HAL_GetTick>
 80013ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80013ec:	e008      	b.n	8001400 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013ee:	f7ff fc39 	bl	8000c64 <HAL_GetTick>
 80013f2:	4602      	mov	r2, r0
 80013f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	2b64      	cmp	r3, #100	; 0x64
 80013fa:	d901      	bls.n	8001400 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80013fc:	2303      	movs	r3, #3
 80013fe:	e396      	b.n	8001b2e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001400:	4b59      	ldr	r3, [pc, #356]	; (8001568 <HAL_RCC_OscConfig+0x288>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001408:	2b00      	cmp	r3, #0
 800140a:	d1f0      	bne.n	80013ee <HAL_RCC_OscConfig+0x10e>
 800140c:	e000      	b.n	8001410 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800140e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 0302 	and.w	r3, r3, #2
 8001418:	2b00      	cmp	r3, #0
 800141a:	f000 80cb 	beq.w	80015b4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800141e:	4b52      	ldr	r3, [pc, #328]	; (8001568 <HAL_RCC_OscConfig+0x288>)
 8001420:	691b      	ldr	r3, [r3, #16]
 8001422:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001426:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001428:	4b4f      	ldr	r3, [pc, #316]	; (8001568 <HAL_RCC_OscConfig+0x288>)
 800142a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800142c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800142e:	6a3b      	ldr	r3, [r7, #32]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d007      	beq.n	8001444 <HAL_RCC_OscConfig+0x164>
 8001434:	6a3b      	ldr	r3, [r7, #32]
 8001436:	2b18      	cmp	r3, #24
 8001438:	d156      	bne.n	80014e8 <HAL_RCC_OscConfig+0x208>
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	f003 0303 	and.w	r3, r3, #3
 8001440:	2b00      	cmp	r3, #0
 8001442:	d151      	bne.n	80014e8 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001444:	4b48      	ldr	r3, [pc, #288]	; (8001568 <HAL_RCC_OscConfig+0x288>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 0304 	and.w	r3, r3, #4
 800144c:	2b00      	cmp	r3, #0
 800144e:	d005      	beq.n	800145c <HAL_RCC_OscConfig+0x17c>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d101      	bne.n	800145c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	e368      	b.n	8001b2e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800145c:	4b42      	ldr	r3, [pc, #264]	; (8001568 <HAL_RCC_OscConfig+0x288>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f023 0219 	bic.w	r2, r3, #25
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	493f      	ldr	r1, [pc, #252]	; (8001568 <HAL_RCC_OscConfig+0x288>)
 800146a:	4313      	orrs	r3, r2
 800146c:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800146e:	f7ff fbf9 	bl	8000c64 <HAL_GetTick>
 8001472:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001474:	e008      	b.n	8001488 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001476:	f7ff fbf5 	bl	8000c64 <HAL_GetTick>
 800147a:	4602      	mov	r2, r0
 800147c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	2b02      	cmp	r3, #2
 8001482:	d901      	bls.n	8001488 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8001484:	2303      	movs	r3, #3
 8001486:	e352      	b.n	8001b2e <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001488:	4b37      	ldr	r3, [pc, #220]	; (8001568 <HAL_RCC_OscConfig+0x288>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 0304 	and.w	r3, r3, #4
 8001490:	2b00      	cmp	r3, #0
 8001492:	d0f0      	beq.n	8001476 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001494:	f7ff fc16 	bl	8000cc4 <HAL_GetREVID>
 8001498:	4603      	mov	r3, r0
 800149a:	f241 0203 	movw	r2, #4099	; 0x1003
 800149e:	4293      	cmp	r3, r2
 80014a0:	d817      	bhi.n	80014d2 <HAL_RCC_OscConfig+0x1f2>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	691b      	ldr	r3, [r3, #16]
 80014a6:	2b40      	cmp	r3, #64	; 0x40
 80014a8:	d108      	bne.n	80014bc <HAL_RCC_OscConfig+0x1dc>
 80014aa:	4b2f      	ldr	r3, [pc, #188]	; (8001568 <HAL_RCC_OscConfig+0x288>)
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80014b2:	4a2d      	ldr	r2, [pc, #180]	; (8001568 <HAL_RCC_OscConfig+0x288>)
 80014b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014b8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014ba:	e07b      	b.n	80015b4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014bc:	4b2a      	ldr	r3, [pc, #168]	; (8001568 <HAL_RCC_OscConfig+0x288>)
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	691b      	ldr	r3, [r3, #16]
 80014c8:	031b      	lsls	r3, r3, #12
 80014ca:	4927      	ldr	r1, [pc, #156]	; (8001568 <HAL_RCC_OscConfig+0x288>)
 80014cc:	4313      	orrs	r3, r2
 80014ce:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014d0:	e070      	b.n	80015b4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014d2:	4b25      	ldr	r3, [pc, #148]	; (8001568 <HAL_RCC_OscConfig+0x288>)
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	691b      	ldr	r3, [r3, #16]
 80014de:	061b      	lsls	r3, r3, #24
 80014e0:	4921      	ldr	r1, [pc, #132]	; (8001568 <HAL_RCC_OscConfig+0x288>)
 80014e2:	4313      	orrs	r3, r2
 80014e4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014e6:	e065      	b.n	80015b4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d048      	beq.n	8001582 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80014f0:	4b1d      	ldr	r3, [pc, #116]	; (8001568 <HAL_RCC_OscConfig+0x288>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f023 0219 	bic.w	r2, r3, #25
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	491a      	ldr	r1, [pc, #104]	; (8001568 <HAL_RCC_OscConfig+0x288>)
 80014fe:	4313      	orrs	r3, r2
 8001500:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001502:	f7ff fbaf 	bl	8000c64 <HAL_GetTick>
 8001506:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001508:	e008      	b.n	800151c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800150a:	f7ff fbab 	bl	8000c64 <HAL_GetTick>
 800150e:	4602      	mov	r2, r0
 8001510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	2b02      	cmp	r3, #2
 8001516:	d901      	bls.n	800151c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8001518:	2303      	movs	r3, #3
 800151a:	e308      	b.n	8001b2e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800151c:	4b12      	ldr	r3, [pc, #72]	; (8001568 <HAL_RCC_OscConfig+0x288>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 0304 	and.w	r3, r3, #4
 8001524:	2b00      	cmp	r3, #0
 8001526:	d0f0      	beq.n	800150a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001528:	f7ff fbcc 	bl	8000cc4 <HAL_GetREVID>
 800152c:	4603      	mov	r3, r0
 800152e:	f241 0203 	movw	r2, #4099	; 0x1003
 8001532:	4293      	cmp	r3, r2
 8001534:	d81a      	bhi.n	800156c <HAL_RCC_OscConfig+0x28c>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	691b      	ldr	r3, [r3, #16]
 800153a:	2b40      	cmp	r3, #64	; 0x40
 800153c:	d108      	bne.n	8001550 <HAL_RCC_OscConfig+0x270>
 800153e:	4b0a      	ldr	r3, [pc, #40]	; (8001568 <HAL_RCC_OscConfig+0x288>)
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001546:	4a08      	ldr	r2, [pc, #32]	; (8001568 <HAL_RCC_OscConfig+0x288>)
 8001548:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800154c:	6053      	str	r3, [r2, #4]
 800154e:	e031      	b.n	80015b4 <HAL_RCC_OscConfig+0x2d4>
 8001550:	4b05      	ldr	r3, [pc, #20]	; (8001568 <HAL_RCC_OscConfig+0x288>)
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	691b      	ldr	r3, [r3, #16]
 800155c:	031b      	lsls	r3, r3, #12
 800155e:	4902      	ldr	r1, [pc, #8]	; (8001568 <HAL_RCC_OscConfig+0x288>)
 8001560:	4313      	orrs	r3, r2
 8001562:	604b      	str	r3, [r1, #4]
 8001564:	e026      	b.n	80015b4 <HAL_RCC_OscConfig+0x2d4>
 8001566:	bf00      	nop
 8001568:	58024400 	.word	0x58024400
 800156c:	4b9a      	ldr	r3, [pc, #616]	; (80017d8 <HAL_RCC_OscConfig+0x4f8>)
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	691b      	ldr	r3, [r3, #16]
 8001578:	061b      	lsls	r3, r3, #24
 800157a:	4997      	ldr	r1, [pc, #604]	; (80017d8 <HAL_RCC_OscConfig+0x4f8>)
 800157c:	4313      	orrs	r3, r2
 800157e:	604b      	str	r3, [r1, #4]
 8001580:	e018      	b.n	80015b4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001582:	4b95      	ldr	r3, [pc, #596]	; (80017d8 <HAL_RCC_OscConfig+0x4f8>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a94      	ldr	r2, [pc, #592]	; (80017d8 <HAL_RCC_OscConfig+0x4f8>)
 8001588:	f023 0301 	bic.w	r3, r3, #1
 800158c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800158e:	f7ff fb69 	bl	8000c64 <HAL_GetTick>
 8001592:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001594:	e008      	b.n	80015a8 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001596:	f7ff fb65 	bl	8000c64 <HAL_GetTick>
 800159a:	4602      	mov	r2, r0
 800159c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d901      	bls.n	80015a8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80015a4:	2303      	movs	r3, #3
 80015a6:	e2c2      	b.n	8001b2e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80015a8:	4b8b      	ldr	r3, [pc, #556]	; (80017d8 <HAL_RCC_OscConfig+0x4f8>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 0304 	and.w	r3, r3, #4
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d1f0      	bne.n	8001596 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0310 	and.w	r3, r3, #16
 80015bc:	2b00      	cmp	r3, #0
 80015be:	f000 80a9 	beq.w	8001714 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015c2:	4b85      	ldr	r3, [pc, #532]	; (80017d8 <HAL_RCC_OscConfig+0x4f8>)
 80015c4:	691b      	ldr	r3, [r3, #16]
 80015c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80015ca:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80015cc:	4b82      	ldr	r3, [pc, #520]	; (80017d8 <HAL_RCC_OscConfig+0x4f8>)
 80015ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	2b08      	cmp	r3, #8
 80015d6:	d007      	beq.n	80015e8 <HAL_RCC_OscConfig+0x308>
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	2b18      	cmp	r3, #24
 80015dc:	d13a      	bne.n	8001654 <HAL_RCC_OscConfig+0x374>
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	f003 0303 	and.w	r3, r3, #3
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d135      	bne.n	8001654 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80015e8:	4b7b      	ldr	r3, [pc, #492]	; (80017d8 <HAL_RCC_OscConfig+0x4f8>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d005      	beq.n	8001600 <HAL_RCC_OscConfig+0x320>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	69db      	ldr	r3, [r3, #28]
 80015f8:	2b80      	cmp	r3, #128	; 0x80
 80015fa:	d001      	beq.n	8001600 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e296      	b.n	8001b2e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001600:	f7ff fb60 	bl	8000cc4 <HAL_GetREVID>
 8001604:	4603      	mov	r3, r0
 8001606:	f241 0203 	movw	r2, #4099	; 0x1003
 800160a:	4293      	cmp	r3, r2
 800160c:	d817      	bhi.n	800163e <HAL_RCC_OscConfig+0x35e>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6a1b      	ldr	r3, [r3, #32]
 8001612:	2b20      	cmp	r3, #32
 8001614:	d108      	bne.n	8001628 <HAL_RCC_OscConfig+0x348>
 8001616:	4b70      	ldr	r3, [pc, #448]	; (80017d8 <HAL_RCC_OscConfig+0x4f8>)
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800161e:	4a6e      	ldr	r2, [pc, #440]	; (80017d8 <HAL_RCC_OscConfig+0x4f8>)
 8001620:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001624:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001626:	e075      	b.n	8001714 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001628:	4b6b      	ldr	r3, [pc, #428]	; (80017d8 <HAL_RCC_OscConfig+0x4f8>)
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6a1b      	ldr	r3, [r3, #32]
 8001634:	069b      	lsls	r3, r3, #26
 8001636:	4968      	ldr	r1, [pc, #416]	; (80017d8 <HAL_RCC_OscConfig+0x4f8>)
 8001638:	4313      	orrs	r3, r2
 800163a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800163c:	e06a      	b.n	8001714 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800163e:	4b66      	ldr	r3, [pc, #408]	; (80017d8 <HAL_RCC_OscConfig+0x4f8>)
 8001640:	68db      	ldr	r3, [r3, #12]
 8001642:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6a1b      	ldr	r3, [r3, #32]
 800164a:	061b      	lsls	r3, r3, #24
 800164c:	4962      	ldr	r1, [pc, #392]	; (80017d8 <HAL_RCC_OscConfig+0x4f8>)
 800164e:	4313      	orrs	r3, r2
 8001650:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001652:	e05f      	b.n	8001714 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	69db      	ldr	r3, [r3, #28]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d042      	beq.n	80016e2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800165c:	4b5e      	ldr	r3, [pc, #376]	; (80017d8 <HAL_RCC_OscConfig+0x4f8>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a5d      	ldr	r2, [pc, #372]	; (80017d8 <HAL_RCC_OscConfig+0x4f8>)
 8001662:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001666:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001668:	f7ff fafc 	bl	8000c64 <HAL_GetTick>
 800166c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800166e:	e008      	b.n	8001682 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001670:	f7ff faf8 	bl	8000c64 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b02      	cmp	r3, #2
 800167c:	d901      	bls.n	8001682 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e255      	b.n	8001b2e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001682:	4b55      	ldr	r3, [pc, #340]	; (80017d8 <HAL_RCC_OscConfig+0x4f8>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800168a:	2b00      	cmp	r3, #0
 800168c:	d0f0      	beq.n	8001670 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800168e:	f7ff fb19 	bl	8000cc4 <HAL_GetREVID>
 8001692:	4603      	mov	r3, r0
 8001694:	f241 0203 	movw	r2, #4099	; 0x1003
 8001698:	4293      	cmp	r3, r2
 800169a:	d817      	bhi.n	80016cc <HAL_RCC_OscConfig+0x3ec>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6a1b      	ldr	r3, [r3, #32]
 80016a0:	2b20      	cmp	r3, #32
 80016a2:	d108      	bne.n	80016b6 <HAL_RCC_OscConfig+0x3d6>
 80016a4:	4b4c      	ldr	r3, [pc, #304]	; (80017d8 <HAL_RCC_OscConfig+0x4f8>)
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80016ac:	4a4a      	ldr	r2, [pc, #296]	; (80017d8 <HAL_RCC_OscConfig+0x4f8>)
 80016ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80016b2:	6053      	str	r3, [r2, #4]
 80016b4:	e02e      	b.n	8001714 <HAL_RCC_OscConfig+0x434>
 80016b6:	4b48      	ldr	r3, [pc, #288]	; (80017d8 <HAL_RCC_OscConfig+0x4f8>)
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6a1b      	ldr	r3, [r3, #32]
 80016c2:	069b      	lsls	r3, r3, #26
 80016c4:	4944      	ldr	r1, [pc, #272]	; (80017d8 <HAL_RCC_OscConfig+0x4f8>)
 80016c6:	4313      	orrs	r3, r2
 80016c8:	604b      	str	r3, [r1, #4]
 80016ca:	e023      	b.n	8001714 <HAL_RCC_OscConfig+0x434>
 80016cc:	4b42      	ldr	r3, [pc, #264]	; (80017d8 <HAL_RCC_OscConfig+0x4f8>)
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6a1b      	ldr	r3, [r3, #32]
 80016d8:	061b      	lsls	r3, r3, #24
 80016da:	493f      	ldr	r1, [pc, #252]	; (80017d8 <HAL_RCC_OscConfig+0x4f8>)
 80016dc:	4313      	orrs	r3, r2
 80016de:	60cb      	str	r3, [r1, #12]
 80016e0:	e018      	b.n	8001714 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80016e2:	4b3d      	ldr	r3, [pc, #244]	; (80017d8 <HAL_RCC_OscConfig+0x4f8>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a3c      	ldr	r2, [pc, #240]	; (80017d8 <HAL_RCC_OscConfig+0x4f8>)
 80016e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80016ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ee:	f7ff fab9 	bl	8000c64 <HAL_GetTick>
 80016f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80016f4:	e008      	b.n	8001708 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80016f6:	f7ff fab5 	bl	8000c64 <HAL_GetTick>
 80016fa:	4602      	mov	r2, r0
 80016fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	2b02      	cmp	r3, #2
 8001702:	d901      	bls.n	8001708 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001704:	2303      	movs	r3, #3
 8001706:	e212      	b.n	8001b2e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001708:	4b33      	ldr	r3, [pc, #204]	; (80017d8 <HAL_RCC_OscConfig+0x4f8>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001710:	2b00      	cmp	r3, #0
 8001712:	d1f0      	bne.n	80016f6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0308 	and.w	r3, r3, #8
 800171c:	2b00      	cmp	r3, #0
 800171e:	d036      	beq.n	800178e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	695b      	ldr	r3, [r3, #20]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d019      	beq.n	800175c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001728:	4b2b      	ldr	r3, [pc, #172]	; (80017d8 <HAL_RCC_OscConfig+0x4f8>)
 800172a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800172c:	4a2a      	ldr	r2, [pc, #168]	; (80017d8 <HAL_RCC_OscConfig+0x4f8>)
 800172e:	f043 0301 	orr.w	r3, r3, #1
 8001732:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001734:	f7ff fa96 	bl	8000c64 <HAL_GetTick>
 8001738:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800173a:	e008      	b.n	800174e <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800173c:	f7ff fa92 	bl	8000c64 <HAL_GetTick>
 8001740:	4602      	mov	r2, r0
 8001742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	2b02      	cmp	r3, #2
 8001748:	d901      	bls.n	800174e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	e1ef      	b.n	8001b2e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800174e:	4b22      	ldr	r3, [pc, #136]	; (80017d8 <HAL_RCC_OscConfig+0x4f8>)
 8001750:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001752:	f003 0302 	and.w	r3, r3, #2
 8001756:	2b00      	cmp	r3, #0
 8001758:	d0f0      	beq.n	800173c <HAL_RCC_OscConfig+0x45c>
 800175a:	e018      	b.n	800178e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800175c:	4b1e      	ldr	r3, [pc, #120]	; (80017d8 <HAL_RCC_OscConfig+0x4f8>)
 800175e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001760:	4a1d      	ldr	r2, [pc, #116]	; (80017d8 <HAL_RCC_OscConfig+0x4f8>)
 8001762:	f023 0301 	bic.w	r3, r3, #1
 8001766:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001768:	f7ff fa7c 	bl	8000c64 <HAL_GetTick>
 800176c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800176e:	e008      	b.n	8001782 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001770:	f7ff fa78 	bl	8000c64 <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	2b02      	cmp	r3, #2
 800177c:	d901      	bls.n	8001782 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e1d5      	b.n	8001b2e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001782:	4b15      	ldr	r3, [pc, #84]	; (80017d8 <HAL_RCC_OscConfig+0x4f8>)
 8001784:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	2b00      	cmp	r3, #0
 800178c:	d1f0      	bne.n	8001770 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0320 	and.w	r3, r3, #32
 8001796:	2b00      	cmp	r3, #0
 8001798:	d039      	beq.n	800180e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	699b      	ldr	r3, [r3, #24]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d01c      	beq.n	80017dc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80017a2:	4b0d      	ldr	r3, [pc, #52]	; (80017d8 <HAL_RCC_OscConfig+0x4f8>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a0c      	ldr	r2, [pc, #48]	; (80017d8 <HAL_RCC_OscConfig+0x4f8>)
 80017a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017ac:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80017ae:	f7ff fa59 	bl	8000c64 <HAL_GetTick>
 80017b2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80017b4:	e008      	b.n	80017c8 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80017b6:	f7ff fa55 	bl	8000c64 <HAL_GetTick>
 80017ba:	4602      	mov	r2, r0
 80017bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d901      	bls.n	80017c8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80017c4:	2303      	movs	r3, #3
 80017c6:	e1b2      	b.n	8001b2e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80017c8:	4b03      	ldr	r3, [pc, #12]	; (80017d8 <HAL_RCC_OscConfig+0x4f8>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d0f0      	beq.n	80017b6 <HAL_RCC_OscConfig+0x4d6>
 80017d4:	e01b      	b.n	800180e <HAL_RCC_OscConfig+0x52e>
 80017d6:	bf00      	nop
 80017d8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80017dc:	4b9b      	ldr	r3, [pc, #620]	; (8001a4c <HAL_RCC_OscConfig+0x76c>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a9a      	ldr	r2, [pc, #616]	; (8001a4c <HAL_RCC_OscConfig+0x76c>)
 80017e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80017e6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80017e8:	f7ff fa3c 	bl	8000c64 <HAL_GetTick>
 80017ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80017ee:	e008      	b.n	8001802 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80017f0:	f7ff fa38 	bl	8000c64 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e195      	b.n	8001b2e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001802:	4b92      	ldr	r3, [pc, #584]	; (8001a4c <HAL_RCC_OscConfig+0x76c>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d1f0      	bne.n	80017f0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0304 	and.w	r3, r3, #4
 8001816:	2b00      	cmp	r3, #0
 8001818:	f000 8081 	beq.w	800191e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800181c:	4b8c      	ldr	r3, [pc, #560]	; (8001a50 <HAL_RCC_OscConfig+0x770>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a8b      	ldr	r2, [pc, #556]	; (8001a50 <HAL_RCC_OscConfig+0x770>)
 8001822:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001826:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001828:	f7ff fa1c 	bl	8000c64 <HAL_GetTick>
 800182c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800182e:	e008      	b.n	8001842 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001830:	f7ff fa18 	bl	8000c64 <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	2b64      	cmp	r3, #100	; 0x64
 800183c:	d901      	bls.n	8001842 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e175      	b.n	8001b2e <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001842:	4b83      	ldr	r3, [pc, #524]	; (8001a50 <HAL_RCC_OscConfig+0x770>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800184a:	2b00      	cmp	r3, #0
 800184c:	d0f0      	beq.n	8001830 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	2b01      	cmp	r3, #1
 8001854:	d106      	bne.n	8001864 <HAL_RCC_OscConfig+0x584>
 8001856:	4b7d      	ldr	r3, [pc, #500]	; (8001a4c <HAL_RCC_OscConfig+0x76c>)
 8001858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800185a:	4a7c      	ldr	r2, [pc, #496]	; (8001a4c <HAL_RCC_OscConfig+0x76c>)
 800185c:	f043 0301 	orr.w	r3, r3, #1
 8001860:	6713      	str	r3, [r2, #112]	; 0x70
 8001862:	e02d      	b.n	80018c0 <HAL_RCC_OscConfig+0x5e0>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d10c      	bne.n	8001886 <HAL_RCC_OscConfig+0x5a6>
 800186c:	4b77      	ldr	r3, [pc, #476]	; (8001a4c <HAL_RCC_OscConfig+0x76c>)
 800186e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001870:	4a76      	ldr	r2, [pc, #472]	; (8001a4c <HAL_RCC_OscConfig+0x76c>)
 8001872:	f023 0301 	bic.w	r3, r3, #1
 8001876:	6713      	str	r3, [r2, #112]	; 0x70
 8001878:	4b74      	ldr	r3, [pc, #464]	; (8001a4c <HAL_RCC_OscConfig+0x76c>)
 800187a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800187c:	4a73      	ldr	r2, [pc, #460]	; (8001a4c <HAL_RCC_OscConfig+0x76c>)
 800187e:	f023 0304 	bic.w	r3, r3, #4
 8001882:	6713      	str	r3, [r2, #112]	; 0x70
 8001884:	e01c      	b.n	80018c0 <HAL_RCC_OscConfig+0x5e0>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	2b05      	cmp	r3, #5
 800188c:	d10c      	bne.n	80018a8 <HAL_RCC_OscConfig+0x5c8>
 800188e:	4b6f      	ldr	r3, [pc, #444]	; (8001a4c <HAL_RCC_OscConfig+0x76c>)
 8001890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001892:	4a6e      	ldr	r2, [pc, #440]	; (8001a4c <HAL_RCC_OscConfig+0x76c>)
 8001894:	f043 0304 	orr.w	r3, r3, #4
 8001898:	6713      	str	r3, [r2, #112]	; 0x70
 800189a:	4b6c      	ldr	r3, [pc, #432]	; (8001a4c <HAL_RCC_OscConfig+0x76c>)
 800189c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800189e:	4a6b      	ldr	r2, [pc, #428]	; (8001a4c <HAL_RCC_OscConfig+0x76c>)
 80018a0:	f043 0301 	orr.w	r3, r3, #1
 80018a4:	6713      	str	r3, [r2, #112]	; 0x70
 80018a6:	e00b      	b.n	80018c0 <HAL_RCC_OscConfig+0x5e0>
 80018a8:	4b68      	ldr	r3, [pc, #416]	; (8001a4c <HAL_RCC_OscConfig+0x76c>)
 80018aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ac:	4a67      	ldr	r2, [pc, #412]	; (8001a4c <HAL_RCC_OscConfig+0x76c>)
 80018ae:	f023 0301 	bic.w	r3, r3, #1
 80018b2:	6713      	str	r3, [r2, #112]	; 0x70
 80018b4:	4b65      	ldr	r3, [pc, #404]	; (8001a4c <HAL_RCC_OscConfig+0x76c>)
 80018b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018b8:	4a64      	ldr	r2, [pc, #400]	; (8001a4c <HAL_RCC_OscConfig+0x76c>)
 80018ba:	f023 0304 	bic.w	r3, r3, #4
 80018be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d015      	beq.n	80018f4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018c8:	f7ff f9cc 	bl	8000c64 <HAL_GetTick>
 80018cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80018ce:	e00a      	b.n	80018e6 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018d0:	f7ff f9c8 	bl	8000c64 <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	f241 3288 	movw	r2, #5000	; 0x1388
 80018de:	4293      	cmp	r3, r2
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e123      	b.n	8001b2e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80018e6:	4b59      	ldr	r3, [pc, #356]	; (8001a4c <HAL_RCC_OscConfig+0x76c>)
 80018e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ea:	f003 0302 	and.w	r3, r3, #2
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d0ee      	beq.n	80018d0 <HAL_RCC_OscConfig+0x5f0>
 80018f2:	e014      	b.n	800191e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018f4:	f7ff f9b6 	bl	8000c64 <HAL_GetTick>
 80018f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80018fa:	e00a      	b.n	8001912 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018fc:	f7ff f9b2 	bl	8000c64 <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	f241 3288 	movw	r2, #5000	; 0x1388
 800190a:	4293      	cmp	r3, r2
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e10d      	b.n	8001b2e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001912:	4b4e      	ldr	r3, [pc, #312]	; (8001a4c <HAL_RCC_OscConfig+0x76c>)
 8001914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001916:	f003 0302 	and.w	r3, r3, #2
 800191a:	2b00      	cmp	r3, #0
 800191c:	d1ee      	bne.n	80018fc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001922:	2b00      	cmp	r3, #0
 8001924:	f000 8102 	beq.w	8001b2c <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001928:	4b48      	ldr	r3, [pc, #288]	; (8001a4c <HAL_RCC_OscConfig+0x76c>)
 800192a:	691b      	ldr	r3, [r3, #16]
 800192c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001930:	2b18      	cmp	r3, #24
 8001932:	f000 80bd 	beq.w	8001ab0 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193a:	2b02      	cmp	r3, #2
 800193c:	f040 809e 	bne.w	8001a7c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001940:	4b42      	ldr	r3, [pc, #264]	; (8001a4c <HAL_RCC_OscConfig+0x76c>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a41      	ldr	r2, [pc, #260]	; (8001a4c <HAL_RCC_OscConfig+0x76c>)
 8001946:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800194a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800194c:	f7ff f98a 	bl	8000c64 <HAL_GetTick>
 8001950:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001952:	e008      	b.n	8001966 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001954:	f7ff f986 	bl	8000c64 <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	2b02      	cmp	r3, #2
 8001960:	d901      	bls.n	8001966 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e0e3      	b.n	8001b2e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001966:	4b39      	ldr	r3, [pc, #228]	; (8001a4c <HAL_RCC_OscConfig+0x76c>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d1f0      	bne.n	8001954 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001972:	4b36      	ldr	r3, [pc, #216]	; (8001a4c <HAL_RCC_OscConfig+0x76c>)
 8001974:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001976:	4b37      	ldr	r3, [pc, #220]	; (8001a54 <HAL_RCC_OscConfig+0x774>)
 8001978:	4013      	ands	r3, r2
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001982:	0112      	lsls	r2, r2, #4
 8001984:	430a      	orrs	r2, r1
 8001986:	4931      	ldr	r1, [pc, #196]	; (8001a4c <HAL_RCC_OscConfig+0x76c>)
 8001988:	4313      	orrs	r3, r2
 800198a:	628b      	str	r3, [r1, #40]	; 0x28
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001990:	3b01      	subs	r3, #1
 8001992:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800199a:	3b01      	subs	r3, #1
 800199c:	025b      	lsls	r3, r3, #9
 800199e:	b29b      	uxth	r3, r3
 80019a0:	431a      	orrs	r2, r3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019a6:	3b01      	subs	r3, #1
 80019a8:	041b      	lsls	r3, r3, #16
 80019aa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80019ae:	431a      	orrs	r2, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019b4:	3b01      	subs	r3, #1
 80019b6:	061b      	lsls	r3, r3, #24
 80019b8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80019bc:	4923      	ldr	r1, [pc, #140]	; (8001a4c <HAL_RCC_OscConfig+0x76c>)
 80019be:	4313      	orrs	r3, r2
 80019c0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80019c2:	4b22      	ldr	r3, [pc, #136]	; (8001a4c <HAL_RCC_OscConfig+0x76c>)
 80019c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c6:	4a21      	ldr	r2, [pc, #132]	; (8001a4c <HAL_RCC_OscConfig+0x76c>)
 80019c8:	f023 0301 	bic.w	r3, r3, #1
 80019cc:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80019ce:	4b1f      	ldr	r3, [pc, #124]	; (8001a4c <HAL_RCC_OscConfig+0x76c>)
 80019d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019d2:	4b21      	ldr	r3, [pc, #132]	; (8001a58 <HAL_RCC_OscConfig+0x778>)
 80019d4:	4013      	ands	r3, r2
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80019da:	00d2      	lsls	r2, r2, #3
 80019dc:	491b      	ldr	r1, [pc, #108]	; (8001a4c <HAL_RCC_OscConfig+0x76c>)
 80019de:	4313      	orrs	r3, r2
 80019e0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80019e2:	4b1a      	ldr	r3, [pc, #104]	; (8001a4c <HAL_RCC_OscConfig+0x76c>)
 80019e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e6:	f023 020c 	bic.w	r2, r3, #12
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ee:	4917      	ldr	r1, [pc, #92]	; (8001a4c <HAL_RCC_OscConfig+0x76c>)
 80019f0:	4313      	orrs	r3, r2
 80019f2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80019f4:	4b15      	ldr	r3, [pc, #84]	; (8001a4c <HAL_RCC_OscConfig+0x76c>)
 80019f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f8:	f023 0202 	bic.w	r2, r3, #2
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a00:	4912      	ldr	r1, [pc, #72]	; (8001a4c <HAL_RCC_OscConfig+0x76c>)
 8001a02:	4313      	orrs	r3, r2
 8001a04:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001a06:	4b11      	ldr	r3, [pc, #68]	; (8001a4c <HAL_RCC_OscConfig+0x76c>)
 8001a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a0a:	4a10      	ldr	r2, [pc, #64]	; (8001a4c <HAL_RCC_OscConfig+0x76c>)
 8001a0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a10:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001a12:	4b0e      	ldr	r3, [pc, #56]	; (8001a4c <HAL_RCC_OscConfig+0x76c>)
 8001a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a16:	4a0d      	ldr	r2, [pc, #52]	; (8001a4c <HAL_RCC_OscConfig+0x76c>)
 8001a18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a1c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001a1e:	4b0b      	ldr	r3, [pc, #44]	; (8001a4c <HAL_RCC_OscConfig+0x76c>)
 8001a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a22:	4a0a      	ldr	r2, [pc, #40]	; (8001a4c <HAL_RCC_OscConfig+0x76c>)
 8001a24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a28:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001a2a:	4b08      	ldr	r3, [pc, #32]	; (8001a4c <HAL_RCC_OscConfig+0x76c>)
 8001a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a2e:	4a07      	ldr	r2, [pc, #28]	; (8001a4c <HAL_RCC_OscConfig+0x76c>)
 8001a30:	f043 0301 	orr.w	r3, r3, #1
 8001a34:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a36:	4b05      	ldr	r3, [pc, #20]	; (8001a4c <HAL_RCC_OscConfig+0x76c>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a04      	ldr	r2, [pc, #16]	; (8001a4c <HAL_RCC_OscConfig+0x76c>)
 8001a3c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a42:	f7ff f90f 	bl	8000c64 <HAL_GetTick>
 8001a46:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001a48:	e011      	b.n	8001a6e <HAL_RCC_OscConfig+0x78e>
 8001a4a:	bf00      	nop
 8001a4c:	58024400 	.word	0x58024400
 8001a50:	58024800 	.word	0x58024800
 8001a54:	fffffc0c 	.word	0xfffffc0c
 8001a58:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a5c:	f7ff f902 	bl	8000c64 <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e05f      	b.n	8001b2e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001a6e:	4b32      	ldr	r3, [pc, #200]	; (8001b38 <HAL_RCC_OscConfig+0x858>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d0f0      	beq.n	8001a5c <HAL_RCC_OscConfig+0x77c>
 8001a7a:	e057      	b.n	8001b2c <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a7c:	4b2e      	ldr	r3, [pc, #184]	; (8001b38 <HAL_RCC_OscConfig+0x858>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a2d      	ldr	r2, [pc, #180]	; (8001b38 <HAL_RCC_OscConfig+0x858>)
 8001a82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a88:	f7ff f8ec 	bl	8000c64 <HAL_GetTick>
 8001a8c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001a8e:	e008      	b.n	8001aa2 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a90:	f7ff f8e8 	bl	8000c64 <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e045      	b.n	8001b2e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001aa2:	4b25      	ldr	r3, [pc, #148]	; (8001b38 <HAL_RCC_OscConfig+0x858>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d1f0      	bne.n	8001a90 <HAL_RCC_OscConfig+0x7b0>
 8001aae:	e03d      	b.n	8001b2c <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001ab0:	4b21      	ldr	r3, [pc, #132]	; (8001b38 <HAL_RCC_OscConfig+0x858>)
 8001ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001ab6:	4b20      	ldr	r3, [pc, #128]	; (8001b38 <HAL_RCC_OscConfig+0x858>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aba:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d031      	beq.n	8001b28 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	f003 0203 	and.w	r2, r3, #3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d12a      	bne.n	8001b28 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	091b      	lsrs	r3, r3, #4
 8001ad6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d122      	bne.n	8001b28 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aec:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d11a      	bne.n	8001b28 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	0a5b      	lsrs	r3, r3, #9
 8001af6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001afe:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d111      	bne.n	8001b28 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	0c1b      	lsrs	r3, r3, #16
 8001b08:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b10:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d108      	bne.n	8001b28 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	0e1b      	lsrs	r3, r3, #24
 8001b1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b22:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d001      	beq.n	8001b2c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e000      	b.n	8001b2e <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8001b2c:	2300      	movs	r3, #0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3730      	adds	r7, #48	; 0x30
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	58024400 	.word	0x58024400

08001b3c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b086      	sub	sp, #24
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d101      	bne.n	8001b50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e19c      	b.n	8001e8a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b50:	4b8a      	ldr	r3, [pc, #552]	; (8001d7c <HAL_RCC_ClockConfig+0x240>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 030f 	and.w	r3, r3, #15
 8001b58:	683a      	ldr	r2, [r7, #0]
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d910      	bls.n	8001b80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b5e:	4b87      	ldr	r3, [pc, #540]	; (8001d7c <HAL_RCC_ClockConfig+0x240>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f023 020f 	bic.w	r2, r3, #15
 8001b66:	4985      	ldr	r1, [pc, #532]	; (8001d7c <HAL_RCC_ClockConfig+0x240>)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b6e:	4b83      	ldr	r3, [pc, #524]	; (8001d7c <HAL_RCC_ClockConfig+0x240>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 030f 	and.w	r3, r3, #15
 8001b76:	683a      	ldr	r2, [r7, #0]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d001      	beq.n	8001b80 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e184      	b.n	8001e8a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0304 	and.w	r3, r3, #4
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d010      	beq.n	8001bae <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	691a      	ldr	r2, [r3, #16]
 8001b90:	4b7b      	ldr	r3, [pc, #492]	; (8001d80 <HAL_RCC_ClockConfig+0x244>)
 8001b92:	699b      	ldr	r3, [r3, #24]
 8001b94:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d908      	bls.n	8001bae <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001b9c:	4b78      	ldr	r3, [pc, #480]	; (8001d80 <HAL_RCC_ClockConfig+0x244>)
 8001b9e:	699b      	ldr	r3, [r3, #24]
 8001ba0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	691b      	ldr	r3, [r3, #16]
 8001ba8:	4975      	ldr	r1, [pc, #468]	; (8001d80 <HAL_RCC_ClockConfig+0x244>)
 8001baa:	4313      	orrs	r3, r2
 8001bac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0308 	and.w	r3, r3, #8
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d010      	beq.n	8001bdc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	695a      	ldr	r2, [r3, #20]
 8001bbe:	4b70      	ldr	r3, [pc, #448]	; (8001d80 <HAL_RCC_ClockConfig+0x244>)
 8001bc0:	69db      	ldr	r3, [r3, #28]
 8001bc2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d908      	bls.n	8001bdc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001bca:	4b6d      	ldr	r3, [pc, #436]	; (8001d80 <HAL_RCC_ClockConfig+0x244>)
 8001bcc:	69db      	ldr	r3, [r3, #28]
 8001bce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	695b      	ldr	r3, [r3, #20]
 8001bd6:	496a      	ldr	r1, [pc, #424]	; (8001d80 <HAL_RCC_ClockConfig+0x244>)
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0310 	and.w	r3, r3, #16
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d010      	beq.n	8001c0a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	699a      	ldr	r2, [r3, #24]
 8001bec:	4b64      	ldr	r3, [pc, #400]	; (8001d80 <HAL_RCC_ClockConfig+0x244>)
 8001bee:	69db      	ldr	r3, [r3, #28]
 8001bf0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d908      	bls.n	8001c0a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001bf8:	4b61      	ldr	r3, [pc, #388]	; (8001d80 <HAL_RCC_ClockConfig+0x244>)
 8001bfa:	69db      	ldr	r3, [r3, #28]
 8001bfc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	699b      	ldr	r3, [r3, #24]
 8001c04:	495e      	ldr	r1, [pc, #376]	; (8001d80 <HAL_RCC_ClockConfig+0x244>)
 8001c06:	4313      	orrs	r3, r2
 8001c08:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0320 	and.w	r3, r3, #32
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d010      	beq.n	8001c38 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	69da      	ldr	r2, [r3, #28]
 8001c1a:	4b59      	ldr	r3, [pc, #356]	; (8001d80 <HAL_RCC_ClockConfig+0x244>)
 8001c1c:	6a1b      	ldr	r3, [r3, #32]
 8001c1e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d908      	bls.n	8001c38 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001c26:	4b56      	ldr	r3, [pc, #344]	; (8001d80 <HAL_RCC_ClockConfig+0x244>)
 8001c28:	6a1b      	ldr	r3, [r3, #32]
 8001c2a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	69db      	ldr	r3, [r3, #28]
 8001c32:	4953      	ldr	r1, [pc, #332]	; (8001d80 <HAL_RCC_ClockConfig+0x244>)
 8001c34:	4313      	orrs	r3, r2
 8001c36:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0302 	and.w	r3, r3, #2
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d010      	beq.n	8001c66 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	68da      	ldr	r2, [r3, #12]
 8001c48:	4b4d      	ldr	r3, [pc, #308]	; (8001d80 <HAL_RCC_ClockConfig+0x244>)
 8001c4a:	699b      	ldr	r3, [r3, #24]
 8001c4c:	f003 030f 	and.w	r3, r3, #15
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d908      	bls.n	8001c66 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c54:	4b4a      	ldr	r3, [pc, #296]	; (8001d80 <HAL_RCC_ClockConfig+0x244>)
 8001c56:	699b      	ldr	r3, [r3, #24]
 8001c58:	f023 020f 	bic.w	r2, r3, #15
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	4947      	ldr	r1, [pc, #284]	; (8001d80 <HAL_RCC_ClockConfig+0x244>)
 8001c62:	4313      	orrs	r3, r2
 8001c64:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0301 	and.w	r3, r3, #1
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d055      	beq.n	8001d1e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001c72:	4b43      	ldr	r3, [pc, #268]	; (8001d80 <HAL_RCC_ClockConfig+0x244>)
 8001c74:	699b      	ldr	r3, [r3, #24]
 8001c76:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	4940      	ldr	r1, [pc, #256]	; (8001d80 <HAL_RCC_ClockConfig+0x244>)
 8001c80:	4313      	orrs	r3, r2
 8001c82:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d107      	bne.n	8001c9c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c8c:	4b3c      	ldr	r3, [pc, #240]	; (8001d80 <HAL_RCC_ClockConfig+0x244>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d121      	bne.n	8001cdc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e0f6      	b.n	8001e8a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	2b03      	cmp	r3, #3
 8001ca2:	d107      	bne.n	8001cb4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001ca4:	4b36      	ldr	r3, [pc, #216]	; (8001d80 <HAL_RCC_ClockConfig+0x244>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d115      	bne.n	8001cdc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e0ea      	b.n	8001e8a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d107      	bne.n	8001ccc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001cbc:	4b30      	ldr	r3, [pc, #192]	; (8001d80 <HAL_RCC_ClockConfig+0x244>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d109      	bne.n	8001cdc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e0de      	b.n	8001e8a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ccc:	4b2c      	ldr	r3, [pc, #176]	; (8001d80 <HAL_RCC_ClockConfig+0x244>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0304 	and.w	r3, r3, #4
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d101      	bne.n	8001cdc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e0d6      	b.n	8001e8a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001cdc:	4b28      	ldr	r3, [pc, #160]	; (8001d80 <HAL_RCC_ClockConfig+0x244>)
 8001cde:	691b      	ldr	r3, [r3, #16]
 8001ce0:	f023 0207 	bic.w	r2, r3, #7
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	4925      	ldr	r1, [pc, #148]	; (8001d80 <HAL_RCC_ClockConfig+0x244>)
 8001cea:	4313      	orrs	r3, r2
 8001cec:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cee:	f7fe ffb9 	bl	8000c64 <HAL_GetTick>
 8001cf2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cf4:	e00a      	b.n	8001d0c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cf6:	f7fe ffb5 	bl	8000c64 <HAL_GetTick>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d901      	bls.n	8001d0c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e0be      	b.n	8001e8a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d0c:	4b1c      	ldr	r3, [pc, #112]	; (8001d80 <HAL_RCC_ClockConfig+0x244>)
 8001d0e:	691b      	ldr	r3, [r3, #16]
 8001d10:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	00db      	lsls	r3, r3, #3
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d1eb      	bne.n	8001cf6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0302 	and.w	r3, r3, #2
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d010      	beq.n	8001d4c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	68da      	ldr	r2, [r3, #12]
 8001d2e:	4b14      	ldr	r3, [pc, #80]	; (8001d80 <HAL_RCC_ClockConfig+0x244>)
 8001d30:	699b      	ldr	r3, [r3, #24]
 8001d32:	f003 030f 	and.w	r3, r3, #15
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d208      	bcs.n	8001d4c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d3a:	4b11      	ldr	r3, [pc, #68]	; (8001d80 <HAL_RCC_ClockConfig+0x244>)
 8001d3c:	699b      	ldr	r3, [r3, #24]
 8001d3e:	f023 020f 	bic.w	r2, r3, #15
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	490e      	ldr	r1, [pc, #56]	; (8001d80 <HAL_RCC_ClockConfig+0x244>)
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d4c:	4b0b      	ldr	r3, [pc, #44]	; (8001d7c <HAL_RCC_ClockConfig+0x240>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 030f 	and.w	r3, r3, #15
 8001d54:	683a      	ldr	r2, [r7, #0]
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d214      	bcs.n	8001d84 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d5a:	4b08      	ldr	r3, [pc, #32]	; (8001d7c <HAL_RCC_ClockConfig+0x240>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f023 020f 	bic.w	r2, r3, #15
 8001d62:	4906      	ldr	r1, [pc, #24]	; (8001d7c <HAL_RCC_ClockConfig+0x240>)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d6a:	4b04      	ldr	r3, [pc, #16]	; (8001d7c <HAL_RCC_ClockConfig+0x240>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 030f 	and.w	r3, r3, #15
 8001d72:	683a      	ldr	r2, [r7, #0]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d005      	beq.n	8001d84 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e086      	b.n	8001e8a <HAL_RCC_ClockConfig+0x34e>
 8001d7c:	52002000 	.word	0x52002000
 8001d80:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0304 	and.w	r3, r3, #4
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d010      	beq.n	8001db2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	691a      	ldr	r2, [r3, #16]
 8001d94:	4b3f      	ldr	r3, [pc, #252]	; (8001e94 <HAL_RCC_ClockConfig+0x358>)
 8001d96:	699b      	ldr	r3, [r3, #24]
 8001d98:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d208      	bcs.n	8001db2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001da0:	4b3c      	ldr	r3, [pc, #240]	; (8001e94 <HAL_RCC_ClockConfig+0x358>)
 8001da2:	699b      	ldr	r3, [r3, #24]
 8001da4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	691b      	ldr	r3, [r3, #16]
 8001dac:	4939      	ldr	r1, [pc, #228]	; (8001e94 <HAL_RCC_ClockConfig+0x358>)
 8001dae:	4313      	orrs	r3, r2
 8001db0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0308 	and.w	r3, r3, #8
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d010      	beq.n	8001de0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	695a      	ldr	r2, [r3, #20]
 8001dc2:	4b34      	ldr	r3, [pc, #208]	; (8001e94 <HAL_RCC_ClockConfig+0x358>)
 8001dc4:	69db      	ldr	r3, [r3, #28]
 8001dc6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d208      	bcs.n	8001de0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001dce:	4b31      	ldr	r3, [pc, #196]	; (8001e94 <HAL_RCC_ClockConfig+0x358>)
 8001dd0:	69db      	ldr	r3, [r3, #28]
 8001dd2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	695b      	ldr	r3, [r3, #20]
 8001dda:	492e      	ldr	r1, [pc, #184]	; (8001e94 <HAL_RCC_ClockConfig+0x358>)
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0310 	and.w	r3, r3, #16
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d010      	beq.n	8001e0e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	699a      	ldr	r2, [r3, #24]
 8001df0:	4b28      	ldr	r3, [pc, #160]	; (8001e94 <HAL_RCC_ClockConfig+0x358>)
 8001df2:	69db      	ldr	r3, [r3, #28]
 8001df4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d208      	bcs.n	8001e0e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001dfc:	4b25      	ldr	r3, [pc, #148]	; (8001e94 <HAL_RCC_ClockConfig+0x358>)
 8001dfe:	69db      	ldr	r3, [r3, #28]
 8001e00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	699b      	ldr	r3, [r3, #24]
 8001e08:	4922      	ldr	r1, [pc, #136]	; (8001e94 <HAL_RCC_ClockConfig+0x358>)
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0320 	and.w	r3, r3, #32
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d010      	beq.n	8001e3c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	69da      	ldr	r2, [r3, #28]
 8001e1e:	4b1d      	ldr	r3, [pc, #116]	; (8001e94 <HAL_RCC_ClockConfig+0x358>)
 8001e20:	6a1b      	ldr	r3, [r3, #32]
 8001e22:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d208      	bcs.n	8001e3c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001e2a:	4b1a      	ldr	r3, [pc, #104]	; (8001e94 <HAL_RCC_ClockConfig+0x358>)
 8001e2c:	6a1b      	ldr	r3, [r3, #32]
 8001e2e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	69db      	ldr	r3, [r3, #28]
 8001e36:	4917      	ldr	r1, [pc, #92]	; (8001e94 <HAL_RCC_ClockConfig+0x358>)
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001e3c:	f000 f834 	bl	8001ea8 <HAL_RCC_GetSysClockFreq>
 8001e40:	4602      	mov	r2, r0
 8001e42:	4b14      	ldr	r3, [pc, #80]	; (8001e94 <HAL_RCC_ClockConfig+0x358>)
 8001e44:	699b      	ldr	r3, [r3, #24]
 8001e46:	0a1b      	lsrs	r3, r3, #8
 8001e48:	f003 030f 	and.w	r3, r3, #15
 8001e4c:	4912      	ldr	r1, [pc, #72]	; (8001e98 <HAL_RCC_ClockConfig+0x35c>)
 8001e4e:	5ccb      	ldrb	r3, [r1, r3]
 8001e50:	f003 031f 	and.w	r3, r3, #31
 8001e54:	fa22 f303 	lsr.w	r3, r2, r3
 8001e58:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001e5a:	4b0e      	ldr	r3, [pc, #56]	; (8001e94 <HAL_RCC_ClockConfig+0x358>)
 8001e5c:	699b      	ldr	r3, [r3, #24]
 8001e5e:	f003 030f 	and.w	r3, r3, #15
 8001e62:	4a0d      	ldr	r2, [pc, #52]	; (8001e98 <HAL_RCC_ClockConfig+0x35c>)
 8001e64:	5cd3      	ldrb	r3, [r2, r3]
 8001e66:	f003 031f 	and.w	r3, r3, #31
 8001e6a:	693a      	ldr	r2, [r7, #16]
 8001e6c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e70:	4a0a      	ldr	r2, [pc, #40]	; (8001e9c <HAL_RCC_ClockConfig+0x360>)
 8001e72:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001e74:	4a0a      	ldr	r2, [pc, #40]	; (8001ea0 <HAL_RCC_ClockConfig+0x364>)
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8001e7a:	4b0a      	ldr	r3, [pc, #40]	; (8001ea4 <HAL_RCC_ClockConfig+0x368>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7fe fea6 	bl	8000bd0 <HAL_InitTick>
 8001e84:	4603      	mov	r3, r0
 8001e86:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3718      	adds	r7, #24
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	58024400 	.word	0x58024400
 8001e98:	08004ba8 	.word	0x08004ba8
 8001e9c:	24000004 	.word	0x24000004
 8001ea0:	24000000 	.word	0x24000000
 8001ea4:	24000008 	.word	0x24000008

08001ea8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b089      	sub	sp, #36	; 0x24
 8001eac:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001eae:	4bb3      	ldr	r3, [pc, #716]	; (800217c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001eb0:	691b      	ldr	r3, [r3, #16]
 8001eb2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001eb6:	2b18      	cmp	r3, #24
 8001eb8:	f200 8155 	bhi.w	8002166 <HAL_RCC_GetSysClockFreq+0x2be>
 8001ebc:	a201      	add	r2, pc, #4	; (adr r2, 8001ec4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ec2:	bf00      	nop
 8001ec4:	08001f29 	.word	0x08001f29
 8001ec8:	08002167 	.word	0x08002167
 8001ecc:	08002167 	.word	0x08002167
 8001ed0:	08002167 	.word	0x08002167
 8001ed4:	08002167 	.word	0x08002167
 8001ed8:	08002167 	.word	0x08002167
 8001edc:	08002167 	.word	0x08002167
 8001ee0:	08002167 	.word	0x08002167
 8001ee4:	08001f4f 	.word	0x08001f4f
 8001ee8:	08002167 	.word	0x08002167
 8001eec:	08002167 	.word	0x08002167
 8001ef0:	08002167 	.word	0x08002167
 8001ef4:	08002167 	.word	0x08002167
 8001ef8:	08002167 	.word	0x08002167
 8001efc:	08002167 	.word	0x08002167
 8001f00:	08002167 	.word	0x08002167
 8001f04:	08001f55 	.word	0x08001f55
 8001f08:	08002167 	.word	0x08002167
 8001f0c:	08002167 	.word	0x08002167
 8001f10:	08002167 	.word	0x08002167
 8001f14:	08002167 	.word	0x08002167
 8001f18:	08002167 	.word	0x08002167
 8001f1c:	08002167 	.word	0x08002167
 8001f20:	08002167 	.word	0x08002167
 8001f24:	08001f5b 	.word	0x08001f5b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001f28:	4b94      	ldr	r3, [pc, #592]	; (800217c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0320 	and.w	r3, r3, #32
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d009      	beq.n	8001f48 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001f34:	4b91      	ldr	r3, [pc, #580]	; (800217c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	08db      	lsrs	r3, r3, #3
 8001f3a:	f003 0303 	and.w	r3, r3, #3
 8001f3e:	4a90      	ldr	r2, [pc, #576]	; (8002180 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001f40:	fa22 f303 	lsr.w	r3, r2, r3
 8001f44:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8001f46:	e111      	b.n	800216c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001f48:	4b8d      	ldr	r3, [pc, #564]	; (8002180 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001f4a:	61bb      	str	r3, [r7, #24]
    break;
 8001f4c:	e10e      	b.n	800216c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8001f4e:	4b8d      	ldr	r3, [pc, #564]	; (8002184 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001f50:	61bb      	str	r3, [r7, #24]
    break;
 8001f52:	e10b      	b.n	800216c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8001f54:	4b8c      	ldr	r3, [pc, #560]	; (8002188 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001f56:	61bb      	str	r3, [r7, #24]
    break;
 8001f58:	e108      	b.n	800216c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001f5a:	4b88      	ldr	r3, [pc, #544]	; (800217c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f5e:	f003 0303 	and.w	r3, r3, #3
 8001f62:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001f64:	4b85      	ldr	r3, [pc, #532]	; (800217c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f68:	091b      	lsrs	r3, r3, #4
 8001f6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f6e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001f70:	4b82      	ldr	r3, [pc, #520]	; (800217c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f74:	f003 0301 	and.w	r3, r3, #1
 8001f78:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001f7a:	4b80      	ldr	r3, [pc, #512]	; (800217c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f7e:	08db      	lsrs	r3, r3, #3
 8001f80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001f84:	68fa      	ldr	r2, [r7, #12]
 8001f86:	fb02 f303 	mul.w	r3, r2, r3
 8001f8a:	ee07 3a90 	vmov	s15, r3
 8001f8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f92:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	f000 80e1 	beq.w	8002160 <HAL_RCC_GetSysClockFreq+0x2b8>
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	f000 8083 	beq.w	80020ac <HAL_RCC_GetSysClockFreq+0x204>
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	f200 80a1 	bhi.w	80020f0 <HAL_RCC_GetSysClockFreq+0x248>
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d003      	beq.n	8001fbc <HAL_RCC_GetSysClockFreq+0x114>
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d056      	beq.n	8002068 <HAL_RCC_GetSysClockFreq+0x1c0>
 8001fba:	e099      	b.n	80020f0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001fbc:	4b6f      	ldr	r3, [pc, #444]	; (800217c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0320 	and.w	r3, r3, #32
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d02d      	beq.n	8002024 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001fc8:	4b6c      	ldr	r3, [pc, #432]	; (800217c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	08db      	lsrs	r3, r3, #3
 8001fce:	f003 0303 	and.w	r3, r3, #3
 8001fd2:	4a6b      	ldr	r2, [pc, #428]	; (8002180 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001fd4:	fa22 f303 	lsr.w	r3, r2, r3
 8001fd8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	ee07 3a90 	vmov	s15, r3
 8001fe0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	ee07 3a90 	vmov	s15, r3
 8001fea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ff2:	4b62      	ldr	r3, [pc, #392]	; (800217c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ffa:	ee07 3a90 	vmov	s15, r3
 8001ffe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002002:	ed97 6a02 	vldr	s12, [r7, #8]
 8002006:	eddf 5a61 	vldr	s11, [pc, #388]	; 800218c <HAL_RCC_GetSysClockFreq+0x2e4>
 800200a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800200e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002012:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002016:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800201a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800201e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002022:	e087      	b.n	8002134 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	ee07 3a90 	vmov	s15, r3
 800202a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800202e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002190 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002032:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002036:	4b51      	ldr	r3, [pc, #324]	; (800217c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800203e:	ee07 3a90 	vmov	s15, r3
 8002042:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002046:	ed97 6a02 	vldr	s12, [r7, #8]
 800204a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800218c <HAL_RCC_GetSysClockFreq+0x2e4>
 800204e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002052:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002056:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800205a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800205e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002062:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002066:	e065      	b.n	8002134 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	ee07 3a90 	vmov	s15, r3
 800206e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002072:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002194 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002076:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800207a:	4b40      	ldr	r3, [pc, #256]	; (800217c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800207c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002082:	ee07 3a90 	vmov	s15, r3
 8002086:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800208a:	ed97 6a02 	vldr	s12, [r7, #8]
 800208e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800218c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002092:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002096:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800209a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800209e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80020a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80020aa:	e043      	b.n	8002134 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	ee07 3a90 	vmov	s15, r3
 80020b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020b6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002198 <HAL_RCC_GetSysClockFreq+0x2f0>
 80020ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80020be:	4b2f      	ldr	r3, [pc, #188]	; (800217c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020c6:	ee07 3a90 	vmov	s15, r3
 80020ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80020ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80020d2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800218c <HAL_RCC_GetSysClockFreq+0x2e4>
 80020d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80020da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80020de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80020e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80020e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80020ee:	e021      	b.n	8002134 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	ee07 3a90 	vmov	s15, r3
 80020f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020fa:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002194 <HAL_RCC_GetSysClockFreq+0x2ec>
 80020fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002102:	4b1e      	ldr	r3, [pc, #120]	; (800217c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002106:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800210a:	ee07 3a90 	vmov	s15, r3
 800210e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002112:	ed97 6a02 	vldr	s12, [r7, #8]
 8002116:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800218c <HAL_RCC_GetSysClockFreq+0x2e4>
 800211a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800211e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002122:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002126:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800212a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800212e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002132:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002134:	4b11      	ldr	r3, [pc, #68]	; (800217c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002138:	0a5b      	lsrs	r3, r3, #9
 800213a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800213e:	3301      	adds	r3, #1
 8002140:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	ee07 3a90 	vmov	s15, r3
 8002148:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800214c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002150:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002154:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002158:	ee17 3a90 	vmov	r3, s15
 800215c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800215e:	e005      	b.n	800216c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002160:	2300      	movs	r3, #0
 8002162:	61bb      	str	r3, [r7, #24]
    break;
 8002164:	e002      	b.n	800216c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8002166:	4b07      	ldr	r3, [pc, #28]	; (8002184 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002168:	61bb      	str	r3, [r7, #24]
    break;
 800216a:	bf00      	nop
  }

  return sysclockfreq;
 800216c:	69bb      	ldr	r3, [r7, #24]
}
 800216e:	4618      	mov	r0, r3
 8002170:	3724      	adds	r7, #36	; 0x24
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	58024400 	.word	0x58024400
 8002180:	03d09000 	.word	0x03d09000
 8002184:	003d0900 	.word	0x003d0900
 8002188:	017d7840 	.word	0x017d7840
 800218c:	46000000 	.word	0x46000000
 8002190:	4c742400 	.word	0x4c742400
 8002194:	4a742400 	.word	0x4a742400
 8002198:	4bbebc20 	.word	0x4bbebc20

0800219c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80021a2:	f7ff fe81 	bl	8001ea8 <HAL_RCC_GetSysClockFreq>
 80021a6:	4602      	mov	r2, r0
 80021a8:	4b10      	ldr	r3, [pc, #64]	; (80021ec <HAL_RCC_GetHCLKFreq+0x50>)
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	0a1b      	lsrs	r3, r3, #8
 80021ae:	f003 030f 	and.w	r3, r3, #15
 80021b2:	490f      	ldr	r1, [pc, #60]	; (80021f0 <HAL_RCC_GetHCLKFreq+0x54>)
 80021b4:	5ccb      	ldrb	r3, [r1, r3]
 80021b6:	f003 031f 	and.w	r3, r3, #31
 80021ba:	fa22 f303 	lsr.w	r3, r2, r3
 80021be:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80021c0:	4b0a      	ldr	r3, [pc, #40]	; (80021ec <HAL_RCC_GetHCLKFreq+0x50>)
 80021c2:	699b      	ldr	r3, [r3, #24]
 80021c4:	f003 030f 	and.w	r3, r3, #15
 80021c8:	4a09      	ldr	r2, [pc, #36]	; (80021f0 <HAL_RCC_GetHCLKFreq+0x54>)
 80021ca:	5cd3      	ldrb	r3, [r2, r3]
 80021cc:	f003 031f 	and.w	r3, r3, #31
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	fa22 f303 	lsr.w	r3, r2, r3
 80021d6:	4a07      	ldr	r2, [pc, #28]	; (80021f4 <HAL_RCC_GetHCLKFreq+0x58>)
 80021d8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80021da:	4a07      	ldr	r2, [pc, #28]	; (80021f8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80021e0:	4b04      	ldr	r3, [pc, #16]	; (80021f4 <HAL_RCC_GetHCLKFreq+0x58>)
 80021e2:	681b      	ldr	r3, [r3, #0]
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3708      	adds	r7, #8
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	58024400 	.word	0x58024400
 80021f0:	08004ba8 	.word	0x08004ba8
 80021f4:	24000004 	.word	0x24000004
 80021f8:	24000000 	.word	0x24000000

080021fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002200:	f7ff ffcc 	bl	800219c <HAL_RCC_GetHCLKFreq>
 8002204:	4602      	mov	r2, r0
 8002206:	4b06      	ldr	r3, [pc, #24]	; (8002220 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002208:	69db      	ldr	r3, [r3, #28]
 800220a:	091b      	lsrs	r3, r3, #4
 800220c:	f003 0307 	and.w	r3, r3, #7
 8002210:	4904      	ldr	r1, [pc, #16]	; (8002224 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002212:	5ccb      	ldrb	r3, [r1, r3]
 8002214:	f003 031f 	and.w	r3, r3, #31
 8002218:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800221c:	4618      	mov	r0, r3
 800221e:	bd80      	pop	{r7, pc}
 8002220:	58024400 	.word	0x58024400
 8002224:	08004ba8 	.word	0x08004ba8

08002228 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800222c:	f7ff ffb6 	bl	800219c <HAL_RCC_GetHCLKFreq>
 8002230:	4602      	mov	r2, r0
 8002232:	4b06      	ldr	r3, [pc, #24]	; (800224c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002234:	69db      	ldr	r3, [r3, #28]
 8002236:	0a1b      	lsrs	r3, r3, #8
 8002238:	f003 0307 	and.w	r3, r3, #7
 800223c:	4904      	ldr	r1, [pc, #16]	; (8002250 <HAL_RCC_GetPCLK2Freq+0x28>)
 800223e:	5ccb      	ldrb	r3, [r1, r3]
 8002240:	f003 031f 	and.w	r3, r3, #31
 8002244:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002248:	4618      	mov	r0, r3
 800224a:	bd80      	pop	{r7, pc}
 800224c:	58024400 	.word	0x58024400
 8002250:	08004ba8 	.word	0x08004ba8

08002254 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b086      	sub	sp, #24
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800225c:	2300      	movs	r3, #0
 800225e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002260:	2300      	movs	r3, #0
 8002262:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d03f      	beq.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002274:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002278:	d02a      	beq.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800227a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800227e:	d824      	bhi.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002280:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002284:	d018      	beq.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002286:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800228a:	d81e      	bhi.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x76>
 800228c:	2b00      	cmp	r3, #0
 800228e:	d003      	beq.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002290:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002294:	d007      	beq.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002296:	e018      	b.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002298:	4ba3      	ldr	r3, [pc, #652]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800229a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800229c:	4aa2      	ldr	r2, [pc, #648]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800229e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80022a4:	e015      	b.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	3304      	adds	r3, #4
 80022aa:	2102      	movs	r1, #2
 80022ac:	4618      	mov	r0, r3
 80022ae:	f001 f9d5 	bl	800365c <RCCEx_PLL2_Config>
 80022b2:	4603      	mov	r3, r0
 80022b4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80022b6:	e00c      	b.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	3324      	adds	r3, #36	; 0x24
 80022bc:	2102      	movs	r1, #2
 80022be:	4618      	mov	r0, r3
 80022c0:	f001 fa7e 	bl	80037c0 <RCCEx_PLL3_Config>
 80022c4:	4603      	mov	r3, r0
 80022c6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80022c8:	e003      	b.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	75fb      	strb	r3, [r7, #23]
      break;
 80022ce:	e000      	b.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80022d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80022d2:	7dfb      	ldrb	r3, [r7, #23]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d109      	bne.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80022d8:	4b93      	ldr	r3, [pc, #588]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80022da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022e4:	4990      	ldr	r1, [pc, #576]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	650b      	str	r3, [r1, #80]	; 0x50
 80022ea:	e001      	b.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022ec:	7dfb      	ldrb	r3, [r7, #23]
 80022ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d03d      	beq.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002300:	2b04      	cmp	r3, #4
 8002302:	d826      	bhi.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002304:	a201      	add	r2, pc, #4	; (adr r2, 800230c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8002306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800230a:	bf00      	nop
 800230c:	08002321 	.word	0x08002321
 8002310:	0800232f 	.word	0x0800232f
 8002314:	08002341 	.word	0x08002341
 8002318:	08002359 	.word	0x08002359
 800231c:	08002359 	.word	0x08002359
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002320:	4b81      	ldr	r3, [pc, #516]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002324:	4a80      	ldr	r2, [pc, #512]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002326:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800232a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800232c:	e015      	b.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	3304      	adds	r3, #4
 8002332:	2100      	movs	r1, #0
 8002334:	4618      	mov	r0, r3
 8002336:	f001 f991 	bl	800365c <RCCEx_PLL2_Config>
 800233a:	4603      	mov	r3, r0
 800233c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800233e:	e00c      	b.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	3324      	adds	r3, #36	; 0x24
 8002344:	2100      	movs	r1, #0
 8002346:	4618      	mov	r0, r3
 8002348:	f001 fa3a 	bl	80037c0 <RCCEx_PLL3_Config>
 800234c:	4603      	mov	r3, r0
 800234e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002350:	e003      	b.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	75fb      	strb	r3, [r7, #23]
      break;
 8002356:	e000      	b.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002358:	bf00      	nop
    }

    if(ret == HAL_OK)
 800235a:	7dfb      	ldrb	r3, [r7, #23]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d109      	bne.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002360:	4b71      	ldr	r3, [pc, #452]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002362:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002364:	f023 0207 	bic.w	r2, r3, #7
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800236c:	496e      	ldr	r1, [pc, #440]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800236e:	4313      	orrs	r3, r2
 8002370:	650b      	str	r3, [r1, #80]	; 0x50
 8002372:	e001      	b.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002374:	7dfb      	ldrb	r3, [r7, #23]
 8002376:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002380:	2b00      	cmp	r3, #0
 8002382:	d042      	beq.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002388:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800238c:	d02b      	beq.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800238e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002392:	d825      	bhi.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002394:	2bc0      	cmp	r3, #192	; 0xc0
 8002396:	d028      	beq.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002398:	2bc0      	cmp	r3, #192	; 0xc0
 800239a:	d821      	bhi.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800239c:	2b80      	cmp	r3, #128	; 0x80
 800239e:	d016      	beq.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80023a0:	2b80      	cmp	r3, #128	; 0x80
 80023a2:	d81d      	bhi.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d002      	beq.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80023a8:	2b40      	cmp	r3, #64	; 0x40
 80023aa:	d007      	beq.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x168>
 80023ac:	e018      	b.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80023ae:	4b5e      	ldr	r3, [pc, #376]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80023b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b2:	4a5d      	ldr	r2, [pc, #372]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80023b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023b8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80023ba:	e017      	b.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	3304      	adds	r3, #4
 80023c0:	2100      	movs	r1, #0
 80023c2:	4618      	mov	r0, r3
 80023c4:	f001 f94a 	bl	800365c <RCCEx_PLL2_Config>
 80023c8:	4603      	mov	r3, r0
 80023ca:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80023cc:	e00e      	b.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	3324      	adds	r3, #36	; 0x24
 80023d2:	2100      	movs	r1, #0
 80023d4:	4618      	mov	r0, r3
 80023d6:	f001 f9f3 	bl	80037c0 <RCCEx_PLL3_Config>
 80023da:	4603      	mov	r3, r0
 80023dc:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80023de:	e005      	b.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	75fb      	strb	r3, [r7, #23]
      break;
 80023e4:	e002      	b.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80023e6:	bf00      	nop
 80023e8:	e000      	b.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80023ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80023ec:	7dfb      	ldrb	r3, [r7, #23]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d109      	bne.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80023f2:	4b4d      	ldr	r3, [pc, #308]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80023f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023f6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023fe:	494a      	ldr	r1, [pc, #296]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002400:	4313      	orrs	r3, r2
 8002402:	650b      	str	r3, [r1, #80]	; 0x50
 8002404:	e001      	b.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002406:	7dfb      	ldrb	r3, [r7, #23]
 8002408:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002412:	2b00      	cmp	r3, #0
 8002414:	d049      	beq.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800241c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002420:	d030      	beq.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8002422:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002426:	d82a      	bhi.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002428:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800242c:	d02c      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800242e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002432:	d824      	bhi.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002434:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002438:	d018      	beq.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x218>
 800243a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800243e:	d81e      	bhi.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002440:	2b00      	cmp	r3, #0
 8002442:	d003      	beq.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002444:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002448:	d007      	beq.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800244a:	e018      	b.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800244c:	4b36      	ldr	r3, [pc, #216]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800244e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002450:	4a35      	ldr	r2, [pc, #212]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002452:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002456:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002458:	e017      	b.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	3304      	adds	r3, #4
 800245e:	2100      	movs	r1, #0
 8002460:	4618      	mov	r0, r3
 8002462:	f001 f8fb 	bl	800365c <RCCEx_PLL2_Config>
 8002466:	4603      	mov	r3, r0
 8002468:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800246a:	e00e      	b.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	3324      	adds	r3, #36	; 0x24
 8002470:	2100      	movs	r1, #0
 8002472:	4618      	mov	r0, r3
 8002474:	f001 f9a4 	bl	80037c0 <RCCEx_PLL3_Config>
 8002478:	4603      	mov	r3, r0
 800247a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800247c:	e005      	b.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	75fb      	strb	r3, [r7, #23]
      break;
 8002482:	e002      	b.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002484:	bf00      	nop
 8002486:	e000      	b.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002488:	bf00      	nop
    }

    if(ret == HAL_OK)
 800248a:	7dfb      	ldrb	r3, [r7, #23]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d10a      	bne.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002490:	4b25      	ldr	r3, [pc, #148]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002494:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800249e:	4922      	ldr	r1, [pc, #136]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	658b      	str	r3, [r1, #88]	; 0x58
 80024a4:	e001      	b.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024a6:	7dfb      	ldrb	r3, [r7, #23]
 80024a8:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d04b      	beq.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80024bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80024c0:	d030      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80024c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80024c6:	d82a      	bhi.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80024c8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80024cc:	d02e      	beq.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80024ce:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80024d2:	d824      	bhi.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80024d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80024d8:	d018      	beq.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80024da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80024de:	d81e      	bhi.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d003      	beq.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x298>
 80024e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024e8:	d007      	beq.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80024ea:	e018      	b.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80024ec:	4b0e      	ldr	r3, [pc, #56]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80024ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f0:	4a0d      	ldr	r2, [pc, #52]	; (8002528 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80024f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80024f8:	e019      	b.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	3304      	adds	r3, #4
 80024fe:	2100      	movs	r1, #0
 8002500:	4618      	mov	r0, r3
 8002502:	f001 f8ab 	bl	800365c <RCCEx_PLL2_Config>
 8002506:	4603      	mov	r3, r0
 8002508:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800250a:	e010      	b.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	3324      	adds	r3, #36	; 0x24
 8002510:	2100      	movs	r1, #0
 8002512:	4618      	mov	r0, r3
 8002514:	f001 f954 	bl	80037c0 <RCCEx_PLL3_Config>
 8002518:	4603      	mov	r3, r0
 800251a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800251c:	e007      	b.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	75fb      	strb	r3, [r7, #23]
      break;
 8002522:	e004      	b.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8002524:	bf00      	nop
 8002526:	e002      	b.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8002528:	58024400 	.word	0x58024400
      break;
 800252c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800252e:	7dfb      	ldrb	r3, [r7, #23]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d10a      	bne.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002534:	4b99      	ldr	r3, [pc, #612]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002538:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002542:	4996      	ldr	r1, [pc, #600]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002544:	4313      	orrs	r3, r2
 8002546:	658b      	str	r3, [r1, #88]	; 0x58
 8002548:	e001      	b.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800254a:	7dfb      	ldrb	r3, [r7, #23]
 800254c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d032      	beq.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800255e:	2b30      	cmp	r3, #48	; 0x30
 8002560:	d01c      	beq.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x348>
 8002562:	2b30      	cmp	r3, #48	; 0x30
 8002564:	d817      	bhi.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8002566:	2b20      	cmp	r3, #32
 8002568:	d00c      	beq.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800256a:	2b20      	cmp	r3, #32
 800256c:	d813      	bhi.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800256e:	2b00      	cmp	r3, #0
 8002570:	d016      	beq.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8002572:	2b10      	cmp	r3, #16
 8002574:	d10f      	bne.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002576:	4b89      	ldr	r3, [pc, #548]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800257a:	4a88      	ldr	r2, [pc, #544]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800257c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002580:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002582:	e00e      	b.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	3304      	adds	r3, #4
 8002588:	2102      	movs	r1, #2
 800258a:	4618      	mov	r0, r3
 800258c:	f001 f866 	bl	800365c <RCCEx_PLL2_Config>
 8002590:	4603      	mov	r3, r0
 8002592:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002594:	e005      	b.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	75fb      	strb	r3, [r7, #23]
      break;
 800259a:	e002      	b.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800259c:	bf00      	nop
 800259e:	e000      	b.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80025a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025a2:	7dfb      	ldrb	r3, [r7, #23]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d109      	bne.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80025a8:	4b7c      	ldr	r3, [pc, #496]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80025aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ac:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025b4:	4979      	ldr	r1, [pc, #484]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	64cb      	str	r3, [r1, #76]	; 0x4c
 80025ba:	e001      	b.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025bc:	7dfb      	ldrb	r3, [r7, #23]
 80025be:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d047      	beq.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80025d4:	d030      	beq.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80025d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80025da:	d82a      	bhi.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80025dc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80025e0:	d02c      	beq.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80025e2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80025e6:	d824      	bhi.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80025e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025ec:	d018      	beq.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80025ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025f2:	d81e      	bhi.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d003      	beq.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80025f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025fc:	d007      	beq.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80025fe:	e018      	b.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002600:	4b66      	ldr	r3, [pc, #408]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002604:	4a65      	ldr	r2, [pc, #404]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002606:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800260a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800260c:	e017      	b.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	3304      	adds	r3, #4
 8002612:	2100      	movs	r1, #0
 8002614:	4618      	mov	r0, r3
 8002616:	f001 f821 	bl	800365c <RCCEx_PLL2_Config>
 800261a:	4603      	mov	r3, r0
 800261c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800261e:	e00e      	b.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	3324      	adds	r3, #36	; 0x24
 8002624:	2100      	movs	r1, #0
 8002626:	4618      	mov	r0, r3
 8002628:	f001 f8ca 	bl	80037c0 <RCCEx_PLL3_Config>
 800262c:	4603      	mov	r3, r0
 800262e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002630:	e005      	b.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	75fb      	strb	r3, [r7, #23]
      break;
 8002636:	e002      	b.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8002638:	bf00      	nop
 800263a:	e000      	b.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800263c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800263e:	7dfb      	ldrb	r3, [r7, #23]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d109      	bne.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002644:	4b55      	ldr	r3, [pc, #340]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002646:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002648:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002650:	4952      	ldr	r1, [pc, #328]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002652:	4313      	orrs	r3, r2
 8002654:	650b      	str	r3, [r1, #80]	; 0x50
 8002656:	e001      	b.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002658:	7dfb      	ldrb	r3, [r7, #23]
 800265a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d049      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800266c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002670:	d02e      	beq.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002672:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002676:	d828      	bhi.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002678:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800267c:	d02a      	beq.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800267e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002682:	d822      	bhi.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002684:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002688:	d026      	beq.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x484>
 800268a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800268e:	d81c      	bhi.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002690:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002694:	d010      	beq.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8002696:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800269a:	d816      	bhi.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x476>
 800269c:	2b00      	cmp	r3, #0
 800269e:	d01d      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x488>
 80026a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026a4:	d111      	bne.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	3304      	adds	r3, #4
 80026aa:	2101      	movs	r1, #1
 80026ac:	4618      	mov	r0, r3
 80026ae:	f000 ffd5 	bl	800365c <RCCEx_PLL2_Config>
 80026b2:	4603      	mov	r3, r0
 80026b4:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80026b6:	e012      	b.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	3324      	adds	r3, #36	; 0x24
 80026bc:	2101      	movs	r1, #1
 80026be:	4618      	mov	r0, r3
 80026c0:	f001 f87e 	bl	80037c0 <RCCEx_PLL3_Config>
 80026c4:	4603      	mov	r3, r0
 80026c6:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80026c8:	e009      	b.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	75fb      	strb	r3, [r7, #23]
      break;
 80026ce:	e006      	b.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80026d0:	bf00      	nop
 80026d2:	e004      	b.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80026d4:	bf00      	nop
 80026d6:	e002      	b.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80026d8:	bf00      	nop
 80026da:	e000      	b.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80026dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026de:	7dfb      	ldrb	r3, [r7, #23]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d109      	bne.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80026e4:	4b2d      	ldr	r3, [pc, #180]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80026e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026e8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026f0:	492a      	ldr	r1, [pc, #168]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	650b      	str	r3, [r1, #80]	; 0x50
 80026f6:	e001      	b.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026f8:	7dfb      	ldrb	r3, [r7, #23]
 80026fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d04d      	beq.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800270e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002712:	d02e      	beq.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8002714:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002718:	d828      	bhi.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x518>
 800271a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800271e:	d02a      	beq.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8002720:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002724:	d822      	bhi.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002726:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800272a:	d026      	beq.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x526>
 800272c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002730:	d81c      	bhi.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002732:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002736:	d010      	beq.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8002738:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800273c:	d816      	bhi.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x518>
 800273e:	2b00      	cmp	r3, #0
 8002740:	d01d      	beq.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8002742:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002746:	d111      	bne.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	3304      	adds	r3, #4
 800274c:	2101      	movs	r1, #1
 800274e:	4618      	mov	r0, r3
 8002750:	f000 ff84 	bl	800365c <RCCEx_PLL2_Config>
 8002754:	4603      	mov	r3, r0
 8002756:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002758:	e012      	b.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	3324      	adds	r3, #36	; 0x24
 800275e:	2101      	movs	r1, #1
 8002760:	4618      	mov	r0, r3
 8002762:	f001 f82d 	bl	80037c0 <RCCEx_PLL3_Config>
 8002766:	4603      	mov	r3, r0
 8002768:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800276a:	e009      	b.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	75fb      	strb	r3, [r7, #23]
      break;
 8002770:	e006      	b.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002772:	bf00      	nop
 8002774:	e004      	b.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002776:	bf00      	nop
 8002778:	e002      	b.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800277a:	bf00      	nop
 800277c:	e000      	b.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800277e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002780:	7dfb      	ldrb	r3, [r7, #23]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d10c      	bne.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002786:	4b05      	ldr	r3, [pc, #20]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800278a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002794:	4901      	ldr	r1, [pc, #4]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002796:	4313      	orrs	r3, r2
 8002798:	658b      	str	r3, [r1, #88]	; 0x58
 800279a:	e003      	b.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800279c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027a0:	7dfb      	ldrb	r3, [r7, #23]
 80027a2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d02f      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027b8:	d00e      	beq.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x584>
 80027ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027be:	d814      	bhi.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x596>
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d015      	beq.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 80027c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027c8:	d10f      	bne.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027ca:	4baf      	ldr	r3, [pc, #700]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80027cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ce:	4aae      	ldr	r2, [pc, #696]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80027d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027d4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80027d6:	e00c      	b.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	3304      	adds	r3, #4
 80027dc:	2101      	movs	r1, #1
 80027de:	4618      	mov	r0, r3
 80027e0:	f000 ff3c 	bl	800365c <RCCEx_PLL2_Config>
 80027e4:	4603      	mov	r3, r0
 80027e6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80027e8:	e003      	b.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	75fb      	strb	r3, [r7, #23]
      break;
 80027ee:	e000      	b.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 80027f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027f2:	7dfb      	ldrb	r3, [r7, #23]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d109      	bne.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80027f8:	4ba3      	ldr	r3, [pc, #652]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80027fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027fc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002804:	49a0      	ldr	r1, [pc, #640]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002806:	4313      	orrs	r3, r2
 8002808:	650b      	str	r3, [r1, #80]	; 0x50
 800280a:	e001      	b.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800280c:	7dfb      	ldrb	r3, [r7, #23]
 800280e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d032      	beq.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002820:	2b03      	cmp	r3, #3
 8002822:	d81b      	bhi.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8002824:	a201      	add	r2, pc, #4	; (adr r2, 800282c <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8002826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800282a:	bf00      	nop
 800282c:	08002863 	.word	0x08002863
 8002830:	0800283d 	.word	0x0800283d
 8002834:	0800284b 	.word	0x0800284b
 8002838:	08002863 	.word	0x08002863
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800283c:	4b92      	ldr	r3, [pc, #584]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800283e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002840:	4a91      	ldr	r2, [pc, #580]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002842:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002846:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002848:	e00c      	b.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	3304      	adds	r3, #4
 800284e:	2102      	movs	r1, #2
 8002850:	4618      	mov	r0, r3
 8002852:	f000 ff03 	bl	800365c <RCCEx_PLL2_Config>
 8002856:	4603      	mov	r3, r0
 8002858:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800285a:	e003      	b.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	75fb      	strb	r3, [r7, #23]
      break;
 8002860:	e000      	b.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8002862:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002864:	7dfb      	ldrb	r3, [r7, #23]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d109      	bne.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800286a:	4b87      	ldr	r3, [pc, #540]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800286c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800286e:	f023 0203 	bic.w	r2, r3, #3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002876:	4984      	ldr	r1, [pc, #528]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002878:	4313      	orrs	r3, r2
 800287a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800287c:	e001      	b.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800287e:	7dfb      	ldrb	r3, [r7, #23]
 8002880:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800288a:	2b00      	cmp	r3, #0
 800288c:	f000 8086 	beq.w	800299c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002890:	4b7e      	ldr	r3, [pc, #504]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a7d      	ldr	r2, [pc, #500]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002896:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800289a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800289c:	f7fe f9e2 	bl	8000c64 <HAL_GetTick>
 80028a0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80028a2:	e009      	b.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028a4:	f7fe f9de 	bl	8000c64 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b64      	cmp	r3, #100	; 0x64
 80028b0:	d902      	bls.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	75fb      	strb	r3, [r7, #23]
        break;
 80028b6:	e005      	b.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80028b8:	4b74      	ldr	r3, [pc, #464]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d0ef      	beq.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80028c4:	7dfb      	ldrb	r3, [r7, #23]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d166      	bne.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80028ca:	4b6f      	ldr	r3, [pc, #444]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80028cc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80028d4:	4053      	eors	r3, r2
 80028d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d013      	beq.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80028de:	4b6a      	ldr	r3, [pc, #424]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80028e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028e6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80028e8:	4b67      	ldr	r3, [pc, #412]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80028ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ec:	4a66      	ldr	r2, [pc, #408]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80028ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028f2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80028f4:	4b64      	ldr	r3, [pc, #400]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80028f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028f8:	4a63      	ldr	r2, [pc, #396]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80028fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028fe:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002900:	4a61      	ldr	r2, [pc, #388]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800290c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002910:	d115      	bne.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002912:	f7fe f9a7 	bl	8000c64 <HAL_GetTick>
 8002916:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002918:	e00b      	b.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800291a:	f7fe f9a3 	bl	8000c64 <HAL_GetTick>
 800291e:	4602      	mov	r2, r0
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	f241 3288 	movw	r2, #5000	; 0x1388
 8002928:	4293      	cmp	r3, r2
 800292a:	d902      	bls.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800292c:	2303      	movs	r3, #3
 800292e:	75fb      	strb	r3, [r7, #23]
            break;
 8002930:	e005      	b.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002932:	4b55      	ldr	r3, [pc, #340]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	2b00      	cmp	r3, #0
 800293c:	d0ed      	beq.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800293e:	7dfb      	ldrb	r3, [r7, #23]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d126      	bne.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800294a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800294e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002952:	d10d      	bne.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8002954:	4b4c      	ldr	r3, [pc, #304]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002956:	691b      	ldr	r3, [r3, #16]
 8002958:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002962:	0919      	lsrs	r1, r3, #4
 8002964:	4b4a      	ldr	r3, [pc, #296]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8002966:	400b      	ands	r3, r1
 8002968:	4947      	ldr	r1, [pc, #284]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800296a:	4313      	orrs	r3, r2
 800296c:	610b      	str	r3, [r1, #16]
 800296e:	e005      	b.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8002970:	4b45      	ldr	r3, [pc, #276]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002972:	691b      	ldr	r3, [r3, #16]
 8002974:	4a44      	ldr	r2, [pc, #272]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002976:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800297a:	6113      	str	r3, [r2, #16]
 800297c:	4b42      	ldr	r3, [pc, #264]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800297e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002986:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800298a:	493f      	ldr	r1, [pc, #252]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800298c:	4313      	orrs	r3, r2
 800298e:	670b      	str	r3, [r1, #112]	; 0x70
 8002990:	e004      	b.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002992:	7dfb      	ldrb	r3, [r7, #23]
 8002994:	75bb      	strb	r3, [r7, #22]
 8002996:	e001      	b.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002998:	7dfb      	ldrb	r3, [r7, #23]
 800299a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0301 	and.w	r3, r3, #1
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	f000 8085 	beq.w	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029ae:	2b28      	cmp	r3, #40	; 0x28
 80029b0:	d866      	bhi.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80029b2:	a201      	add	r2, pc, #4	; (adr r2, 80029b8 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80029b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029b8:	08002a95 	.word	0x08002a95
 80029bc:	08002a81 	.word	0x08002a81
 80029c0:	08002a81 	.word	0x08002a81
 80029c4:	08002a81 	.word	0x08002a81
 80029c8:	08002a81 	.word	0x08002a81
 80029cc:	08002a81 	.word	0x08002a81
 80029d0:	08002a81 	.word	0x08002a81
 80029d4:	08002a81 	.word	0x08002a81
 80029d8:	08002a5d 	.word	0x08002a5d
 80029dc:	08002a81 	.word	0x08002a81
 80029e0:	08002a81 	.word	0x08002a81
 80029e4:	08002a81 	.word	0x08002a81
 80029e8:	08002a81 	.word	0x08002a81
 80029ec:	08002a81 	.word	0x08002a81
 80029f0:	08002a81 	.word	0x08002a81
 80029f4:	08002a81 	.word	0x08002a81
 80029f8:	08002a6f 	.word	0x08002a6f
 80029fc:	08002a81 	.word	0x08002a81
 8002a00:	08002a81 	.word	0x08002a81
 8002a04:	08002a81 	.word	0x08002a81
 8002a08:	08002a81 	.word	0x08002a81
 8002a0c:	08002a81 	.word	0x08002a81
 8002a10:	08002a81 	.word	0x08002a81
 8002a14:	08002a81 	.word	0x08002a81
 8002a18:	08002a95 	.word	0x08002a95
 8002a1c:	08002a81 	.word	0x08002a81
 8002a20:	08002a81 	.word	0x08002a81
 8002a24:	08002a81 	.word	0x08002a81
 8002a28:	08002a81 	.word	0x08002a81
 8002a2c:	08002a81 	.word	0x08002a81
 8002a30:	08002a81 	.word	0x08002a81
 8002a34:	08002a81 	.word	0x08002a81
 8002a38:	08002a95 	.word	0x08002a95
 8002a3c:	08002a81 	.word	0x08002a81
 8002a40:	08002a81 	.word	0x08002a81
 8002a44:	08002a81 	.word	0x08002a81
 8002a48:	08002a81 	.word	0x08002a81
 8002a4c:	08002a81 	.word	0x08002a81
 8002a50:	08002a81 	.word	0x08002a81
 8002a54:	08002a81 	.word	0x08002a81
 8002a58:	08002a95 	.word	0x08002a95
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	3304      	adds	r3, #4
 8002a60:	2101      	movs	r1, #1
 8002a62:	4618      	mov	r0, r3
 8002a64:	f000 fdfa 	bl	800365c <RCCEx_PLL2_Config>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002a6c:	e013      	b.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	3324      	adds	r3, #36	; 0x24
 8002a72:	2101      	movs	r1, #1
 8002a74:	4618      	mov	r0, r3
 8002a76:	f000 fea3 	bl	80037c0 <RCCEx_PLL3_Config>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002a7e:	e00a      	b.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	75fb      	strb	r3, [r7, #23]
      break;
 8002a84:	e007      	b.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002a86:	bf00      	nop
 8002a88:	58024400 	.word	0x58024400
 8002a8c:	58024800 	.word	0x58024800
 8002a90:	00ffffcf 	.word	0x00ffffcf
      break;
 8002a94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a96:	7dfb      	ldrb	r3, [r7, #23]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d109      	bne.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002a9c:	4b96      	ldr	r3, [pc, #600]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002a9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aa0:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002aa8:	4993      	ldr	r1, [pc, #588]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	654b      	str	r3, [r1, #84]	; 0x54
 8002aae:	e001      	b.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ab0:	7dfb      	ldrb	r3, [r7, #23]
 8002ab2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0302 	and.w	r3, r3, #2
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d038      	beq.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ac4:	2b05      	cmp	r3, #5
 8002ac6:	d821      	bhi.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8002ac8:	a201      	add	r2, pc, #4	; (adr r2, 8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8002aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ace:	bf00      	nop
 8002ad0:	08002b13 	.word	0x08002b13
 8002ad4:	08002ae9 	.word	0x08002ae9
 8002ad8:	08002afb 	.word	0x08002afb
 8002adc:	08002b13 	.word	0x08002b13
 8002ae0:	08002b13 	.word	0x08002b13
 8002ae4:	08002b13 	.word	0x08002b13
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	3304      	adds	r3, #4
 8002aec:	2101      	movs	r1, #1
 8002aee:	4618      	mov	r0, r3
 8002af0:	f000 fdb4 	bl	800365c <RCCEx_PLL2_Config>
 8002af4:	4603      	mov	r3, r0
 8002af6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002af8:	e00c      	b.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	3324      	adds	r3, #36	; 0x24
 8002afe:	2101      	movs	r1, #1
 8002b00:	4618      	mov	r0, r3
 8002b02:	f000 fe5d 	bl	80037c0 <RCCEx_PLL3_Config>
 8002b06:	4603      	mov	r3, r0
 8002b08:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002b0a:	e003      	b.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	75fb      	strb	r3, [r7, #23]
      break;
 8002b10:	e000      	b.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8002b12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b14:	7dfb      	ldrb	r3, [r7, #23]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d109      	bne.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002b1a:	4b77      	ldr	r3, [pc, #476]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b1e:	f023 0207 	bic.w	r2, r3, #7
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b26:	4974      	ldr	r1, [pc, #464]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	654b      	str	r3, [r1, #84]	; 0x54
 8002b2c:	e001      	b.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b2e:	7dfb      	ldrb	r3, [r7, #23]
 8002b30:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0304 	and.w	r3, r3, #4
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d03a      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b44:	2b05      	cmp	r3, #5
 8002b46:	d821      	bhi.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x938>
 8002b48:	a201      	add	r2, pc, #4	; (adr r2, 8002b50 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8002b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b4e:	bf00      	nop
 8002b50:	08002b93 	.word	0x08002b93
 8002b54:	08002b69 	.word	0x08002b69
 8002b58:	08002b7b 	.word	0x08002b7b
 8002b5c:	08002b93 	.word	0x08002b93
 8002b60:	08002b93 	.word	0x08002b93
 8002b64:	08002b93 	.word	0x08002b93
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	3304      	adds	r3, #4
 8002b6c:	2101      	movs	r1, #1
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f000 fd74 	bl	800365c <RCCEx_PLL2_Config>
 8002b74:	4603      	mov	r3, r0
 8002b76:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002b78:	e00c      	b.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	3324      	adds	r3, #36	; 0x24
 8002b7e:	2101      	movs	r1, #1
 8002b80:	4618      	mov	r0, r3
 8002b82:	f000 fe1d 	bl	80037c0 <RCCEx_PLL3_Config>
 8002b86:	4603      	mov	r3, r0
 8002b88:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002b8a:	e003      	b.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	75fb      	strb	r3, [r7, #23]
      break;
 8002b90:	e000      	b.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8002b92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b94:	7dfb      	ldrb	r3, [r7, #23]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d10a      	bne.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b9a:	4b57      	ldr	r3, [pc, #348]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b9e:	f023 0207 	bic.w	r2, r3, #7
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ba8:	4953      	ldr	r1, [pc, #332]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	658b      	str	r3, [r1, #88]	; 0x58
 8002bae:	e001      	b.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bb0:	7dfb      	ldrb	r3, [r7, #23]
 8002bb2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0320 	and.w	r3, r3, #32
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d04b      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bc6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bca:	d02e      	beq.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8002bcc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bd0:	d828      	bhi.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8002bd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bd6:	d02a      	beq.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8002bd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bdc:	d822      	bhi.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8002bde:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002be2:	d026      	beq.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8002be4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002be8:	d81c      	bhi.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8002bea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bee:	d010      	beq.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8002bf0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bf4:	d816      	bhi.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d01d      	beq.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8002bfa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002bfe:	d111      	bne.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	3304      	adds	r3, #4
 8002c04:	2100      	movs	r1, #0
 8002c06:	4618      	mov	r0, r3
 8002c08:	f000 fd28 	bl	800365c <RCCEx_PLL2_Config>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002c10:	e012      	b.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	3324      	adds	r3, #36	; 0x24
 8002c16:	2102      	movs	r1, #2
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f000 fdd1 	bl	80037c0 <RCCEx_PLL3_Config>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002c22:	e009      	b.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	75fb      	strb	r3, [r7, #23]
      break;
 8002c28:	e006      	b.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8002c2a:	bf00      	nop
 8002c2c:	e004      	b.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8002c2e:	bf00      	nop
 8002c30:	e002      	b.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8002c32:	bf00      	nop
 8002c34:	e000      	b.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8002c36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c38:	7dfb      	ldrb	r3, [r7, #23]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d10a      	bne.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c3e:	4b2e      	ldr	r3, [pc, #184]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002c40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c42:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c4c:	492a      	ldr	r1, [pc, #168]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	654b      	str	r3, [r1, #84]	; 0x54
 8002c52:	e001      	b.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c54:	7dfb      	ldrb	r3, [r7, #23]
 8002c56:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d04d      	beq.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c6a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002c6e:	d02e      	beq.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8002c70:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002c74:	d828      	bhi.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8002c76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c7a:	d02a      	beq.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8002c7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c80:	d822      	bhi.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8002c82:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002c86:	d026      	beq.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8002c88:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002c8c:	d81c      	bhi.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8002c8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c92:	d010      	beq.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8002c94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c98:	d816      	bhi.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d01d      	beq.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8002c9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ca2:	d111      	bne.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	3304      	adds	r3, #4
 8002ca8:	2100      	movs	r1, #0
 8002caa:	4618      	mov	r0, r3
 8002cac:	f000 fcd6 	bl	800365c <RCCEx_PLL2_Config>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002cb4:	e012      	b.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	3324      	adds	r3, #36	; 0x24
 8002cba:	2102      	movs	r1, #2
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f000 fd7f 	bl	80037c0 <RCCEx_PLL3_Config>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002cc6:	e009      	b.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	75fb      	strb	r3, [r7, #23]
      break;
 8002ccc:	e006      	b.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8002cce:	bf00      	nop
 8002cd0:	e004      	b.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8002cd2:	bf00      	nop
 8002cd4:	e002      	b.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8002cd6:	bf00      	nop
 8002cd8:	e000      	b.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8002cda:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002cdc:	7dfb      	ldrb	r3, [r7, #23]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d10c      	bne.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002ce2:	4b05      	ldr	r3, [pc, #20]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ce6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002cf0:	4901      	ldr	r1, [pc, #4]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	658b      	str	r3, [r1, #88]	; 0x58
 8002cf6:	e003      	b.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8002cf8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cfc:	7dfb      	ldrb	r3, [r7, #23]
 8002cfe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d04b      	beq.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002d12:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002d16:	d02e      	beq.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8002d18:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002d1c:	d828      	bhi.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8002d1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d22:	d02a      	beq.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8002d24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d28:	d822      	bhi.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8002d2a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002d2e:	d026      	beq.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8002d30:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002d34:	d81c      	bhi.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8002d36:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d3a:	d010      	beq.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8002d3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d40:	d816      	bhi.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d01d      	beq.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8002d46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d4a:	d111      	bne.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	3304      	adds	r3, #4
 8002d50:	2100      	movs	r1, #0
 8002d52:	4618      	mov	r0, r3
 8002d54:	f000 fc82 	bl	800365c <RCCEx_PLL2_Config>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002d5c:	e012      	b.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	3324      	adds	r3, #36	; 0x24
 8002d62:	2102      	movs	r1, #2
 8002d64:	4618      	mov	r0, r3
 8002d66:	f000 fd2b 	bl	80037c0 <RCCEx_PLL3_Config>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002d6e:	e009      	b.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	75fb      	strb	r3, [r7, #23]
      break;
 8002d74:	e006      	b.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8002d76:	bf00      	nop
 8002d78:	e004      	b.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8002d7a:	bf00      	nop
 8002d7c:	e002      	b.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8002d7e:	bf00      	nop
 8002d80:	e000      	b.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8002d82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d84:	7dfb      	ldrb	r3, [r7, #23]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d10a      	bne.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8002d8a:	4b9d      	ldr	r3, [pc, #628]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002d98:	4999      	ldr	r1, [pc, #612]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	658b      	str	r3, [r1, #88]	; 0x58
 8002d9e:	e001      	b.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002da0:	7dfb      	ldrb	r3, [r7, #23]
 8002da2:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0308 	and.w	r3, r3, #8
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d01a      	beq.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002db6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dba:	d10a      	bne.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	3324      	adds	r3, #36	; 0x24
 8002dc0:	2102      	movs	r1, #2
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f000 fcfc 	bl	80037c0 <RCCEx_PLL3_Config>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d001      	beq.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8002dd2:	4b8b      	ldr	r3, [pc, #556]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dd6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002de0:	4987      	ldr	r1, [pc, #540]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0310 	and.w	r3, r3, #16
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d01a      	beq.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002df8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dfc:	d10a      	bne.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	3324      	adds	r3, #36	; 0x24
 8002e02:	2102      	movs	r1, #2
 8002e04:	4618      	mov	r0, r3
 8002e06:	f000 fcdb 	bl	80037c0 <RCCEx_PLL3_Config>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d001      	beq.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002e14:	4b7a      	ldr	r3, [pc, #488]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e22:	4977      	ldr	r1, [pc, #476]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002e24:	4313      	orrs	r3, r2
 8002e26:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d034      	beq.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002e3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e3e:	d01d      	beq.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8002e40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e44:	d817      	bhi.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d003      	beq.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8002e4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e4e:	d009      	beq.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8002e50:	e011      	b.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	3304      	adds	r3, #4
 8002e56:	2100      	movs	r1, #0
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f000 fbff 	bl	800365c <RCCEx_PLL2_Config>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8002e62:	e00c      	b.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	3324      	adds	r3, #36	; 0x24
 8002e68:	2102      	movs	r1, #2
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f000 fca8 	bl	80037c0 <RCCEx_PLL3_Config>
 8002e70:	4603      	mov	r3, r0
 8002e72:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8002e74:	e003      	b.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	75fb      	strb	r3, [r7, #23]
      break;
 8002e7a:	e000      	b.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8002e7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e7e:	7dfb      	ldrb	r3, [r7, #23]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d10a      	bne.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e84:	4b5e      	ldr	r3, [pc, #376]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002e86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e88:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002e92:	495b      	ldr	r1, [pc, #364]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002e94:	4313      	orrs	r3, r2
 8002e96:	658b      	str	r3, [r1, #88]	; 0x58
 8002e98:	e001      	b.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e9a:	7dfb      	ldrb	r3, [r7, #23]
 8002e9c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d033      	beq.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002eb0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002eb4:	d01c      	beq.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8002eb6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002eba:	d816      	bhi.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8002ebc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ec0:	d003      	beq.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8002ec2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ec6:	d007      	beq.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8002ec8:	e00f      	b.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002eca:	4b4d      	ldr	r3, [pc, #308]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ece:	4a4c      	ldr	r2, [pc, #304]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002ed0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ed4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8002ed6:	e00c      	b.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	3324      	adds	r3, #36	; 0x24
 8002edc:	2101      	movs	r1, #1
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f000 fc6e 	bl	80037c0 <RCCEx_PLL3_Config>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8002ee8:	e003      	b.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	75fb      	strb	r3, [r7, #23]
      break;
 8002eee:	e000      	b.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8002ef0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ef2:	7dfb      	ldrb	r3, [r7, #23]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d10a      	bne.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ef8:	4b41      	ldr	r3, [pc, #260]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002efa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002efc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f06:	493e      	ldr	r1, [pc, #248]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	654b      	str	r3, [r1, #84]	; 0x54
 8002f0c:	e001      	b.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f0e:	7dfb      	ldrb	r3, [r7, #23]
 8002f10:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d029      	beq.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d003      	beq.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8002f26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f2a:	d007      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8002f2c:	e00f      	b.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f2e:	4b34      	ldr	r3, [pc, #208]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f32:	4a33      	ldr	r2, [pc, #204]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002f34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f38:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8002f3a:	e00b      	b.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	3304      	adds	r3, #4
 8002f40:	2102      	movs	r1, #2
 8002f42:	4618      	mov	r0, r3
 8002f44:	f000 fb8a 	bl	800365c <RCCEx_PLL2_Config>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8002f4c:	e002      	b.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	75fb      	strb	r3, [r7, #23]
      break;
 8002f52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f54:	7dfb      	ldrb	r3, [r7, #23]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d109      	bne.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8002f5a:	4b29      	ldr	r3, [pc, #164]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f5e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f66:	4926      	ldr	r1, [pc, #152]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002f6c:	e001      	b.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f6e:	7dfb      	ldrb	r3, [r7, #23]
 8002f70:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d00a      	beq.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	3324      	adds	r3, #36	; 0x24
 8002f82:	2102      	movs	r1, #2
 8002f84:	4618      	mov	r0, r3
 8002f86:	f000 fc1b 	bl	80037c0 <RCCEx_PLL3_Config>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d001      	beq.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d033      	beq.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fa4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002fa8:	d017      	beq.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8002faa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002fae:	d811      	bhi.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8002fb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fb4:	d013      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8002fb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fba:	d80b      	bhi.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d010      	beq.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8002fc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fc4:	d106      	bne.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fc6:	4b0e      	ldr	r3, [pc, #56]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fca:	4a0d      	ldr	r2, [pc, #52]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002fcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fd0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8002fd2:	e007      	b.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	75fb      	strb	r3, [r7, #23]
      break;
 8002fd8:	e004      	b.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8002fda:	bf00      	nop
 8002fdc:	e002      	b.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8002fde:	bf00      	nop
 8002fe0:	e000      	b.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8002fe2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fe4:	7dfb      	ldrb	r3, [r7, #23]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d10c      	bne.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002fea:	4b05      	ldr	r3, [pc, #20]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ff6:	4902      	ldr	r1, [pc, #8]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	654b      	str	r3, [r1, #84]	; 0x54
 8002ffc:	e004      	b.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8002ffe:	bf00      	nop
 8003000:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003004:	7dfb      	ldrb	r3, [r7, #23]
 8003006:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d008      	beq.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003014:	4b31      	ldr	r3, [pc, #196]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003016:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003018:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003020:	492e      	ldr	r1, [pc, #184]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003022:	4313      	orrs	r3, r2
 8003024:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d009      	beq.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003032:	4b2a      	ldr	r3, [pc, #168]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003040:	4926      	ldr	r1, [pc, #152]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003042:	4313      	orrs	r3, r2
 8003044:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d008      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003052:	4b22      	ldr	r3, [pc, #136]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003054:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003056:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800305e:	491f      	ldr	r1, [pc, #124]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003060:	4313      	orrs	r3, r2
 8003062:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d00d      	beq.n	800308c <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003070:	4b1a      	ldr	r3, [pc, #104]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003072:	691b      	ldr	r3, [r3, #16]
 8003074:	4a19      	ldr	r2, [pc, #100]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003076:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800307a:	6113      	str	r3, [r2, #16]
 800307c:	4b17      	ldr	r3, [pc, #92]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800307e:	691a      	ldr	r2, [r3, #16]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003086:	4915      	ldr	r1, [pc, #84]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003088:	4313      	orrs	r3, r2
 800308a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	2b00      	cmp	r3, #0
 8003092:	da08      	bge.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003094:	4b11      	ldr	r3, [pc, #68]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003096:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003098:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030a0:	490e      	ldr	r1, [pc, #56]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80030a2:	4313      	orrs	r3, r2
 80030a4:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d009      	beq.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80030b2:	4b0a      	ldr	r3, [pc, #40]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80030b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030c0:	4906      	ldr	r1, [pc, #24]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80030c6:	7dbb      	ldrb	r3, [r7, #22]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d101      	bne.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 80030cc:	2300      	movs	r3, #0
 80030ce:	e000      	b.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3718      	adds	r7, #24
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	58024400 	.word	0x58024400

080030e0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80030e4:	f7ff f85a 	bl	800219c <HAL_RCC_GetHCLKFreq>
 80030e8:	4602      	mov	r2, r0
 80030ea:	4b06      	ldr	r3, [pc, #24]	; (8003104 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80030ec:	6a1b      	ldr	r3, [r3, #32]
 80030ee:	091b      	lsrs	r3, r3, #4
 80030f0:	f003 0307 	and.w	r3, r3, #7
 80030f4:	4904      	ldr	r1, [pc, #16]	; (8003108 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80030f6:	5ccb      	ldrb	r3, [r1, r3]
 80030f8:	f003 031f 	and.w	r3, r3, #31
 80030fc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003100:	4618      	mov	r0, r3
 8003102:	bd80      	pop	{r7, pc}
 8003104:	58024400 	.word	0x58024400
 8003108:	08004ba8 	.word	0x08004ba8

0800310c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800310c:	b480      	push	{r7}
 800310e:	b089      	sub	sp, #36	; 0x24
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003114:	4ba1      	ldr	r3, [pc, #644]	; (800339c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003118:	f003 0303 	and.w	r3, r3, #3
 800311c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800311e:	4b9f      	ldr	r3, [pc, #636]	; (800339c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003122:	0b1b      	lsrs	r3, r3, #12
 8003124:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003128:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800312a:	4b9c      	ldr	r3, [pc, #624]	; (800339c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800312c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800312e:	091b      	lsrs	r3, r3, #4
 8003130:	f003 0301 	and.w	r3, r3, #1
 8003134:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003136:	4b99      	ldr	r3, [pc, #612]	; (800339c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800313a:	08db      	lsrs	r3, r3, #3
 800313c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003140:	693a      	ldr	r2, [r7, #16]
 8003142:	fb02 f303 	mul.w	r3, r2, r3
 8003146:	ee07 3a90 	vmov	s15, r3
 800314a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800314e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	2b00      	cmp	r3, #0
 8003156:	f000 8111 	beq.w	800337c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	2b02      	cmp	r3, #2
 800315e:	f000 8083 	beq.w	8003268 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	2b02      	cmp	r3, #2
 8003166:	f200 80a1 	bhi.w	80032ac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d003      	beq.n	8003178 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	2b01      	cmp	r3, #1
 8003174:	d056      	beq.n	8003224 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003176:	e099      	b.n	80032ac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003178:	4b88      	ldr	r3, [pc, #544]	; (800339c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0320 	and.w	r3, r3, #32
 8003180:	2b00      	cmp	r3, #0
 8003182:	d02d      	beq.n	80031e0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003184:	4b85      	ldr	r3, [pc, #532]	; (800339c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	08db      	lsrs	r3, r3, #3
 800318a:	f003 0303 	and.w	r3, r3, #3
 800318e:	4a84      	ldr	r2, [pc, #528]	; (80033a0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003190:	fa22 f303 	lsr.w	r3, r2, r3
 8003194:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	ee07 3a90 	vmov	s15, r3
 800319c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	ee07 3a90 	vmov	s15, r3
 80031a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031ae:	4b7b      	ldr	r3, [pc, #492]	; (800339c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80031b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031b6:	ee07 3a90 	vmov	s15, r3
 80031ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031be:	ed97 6a03 	vldr	s12, [r7, #12]
 80031c2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80033a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80031c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80031d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031da:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80031de:	e087      	b.n	80032f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	ee07 3a90 	vmov	s15, r3
 80031e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031ea:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80033a8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80031ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031f2:	4b6a      	ldr	r3, [pc, #424]	; (800339c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80031f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031fa:	ee07 3a90 	vmov	s15, r3
 80031fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003202:	ed97 6a03 	vldr	s12, [r7, #12]
 8003206:	eddf 5a67 	vldr	s11, [pc, #412]	; 80033a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800320a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800320e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003212:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003216:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800321a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800321e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003222:	e065      	b.n	80032f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	ee07 3a90 	vmov	s15, r3
 800322a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800322e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80033ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003232:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003236:	4b59      	ldr	r3, [pc, #356]	; (800339c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800323a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800323e:	ee07 3a90 	vmov	s15, r3
 8003242:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003246:	ed97 6a03 	vldr	s12, [r7, #12]
 800324a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80033a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800324e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003252:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003256:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800325a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800325e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003262:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003266:	e043      	b.n	80032f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	ee07 3a90 	vmov	s15, r3
 800326e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003272:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80033b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003276:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800327a:	4b48      	ldr	r3, [pc, #288]	; (800339c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800327c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800327e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003282:	ee07 3a90 	vmov	s15, r3
 8003286:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800328a:	ed97 6a03 	vldr	s12, [r7, #12]
 800328e:	eddf 5a45 	vldr	s11, [pc, #276]	; 80033a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003292:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003296:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800329a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800329e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80032aa:	e021      	b.n	80032f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	ee07 3a90 	vmov	s15, r3
 80032b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032b6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80033ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80032ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032be:	4b37      	ldr	r3, [pc, #220]	; (800339c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80032c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032c6:	ee07 3a90 	vmov	s15, r3
 80032ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80032d2:	eddf 5a34 	vldr	s11, [pc, #208]	; 80033a4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80032d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80032ee:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80032f0:	4b2a      	ldr	r3, [pc, #168]	; (800339c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80032f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032f4:	0a5b      	lsrs	r3, r3, #9
 80032f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032fa:	ee07 3a90 	vmov	s15, r3
 80032fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003302:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003306:	ee37 7a87 	vadd.f32	s14, s15, s14
 800330a:	edd7 6a07 	vldr	s13, [r7, #28]
 800330e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003312:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003316:	ee17 2a90 	vmov	r2, s15
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800331e:	4b1f      	ldr	r3, [pc, #124]	; (800339c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003322:	0c1b      	lsrs	r3, r3, #16
 8003324:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003328:	ee07 3a90 	vmov	s15, r3
 800332c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003330:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003334:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003338:	edd7 6a07 	vldr	s13, [r7, #28]
 800333c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003340:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003344:	ee17 2a90 	vmov	r2, s15
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800334c:	4b13      	ldr	r3, [pc, #76]	; (800339c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800334e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003350:	0e1b      	lsrs	r3, r3, #24
 8003352:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003356:	ee07 3a90 	vmov	s15, r3
 800335a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800335e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003362:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003366:	edd7 6a07 	vldr	s13, [r7, #28]
 800336a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800336e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003372:	ee17 2a90 	vmov	r2, s15
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800337a:	e008      	b.n	800338e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	609a      	str	r2, [r3, #8]
}
 800338e:	bf00      	nop
 8003390:	3724      	adds	r7, #36	; 0x24
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	58024400 	.word	0x58024400
 80033a0:	03d09000 	.word	0x03d09000
 80033a4:	46000000 	.word	0x46000000
 80033a8:	4c742400 	.word	0x4c742400
 80033ac:	4a742400 	.word	0x4a742400
 80033b0:	4bbebc20 	.word	0x4bbebc20

080033b4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b089      	sub	sp, #36	; 0x24
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80033bc:	4ba1      	ldr	r3, [pc, #644]	; (8003644 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80033be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c0:	f003 0303 	and.w	r3, r3, #3
 80033c4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80033c6:	4b9f      	ldr	r3, [pc, #636]	; (8003644 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80033c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ca:	0d1b      	lsrs	r3, r3, #20
 80033cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033d0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80033d2:	4b9c      	ldr	r3, [pc, #624]	; (8003644 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80033d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d6:	0a1b      	lsrs	r3, r3, #8
 80033d8:	f003 0301 	and.w	r3, r3, #1
 80033dc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80033de:	4b99      	ldr	r3, [pc, #612]	; (8003644 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80033e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033e2:	08db      	lsrs	r3, r3, #3
 80033e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80033e8:	693a      	ldr	r2, [r7, #16]
 80033ea:	fb02 f303 	mul.w	r3, r2, r3
 80033ee:	ee07 3a90 	vmov	s15, r3
 80033f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033f6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	f000 8111 	beq.w	8003624 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	2b02      	cmp	r3, #2
 8003406:	f000 8083 	beq.w	8003510 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	2b02      	cmp	r3, #2
 800340e:	f200 80a1 	bhi.w	8003554 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d003      	beq.n	8003420 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	2b01      	cmp	r3, #1
 800341c:	d056      	beq.n	80034cc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800341e:	e099      	b.n	8003554 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003420:	4b88      	ldr	r3, [pc, #544]	; (8003644 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0320 	and.w	r3, r3, #32
 8003428:	2b00      	cmp	r3, #0
 800342a:	d02d      	beq.n	8003488 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800342c:	4b85      	ldr	r3, [pc, #532]	; (8003644 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	08db      	lsrs	r3, r3, #3
 8003432:	f003 0303 	and.w	r3, r3, #3
 8003436:	4a84      	ldr	r2, [pc, #528]	; (8003648 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003438:	fa22 f303 	lsr.w	r3, r2, r3
 800343c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	ee07 3a90 	vmov	s15, r3
 8003444:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	ee07 3a90 	vmov	s15, r3
 800344e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003452:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003456:	4b7b      	ldr	r3, [pc, #492]	; (8003644 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800345e:	ee07 3a90 	vmov	s15, r3
 8003462:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003466:	ed97 6a03 	vldr	s12, [r7, #12]
 800346a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800364c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800346e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003472:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003476:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800347a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800347e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003482:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003486:	e087      	b.n	8003598 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	ee07 3a90 	vmov	s15, r3
 800348e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003492:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003650 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003496:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800349a:	4b6a      	ldr	r3, [pc, #424]	; (8003644 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800349c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034a2:	ee07 3a90 	vmov	s15, r3
 80034a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80034ae:	eddf 5a67 	vldr	s11, [pc, #412]	; 800364c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80034b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80034ca:	e065      	b.n	8003598 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	ee07 3a90 	vmov	s15, r3
 80034d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034d6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003654 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80034da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034de:	4b59      	ldr	r3, [pc, #356]	; (8003644 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80034e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034e6:	ee07 3a90 	vmov	s15, r3
 80034ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80034f2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800364c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80034f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003502:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003506:	ee67 7a27 	vmul.f32	s15, s14, s15
 800350a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800350e:	e043      	b.n	8003598 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	ee07 3a90 	vmov	s15, r3
 8003516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800351a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003658 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800351e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003522:	4b48      	ldr	r3, [pc, #288]	; (8003644 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003526:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800352a:	ee07 3a90 	vmov	s15, r3
 800352e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003532:	ed97 6a03 	vldr	s12, [r7, #12]
 8003536:	eddf 5a45 	vldr	s11, [pc, #276]	; 800364c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800353a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800353e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003542:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003546:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800354a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800354e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003552:	e021      	b.n	8003598 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	ee07 3a90 	vmov	s15, r3
 800355a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800355e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003654 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003562:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003566:	4b37      	ldr	r3, [pc, #220]	; (8003644 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800356e:	ee07 3a90 	vmov	s15, r3
 8003572:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003576:	ed97 6a03 	vldr	s12, [r7, #12]
 800357a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800364c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800357e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003582:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003586:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800358a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800358e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003592:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003596:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003598:	4b2a      	ldr	r3, [pc, #168]	; (8003644 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800359a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359c:	0a5b      	lsrs	r3, r3, #9
 800359e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035a2:	ee07 3a90 	vmov	s15, r3
 80035a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80035ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80035b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80035b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035be:	ee17 2a90 	vmov	r2, s15
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80035c6:	4b1f      	ldr	r3, [pc, #124]	; (8003644 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80035c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ca:	0c1b      	lsrs	r3, r3, #16
 80035cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035d0:	ee07 3a90 	vmov	s15, r3
 80035d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80035dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80035e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80035e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035ec:	ee17 2a90 	vmov	r2, s15
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80035f4:	4b13      	ldr	r3, [pc, #76]	; (8003644 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80035f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f8:	0e1b      	lsrs	r3, r3, #24
 80035fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035fe:	ee07 3a90 	vmov	s15, r3
 8003602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003606:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800360a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800360e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003612:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003616:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800361a:	ee17 2a90 	vmov	r2, s15
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003622:	e008      	b.n	8003636 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	609a      	str	r2, [r3, #8]
}
 8003636:	bf00      	nop
 8003638:	3724      	adds	r7, #36	; 0x24
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop
 8003644:	58024400 	.word	0x58024400
 8003648:	03d09000 	.word	0x03d09000
 800364c:	46000000 	.word	0x46000000
 8003650:	4c742400 	.word	0x4c742400
 8003654:	4a742400 	.word	0x4a742400
 8003658:	4bbebc20 	.word	0x4bbebc20

0800365c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003666:	2300      	movs	r3, #0
 8003668:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800366a:	4b53      	ldr	r3, [pc, #332]	; (80037b8 <RCCEx_PLL2_Config+0x15c>)
 800366c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800366e:	f003 0303 	and.w	r3, r3, #3
 8003672:	2b03      	cmp	r3, #3
 8003674:	d101      	bne.n	800367a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e099      	b.n	80037ae <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800367a:	4b4f      	ldr	r3, [pc, #316]	; (80037b8 <RCCEx_PLL2_Config+0x15c>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a4e      	ldr	r2, [pc, #312]	; (80037b8 <RCCEx_PLL2_Config+0x15c>)
 8003680:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003684:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003686:	f7fd faed 	bl	8000c64 <HAL_GetTick>
 800368a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800368c:	e008      	b.n	80036a0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800368e:	f7fd fae9 	bl	8000c64 <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	2b02      	cmp	r3, #2
 800369a:	d901      	bls.n	80036a0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	e086      	b.n	80037ae <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80036a0:	4b45      	ldr	r3, [pc, #276]	; (80037b8 <RCCEx_PLL2_Config+0x15c>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d1f0      	bne.n	800368e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80036ac:	4b42      	ldr	r3, [pc, #264]	; (80037b8 <RCCEx_PLL2_Config+0x15c>)
 80036ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	031b      	lsls	r3, r3, #12
 80036ba:	493f      	ldr	r1, [pc, #252]	; (80037b8 <RCCEx_PLL2_Config+0x15c>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	628b      	str	r3, [r1, #40]	; 0x28
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	3b01      	subs	r3, #1
 80036c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	3b01      	subs	r3, #1
 80036d0:	025b      	lsls	r3, r3, #9
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	431a      	orrs	r2, r3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	3b01      	subs	r3, #1
 80036dc:	041b      	lsls	r3, r3, #16
 80036de:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80036e2:	431a      	orrs	r2, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	691b      	ldr	r3, [r3, #16]
 80036e8:	3b01      	subs	r3, #1
 80036ea:	061b      	lsls	r3, r3, #24
 80036ec:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80036f0:	4931      	ldr	r1, [pc, #196]	; (80037b8 <RCCEx_PLL2_Config+0x15c>)
 80036f2:	4313      	orrs	r3, r2
 80036f4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80036f6:	4b30      	ldr	r3, [pc, #192]	; (80037b8 <RCCEx_PLL2_Config+0x15c>)
 80036f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036fa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	695b      	ldr	r3, [r3, #20]
 8003702:	492d      	ldr	r1, [pc, #180]	; (80037b8 <RCCEx_PLL2_Config+0x15c>)
 8003704:	4313      	orrs	r3, r2
 8003706:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003708:	4b2b      	ldr	r3, [pc, #172]	; (80037b8 <RCCEx_PLL2_Config+0x15c>)
 800370a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800370c:	f023 0220 	bic.w	r2, r3, #32
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	699b      	ldr	r3, [r3, #24]
 8003714:	4928      	ldr	r1, [pc, #160]	; (80037b8 <RCCEx_PLL2_Config+0x15c>)
 8003716:	4313      	orrs	r3, r2
 8003718:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800371a:	4b27      	ldr	r3, [pc, #156]	; (80037b8 <RCCEx_PLL2_Config+0x15c>)
 800371c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371e:	4a26      	ldr	r2, [pc, #152]	; (80037b8 <RCCEx_PLL2_Config+0x15c>)
 8003720:	f023 0310 	bic.w	r3, r3, #16
 8003724:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003726:	4b24      	ldr	r3, [pc, #144]	; (80037b8 <RCCEx_PLL2_Config+0x15c>)
 8003728:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800372a:	4b24      	ldr	r3, [pc, #144]	; (80037bc <RCCEx_PLL2_Config+0x160>)
 800372c:	4013      	ands	r3, r2
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	69d2      	ldr	r2, [r2, #28]
 8003732:	00d2      	lsls	r2, r2, #3
 8003734:	4920      	ldr	r1, [pc, #128]	; (80037b8 <RCCEx_PLL2_Config+0x15c>)
 8003736:	4313      	orrs	r3, r2
 8003738:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800373a:	4b1f      	ldr	r3, [pc, #124]	; (80037b8 <RCCEx_PLL2_Config+0x15c>)
 800373c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800373e:	4a1e      	ldr	r2, [pc, #120]	; (80037b8 <RCCEx_PLL2_Config+0x15c>)
 8003740:	f043 0310 	orr.w	r3, r3, #16
 8003744:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d106      	bne.n	800375a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800374c:	4b1a      	ldr	r3, [pc, #104]	; (80037b8 <RCCEx_PLL2_Config+0x15c>)
 800374e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003750:	4a19      	ldr	r2, [pc, #100]	; (80037b8 <RCCEx_PLL2_Config+0x15c>)
 8003752:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003756:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003758:	e00f      	b.n	800377a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	2b01      	cmp	r3, #1
 800375e:	d106      	bne.n	800376e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003760:	4b15      	ldr	r3, [pc, #84]	; (80037b8 <RCCEx_PLL2_Config+0x15c>)
 8003762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003764:	4a14      	ldr	r2, [pc, #80]	; (80037b8 <RCCEx_PLL2_Config+0x15c>)
 8003766:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800376a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800376c:	e005      	b.n	800377a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800376e:	4b12      	ldr	r3, [pc, #72]	; (80037b8 <RCCEx_PLL2_Config+0x15c>)
 8003770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003772:	4a11      	ldr	r2, [pc, #68]	; (80037b8 <RCCEx_PLL2_Config+0x15c>)
 8003774:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003778:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800377a:	4b0f      	ldr	r3, [pc, #60]	; (80037b8 <RCCEx_PLL2_Config+0x15c>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a0e      	ldr	r2, [pc, #56]	; (80037b8 <RCCEx_PLL2_Config+0x15c>)
 8003780:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003784:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003786:	f7fd fa6d 	bl	8000c64 <HAL_GetTick>
 800378a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800378c:	e008      	b.n	80037a0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800378e:	f7fd fa69 	bl	8000c64 <HAL_GetTick>
 8003792:	4602      	mov	r2, r0
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	2b02      	cmp	r3, #2
 800379a:	d901      	bls.n	80037a0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	e006      	b.n	80037ae <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80037a0:	4b05      	ldr	r3, [pc, #20]	; (80037b8 <RCCEx_PLL2_Config+0x15c>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d0f0      	beq.n	800378e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80037ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3710      	adds	r7, #16
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	58024400 	.word	0x58024400
 80037bc:	ffff0007 	.word	0xffff0007

080037c0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80037ca:	2300      	movs	r3, #0
 80037cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80037ce:	4b53      	ldr	r3, [pc, #332]	; (800391c <RCCEx_PLL3_Config+0x15c>)
 80037d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d2:	f003 0303 	and.w	r3, r3, #3
 80037d6:	2b03      	cmp	r3, #3
 80037d8:	d101      	bne.n	80037de <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e099      	b.n	8003912 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80037de:	4b4f      	ldr	r3, [pc, #316]	; (800391c <RCCEx_PLL3_Config+0x15c>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a4e      	ldr	r2, [pc, #312]	; (800391c <RCCEx_PLL3_Config+0x15c>)
 80037e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037ea:	f7fd fa3b 	bl	8000c64 <HAL_GetTick>
 80037ee:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80037f0:	e008      	b.n	8003804 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80037f2:	f7fd fa37 	bl	8000c64 <HAL_GetTick>
 80037f6:	4602      	mov	r2, r0
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	2b02      	cmp	r3, #2
 80037fe:	d901      	bls.n	8003804 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003800:	2303      	movs	r3, #3
 8003802:	e086      	b.n	8003912 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003804:	4b45      	ldr	r3, [pc, #276]	; (800391c <RCCEx_PLL3_Config+0x15c>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d1f0      	bne.n	80037f2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003810:	4b42      	ldr	r3, [pc, #264]	; (800391c <RCCEx_PLL3_Config+0x15c>)
 8003812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003814:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	051b      	lsls	r3, r3, #20
 800381e:	493f      	ldr	r1, [pc, #252]	; (800391c <RCCEx_PLL3_Config+0x15c>)
 8003820:	4313      	orrs	r3, r2
 8003822:	628b      	str	r3, [r1, #40]	; 0x28
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	3b01      	subs	r3, #1
 800382a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	3b01      	subs	r3, #1
 8003834:	025b      	lsls	r3, r3, #9
 8003836:	b29b      	uxth	r3, r3
 8003838:	431a      	orrs	r2, r3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	3b01      	subs	r3, #1
 8003840:	041b      	lsls	r3, r3, #16
 8003842:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003846:	431a      	orrs	r2, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	691b      	ldr	r3, [r3, #16]
 800384c:	3b01      	subs	r3, #1
 800384e:	061b      	lsls	r3, r3, #24
 8003850:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003854:	4931      	ldr	r1, [pc, #196]	; (800391c <RCCEx_PLL3_Config+0x15c>)
 8003856:	4313      	orrs	r3, r2
 8003858:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800385a:	4b30      	ldr	r3, [pc, #192]	; (800391c <RCCEx_PLL3_Config+0x15c>)
 800385c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	695b      	ldr	r3, [r3, #20]
 8003866:	492d      	ldr	r1, [pc, #180]	; (800391c <RCCEx_PLL3_Config+0x15c>)
 8003868:	4313      	orrs	r3, r2
 800386a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800386c:	4b2b      	ldr	r3, [pc, #172]	; (800391c <RCCEx_PLL3_Config+0x15c>)
 800386e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003870:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	699b      	ldr	r3, [r3, #24]
 8003878:	4928      	ldr	r1, [pc, #160]	; (800391c <RCCEx_PLL3_Config+0x15c>)
 800387a:	4313      	orrs	r3, r2
 800387c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800387e:	4b27      	ldr	r3, [pc, #156]	; (800391c <RCCEx_PLL3_Config+0x15c>)
 8003880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003882:	4a26      	ldr	r2, [pc, #152]	; (800391c <RCCEx_PLL3_Config+0x15c>)
 8003884:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003888:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800388a:	4b24      	ldr	r3, [pc, #144]	; (800391c <RCCEx_PLL3_Config+0x15c>)
 800388c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800388e:	4b24      	ldr	r3, [pc, #144]	; (8003920 <RCCEx_PLL3_Config+0x160>)
 8003890:	4013      	ands	r3, r2
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	69d2      	ldr	r2, [r2, #28]
 8003896:	00d2      	lsls	r2, r2, #3
 8003898:	4920      	ldr	r1, [pc, #128]	; (800391c <RCCEx_PLL3_Config+0x15c>)
 800389a:	4313      	orrs	r3, r2
 800389c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800389e:	4b1f      	ldr	r3, [pc, #124]	; (800391c <RCCEx_PLL3_Config+0x15c>)
 80038a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a2:	4a1e      	ldr	r2, [pc, #120]	; (800391c <RCCEx_PLL3_Config+0x15c>)
 80038a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d106      	bne.n	80038be <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80038b0:	4b1a      	ldr	r3, [pc, #104]	; (800391c <RCCEx_PLL3_Config+0x15c>)
 80038b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b4:	4a19      	ldr	r2, [pc, #100]	; (800391c <RCCEx_PLL3_Config+0x15c>)
 80038b6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80038ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 80038bc:	e00f      	b.n	80038de <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d106      	bne.n	80038d2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80038c4:	4b15      	ldr	r3, [pc, #84]	; (800391c <RCCEx_PLL3_Config+0x15c>)
 80038c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c8:	4a14      	ldr	r2, [pc, #80]	; (800391c <RCCEx_PLL3_Config+0x15c>)
 80038ca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80038ce:	62d3      	str	r3, [r2, #44]	; 0x2c
 80038d0:	e005      	b.n	80038de <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80038d2:	4b12      	ldr	r3, [pc, #72]	; (800391c <RCCEx_PLL3_Config+0x15c>)
 80038d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d6:	4a11      	ldr	r2, [pc, #68]	; (800391c <RCCEx_PLL3_Config+0x15c>)
 80038d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038dc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80038de:	4b0f      	ldr	r3, [pc, #60]	; (800391c <RCCEx_PLL3_Config+0x15c>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a0e      	ldr	r2, [pc, #56]	; (800391c <RCCEx_PLL3_Config+0x15c>)
 80038e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038ea:	f7fd f9bb 	bl	8000c64 <HAL_GetTick>
 80038ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80038f0:	e008      	b.n	8003904 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80038f2:	f7fd f9b7 	bl	8000c64 <HAL_GetTick>
 80038f6:	4602      	mov	r2, r0
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d901      	bls.n	8003904 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e006      	b.n	8003912 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003904:	4b05      	ldr	r3, [pc, #20]	; (800391c <RCCEx_PLL3_Config+0x15c>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d0f0      	beq.n	80038f2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003910:	7bfb      	ldrb	r3, [r7, #15]
}
 8003912:	4618      	mov	r0, r3
 8003914:	3710      	adds	r7, #16
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	58024400 	.word	0x58024400
 8003920:	ffff0007 	.word	0xffff0007

08003924 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d101      	bne.n	8003936 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e042      	b.n	80039bc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800393c:	2b00      	cmp	r3, #0
 800393e:	d106      	bne.n	800394e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f7fc ffc3 	bl	80008d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2224      	movs	r2, #36	; 0x24
 8003952:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f022 0201 	bic.w	r2, r2, #1
 8003964:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 f8c2 	bl	8003af0 <UART_SetConfig>
 800396c:	4603      	mov	r3, r0
 800396e:	2b01      	cmp	r3, #1
 8003970:	d101      	bne.n	8003976 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e022      	b.n	80039bc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800397a:	2b00      	cmp	r3, #0
 800397c:	d002      	beq.n	8003984 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 fe1e 	bl	80045c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	685a      	ldr	r2, [r3, #4]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003992:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	689a      	ldr	r2, [r3, #8]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f042 0201 	orr.w	r2, r2, #1
 80039b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f000 fea5 	bl	8004704 <UART_CheckIdleState>
 80039ba:	4603      	mov	r3, r0
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3708      	adds	r7, #8
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}

080039c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b08a      	sub	sp, #40	; 0x28
 80039c8:	af02      	add	r7, sp, #8
 80039ca:	60f8      	str	r0, [r7, #12]
 80039cc:	60b9      	str	r1, [r7, #8]
 80039ce:	603b      	str	r3, [r7, #0]
 80039d0:	4613      	mov	r3, r2
 80039d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039da:	2b20      	cmp	r3, #32
 80039dc:	f040 8083 	bne.w	8003ae6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d002      	beq.n	80039ec <HAL_UART_Transmit+0x28>
 80039e6:	88fb      	ldrh	r3, [r7, #6]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d101      	bne.n	80039f0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e07b      	b.n	8003ae8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d101      	bne.n	80039fe <HAL_UART_Transmit+0x3a>
 80039fa:	2302      	movs	r3, #2
 80039fc:	e074      	b.n	8003ae8 <HAL_UART_Transmit+0x124>
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2201      	movs	r2, #1
 8003a02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2221      	movs	r2, #33	; 0x21
 8003a12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a16:	f7fd f925 	bl	8000c64 <HAL_GetTick>
 8003a1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	88fa      	ldrh	r2, [r7, #6]
 8003a20:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	88fa      	ldrh	r2, [r7, #6]
 8003a28:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a34:	d108      	bne.n	8003a48 <HAL_UART_Transmit+0x84>
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d104      	bne.n	8003a48 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	61bb      	str	r3, [r7, #24]
 8003a46:	e003      	b.n	8003a50 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2200      	movs	r2, #0
 8003a54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8003a58:	e02c      	b.n	8003ab4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	9300      	str	r3, [sp, #0]
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	2200      	movs	r2, #0
 8003a62:	2180      	movs	r1, #128	; 0x80
 8003a64:	68f8      	ldr	r0, [r7, #12]
 8003a66:	f000 fe98 	bl	800479a <UART_WaitOnFlagUntilTimeout>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d001      	beq.n	8003a74 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8003a70:	2303      	movs	r3, #3
 8003a72:	e039      	b.n	8003ae8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d10b      	bne.n	8003a92 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	881b      	ldrh	r3, [r3, #0]
 8003a7e:	461a      	mov	r2, r3
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a88:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003a8a:	69bb      	ldr	r3, [r7, #24]
 8003a8c:	3302      	adds	r3, #2
 8003a8e:	61bb      	str	r3, [r7, #24]
 8003a90:	e007      	b.n	8003aa2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	781a      	ldrb	r2, [r3, #0]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	3301      	adds	r3, #1
 8003aa0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	b29a      	uxth	r2, r3
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d1cc      	bne.n	8003a5a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	9300      	str	r3, [sp, #0]
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	2140      	movs	r1, #64	; 0x40
 8003aca:	68f8      	ldr	r0, [r7, #12]
 8003acc:	f000 fe65 	bl	800479a <UART_WaitOnFlagUntilTimeout>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d001      	beq.n	8003ada <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e006      	b.n	8003ae8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2220      	movs	r2, #32
 8003ade:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	e000      	b.n	8003ae8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8003ae6:	2302      	movs	r3, #2
  }
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3720      	adds	r7, #32
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003af0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003af4:	b092      	sub	sp, #72	; 0x48
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003afa:	2300      	movs	r3, #0
 8003afc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	689a      	ldr	r2, [r3, #8]
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	691b      	ldr	r3, [r3, #16]
 8003b08:	431a      	orrs	r2, r3
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	695b      	ldr	r3, [r3, #20]
 8003b0e:	431a      	orrs	r2, r3
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	69db      	ldr	r3, [r3, #28]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	4bbe      	ldr	r3, [pc, #760]	; (8003e18 <UART_SetConfig+0x328>)
 8003b20:	4013      	ands	r3, r2
 8003b22:	697a      	ldr	r2, [r7, #20]
 8003b24:	6812      	ldr	r2, [r2, #0]
 8003b26:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003b28:	430b      	orrs	r3, r1
 8003b2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	68da      	ldr	r2, [r3, #12]
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	430a      	orrs	r2, r1
 8003b40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	699b      	ldr	r3, [r3, #24]
 8003b46:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4ab3      	ldr	r2, [pc, #716]	; (8003e1c <UART_SetConfig+0x32c>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d004      	beq.n	8003b5c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	6a1b      	ldr	r3, [r3, #32]
 8003b56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	689a      	ldr	r2, [r3, #8]
 8003b62:	4baf      	ldr	r3, [pc, #700]	; (8003e20 <UART_SetConfig+0x330>)
 8003b64:	4013      	ands	r3, r2
 8003b66:	697a      	ldr	r2, [r7, #20]
 8003b68:	6812      	ldr	r2, [r2, #0]
 8003b6a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003b6c:	430b      	orrs	r3, r1
 8003b6e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b76:	f023 010f 	bic.w	r1, r3, #15
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	430a      	orrs	r2, r1
 8003b84:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4aa6      	ldr	r2, [pc, #664]	; (8003e24 <UART_SetConfig+0x334>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d177      	bne.n	8003c80 <UART_SetConfig+0x190>
 8003b90:	4ba5      	ldr	r3, [pc, #660]	; (8003e28 <UART_SetConfig+0x338>)
 8003b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b94:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b98:	2b28      	cmp	r3, #40	; 0x28
 8003b9a:	d86d      	bhi.n	8003c78 <UART_SetConfig+0x188>
 8003b9c:	a201      	add	r2, pc, #4	; (adr r2, 8003ba4 <UART_SetConfig+0xb4>)
 8003b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ba2:	bf00      	nop
 8003ba4:	08003c49 	.word	0x08003c49
 8003ba8:	08003c79 	.word	0x08003c79
 8003bac:	08003c79 	.word	0x08003c79
 8003bb0:	08003c79 	.word	0x08003c79
 8003bb4:	08003c79 	.word	0x08003c79
 8003bb8:	08003c79 	.word	0x08003c79
 8003bbc:	08003c79 	.word	0x08003c79
 8003bc0:	08003c79 	.word	0x08003c79
 8003bc4:	08003c51 	.word	0x08003c51
 8003bc8:	08003c79 	.word	0x08003c79
 8003bcc:	08003c79 	.word	0x08003c79
 8003bd0:	08003c79 	.word	0x08003c79
 8003bd4:	08003c79 	.word	0x08003c79
 8003bd8:	08003c79 	.word	0x08003c79
 8003bdc:	08003c79 	.word	0x08003c79
 8003be0:	08003c79 	.word	0x08003c79
 8003be4:	08003c59 	.word	0x08003c59
 8003be8:	08003c79 	.word	0x08003c79
 8003bec:	08003c79 	.word	0x08003c79
 8003bf0:	08003c79 	.word	0x08003c79
 8003bf4:	08003c79 	.word	0x08003c79
 8003bf8:	08003c79 	.word	0x08003c79
 8003bfc:	08003c79 	.word	0x08003c79
 8003c00:	08003c79 	.word	0x08003c79
 8003c04:	08003c61 	.word	0x08003c61
 8003c08:	08003c79 	.word	0x08003c79
 8003c0c:	08003c79 	.word	0x08003c79
 8003c10:	08003c79 	.word	0x08003c79
 8003c14:	08003c79 	.word	0x08003c79
 8003c18:	08003c79 	.word	0x08003c79
 8003c1c:	08003c79 	.word	0x08003c79
 8003c20:	08003c79 	.word	0x08003c79
 8003c24:	08003c69 	.word	0x08003c69
 8003c28:	08003c79 	.word	0x08003c79
 8003c2c:	08003c79 	.word	0x08003c79
 8003c30:	08003c79 	.word	0x08003c79
 8003c34:	08003c79 	.word	0x08003c79
 8003c38:	08003c79 	.word	0x08003c79
 8003c3c:	08003c79 	.word	0x08003c79
 8003c40:	08003c79 	.word	0x08003c79
 8003c44:	08003c71 	.word	0x08003c71
 8003c48:	2301      	movs	r3, #1
 8003c4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003c4e:	e222      	b.n	8004096 <UART_SetConfig+0x5a6>
 8003c50:	2304      	movs	r3, #4
 8003c52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003c56:	e21e      	b.n	8004096 <UART_SetConfig+0x5a6>
 8003c58:	2308      	movs	r3, #8
 8003c5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003c5e:	e21a      	b.n	8004096 <UART_SetConfig+0x5a6>
 8003c60:	2310      	movs	r3, #16
 8003c62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003c66:	e216      	b.n	8004096 <UART_SetConfig+0x5a6>
 8003c68:	2320      	movs	r3, #32
 8003c6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003c6e:	e212      	b.n	8004096 <UART_SetConfig+0x5a6>
 8003c70:	2340      	movs	r3, #64	; 0x40
 8003c72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003c76:	e20e      	b.n	8004096 <UART_SetConfig+0x5a6>
 8003c78:	2380      	movs	r3, #128	; 0x80
 8003c7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003c7e:	e20a      	b.n	8004096 <UART_SetConfig+0x5a6>
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a69      	ldr	r2, [pc, #420]	; (8003e2c <UART_SetConfig+0x33c>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d130      	bne.n	8003cec <UART_SetConfig+0x1fc>
 8003c8a:	4b67      	ldr	r3, [pc, #412]	; (8003e28 <UART_SetConfig+0x338>)
 8003c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c8e:	f003 0307 	and.w	r3, r3, #7
 8003c92:	2b05      	cmp	r3, #5
 8003c94:	d826      	bhi.n	8003ce4 <UART_SetConfig+0x1f4>
 8003c96:	a201      	add	r2, pc, #4	; (adr r2, 8003c9c <UART_SetConfig+0x1ac>)
 8003c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c9c:	08003cb5 	.word	0x08003cb5
 8003ca0:	08003cbd 	.word	0x08003cbd
 8003ca4:	08003cc5 	.word	0x08003cc5
 8003ca8:	08003ccd 	.word	0x08003ccd
 8003cac:	08003cd5 	.word	0x08003cd5
 8003cb0:	08003cdd 	.word	0x08003cdd
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003cba:	e1ec      	b.n	8004096 <UART_SetConfig+0x5a6>
 8003cbc:	2304      	movs	r3, #4
 8003cbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003cc2:	e1e8      	b.n	8004096 <UART_SetConfig+0x5a6>
 8003cc4:	2308      	movs	r3, #8
 8003cc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003cca:	e1e4      	b.n	8004096 <UART_SetConfig+0x5a6>
 8003ccc:	2310      	movs	r3, #16
 8003cce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003cd2:	e1e0      	b.n	8004096 <UART_SetConfig+0x5a6>
 8003cd4:	2320      	movs	r3, #32
 8003cd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003cda:	e1dc      	b.n	8004096 <UART_SetConfig+0x5a6>
 8003cdc:	2340      	movs	r3, #64	; 0x40
 8003cde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003ce2:	e1d8      	b.n	8004096 <UART_SetConfig+0x5a6>
 8003ce4:	2380      	movs	r3, #128	; 0x80
 8003ce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003cea:	e1d4      	b.n	8004096 <UART_SetConfig+0x5a6>
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a4f      	ldr	r2, [pc, #316]	; (8003e30 <UART_SetConfig+0x340>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d130      	bne.n	8003d58 <UART_SetConfig+0x268>
 8003cf6:	4b4c      	ldr	r3, [pc, #304]	; (8003e28 <UART_SetConfig+0x338>)
 8003cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cfa:	f003 0307 	and.w	r3, r3, #7
 8003cfe:	2b05      	cmp	r3, #5
 8003d00:	d826      	bhi.n	8003d50 <UART_SetConfig+0x260>
 8003d02:	a201      	add	r2, pc, #4	; (adr r2, 8003d08 <UART_SetConfig+0x218>)
 8003d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d08:	08003d21 	.word	0x08003d21
 8003d0c:	08003d29 	.word	0x08003d29
 8003d10:	08003d31 	.word	0x08003d31
 8003d14:	08003d39 	.word	0x08003d39
 8003d18:	08003d41 	.word	0x08003d41
 8003d1c:	08003d49 	.word	0x08003d49
 8003d20:	2300      	movs	r3, #0
 8003d22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003d26:	e1b6      	b.n	8004096 <UART_SetConfig+0x5a6>
 8003d28:	2304      	movs	r3, #4
 8003d2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003d2e:	e1b2      	b.n	8004096 <UART_SetConfig+0x5a6>
 8003d30:	2308      	movs	r3, #8
 8003d32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003d36:	e1ae      	b.n	8004096 <UART_SetConfig+0x5a6>
 8003d38:	2310      	movs	r3, #16
 8003d3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003d3e:	e1aa      	b.n	8004096 <UART_SetConfig+0x5a6>
 8003d40:	2320      	movs	r3, #32
 8003d42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003d46:	e1a6      	b.n	8004096 <UART_SetConfig+0x5a6>
 8003d48:	2340      	movs	r3, #64	; 0x40
 8003d4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003d4e:	e1a2      	b.n	8004096 <UART_SetConfig+0x5a6>
 8003d50:	2380      	movs	r3, #128	; 0x80
 8003d52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003d56:	e19e      	b.n	8004096 <UART_SetConfig+0x5a6>
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a35      	ldr	r2, [pc, #212]	; (8003e34 <UART_SetConfig+0x344>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d130      	bne.n	8003dc4 <UART_SetConfig+0x2d4>
 8003d62:	4b31      	ldr	r3, [pc, #196]	; (8003e28 <UART_SetConfig+0x338>)
 8003d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d66:	f003 0307 	and.w	r3, r3, #7
 8003d6a:	2b05      	cmp	r3, #5
 8003d6c:	d826      	bhi.n	8003dbc <UART_SetConfig+0x2cc>
 8003d6e:	a201      	add	r2, pc, #4	; (adr r2, 8003d74 <UART_SetConfig+0x284>)
 8003d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d74:	08003d8d 	.word	0x08003d8d
 8003d78:	08003d95 	.word	0x08003d95
 8003d7c:	08003d9d 	.word	0x08003d9d
 8003d80:	08003da5 	.word	0x08003da5
 8003d84:	08003dad 	.word	0x08003dad
 8003d88:	08003db5 	.word	0x08003db5
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003d92:	e180      	b.n	8004096 <UART_SetConfig+0x5a6>
 8003d94:	2304      	movs	r3, #4
 8003d96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003d9a:	e17c      	b.n	8004096 <UART_SetConfig+0x5a6>
 8003d9c:	2308      	movs	r3, #8
 8003d9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003da2:	e178      	b.n	8004096 <UART_SetConfig+0x5a6>
 8003da4:	2310      	movs	r3, #16
 8003da6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003daa:	e174      	b.n	8004096 <UART_SetConfig+0x5a6>
 8003dac:	2320      	movs	r3, #32
 8003dae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003db2:	e170      	b.n	8004096 <UART_SetConfig+0x5a6>
 8003db4:	2340      	movs	r3, #64	; 0x40
 8003db6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003dba:	e16c      	b.n	8004096 <UART_SetConfig+0x5a6>
 8003dbc:	2380      	movs	r3, #128	; 0x80
 8003dbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003dc2:	e168      	b.n	8004096 <UART_SetConfig+0x5a6>
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a1b      	ldr	r2, [pc, #108]	; (8003e38 <UART_SetConfig+0x348>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d142      	bne.n	8003e54 <UART_SetConfig+0x364>
 8003dce:	4b16      	ldr	r3, [pc, #88]	; (8003e28 <UART_SetConfig+0x338>)
 8003dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dd2:	f003 0307 	and.w	r3, r3, #7
 8003dd6:	2b05      	cmp	r3, #5
 8003dd8:	d838      	bhi.n	8003e4c <UART_SetConfig+0x35c>
 8003dda:	a201      	add	r2, pc, #4	; (adr r2, 8003de0 <UART_SetConfig+0x2f0>)
 8003ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003de0:	08003df9 	.word	0x08003df9
 8003de4:	08003e01 	.word	0x08003e01
 8003de8:	08003e09 	.word	0x08003e09
 8003dec:	08003e11 	.word	0x08003e11
 8003df0:	08003e3d 	.word	0x08003e3d
 8003df4:	08003e45 	.word	0x08003e45
 8003df8:	2300      	movs	r3, #0
 8003dfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003dfe:	e14a      	b.n	8004096 <UART_SetConfig+0x5a6>
 8003e00:	2304      	movs	r3, #4
 8003e02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003e06:	e146      	b.n	8004096 <UART_SetConfig+0x5a6>
 8003e08:	2308      	movs	r3, #8
 8003e0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003e0e:	e142      	b.n	8004096 <UART_SetConfig+0x5a6>
 8003e10:	2310      	movs	r3, #16
 8003e12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003e16:	e13e      	b.n	8004096 <UART_SetConfig+0x5a6>
 8003e18:	cfff69f3 	.word	0xcfff69f3
 8003e1c:	58000c00 	.word	0x58000c00
 8003e20:	11fff4ff 	.word	0x11fff4ff
 8003e24:	40011000 	.word	0x40011000
 8003e28:	58024400 	.word	0x58024400
 8003e2c:	40004400 	.word	0x40004400
 8003e30:	40004800 	.word	0x40004800
 8003e34:	40004c00 	.word	0x40004c00
 8003e38:	40005000 	.word	0x40005000
 8003e3c:	2320      	movs	r3, #32
 8003e3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003e42:	e128      	b.n	8004096 <UART_SetConfig+0x5a6>
 8003e44:	2340      	movs	r3, #64	; 0x40
 8003e46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003e4a:	e124      	b.n	8004096 <UART_SetConfig+0x5a6>
 8003e4c:	2380      	movs	r3, #128	; 0x80
 8003e4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003e52:	e120      	b.n	8004096 <UART_SetConfig+0x5a6>
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4acb      	ldr	r2, [pc, #812]	; (8004188 <UART_SetConfig+0x698>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d176      	bne.n	8003f4c <UART_SetConfig+0x45c>
 8003e5e:	4bcb      	ldr	r3, [pc, #812]	; (800418c <UART_SetConfig+0x69c>)
 8003e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e66:	2b28      	cmp	r3, #40	; 0x28
 8003e68:	d86c      	bhi.n	8003f44 <UART_SetConfig+0x454>
 8003e6a:	a201      	add	r2, pc, #4	; (adr r2, 8003e70 <UART_SetConfig+0x380>)
 8003e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e70:	08003f15 	.word	0x08003f15
 8003e74:	08003f45 	.word	0x08003f45
 8003e78:	08003f45 	.word	0x08003f45
 8003e7c:	08003f45 	.word	0x08003f45
 8003e80:	08003f45 	.word	0x08003f45
 8003e84:	08003f45 	.word	0x08003f45
 8003e88:	08003f45 	.word	0x08003f45
 8003e8c:	08003f45 	.word	0x08003f45
 8003e90:	08003f1d 	.word	0x08003f1d
 8003e94:	08003f45 	.word	0x08003f45
 8003e98:	08003f45 	.word	0x08003f45
 8003e9c:	08003f45 	.word	0x08003f45
 8003ea0:	08003f45 	.word	0x08003f45
 8003ea4:	08003f45 	.word	0x08003f45
 8003ea8:	08003f45 	.word	0x08003f45
 8003eac:	08003f45 	.word	0x08003f45
 8003eb0:	08003f25 	.word	0x08003f25
 8003eb4:	08003f45 	.word	0x08003f45
 8003eb8:	08003f45 	.word	0x08003f45
 8003ebc:	08003f45 	.word	0x08003f45
 8003ec0:	08003f45 	.word	0x08003f45
 8003ec4:	08003f45 	.word	0x08003f45
 8003ec8:	08003f45 	.word	0x08003f45
 8003ecc:	08003f45 	.word	0x08003f45
 8003ed0:	08003f2d 	.word	0x08003f2d
 8003ed4:	08003f45 	.word	0x08003f45
 8003ed8:	08003f45 	.word	0x08003f45
 8003edc:	08003f45 	.word	0x08003f45
 8003ee0:	08003f45 	.word	0x08003f45
 8003ee4:	08003f45 	.word	0x08003f45
 8003ee8:	08003f45 	.word	0x08003f45
 8003eec:	08003f45 	.word	0x08003f45
 8003ef0:	08003f35 	.word	0x08003f35
 8003ef4:	08003f45 	.word	0x08003f45
 8003ef8:	08003f45 	.word	0x08003f45
 8003efc:	08003f45 	.word	0x08003f45
 8003f00:	08003f45 	.word	0x08003f45
 8003f04:	08003f45 	.word	0x08003f45
 8003f08:	08003f45 	.word	0x08003f45
 8003f0c:	08003f45 	.word	0x08003f45
 8003f10:	08003f3d 	.word	0x08003f3d
 8003f14:	2301      	movs	r3, #1
 8003f16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f1a:	e0bc      	b.n	8004096 <UART_SetConfig+0x5a6>
 8003f1c:	2304      	movs	r3, #4
 8003f1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f22:	e0b8      	b.n	8004096 <UART_SetConfig+0x5a6>
 8003f24:	2308      	movs	r3, #8
 8003f26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f2a:	e0b4      	b.n	8004096 <UART_SetConfig+0x5a6>
 8003f2c:	2310      	movs	r3, #16
 8003f2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f32:	e0b0      	b.n	8004096 <UART_SetConfig+0x5a6>
 8003f34:	2320      	movs	r3, #32
 8003f36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f3a:	e0ac      	b.n	8004096 <UART_SetConfig+0x5a6>
 8003f3c:	2340      	movs	r3, #64	; 0x40
 8003f3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f42:	e0a8      	b.n	8004096 <UART_SetConfig+0x5a6>
 8003f44:	2380      	movs	r3, #128	; 0x80
 8003f46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f4a:	e0a4      	b.n	8004096 <UART_SetConfig+0x5a6>
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a8f      	ldr	r2, [pc, #572]	; (8004190 <UART_SetConfig+0x6a0>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d130      	bne.n	8003fb8 <UART_SetConfig+0x4c8>
 8003f56:	4b8d      	ldr	r3, [pc, #564]	; (800418c <UART_SetConfig+0x69c>)
 8003f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f5a:	f003 0307 	and.w	r3, r3, #7
 8003f5e:	2b05      	cmp	r3, #5
 8003f60:	d826      	bhi.n	8003fb0 <UART_SetConfig+0x4c0>
 8003f62:	a201      	add	r2, pc, #4	; (adr r2, 8003f68 <UART_SetConfig+0x478>)
 8003f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f68:	08003f81 	.word	0x08003f81
 8003f6c:	08003f89 	.word	0x08003f89
 8003f70:	08003f91 	.word	0x08003f91
 8003f74:	08003f99 	.word	0x08003f99
 8003f78:	08003fa1 	.word	0x08003fa1
 8003f7c:	08003fa9 	.word	0x08003fa9
 8003f80:	2300      	movs	r3, #0
 8003f82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f86:	e086      	b.n	8004096 <UART_SetConfig+0x5a6>
 8003f88:	2304      	movs	r3, #4
 8003f8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f8e:	e082      	b.n	8004096 <UART_SetConfig+0x5a6>
 8003f90:	2308      	movs	r3, #8
 8003f92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f96:	e07e      	b.n	8004096 <UART_SetConfig+0x5a6>
 8003f98:	2310      	movs	r3, #16
 8003f9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f9e:	e07a      	b.n	8004096 <UART_SetConfig+0x5a6>
 8003fa0:	2320      	movs	r3, #32
 8003fa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003fa6:	e076      	b.n	8004096 <UART_SetConfig+0x5a6>
 8003fa8:	2340      	movs	r3, #64	; 0x40
 8003faa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003fae:	e072      	b.n	8004096 <UART_SetConfig+0x5a6>
 8003fb0:	2380      	movs	r3, #128	; 0x80
 8003fb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003fb6:	e06e      	b.n	8004096 <UART_SetConfig+0x5a6>
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a75      	ldr	r2, [pc, #468]	; (8004194 <UART_SetConfig+0x6a4>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d130      	bne.n	8004024 <UART_SetConfig+0x534>
 8003fc2:	4b72      	ldr	r3, [pc, #456]	; (800418c <UART_SetConfig+0x69c>)
 8003fc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fc6:	f003 0307 	and.w	r3, r3, #7
 8003fca:	2b05      	cmp	r3, #5
 8003fcc:	d826      	bhi.n	800401c <UART_SetConfig+0x52c>
 8003fce:	a201      	add	r2, pc, #4	; (adr r2, 8003fd4 <UART_SetConfig+0x4e4>)
 8003fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fd4:	08003fed 	.word	0x08003fed
 8003fd8:	08003ff5 	.word	0x08003ff5
 8003fdc:	08003ffd 	.word	0x08003ffd
 8003fe0:	08004005 	.word	0x08004005
 8003fe4:	0800400d 	.word	0x0800400d
 8003fe8:	08004015 	.word	0x08004015
 8003fec:	2300      	movs	r3, #0
 8003fee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003ff2:	e050      	b.n	8004096 <UART_SetConfig+0x5a6>
 8003ff4:	2304      	movs	r3, #4
 8003ff6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003ffa:	e04c      	b.n	8004096 <UART_SetConfig+0x5a6>
 8003ffc:	2308      	movs	r3, #8
 8003ffe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004002:	e048      	b.n	8004096 <UART_SetConfig+0x5a6>
 8004004:	2310      	movs	r3, #16
 8004006:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800400a:	e044      	b.n	8004096 <UART_SetConfig+0x5a6>
 800400c:	2320      	movs	r3, #32
 800400e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004012:	e040      	b.n	8004096 <UART_SetConfig+0x5a6>
 8004014:	2340      	movs	r3, #64	; 0x40
 8004016:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800401a:	e03c      	b.n	8004096 <UART_SetConfig+0x5a6>
 800401c:	2380      	movs	r3, #128	; 0x80
 800401e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004022:	e038      	b.n	8004096 <UART_SetConfig+0x5a6>
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a5b      	ldr	r2, [pc, #364]	; (8004198 <UART_SetConfig+0x6a8>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d130      	bne.n	8004090 <UART_SetConfig+0x5a0>
 800402e:	4b57      	ldr	r3, [pc, #348]	; (800418c <UART_SetConfig+0x69c>)
 8004030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004032:	f003 0307 	and.w	r3, r3, #7
 8004036:	2b05      	cmp	r3, #5
 8004038:	d826      	bhi.n	8004088 <UART_SetConfig+0x598>
 800403a:	a201      	add	r2, pc, #4	; (adr r2, 8004040 <UART_SetConfig+0x550>)
 800403c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004040:	08004059 	.word	0x08004059
 8004044:	08004061 	.word	0x08004061
 8004048:	08004069 	.word	0x08004069
 800404c:	08004071 	.word	0x08004071
 8004050:	08004079 	.word	0x08004079
 8004054:	08004081 	.word	0x08004081
 8004058:	2302      	movs	r3, #2
 800405a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800405e:	e01a      	b.n	8004096 <UART_SetConfig+0x5a6>
 8004060:	2304      	movs	r3, #4
 8004062:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004066:	e016      	b.n	8004096 <UART_SetConfig+0x5a6>
 8004068:	2308      	movs	r3, #8
 800406a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800406e:	e012      	b.n	8004096 <UART_SetConfig+0x5a6>
 8004070:	2310      	movs	r3, #16
 8004072:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004076:	e00e      	b.n	8004096 <UART_SetConfig+0x5a6>
 8004078:	2320      	movs	r3, #32
 800407a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800407e:	e00a      	b.n	8004096 <UART_SetConfig+0x5a6>
 8004080:	2340      	movs	r3, #64	; 0x40
 8004082:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004086:	e006      	b.n	8004096 <UART_SetConfig+0x5a6>
 8004088:	2380      	movs	r3, #128	; 0x80
 800408a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800408e:	e002      	b.n	8004096 <UART_SetConfig+0x5a6>
 8004090:	2380      	movs	r3, #128	; 0x80
 8004092:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a3f      	ldr	r2, [pc, #252]	; (8004198 <UART_SetConfig+0x6a8>)
 800409c:	4293      	cmp	r3, r2
 800409e:	f040 80f8 	bne.w	8004292 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80040a2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80040a6:	2b20      	cmp	r3, #32
 80040a8:	dc46      	bgt.n	8004138 <UART_SetConfig+0x648>
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	f2c0 8082 	blt.w	80041b4 <UART_SetConfig+0x6c4>
 80040b0:	3b02      	subs	r3, #2
 80040b2:	2b1e      	cmp	r3, #30
 80040b4:	d87e      	bhi.n	80041b4 <UART_SetConfig+0x6c4>
 80040b6:	a201      	add	r2, pc, #4	; (adr r2, 80040bc <UART_SetConfig+0x5cc>)
 80040b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040bc:	0800413f 	.word	0x0800413f
 80040c0:	080041b5 	.word	0x080041b5
 80040c4:	08004147 	.word	0x08004147
 80040c8:	080041b5 	.word	0x080041b5
 80040cc:	080041b5 	.word	0x080041b5
 80040d0:	080041b5 	.word	0x080041b5
 80040d4:	08004157 	.word	0x08004157
 80040d8:	080041b5 	.word	0x080041b5
 80040dc:	080041b5 	.word	0x080041b5
 80040e0:	080041b5 	.word	0x080041b5
 80040e4:	080041b5 	.word	0x080041b5
 80040e8:	080041b5 	.word	0x080041b5
 80040ec:	080041b5 	.word	0x080041b5
 80040f0:	080041b5 	.word	0x080041b5
 80040f4:	08004167 	.word	0x08004167
 80040f8:	080041b5 	.word	0x080041b5
 80040fc:	080041b5 	.word	0x080041b5
 8004100:	080041b5 	.word	0x080041b5
 8004104:	080041b5 	.word	0x080041b5
 8004108:	080041b5 	.word	0x080041b5
 800410c:	080041b5 	.word	0x080041b5
 8004110:	080041b5 	.word	0x080041b5
 8004114:	080041b5 	.word	0x080041b5
 8004118:	080041b5 	.word	0x080041b5
 800411c:	080041b5 	.word	0x080041b5
 8004120:	080041b5 	.word	0x080041b5
 8004124:	080041b5 	.word	0x080041b5
 8004128:	080041b5 	.word	0x080041b5
 800412c:	080041b5 	.word	0x080041b5
 8004130:	080041b5 	.word	0x080041b5
 8004134:	080041a7 	.word	0x080041a7
 8004138:	2b40      	cmp	r3, #64	; 0x40
 800413a:	d037      	beq.n	80041ac <UART_SetConfig+0x6bc>
 800413c:	e03a      	b.n	80041b4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800413e:	f7fe ffcf 	bl	80030e0 <HAL_RCCEx_GetD3PCLK1Freq>
 8004142:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004144:	e03c      	b.n	80041c0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004146:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800414a:	4618      	mov	r0, r3
 800414c:	f7fe ffde 	bl	800310c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004152:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004154:	e034      	b.n	80041c0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004156:	f107 0318 	add.w	r3, r7, #24
 800415a:	4618      	mov	r0, r3
 800415c:	f7ff f92a 	bl	80033b4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004164:	e02c      	b.n	80041c0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004166:	4b09      	ldr	r3, [pc, #36]	; (800418c <UART_SetConfig+0x69c>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0320 	and.w	r3, r3, #32
 800416e:	2b00      	cmp	r3, #0
 8004170:	d016      	beq.n	80041a0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004172:	4b06      	ldr	r3, [pc, #24]	; (800418c <UART_SetConfig+0x69c>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	08db      	lsrs	r3, r3, #3
 8004178:	f003 0303 	and.w	r3, r3, #3
 800417c:	4a07      	ldr	r2, [pc, #28]	; (800419c <UART_SetConfig+0x6ac>)
 800417e:	fa22 f303 	lsr.w	r3, r2, r3
 8004182:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004184:	e01c      	b.n	80041c0 <UART_SetConfig+0x6d0>
 8004186:	bf00      	nop
 8004188:	40011400 	.word	0x40011400
 800418c:	58024400 	.word	0x58024400
 8004190:	40007800 	.word	0x40007800
 8004194:	40007c00 	.word	0x40007c00
 8004198:	58000c00 	.word	0x58000c00
 800419c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80041a0:	4b9d      	ldr	r3, [pc, #628]	; (8004418 <UART_SetConfig+0x928>)
 80041a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80041a4:	e00c      	b.n	80041c0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80041a6:	4b9d      	ldr	r3, [pc, #628]	; (800441c <UART_SetConfig+0x92c>)
 80041a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80041aa:	e009      	b.n	80041c0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80041b2:	e005      	b.n	80041c0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80041b4:	2300      	movs	r3, #0
 80041b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80041be:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80041c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	f000 81de 	beq.w	8004584 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041cc:	4a94      	ldr	r2, [pc, #592]	; (8004420 <UART_SetConfig+0x930>)
 80041ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80041d2:	461a      	mov	r2, r3
 80041d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80041da:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	685a      	ldr	r2, [r3, #4]
 80041e0:	4613      	mov	r3, r2
 80041e2:	005b      	lsls	r3, r3, #1
 80041e4:	4413      	add	r3, r2
 80041e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d305      	bcc.n	80041f8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80041f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d903      	bls.n	8004200 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80041fe:	e1c1      	b.n	8004584 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004200:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004202:	2200      	movs	r2, #0
 8004204:	60bb      	str	r3, [r7, #8]
 8004206:	60fa      	str	r2, [r7, #12]
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420c:	4a84      	ldr	r2, [pc, #528]	; (8004420 <UART_SetConfig+0x930>)
 800420e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004212:	b29b      	uxth	r3, r3
 8004214:	2200      	movs	r2, #0
 8004216:	603b      	str	r3, [r7, #0]
 8004218:	607a      	str	r2, [r7, #4]
 800421a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800421e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004222:	f7fc f859 	bl	80002d8 <__aeabi_uldivmod>
 8004226:	4602      	mov	r2, r0
 8004228:	460b      	mov	r3, r1
 800422a:	4610      	mov	r0, r2
 800422c:	4619      	mov	r1, r3
 800422e:	f04f 0200 	mov.w	r2, #0
 8004232:	f04f 0300 	mov.w	r3, #0
 8004236:	020b      	lsls	r3, r1, #8
 8004238:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800423c:	0202      	lsls	r2, r0, #8
 800423e:	6979      	ldr	r1, [r7, #20]
 8004240:	6849      	ldr	r1, [r1, #4]
 8004242:	0849      	lsrs	r1, r1, #1
 8004244:	2000      	movs	r0, #0
 8004246:	460c      	mov	r4, r1
 8004248:	4605      	mov	r5, r0
 800424a:	eb12 0804 	adds.w	r8, r2, r4
 800424e:	eb43 0905 	adc.w	r9, r3, r5
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	469a      	mov	sl, r3
 800425a:	4693      	mov	fp, r2
 800425c:	4652      	mov	r2, sl
 800425e:	465b      	mov	r3, fp
 8004260:	4640      	mov	r0, r8
 8004262:	4649      	mov	r1, r9
 8004264:	f7fc f838 	bl	80002d8 <__aeabi_uldivmod>
 8004268:	4602      	mov	r2, r0
 800426a:	460b      	mov	r3, r1
 800426c:	4613      	mov	r3, r2
 800426e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004272:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004276:	d308      	bcc.n	800428a <UART_SetConfig+0x79a>
 8004278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800427a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800427e:	d204      	bcs.n	800428a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004286:	60da      	str	r2, [r3, #12]
 8004288:	e17c      	b.n	8004584 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004290:	e178      	b.n	8004584 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	69db      	ldr	r3, [r3, #28]
 8004296:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800429a:	f040 80c5 	bne.w	8004428 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800429e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80042a2:	2b20      	cmp	r3, #32
 80042a4:	dc48      	bgt.n	8004338 <UART_SetConfig+0x848>
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	db7b      	blt.n	80043a2 <UART_SetConfig+0x8b2>
 80042aa:	2b20      	cmp	r3, #32
 80042ac:	d879      	bhi.n	80043a2 <UART_SetConfig+0x8b2>
 80042ae:	a201      	add	r2, pc, #4	; (adr r2, 80042b4 <UART_SetConfig+0x7c4>)
 80042b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042b4:	0800433f 	.word	0x0800433f
 80042b8:	08004347 	.word	0x08004347
 80042bc:	080043a3 	.word	0x080043a3
 80042c0:	080043a3 	.word	0x080043a3
 80042c4:	0800434f 	.word	0x0800434f
 80042c8:	080043a3 	.word	0x080043a3
 80042cc:	080043a3 	.word	0x080043a3
 80042d0:	080043a3 	.word	0x080043a3
 80042d4:	0800435f 	.word	0x0800435f
 80042d8:	080043a3 	.word	0x080043a3
 80042dc:	080043a3 	.word	0x080043a3
 80042e0:	080043a3 	.word	0x080043a3
 80042e4:	080043a3 	.word	0x080043a3
 80042e8:	080043a3 	.word	0x080043a3
 80042ec:	080043a3 	.word	0x080043a3
 80042f0:	080043a3 	.word	0x080043a3
 80042f4:	0800436f 	.word	0x0800436f
 80042f8:	080043a3 	.word	0x080043a3
 80042fc:	080043a3 	.word	0x080043a3
 8004300:	080043a3 	.word	0x080043a3
 8004304:	080043a3 	.word	0x080043a3
 8004308:	080043a3 	.word	0x080043a3
 800430c:	080043a3 	.word	0x080043a3
 8004310:	080043a3 	.word	0x080043a3
 8004314:	080043a3 	.word	0x080043a3
 8004318:	080043a3 	.word	0x080043a3
 800431c:	080043a3 	.word	0x080043a3
 8004320:	080043a3 	.word	0x080043a3
 8004324:	080043a3 	.word	0x080043a3
 8004328:	080043a3 	.word	0x080043a3
 800432c:	080043a3 	.word	0x080043a3
 8004330:	080043a3 	.word	0x080043a3
 8004334:	08004395 	.word	0x08004395
 8004338:	2b40      	cmp	r3, #64	; 0x40
 800433a:	d02e      	beq.n	800439a <UART_SetConfig+0x8aa>
 800433c:	e031      	b.n	80043a2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800433e:	f7fd ff5d 	bl	80021fc <HAL_RCC_GetPCLK1Freq>
 8004342:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004344:	e033      	b.n	80043ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004346:	f7fd ff6f 	bl	8002228 <HAL_RCC_GetPCLK2Freq>
 800434a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800434c:	e02f      	b.n	80043ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800434e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004352:	4618      	mov	r0, r3
 8004354:	f7fe feda 	bl	800310c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800435a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800435c:	e027      	b.n	80043ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800435e:	f107 0318 	add.w	r3, r7, #24
 8004362:	4618      	mov	r0, r3
 8004364:	f7ff f826 	bl	80033b4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004368:	69fb      	ldr	r3, [r7, #28]
 800436a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800436c:	e01f      	b.n	80043ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800436e:	4b2d      	ldr	r3, [pc, #180]	; (8004424 <UART_SetConfig+0x934>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0320 	and.w	r3, r3, #32
 8004376:	2b00      	cmp	r3, #0
 8004378:	d009      	beq.n	800438e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800437a:	4b2a      	ldr	r3, [pc, #168]	; (8004424 <UART_SetConfig+0x934>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	08db      	lsrs	r3, r3, #3
 8004380:	f003 0303 	and.w	r3, r3, #3
 8004384:	4a24      	ldr	r2, [pc, #144]	; (8004418 <UART_SetConfig+0x928>)
 8004386:	fa22 f303 	lsr.w	r3, r2, r3
 800438a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800438c:	e00f      	b.n	80043ae <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800438e:	4b22      	ldr	r3, [pc, #136]	; (8004418 <UART_SetConfig+0x928>)
 8004390:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004392:	e00c      	b.n	80043ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004394:	4b21      	ldr	r3, [pc, #132]	; (800441c <UART_SetConfig+0x92c>)
 8004396:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004398:	e009      	b.n	80043ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800439a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800439e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80043a0:	e005      	b.n	80043ae <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80043a2:	2300      	movs	r3, #0
 80043a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80043ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80043ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	f000 80e7 	beq.w	8004584 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ba:	4a19      	ldr	r2, [pc, #100]	; (8004420 <UART_SetConfig+0x930>)
 80043bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80043c0:	461a      	mov	r2, r3
 80043c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80043c8:	005a      	lsls	r2, r3, #1
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	085b      	lsrs	r3, r3, #1
 80043d0:	441a      	add	r2, r3
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80043da:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043de:	2b0f      	cmp	r3, #15
 80043e0:	d916      	bls.n	8004410 <UART_SetConfig+0x920>
 80043e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043e8:	d212      	bcs.n	8004410 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80043ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	f023 030f 	bic.w	r3, r3, #15
 80043f2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80043f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043f6:	085b      	lsrs	r3, r3, #1
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	f003 0307 	and.w	r3, r3, #7
 80043fe:	b29a      	uxth	r2, r3
 8004400:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004402:	4313      	orrs	r3, r2
 8004404:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800440c:	60da      	str	r2, [r3, #12]
 800440e:	e0b9      	b.n	8004584 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004416:	e0b5      	b.n	8004584 <UART_SetConfig+0xa94>
 8004418:	03d09000 	.word	0x03d09000
 800441c:	003d0900 	.word	0x003d0900
 8004420:	08004bb8 	.word	0x08004bb8
 8004424:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8004428:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800442c:	2b20      	cmp	r3, #32
 800442e:	dc49      	bgt.n	80044c4 <UART_SetConfig+0x9d4>
 8004430:	2b00      	cmp	r3, #0
 8004432:	db7c      	blt.n	800452e <UART_SetConfig+0xa3e>
 8004434:	2b20      	cmp	r3, #32
 8004436:	d87a      	bhi.n	800452e <UART_SetConfig+0xa3e>
 8004438:	a201      	add	r2, pc, #4	; (adr r2, 8004440 <UART_SetConfig+0x950>)
 800443a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800443e:	bf00      	nop
 8004440:	080044cb 	.word	0x080044cb
 8004444:	080044d3 	.word	0x080044d3
 8004448:	0800452f 	.word	0x0800452f
 800444c:	0800452f 	.word	0x0800452f
 8004450:	080044db 	.word	0x080044db
 8004454:	0800452f 	.word	0x0800452f
 8004458:	0800452f 	.word	0x0800452f
 800445c:	0800452f 	.word	0x0800452f
 8004460:	080044eb 	.word	0x080044eb
 8004464:	0800452f 	.word	0x0800452f
 8004468:	0800452f 	.word	0x0800452f
 800446c:	0800452f 	.word	0x0800452f
 8004470:	0800452f 	.word	0x0800452f
 8004474:	0800452f 	.word	0x0800452f
 8004478:	0800452f 	.word	0x0800452f
 800447c:	0800452f 	.word	0x0800452f
 8004480:	080044fb 	.word	0x080044fb
 8004484:	0800452f 	.word	0x0800452f
 8004488:	0800452f 	.word	0x0800452f
 800448c:	0800452f 	.word	0x0800452f
 8004490:	0800452f 	.word	0x0800452f
 8004494:	0800452f 	.word	0x0800452f
 8004498:	0800452f 	.word	0x0800452f
 800449c:	0800452f 	.word	0x0800452f
 80044a0:	0800452f 	.word	0x0800452f
 80044a4:	0800452f 	.word	0x0800452f
 80044a8:	0800452f 	.word	0x0800452f
 80044ac:	0800452f 	.word	0x0800452f
 80044b0:	0800452f 	.word	0x0800452f
 80044b4:	0800452f 	.word	0x0800452f
 80044b8:	0800452f 	.word	0x0800452f
 80044bc:	0800452f 	.word	0x0800452f
 80044c0:	08004521 	.word	0x08004521
 80044c4:	2b40      	cmp	r3, #64	; 0x40
 80044c6:	d02e      	beq.n	8004526 <UART_SetConfig+0xa36>
 80044c8:	e031      	b.n	800452e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044ca:	f7fd fe97 	bl	80021fc <HAL_RCC_GetPCLK1Freq>
 80044ce:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80044d0:	e033      	b.n	800453a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044d2:	f7fd fea9 	bl	8002228 <HAL_RCC_GetPCLK2Freq>
 80044d6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80044d8:	e02f      	b.n	800453a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80044da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044de:	4618      	mov	r0, r3
 80044e0:	f7fe fe14 	bl	800310c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80044e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80044e8:	e027      	b.n	800453a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80044ea:	f107 0318 	add.w	r3, r7, #24
 80044ee:	4618      	mov	r0, r3
 80044f0:	f7fe ff60 	bl	80033b4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80044f8:	e01f      	b.n	800453a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80044fa:	4b2d      	ldr	r3, [pc, #180]	; (80045b0 <UART_SetConfig+0xac0>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0320 	and.w	r3, r3, #32
 8004502:	2b00      	cmp	r3, #0
 8004504:	d009      	beq.n	800451a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004506:	4b2a      	ldr	r3, [pc, #168]	; (80045b0 <UART_SetConfig+0xac0>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	08db      	lsrs	r3, r3, #3
 800450c:	f003 0303 	and.w	r3, r3, #3
 8004510:	4a28      	ldr	r2, [pc, #160]	; (80045b4 <UART_SetConfig+0xac4>)
 8004512:	fa22 f303 	lsr.w	r3, r2, r3
 8004516:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004518:	e00f      	b.n	800453a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800451a:	4b26      	ldr	r3, [pc, #152]	; (80045b4 <UART_SetConfig+0xac4>)
 800451c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800451e:	e00c      	b.n	800453a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004520:	4b25      	ldr	r3, [pc, #148]	; (80045b8 <UART_SetConfig+0xac8>)
 8004522:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004524:	e009      	b.n	800453a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004526:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800452a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800452c:	e005      	b.n	800453a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800452e:	2300      	movs	r3, #0
 8004530:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004538:	bf00      	nop
    }

    if (pclk != 0U)
 800453a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800453c:	2b00      	cmp	r3, #0
 800453e:	d021      	beq.n	8004584 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004544:	4a1d      	ldr	r2, [pc, #116]	; (80045bc <UART_SetConfig+0xacc>)
 8004546:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800454a:	461a      	mov	r2, r3
 800454c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800454e:	fbb3 f2f2 	udiv	r2, r3, r2
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	085b      	lsrs	r3, r3, #1
 8004558:	441a      	add	r2, r3
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004562:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004566:	2b0f      	cmp	r3, #15
 8004568:	d909      	bls.n	800457e <UART_SetConfig+0xa8e>
 800456a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800456c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004570:	d205      	bcs.n	800457e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004574:	b29a      	uxth	r2, r3
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	60da      	str	r2, [r3, #12]
 800457c:	e002      	b.n	8004584 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	2201      	movs	r2, #1
 8004588:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	2201      	movs	r2, #1
 8004590:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	2200      	movs	r2, #0
 8004598:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	2200      	movs	r2, #0
 800459e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80045a0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3748      	adds	r7, #72	; 0x48
 80045a8:	46bd      	mov	sp, r7
 80045aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045ae:	bf00      	nop
 80045b0:	58024400 	.word	0x58024400
 80045b4:	03d09000 	.word	0x03d09000
 80045b8:	003d0900 	.word	0x003d0900
 80045bc:	08004bb8 	.word	0x08004bb8

080045c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045cc:	f003 0301 	and.w	r3, r3, #1
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d00a      	beq.n	80045ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	430a      	orrs	r2, r1
 80045e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ee:	f003 0302 	and.w	r3, r3, #2
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d00a      	beq.n	800460c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	430a      	orrs	r2, r1
 800460a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004610:	f003 0304 	and.w	r3, r3, #4
 8004614:	2b00      	cmp	r3, #0
 8004616:	d00a      	beq.n	800462e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	430a      	orrs	r2, r1
 800462c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004632:	f003 0308 	and.w	r3, r3, #8
 8004636:	2b00      	cmp	r3, #0
 8004638:	d00a      	beq.n	8004650 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	430a      	orrs	r2, r1
 800464e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004654:	f003 0310 	and.w	r3, r3, #16
 8004658:	2b00      	cmp	r3, #0
 800465a:	d00a      	beq.n	8004672 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	430a      	orrs	r2, r1
 8004670:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004676:	f003 0320 	and.w	r3, r3, #32
 800467a:	2b00      	cmp	r3, #0
 800467c:	d00a      	beq.n	8004694 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	430a      	orrs	r2, r1
 8004692:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800469c:	2b00      	cmp	r3, #0
 800469e:	d01a      	beq.n	80046d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	430a      	orrs	r2, r1
 80046b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046be:	d10a      	bne.n	80046d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	430a      	orrs	r2, r1
 80046d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d00a      	beq.n	80046f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	430a      	orrs	r2, r1
 80046f6:	605a      	str	r2, [r3, #4]
  }
}
 80046f8:	bf00      	nop
 80046fa:	370c      	adds	r7, #12
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr

08004704 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b086      	sub	sp, #24
 8004708:	af02      	add	r7, sp, #8
 800470a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004714:	f7fc faa6 	bl	8000c64 <HAL_GetTick>
 8004718:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 0308 	and.w	r3, r3, #8
 8004724:	2b08      	cmp	r3, #8
 8004726:	d10e      	bne.n	8004746 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004728:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800472c:	9300      	str	r3, [sp, #0]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2200      	movs	r2, #0
 8004732:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 f82f 	bl	800479a <UART_WaitOnFlagUntilTimeout>
 800473c:	4603      	mov	r3, r0
 800473e:	2b00      	cmp	r3, #0
 8004740:	d001      	beq.n	8004746 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	e025      	b.n	8004792 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 0304 	and.w	r3, r3, #4
 8004750:	2b04      	cmp	r3, #4
 8004752:	d10e      	bne.n	8004772 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004754:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004758:	9300      	str	r3, [sp, #0]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2200      	movs	r2, #0
 800475e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f000 f819 	bl	800479a <UART_WaitOnFlagUntilTimeout>
 8004768:	4603      	mov	r3, r0
 800476a:	2b00      	cmp	r3, #0
 800476c:	d001      	beq.n	8004772 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800476e:	2303      	movs	r3, #3
 8004770:	e00f      	b.n	8004792 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2220      	movs	r2, #32
 8004776:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2220      	movs	r2, #32
 800477e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2200      	movs	r2, #0
 8004786:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004790:	2300      	movs	r3, #0
}
 8004792:	4618      	mov	r0, r3
 8004794:	3710      	adds	r7, #16
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}

0800479a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800479a:	b580      	push	{r7, lr}
 800479c:	b09c      	sub	sp, #112	; 0x70
 800479e:	af00      	add	r7, sp, #0
 80047a0:	60f8      	str	r0, [r7, #12]
 80047a2:	60b9      	str	r1, [r7, #8]
 80047a4:	603b      	str	r3, [r7, #0]
 80047a6:	4613      	mov	r3, r2
 80047a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047aa:	e0a9      	b.n	8004900 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047b2:	f000 80a5 	beq.w	8004900 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047b6:	f7fc fa55 	bl	8000c64 <HAL_GetTick>
 80047ba:	4602      	mov	r2, r0
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d302      	bcc.n	80047cc <UART_WaitOnFlagUntilTimeout+0x32>
 80047c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d140      	bne.n	800484e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047d4:	e853 3f00 	ldrex	r3, [r3]
 80047d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80047da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80047e0:	667b      	str	r3, [r7, #100]	; 0x64
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	461a      	mov	r2, r3
 80047e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047ec:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80047f0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80047f2:	e841 2300 	strex	r3, r2, [r1]
 80047f6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80047f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d1e6      	bne.n	80047cc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	3308      	adds	r3, #8
 8004804:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004806:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004808:	e853 3f00 	ldrex	r3, [r3]
 800480c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800480e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004810:	f023 0301 	bic.w	r3, r3, #1
 8004814:	663b      	str	r3, [r7, #96]	; 0x60
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	3308      	adds	r3, #8
 800481c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800481e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004820:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004822:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004824:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004826:	e841 2300 	strex	r3, r2, [r1]
 800482a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800482c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800482e:	2b00      	cmp	r3, #0
 8004830:	d1e5      	bne.n	80047fe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2220      	movs	r2, #32
 8004836:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2220      	movs	r2, #32
 800483e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2200      	movs	r2, #0
 8004846:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	e069      	b.n	8004922 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0304 	and.w	r3, r3, #4
 8004858:	2b00      	cmp	r3, #0
 800485a:	d051      	beq.n	8004900 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	69db      	ldr	r3, [r3, #28]
 8004862:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004866:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800486a:	d149      	bne.n	8004900 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004874:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800487c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800487e:	e853 3f00 	ldrex	r3, [r3]
 8004882:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004886:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800488a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	461a      	mov	r2, r3
 8004892:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004894:	637b      	str	r3, [r7, #52]	; 0x34
 8004896:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004898:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800489a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800489c:	e841 2300 	strex	r3, r2, [r1]
 80048a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80048a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d1e6      	bne.n	8004876 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	3308      	adds	r3, #8
 80048ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	e853 3f00 	ldrex	r3, [r3]
 80048b6:	613b      	str	r3, [r7, #16]
   return(result);
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	f023 0301 	bic.w	r3, r3, #1
 80048be:	66bb      	str	r3, [r7, #104]	; 0x68
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	3308      	adds	r3, #8
 80048c6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80048c8:	623a      	str	r2, [r7, #32]
 80048ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048cc:	69f9      	ldr	r1, [r7, #28]
 80048ce:	6a3a      	ldr	r2, [r7, #32]
 80048d0:	e841 2300 	strex	r3, r2, [r1]
 80048d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80048d6:	69bb      	ldr	r3, [r7, #24]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d1e5      	bne.n	80048a8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2220      	movs	r2, #32
 80048e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2220      	movs	r2, #32
 80048e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2220      	movs	r2, #32
 80048f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2200      	movs	r2, #0
 80048f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80048fc:	2303      	movs	r3, #3
 80048fe:	e010      	b.n	8004922 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	69da      	ldr	r2, [r3, #28]
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	4013      	ands	r3, r2
 800490a:	68ba      	ldr	r2, [r7, #8]
 800490c:	429a      	cmp	r2, r3
 800490e:	bf0c      	ite	eq
 8004910:	2301      	moveq	r3, #1
 8004912:	2300      	movne	r3, #0
 8004914:	b2db      	uxtb	r3, r3
 8004916:	461a      	mov	r2, r3
 8004918:	79fb      	ldrb	r3, [r7, #7]
 800491a:	429a      	cmp	r2, r3
 800491c:	f43f af46 	beq.w	80047ac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004920:	2300      	movs	r3, #0
}
 8004922:	4618      	mov	r0, r3
 8004924:	3770      	adds	r7, #112	; 0x70
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}

0800492a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800492a:	b480      	push	{r7}
 800492c:	b085      	sub	sp, #20
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004938:	2b01      	cmp	r3, #1
 800493a:	d101      	bne.n	8004940 <HAL_UARTEx_DisableFifoMode+0x16>
 800493c:	2302      	movs	r3, #2
 800493e:	e027      	b.n	8004990 <HAL_UARTEx_DisableFifoMode+0x66>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2224      	movs	r2, #36	; 0x24
 800494c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f022 0201 	bic.w	r2, r2, #1
 8004966:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800496e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2200      	movs	r2, #0
 8004974:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	68fa      	ldr	r2, [r7, #12]
 800497c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2220      	movs	r2, #32
 8004982:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800498e:	2300      	movs	r3, #0
}
 8004990:	4618      	mov	r0, r3
 8004992:	3714      	adds	r7, #20
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr

0800499c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b084      	sub	sp, #16
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d101      	bne.n	80049b4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80049b0:	2302      	movs	r3, #2
 80049b2:	e02d      	b.n	8004a10 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2224      	movs	r2, #36	; 0x24
 80049c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f022 0201 	bic.w	r2, r2, #1
 80049da:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	683a      	ldr	r2, [r7, #0]
 80049ec:	430a      	orrs	r2, r1
 80049ee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f000 f84f 	bl	8004a94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	68fa      	ldr	r2, [r7, #12]
 80049fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2220      	movs	r2, #32
 8004a02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004a0e:	2300      	movs	r3, #0
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3710      	adds	r7, #16
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}

08004a18 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d101      	bne.n	8004a30 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004a2c:	2302      	movs	r3, #2
 8004a2e:	e02d      	b.n	8004a8c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2201      	movs	r2, #1
 8004a34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2224      	movs	r2, #36	; 0x24
 8004a3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f022 0201 	bic.w	r2, r2, #1
 8004a56:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	683a      	ldr	r2, [r7, #0]
 8004a68:	430a      	orrs	r2, r1
 8004a6a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f000 f811 	bl	8004a94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	68fa      	ldr	r2, [r7, #12]
 8004a78:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2220      	movs	r2, #32
 8004a7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004a8a:	2300      	movs	r3, #0
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3710      	adds	r7, #16
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b085      	sub	sp, #20
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d108      	bne.n	8004ab6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004ab4:	e031      	b.n	8004b1a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004ab6:	2310      	movs	r3, #16
 8004ab8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004aba:	2310      	movs	r3, #16
 8004abc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	0e5b      	lsrs	r3, r3, #25
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	f003 0307 	and.w	r3, r3, #7
 8004acc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	0f5b      	lsrs	r3, r3, #29
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	f003 0307 	and.w	r3, r3, #7
 8004adc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004ade:	7bbb      	ldrb	r3, [r7, #14]
 8004ae0:	7b3a      	ldrb	r2, [r7, #12]
 8004ae2:	4911      	ldr	r1, [pc, #68]	; (8004b28 <UARTEx_SetNbDataToProcess+0x94>)
 8004ae4:	5c8a      	ldrb	r2, [r1, r2]
 8004ae6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004aea:	7b3a      	ldrb	r2, [r7, #12]
 8004aec:	490f      	ldr	r1, [pc, #60]	; (8004b2c <UARTEx_SetNbDataToProcess+0x98>)
 8004aee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004af0:	fb93 f3f2 	sdiv	r3, r3, r2
 8004af4:	b29a      	uxth	r2, r3
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004afc:	7bfb      	ldrb	r3, [r7, #15]
 8004afe:	7b7a      	ldrb	r2, [r7, #13]
 8004b00:	4909      	ldr	r1, [pc, #36]	; (8004b28 <UARTEx_SetNbDataToProcess+0x94>)
 8004b02:	5c8a      	ldrb	r2, [r1, r2]
 8004b04:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004b08:	7b7a      	ldrb	r2, [r7, #13]
 8004b0a:	4908      	ldr	r1, [pc, #32]	; (8004b2c <UARTEx_SetNbDataToProcess+0x98>)
 8004b0c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004b0e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004b12:	b29a      	uxth	r2, r3
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004b1a:	bf00      	nop
 8004b1c:	3714      	adds	r7, #20
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr
 8004b26:	bf00      	nop
 8004b28:	08004bd0 	.word	0x08004bd0
 8004b2c:	08004bd8 	.word	0x08004bd8

08004b30 <__libc_init_array>:
 8004b30:	b570      	push	{r4, r5, r6, lr}
 8004b32:	4d0d      	ldr	r5, [pc, #52]	; (8004b68 <__libc_init_array+0x38>)
 8004b34:	4c0d      	ldr	r4, [pc, #52]	; (8004b6c <__libc_init_array+0x3c>)
 8004b36:	1b64      	subs	r4, r4, r5
 8004b38:	10a4      	asrs	r4, r4, #2
 8004b3a:	2600      	movs	r6, #0
 8004b3c:	42a6      	cmp	r6, r4
 8004b3e:	d109      	bne.n	8004b54 <__libc_init_array+0x24>
 8004b40:	4d0b      	ldr	r5, [pc, #44]	; (8004b70 <__libc_init_array+0x40>)
 8004b42:	4c0c      	ldr	r4, [pc, #48]	; (8004b74 <__libc_init_array+0x44>)
 8004b44:	f000 f820 	bl	8004b88 <_init>
 8004b48:	1b64      	subs	r4, r4, r5
 8004b4a:	10a4      	asrs	r4, r4, #2
 8004b4c:	2600      	movs	r6, #0
 8004b4e:	42a6      	cmp	r6, r4
 8004b50:	d105      	bne.n	8004b5e <__libc_init_array+0x2e>
 8004b52:	bd70      	pop	{r4, r5, r6, pc}
 8004b54:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b58:	4798      	blx	r3
 8004b5a:	3601      	adds	r6, #1
 8004b5c:	e7ee      	b.n	8004b3c <__libc_init_array+0xc>
 8004b5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b62:	4798      	blx	r3
 8004b64:	3601      	adds	r6, #1
 8004b66:	e7f2      	b.n	8004b4e <__libc_init_array+0x1e>
 8004b68:	08004be8 	.word	0x08004be8
 8004b6c:	08004be8 	.word	0x08004be8
 8004b70:	08004be8 	.word	0x08004be8
 8004b74:	08004bec 	.word	0x08004bec

08004b78 <memset>:
 8004b78:	4402      	add	r2, r0
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d100      	bne.n	8004b82 <memset+0xa>
 8004b80:	4770      	bx	lr
 8004b82:	f803 1b01 	strb.w	r1, [r3], #1
 8004b86:	e7f9      	b.n	8004b7c <memset+0x4>

08004b88 <_init>:
 8004b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b8a:	bf00      	nop
 8004b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b8e:	bc08      	pop	{r3}
 8004b90:	469e      	mov	lr, r3
 8004b92:	4770      	bx	lr

08004b94 <_fini>:
 8004b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b96:	bf00      	nop
 8004b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b9a:	bc08      	pop	{r3}
 8004b9c:	469e      	mov	lr, r3
 8004b9e:	4770      	bx	lr
