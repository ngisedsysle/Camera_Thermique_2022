
STM32H743VIT6_COULOMB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005300  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08005598  08005598  00015598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800562c  0800562c  0001562c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005634  08005634  00015634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005638  08005638  00015638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  0800563c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000fc  24000010  0800564c  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400010c  0800564c  0002010c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00012d58  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001fa5  00000000  00000000  00032d96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000ce0  00000000  00000000  00034d40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000c28  00000000  00000000  00035a20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000357f0  00000000  00000000  00036648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00011952  00000000  00000000  0006be38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001563bd  00000000  00000000  0007d78a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001d3b47  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000035c8  00000000  00000000  001d3b98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08005580 	.word	0x08005580

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08005580 	.word	0x08005580

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b5b0      	push	{r4, r5, r7, lr}
 80005de:	b09c      	sub	sp, #112	; 0x70
 80005e0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e2:	f000 fb79 	bl	8000cd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e6:	f000 f88f 	bl	8000708 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ea:	f000 f983 	bl	80008f4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80005ee:	f000 f8f5 	bl	80007dc <MX_I2C1_Init>
  MX_UART7_Init();
 80005f2:	f000 f933 	bl	800085c <MX_UART7_Init>
  /* USER CODE BEGIN 2 */
  uint8_t success[] = "SUCCESS. Address has been recognized\r\n";
 80005f6:	4b3f      	ldr	r3, [pc, #252]	; (80006f4 <main+0x118>)
 80005f8:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80005fc:	461d      	mov	r5, r3
 80005fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000600:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000602:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000604:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000606:	e895 0003 	ldmia.w	r5, {r0, r1}
 800060a:	6020      	str	r0, [r4, #0]
 800060c:	3404      	adds	r4, #4
 800060e:	8021      	strh	r1, [r4, #0]
 8000610:	3402      	adds	r4, #2
 8000612:	0c0b      	lsrs	r3, r1, #16
 8000614:	7023      	strb	r3, [r4, #0]
    uint8_t bad_result[] = "FAIL. Bad Result\r\n";
 8000616:	4b38      	ldr	r3, [pc, #224]	; (80006f8 <main+0x11c>)
 8000618:	f107 0424 	add.w	r4, r7, #36	; 0x24
 800061c:	461d      	mov	r5, r3
 800061e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000620:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000622:	682b      	ldr	r3, [r5, #0]
 8000624:	461a      	mov	r2, r3
 8000626:	8022      	strh	r2, [r4, #0]
 8000628:	3402      	adds	r4, #2
 800062a:	0c1b      	lsrs	r3, r3, #16
 800062c:	7023      	strb	r3, [r4, #0]
    uint8_t result;
    if ( HAL_I2C_Mem_Read(&hi2c1, 0x64 << 1, 0x01, 1, &result, 1, 10000) != 0 ){
 800062e:	f242 7310 	movw	r3, #10000	; 0x2710
 8000632:	9302      	str	r3, [sp, #8]
 8000634:	2301      	movs	r3, #1
 8000636:	9301      	str	r3, [sp, #4]
 8000638:	f107 0323 	add.w	r3, r7, #35	; 0x23
 800063c:	9300      	str	r3, [sp, #0]
 800063e:	2301      	movs	r3, #1
 8000640:	2201      	movs	r2, #1
 8000642:	21c8      	movs	r1, #200	; 0xc8
 8000644:	482d      	ldr	r0, [pc, #180]	; (80006fc <main+0x120>)
 8000646:	f000 ff09 	bl	800145c <HAL_I2C_Mem_Read>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d03a      	beq.n	80006c6 <main+0xea>
  	  if( HAL_I2C_Mem_Read(&hi2c1, 0x64, 0x01, 1, &result, 1, 10000) != 0 ){
 8000650:	f242 7310 	movw	r3, #10000	; 0x2710
 8000654:	9302      	str	r3, [sp, #8]
 8000656:	2301      	movs	r3, #1
 8000658:	9301      	str	r3, [sp, #4]
 800065a:	f107 0323 	add.w	r3, r7, #35	; 0x23
 800065e:	9300      	str	r3, [sp, #0]
 8000660:	2301      	movs	r3, #1
 8000662:	2201      	movs	r2, #1
 8000664:	2164      	movs	r1, #100	; 0x64
 8000666:	4825      	ldr	r0, [pc, #148]	; (80006fc <main+0x120>)
 8000668:	f000 fef8 	bl	800145c <HAL_I2C_Mem_Read>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d013      	beq.n	800069a <main+0xbe>
  		  uint8_t fail[] = "FAIL. Address not recognized\r\n";
 8000672:	4b23      	ldr	r3, [pc, #140]	; (8000700 <main+0x124>)
 8000674:	1d3c      	adds	r4, r7, #4
 8000676:	461d      	mov	r5, r3
 8000678:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800067a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800067c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000680:	c407      	stmia	r4!, {r0, r1, r2}
 8000682:	8023      	strh	r3, [r4, #0]
 8000684:	3402      	adds	r4, #2
 8000686:	0c1b      	lsrs	r3, r3, #16
 8000688:	7023      	strb	r3, [r4, #0]
  		  HAL_UART_Transmit(&huart7, fail, sizeof(fail),10000);
 800068a:	1d39      	adds	r1, r7, #4
 800068c:	f242 7310 	movw	r3, #10000	; 0x2710
 8000690:	221f      	movs	r2, #31
 8000692:	481c      	ldr	r0, [pc, #112]	; (8000704 <main+0x128>)
 8000694:	f003 fe92 	bl	80043bc <HAL_UART_Transmit>
 8000698:	e02a      	b.n	80006f0 <main+0x114>
  	  }
  	  else{
  		  if(result != 0x3C){
 800069a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800069e:	2b3c      	cmp	r3, #60	; 0x3c
 80006a0:	d008      	beq.n	80006b4 <main+0xd8>
  			  HAL_UART_Transmit(&huart7, bad_result, sizeof(bad_result),10000);
 80006a2:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80006a6:	f242 7310 	movw	r3, #10000	; 0x2710
 80006aa:	2213      	movs	r2, #19
 80006ac:	4815      	ldr	r0, [pc, #84]	; (8000704 <main+0x128>)
 80006ae:	f003 fe85 	bl	80043bc <HAL_UART_Transmit>
 80006b2:	e01d      	b.n	80006f0 <main+0x114>
  		  }
  		  else{
  			  HAL_UART_Transmit(&huart7, success, sizeof(success),10000);
 80006b4:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80006b8:	f242 7310 	movw	r3, #10000	; 0x2710
 80006bc:	2227      	movs	r2, #39	; 0x27
 80006be:	4811      	ldr	r0, [pc, #68]	; (8000704 <main+0x128>)
 80006c0:	f003 fe7c 	bl	80043bc <HAL_UART_Transmit>
 80006c4:	e014      	b.n	80006f0 <main+0x114>
  		  }
  	  }
    }
    else{
  	  if(result != 0x3C){
 80006c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80006ca:	2b3c      	cmp	r3, #60	; 0x3c
 80006cc:	d008      	beq.n	80006e0 <main+0x104>
  			  HAL_UART_Transmit(&huart7, bad_result, sizeof(bad_result),10000);
 80006ce:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80006d2:	f242 7310 	movw	r3, #10000	; 0x2710
 80006d6:	2213      	movs	r2, #19
 80006d8:	480a      	ldr	r0, [pc, #40]	; (8000704 <main+0x128>)
 80006da:	f003 fe6f 	bl	80043bc <HAL_UART_Transmit>
 80006de:	e007      	b.n	80006f0 <main+0x114>
  	  }
  	  else{
  		  HAL_UART_Transmit(&huart7, success, sizeof(success),10000);
 80006e0:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80006e4:	f242 7310 	movw	r3, #10000	; 0x2710
 80006e8:	2227      	movs	r2, #39	; 0x27
 80006ea:	4806      	ldr	r0, [pc, #24]	; (8000704 <main+0x128>)
 80006ec:	f003 fe66 	bl	80043bc <HAL_UART_Transmit>
    }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006f0:	e7fe      	b.n	80006f0 <main+0x114>
 80006f2:	bf00      	nop
 80006f4:	08005598 	.word	0x08005598
 80006f8:	080055c0 	.word	0x080055c0
 80006fc:	2400002c 	.word	0x2400002c
 8000700:	080055d4 	.word	0x080055d4
 8000704:	24000078 	.word	0x24000078

08000708 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b09c      	sub	sp, #112	; 0x70
 800070c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000712:	224c      	movs	r2, #76	; 0x4c
 8000714:	2100      	movs	r1, #0
 8000716:	4618      	mov	r0, r3
 8000718:	f004 ff2a 	bl	8005570 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800071c:	1d3b      	adds	r3, r7, #4
 800071e:	2220      	movs	r2, #32
 8000720:	2100      	movs	r1, #0
 8000722:	4618      	mov	r0, r3
 8000724:	f004 ff24 	bl	8005570 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000728:	2002      	movs	r0, #2
 800072a:	f001 fa9b 	bl	8001c64 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800072e:	2300      	movs	r3, #0
 8000730:	603b      	str	r3, [r7, #0]
 8000732:	4b28      	ldr	r3, [pc, #160]	; (80007d4 <SystemClock_Config+0xcc>)
 8000734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000736:	4a27      	ldr	r2, [pc, #156]	; (80007d4 <SystemClock_Config+0xcc>)
 8000738:	f023 0301 	bic.w	r3, r3, #1
 800073c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800073e:	4b25      	ldr	r3, [pc, #148]	; (80007d4 <SystemClock_Config+0xcc>)
 8000740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000742:	f003 0301 	and.w	r3, r3, #1
 8000746:	603b      	str	r3, [r7, #0]
 8000748:	4b23      	ldr	r3, [pc, #140]	; (80007d8 <SystemClock_Config+0xd0>)
 800074a:	699b      	ldr	r3, [r3, #24]
 800074c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000750:	4a21      	ldr	r2, [pc, #132]	; (80007d8 <SystemClock_Config+0xd0>)
 8000752:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000756:	6193      	str	r3, [r2, #24]
 8000758:	4b1f      	ldr	r3, [pc, #124]	; (80007d8 <SystemClock_Config+0xd0>)
 800075a:	699b      	ldr	r3, [r3, #24]
 800075c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000760:	603b      	str	r3, [r7, #0]
 8000762:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000764:	bf00      	nop
 8000766:	4b1c      	ldr	r3, [pc, #112]	; (80007d8 <SystemClock_Config+0xd0>)
 8000768:	699b      	ldr	r3, [r3, #24]
 800076a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800076e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000772:	d1f8      	bne.n	8000766 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000774:	2302      	movs	r3, #2
 8000776:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000778:	2301      	movs	r3, #1
 800077a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800077c:	2340      	movs	r3, #64	; 0x40
 800077e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000780:	2300      	movs	r3, #0
 8000782:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000784:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000788:	4618      	mov	r0, r3
 800078a:	f001 faa5 	bl	8001cd8 <HAL_RCC_OscConfig>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000794:	f000 f8d8 	bl	8000948 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000798:	233f      	movs	r3, #63	; 0x3f
 800079a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800079c:	2300      	movs	r3, #0
 800079e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007a0:	2300      	movs	r3, #0
 80007a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80007a4:	2300      	movs	r3, #0
 80007a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80007a8:	2300      	movs	r3, #0
 80007aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007ac:	2340      	movs	r3, #64	; 0x40
 80007ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80007b0:	2300      	movs	r3, #0
 80007b2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80007b4:	2300      	movs	r3, #0
 80007b6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007b8:	1d3b      	adds	r3, r7, #4
 80007ba:	2101      	movs	r1, #1
 80007bc:	4618      	mov	r0, r3
 80007be:	f001 feb9 	bl	8002534 <HAL_RCC_ClockConfig>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80007c8:	f000 f8be 	bl	8000948 <Error_Handler>
  }
}
 80007cc:	bf00      	nop
 80007ce:	3770      	adds	r7, #112	; 0x70
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	58000400 	.word	0x58000400
 80007d8:	58024800 	.word	0x58024800

080007dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007e0:	4b1b      	ldr	r3, [pc, #108]	; (8000850 <MX_I2C1_Init+0x74>)
 80007e2:	4a1c      	ldr	r2, [pc, #112]	; (8000854 <MX_I2C1_Init+0x78>)
 80007e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80007e6:	4b1a      	ldr	r3, [pc, #104]	; (8000850 <MX_I2C1_Init+0x74>)
 80007e8:	4a1b      	ldr	r2, [pc, #108]	; (8000858 <MX_I2C1_Init+0x7c>)
 80007ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007ec:	4b18      	ldr	r3, [pc, #96]	; (8000850 <MX_I2C1_Init+0x74>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007f2:	4b17      	ldr	r3, [pc, #92]	; (8000850 <MX_I2C1_Init+0x74>)
 80007f4:	2201      	movs	r2, #1
 80007f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007f8:	4b15      	ldr	r3, [pc, #84]	; (8000850 <MX_I2C1_Init+0x74>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007fe:	4b14      	ldr	r3, [pc, #80]	; (8000850 <MX_I2C1_Init+0x74>)
 8000800:	2200      	movs	r2, #0
 8000802:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000804:	4b12      	ldr	r3, [pc, #72]	; (8000850 <MX_I2C1_Init+0x74>)
 8000806:	2200      	movs	r2, #0
 8000808:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800080a:	4b11      	ldr	r3, [pc, #68]	; (8000850 <MX_I2C1_Init+0x74>)
 800080c:	2200      	movs	r2, #0
 800080e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000810:	4b0f      	ldr	r3, [pc, #60]	; (8000850 <MX_I2C1_Init+0x74>)
 8000812:	2200      	movs	r2, #0
 8000814:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000816:	480e      	ldr	r0, [pc, #56]	; (8000850 <MX_I2C1_Init+0x74>)
 8000818:	f000 fd90 	bl	800133c <HAL_I2C_Init>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000822:	f000 f891 	bl	8000948 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000826:	2100      	movs	r1, #0
 8000828:	4809      	ldr	r0, [pc, #36]	; (8000850 <MX_I2C1_Init+0x74>)
 800082a:	f001 f983 	bl	8001b34 <HAL_I2CEx_ConfigAnalogFilter>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000834:	f000 f888 	bl	8000948 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000838:	2100      	movs	r1, #0
 800083a:	4805      	ldr	r0, [pc, #20]	; (8000850 <MX_I2C1_Init+0x74>)
 800083c:	f001 f9c5 	bl	8001bca <HAL_I2CEx_ConfigDigitalFilter>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000846:	f000 f87f 	bl	8000948 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	2400002c 	.word	0x2400002c
 8000854:	40005400 	.word	0x40005400
 8000858:	00707cbb 	.word	0x00707cbb

0800085c <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8000860:	4b22      	ldr	r3, [pc, #136]	; (80008ec <MX_UART7_Init+0x90>)
 8000862:	4a23      	ldr	r2, [pc, #140]	; (80008f0 <MX_UART7_Init+0x94>)
 8000864:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8000866:	4b21      	ldr	r3, [pc, #132]	; (80008ec <MX_UART7_Init+0x90>)
 8000868:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800086c:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800086e:	4b1f      	ldr	r3, [pc, #124]	; (80008ec <MX_UART7_Init+0x90>)
 8000870:	2200      	movs	r2, #0
 8000872:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000874:	4b1d      	ldr	r3, [pc, #116]	; (80008ec <MX_UART7_Init+0x90>)
 8000876:	2200      	movs	r2, #0
 8000878:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800087a:	4b1c      	ldr	r3, [pc, #112]	; (80008ec <MX_UART7_Init+0x90>)
 800087c:	2200      	movs	r2, #0
 800087e:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8000880:	4b1a      	ldr	r3, [pc, #104]	; (80008ec <MX_UART7_Init+0x90>)
 8000882:	220c      	movs	r2, #12
 8000884:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000886:	4b19      	ldr	r3, [pc, #100]	; (80008ec <MX_UART7_Init+0x90>)
 8000888:	2200      	movs	r2, #0
 800088a:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 800088c:	4b17      	ldr	r3, [pc, #92]	; (80008ec <MX_UART7_Init+0x90>)
 800088e:	2200      	movs	r2, #0
 8000890:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000892:	4b16      	ldr	r3, [pc, #88]	; (80008ec <MX_UART7_Init+0x90>)
 8000894:	2200      	movs	r2, #0
 8000896:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000898:	4b14      	ldr	r3, [pc, #80]	; (80008ec <MX_UART7_Init+0x90>)
 800089a:	2200      	movs	r2, #0
 800089c:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800089e:	4b13      	ldr	r3, [pc, #76]	; (80008ec <MX_UART7_Init+0x90>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80008a4:	4811      	ldr	r0, [pc, #68]	; (80008ec <MX_UART7_Init+0x90>)
 80008a6:	f003 fd39 	bl	800431c <HAL_UART_Init>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 80008b0:	f000 f84a 	bl	8000948 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008b4:	2100      	movs	r1, #0
 80008b6:	480d      	ldr	r0, [pc, #52]	; (80008ec <MX_UART7_Init+0x90>)
 80008b8:	f004 fd6c 	bl	8005394 <HAL_UARTEx_SetTxFifoThreshold>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 80008c2:	f000 f841 	bl	8000948 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008c6:	2100      	movs	r1, #0
 80008c8:	4808      	ldr	r0, [pc, #32]	; (80008ec <MX_UART7_Init+0x90>)
 80008ca:	f004 fda1 	bl	8005410 <HAL_UARTEx_SetRxFifoThreshold>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 80008d4:	f000 f838 	bl	8000948 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 80008d8:	4804      	ldr	r0, [pc, #16]	; (80008ec <MX_UART7_Init+0x90>)
 80008da:	f004 fd22 	bl	8005322 <HAL_UARTEx_DisableFifoMode>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 80008e4:	f000 f830 	bl	8000948 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 80008e8:	bf00      	nop
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	24000078 	.word	0x24000078
 80008f0:	40007800 	.word	0x40007800

080008f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008fa:	4b12      	ldr	r3, [pc, #72]	; (8000944 <MX_GPIO_Init+0x50>)
 80008fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000900:	4a10      	ldr	r2, [pc, #64]	; (8000944 <MX_GPIO_Init+0x50>)
 8000902:	f043 0310 	orr.w	r3, r3, #16
 8000906:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800090a:	4b0e      	ldr	r3, [pc, #56]	; (8000944 <MX_GPIO_Init+0x50>)
 800090c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000910:	f003 0310 	and.w	r3, r3, #16
 8000914:	607b      	str	r3, [r7, #4]
 8000916:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000918:	4b0a      	ldr	r3, [pc, #40]	; (8000944 <MX_GPIO_Init+0x50>)
 800091a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800091e:	4a09      	ldr	r2, [pc, #36]	; (8000944 <MX_GPIO_Init+0x50>)
 8000920:	f043 0302 	orr.w	r3, r3, #2
 8000924:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000928:	4b06      	ldr	r3, [pc, #24]	; (8000944 <MX_GPIO_Init+0x50>)
 800092a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800092e:	f003 0302 	and.w	r3, r3, #2
 8000932:	603b      	str	r3, [r7, #0]
 8000934:	683b      	ldr	r3, [r7, #0]

}
 8000936:	bf00      	nop
 8000938:	370c      	adds	r7, #12
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	58024400 	.word	0x58024400

08000948 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800094c:	b672      	cpsid	i
}
 800094e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000950:	e7fe      	b.n	8000950 <Error_Handler+0x8>
	...

08000954 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800095a:	4b0a      	ldr	r3, [pc, #40]	; (8000984 <HAL_MspInit+0x30>)
 800095c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000960:	4a08      	ldr	r2, [pc, #32]	; (8000984 <HAL_MspInit+0x30>)
 8000962:	f043 0302 	orr.w	r3, r3, #2
 8000966:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800096a:	4b06      	ldr	r3, [pc, #24]	; (8000984 <HAL_MspInit+0x30>)
 800096c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000970:	f003 0302 	and.w	r3, r3, #2
 8000974:	607b      	str	r3, [r7, #4]
 8000976:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000978:	bf00      	nop
 800097a:	370c      	adds	r7, #12
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr
 8000984:	58024400 	.word	0x58024400

08000988 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b0b8      	sub	sp, #224	; 0xe0
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000990:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]
 800099a:	609a      	str	r2, [r3, #8]
 800099c:	60da      	str	r2, [r3, #12]
 800099e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009a0:	f107 0310 	add.w	r3, r7, #16
 80009a4:	22bc      	movs	r2, #188	; 0xbc
 80009a6:	2100      	movs	r1, #0
 80009a8:	4618      	mov	r0, r3
 80009aa:	f004 fde1 	bl	8005570 <memset>
  if(hi2c->Instance==I2C1)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	4a25      	ldr	r2, [pc, #148]	; (8000a48 <HAL_I2C_MspInit+0xc0>)
 80009b4:	4293      	cmp	r3, r2
 80009b6:	d142      	bne.n	8000a3e <HAL_I2C_MspInit+0xb6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80009b8:	2308      	movs	r3, #8
 80009ba:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80009bc:	2300      	movs	r3, #0
 80009be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009c2:	f107 0310 	add.w	r3, r7, #16
 80009c6:	4618      	mov	r0, r3
 80009c8:	f002 f940 	bl	8002c4c <HAL_RCCEx_PeriphCLKConfig>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80009d2:	f7ff ffb9 	bl	8000948 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d6:	4b1d      	ldr	r3, [pc, #116]	; (8000a4c <HAL_I2C_MspInit+0xc4>)
 80009d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009dc:	4a1b      	ldr	r2, [pc, #108]	; (8000a4c <HAL_I2C_MspInit+0xc4>)
 80009de:	f043 0302 	orr.w	r3, r3, #2
 80009e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009e6:	4b19      	ldr	r3, [pc, #100]	; (8000a4c <HAL_I2C_MspInit+0xc4>)
 80009e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ec:	f003 0302 	and.w	r3, r3, #2
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80009f4:	f44f 7310 	mov.w	r3, #576	; 0x240
 80009f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009fc:	2312      	movs	r3, #18
 80009fe:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a0e:	2304      	movs	r3, #4
 8000a10:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a14:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000a18:	4619      	mov	r1, r3
 8000a1a:	480d      	ldr	r0, [pc, #52]	; (8000a50 <HAL_I2C_MspInit+0xc8>)
 8000a1c:	f000 fade 	bl	8000fdc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a20:	4b0a      	ldr	r3, [pc, #40]	; (8000a4c <HAL_I2C_MspInit+0xc4>)
 8000a22:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000a26:	4a09      	ldr	r2, [pc, #36]	; (8000a4c <HAL_I2C_MspInit+0xc4>)
 8000a28:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a2c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000a30:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <HAL_I2C_MspInit+0xc4>)
 8000a32:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000a36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a3a:	60bb      	str	r3, [r7, #8]
 8000a3c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a3e:	bf00      	nop
 8000a40:	37e0      	adds	r7, #224	; 0xe0
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40005400 	.word	0x40005400
 8000a4c:	58024400 	.word	0x58024400
 8000a50:	58020400 	.word	0x58020400

08000a54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b0b8      	sub	sp, #224	; 0xe0
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]
 8000a6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a6c:	f107 0310 	add.w	r3, r7, #16
 8000a70:	22bc      	movs	r2, #188	; 0xbc
 8000a72:	2100      	movs	r1, #0
 8000a74:	4618      	mov	r0, r3
 8000a76:	f004 fd7b 	bl	8005570 <memset>
  if(huart->Instance==UART7)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4a25      	ldr	r2, [pc, #148]	; (8000b14 <HAL_UART_MspInit+0xc0>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d142      	bne.n	8000b0a <HAL_UART_MspInit+0xb6>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8000a84:	2302      	movs	r3, #2
 8000a86:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a8e:	f107 0310 	add.w	r3, r7, #16
 8000a92:	4618      	mov	r0, r3
 8000a94:	f002 f8da 	bl	8002c4c <HAL_RCCEx_PeriphCLKConfig>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000a9e:	f7ff ff53 	bl	8000948 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8000aa2:	4b1d      	ldr	r3, [pc, #116]	; (8000b18 <HAL_UART_MspInit+0xc4>)
 8000aa4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000aa8:	4a1b      	ldr	r2, [pc, #108]	; (8000b18 <HAL_UART_MspInit+0xc4>)
 8000aaa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000aae:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000ab2:	4b19      	ldr	r3, [pc, #100]	; (8000b18 <HAL_UART_MspInit+0xc4>)
 8000ab4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ab8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000abc:	60fb      	str	r3, [r7, #12]
 8000abe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ac0:	4b15      	ldr	r3, [pc, #84]	; (8000b18 <HAL_UART_MspInit+0xc4>)
 8000ac2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac6:	4a14      	ldr	r2, [pc, #80]	; (8000b18 <HAL_UART_MspInit+0xc4>)
 8000ac8:	f043 0310 	orr.w	r3, r3, #16
 8000acc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ad0:	4b11      	ldr	r3, [pc, #68]	; (8000b18 <HAL_UART_MspInit+0xc4>)
 8000ad2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad6:	f003 0310 	and.w	r3, r3, #16
 8000ada:	60bb      	str	r3, [r7, #8]
 8000adc:	68bb      	ldr	r3, [r7, #8]
    /**UART7 GPIO Configuration
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000ade:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000ae2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af2:	2300      	movs	r3, #0
 8000af4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8000af8:	2307      	movs	r3, #7
 8000afa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000afe:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000b02:	4619      	mov	r1, r3
 8000b04:	4805      	ldr	r0, [pc, #20]	; (8000b1c <HAL_UART_MspInit+0xc8>)
 8000b06:	f000 fa69 	bl	8000fdc <HAL_GPIO_Init>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 8000b0a:	bf00      	nop
 8000b0c:	37e0      	adds	r7, #224	; 0xe0
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	40007800 	.word	0x40007800
 8000b18:	58024400 	.word	0x58024400
 8000b1c:	58021000 	.word	0x58021000

08000b20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b24:	e7fe      	b.n	8000b24 <NMI_Handler+0x4>

08000b26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b26:	b480      	push	{r7}
 8000b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b2a:	e7fe      	b.n	8000b2a <HardFault_Handler+0x4>

08000b2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b30:	e7fe      	b.n	8000b30 <MemManage_Handler+0x4>

08000b32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b32:	b480      	push	{r7}
 8000b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b36:	e7fe      	b.n	8000b36 <BusFault_Handler+0x4>

08000b38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b3c:	e7fe      	b.n	8000b3c <UsageFault_Handler+0x4>

08000b3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b42:	bf00      	nop
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr

08000b4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr

08000b5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr

08000b68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b6c:	f000 f926 	bl	8000dbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b70:	bf00      	nop
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b78:	4b37      	ldr	r3, [pc, #220]	; (8000c58 <SystemInit+0xe4>)
 8000b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b7e:	4a36      	ldr	r2, [pc, #216]	; (8000c58 <SystemInit+0xe4>)
 8000b80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b88:	4b34      	ldr	r3, [pc, #208]	; (8000c5c <SystemInit+0xe8>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f003 030f 	and.w	r3, r3, #15
 8000b90:	2b06      	cmp	r3, #6
 8000b92:	d807      	bhi.n	8000ba4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b94:	4b31      	ldr	r3, [pc, #196]	; (8000c5c <SystemInit+0xe8>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	f023 030f 	bic.w	r3, r3, #15
 8000b9c:	4a2f      	ldr	r2, [pc, #188]	; (8000c5c <SystemInit+0xe8>)
 8000b9e:	f043 0307 	orr.w	r3, r3, #7
 8000ba2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000ba4:	4b2e      	ldr	r3, [pc, #184]	; (8000c60 <SystemInit+0xec>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a2d      	ldr	r2, [pc, #180]	; (8000c60 <SystemInit+0xec>)
 8000baa:	f043 0301 	orr.w	r3, r3, #1
 8000bae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000bb0:	4b2b      	ldr	r3, [pc, #172]	; (8000c60 <SystemInit+0xec>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000bb6:	4b2a      	ldr	r3, [pc, #168]	; (8000c60 <SystemInit+0xec>)
 8000bb8:	681a      	ldr	r2, [r3, #0]
 8000bba:	4929      	ldr	r1, [pc, #164]	; (8000c60 <SystemInit+0xec>)
 8000bbc:	4b29      	ldr	r3, [pc, #164]	; (8000c64 <SystemInit+0xf0>)
 8000bbe:	4013      	ands	r3, r2
 8000bc0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000bc2:	4b26      	ldr	r3, [pc, #152]	; (8000c5c <SystemInit+0xe8>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f003 0308 	and.w	r3, r3, #8
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d007      	beq.n	8000bde <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000bce:	4b23      	ldr	r3, [pc, #140]	; (8000c5c <SystemInit+0xe8>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f023 030f 	bic.w	r3, r3, #15
 8000bd6:	4a21      	ldr	r2, [pc, #132]	; (8000c5c <SystemInit+0xe8>)
 8000bd8:	f043 0307 	orr.w	r3, r3, #7
 8000bdc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000bde:	4b20      	ldr	r3, [pc, #128]	; (8000c60 <SystemInit+0xec>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000be4:	4b1e      	ldr	r3, [pc, #120]	; (8000c60 <SystemInit+0xec>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000bea:	4b1d      	ldr	r3, [pc, #116]	; (8000c60 <SystemInit+0xec>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000bf0:	4b1b      	ldr	r3, [pc, #108]	; (8000c60 <SystemInit+0xec>)
 8000bf2:	4a1d      	ldr	r2, [pc, #116]	; (8000c68 <SystemInit+0xf4>)
 8000bf4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000bf6:	4b1a      	ldr	r3, [pc, #104]	; (8000c60 <SystemInit+0xec>)
 8000bf8:	4a1c      	ldr	r2, [pc, #112]	; (8000c6c <SystemInit+0xf8>)
 8000bfa:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000bfc:	4b18      	ldr	r3, [pc, #96]	; (8000c60 <SystemInit+0xec>)
 8000bfe:	4a1c      	ldr	r2, [pc, #112]	; (8000c70 <SystemInit+0xfc>)
 8000c00:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000c02:	4b17      	ldr	r3, [pc, #92]	; (8000c60 <SystemInit+0xec>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000c08:	4b15      	ldr	r3, [pc, #84]	; (8000c60 <SystemInit+0xec>)
 8000c0a:	4a19      	ldr	r2, [pc, #100]	; (8000c70 <SystemInit+0xfc>)
 8000c0c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000c0e:	4b14      	ldr	r3, [pc, #80]	; (8000c60 <SystemInit+0xec>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000c14:	4b12      	ldr	r3, [pc, #72]	; (8000c60 <SystemInit+0xec>)
 8000c16:	4a16      	ldr	r2, [pc, #88]	; (8000c70 <SystemInit+0xfc>)
 8000c18:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000c1a:	4b11      	ldr	r3, [pc, #68]	; (8000c60 <SystemInit+0xec>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c20:	4b0f      	ldr	r3, [pc, #60]	; (8000c60 <SystemInit+0xec>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a0e      	ldr	r2, [pc, #56]	; (8000c60 <SystemInit+0xec>)
 8000c26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c2a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000c2c:	4b0c      	ldr	r3, [pc, #48]	; (8000c60 <SystemInit+0xec>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000c32:	4b10      	ldr	r3, [pc, #64]	; (8000c74 <SystemInit+0x100>)
 8000c34:	681a      	ldr	r2, [r3, #0]
 8000c36:	4b10      	ldr	r3, [pc, #64]	; (8000c78 <SystemInit+0x104>)
 8000c38:	4013      	ands	r3, r2
 8000c3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000c3e:	d202      	bcs.n	8000c46 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000c40:	4b0e      	ldr	r3, [pc, #56]	; (8000c7c <SystemInit+0x108>)
 8000c42:	2201      	movs	r2, #1
 8000c44:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000c46:	4b0e      	ldr	r3, [pc, #56]	; (8000c80 <SystemInit+0x10c>)
 8000c48:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000c4c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000c4e:	bf00      	nop
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr
 8000c58:	e000ed00 	.word	0xe000ed00
 8000c5c:	52002000 	.word	0x52002000
 8000c60:	58024400 	.word	0x58024400
 8000c64:	eaf6ed7f 	.word	0xeaf6ed7f
 8000c68:	02020200 	.word	0x02020200
 8000c6c:	01ff0000 	.word	0x01ff0000
 8000c70:	01010280 	.word	0x01010280
 8000c74:	5c001000 	.word	0x5c001000
 8000c78:	ffff0000 	.word	0xffff0000
 8000c7c:	51008108 	.word	0x51008108
 8000c80:	52004000 	.word	0x52004000

08000c84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000c84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cbc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c88:	f7ff ff74 	bl	8000b74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c8c:	480c      	ldr	r0, [pc, #48]	; (8000cc0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c8e:	490d      	ldr	r1, [pc, #52]	; (8000cc4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c90:	4a0d      	ldr	r2, [pc, #52]	; (8000cc8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c94:	e002      	b.n	8000c9c <LoopCopyDataInit>

08000c96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c9a:	3304      	adds	r3, #4

08000c9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ca0:	d3f9      	bcc.n	8000c96 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ca2:	4a0a      	ldr	r2, [pc, #40]	; (8000ccc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ca4:	4c0a      	ldr	r4, [pc, #40]	; (8000cd0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ca6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ca8:	e001      	b.n	8000cae <LoopFillZerobss>

08000caa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000caa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cac:	3204      	adds	r2, #4

08000cae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cb0:	d3fb      	bcc.n	8000caa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cb2:	f004 fc39 	bl	8005528 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cb6:	f7ff fc91 	bl	80005dc <main>
  bx  lr
 8000cba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cbc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000cc0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000cc4:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000cc8:	0800563c 	.word	0x0800563c
  ldr r2, =_sbss
 8000ccc:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000cd0:	2400010c 	.word	0x2400010c

08000cd4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cd4:	e7fe      	b.n	8000cd4 <ADC3_IRQHandler>
	...

08000cd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cde:	2003      	movs	r0, #3
 8000ce0:	f000 f94a 	bl	8000f78 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000ce4:	f001 fddc 	bl	80028a0 <HAL_RCC_GetSysClockFreq>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	4b15      	ldr	r3, [pc, #84]	; (8000d40 <HAL_Init+0x68>)
 8000cec:	699b      	ldr	r3, [r3, #24]
 8000cee:	0a1b      	lsrs	r3, r3, #8
 8000cf0:	f003 030f 	and.w	r3, r3, #15
 8000cf4:	4913      	ldr	r1, [pc, #76]	; (8000d44 <HAL_Init+0x6c>)
 8000cf6:	5ccb      	ldrb	r3, [r1, r3]
 8000cf8:	f003 031f 	and.w	r3, r3, #31
 8000cfc:	fa22 f303 	lsr.w	r3, r2, r3
 8000d00:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000d02:	4b0f      	ldr	r3, [pc, #60]	; (8000d40 <HAL_Init+0x68>)
 8000d04:	699b      	ldr	r3, [r3, #24]
 8000d06:	f003 030f 	and.w	r3, r3, #15
 8000d0a:	4a0e      	ldr	r2, [pc, #56]	; (8000d44 <HAL_Init+0x6c>)
 8000d0c:	5cd3      	ldrb	r3, [r2, r3]
 8000d0e:	f003 031f 	and.w	r3, r3, #31
 8000d12:	687a      	ldr	r2, [r7, #4]
 8000d14:	fa22 f303 	lsr.w	r3, r2, r3
 8000d18:	4a0b      	ldr	r2, [pc, #44]	; (8000d48 <HAL_Init+0x70>)
 8000d1a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000d1c:	4a0b      	ldr	r2, [pc, #44]	; (8000d4c <HAL_Init+0x74>)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d22:	200f      	movs	r0, #15
 8000d24:	f000 f814 	bl	8000d50 <HAL_InitTick>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e002      	b.n	8000d38 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000d32:	f7ff fe0f 	bl	8000954 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d36:	2300      	movs	r3, #0
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3708      	adds	r7, #8
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	58024400 	.word	0x58024400
 8000d44:	080055f4 	.word	0x080055f4
 8000d48:	24000004 	.word	0x24000004
 8000d4c:	24000000 	.word	0x24000000

08000d50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000d58:	4b15      	ldr	r3, [pc, #84]	; (8000db0 <HAL_InitTick+0x60>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d101      	bne.n	8000d64 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000d60:	2301      	movs	r3, #1
 8000d62:	e021      	b.n	8000da8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000d64:	4b13      	ldr	r3, [pc, #76]	; (8000db4 <HAL_InitTick+0x64>)
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	4b11      	ldr	r3, [pc, #68]	; (8000db0 <HAL_InitTick+0x60>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d72:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f000 f921 	bl	8000fc2 <HAL_SYSTICK_Config>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000d86:	2301      	movs	r3, #1
 8000d88:	e00e      	b.n	8000da8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2b0f      	cmp	r3, #15
 8000d8e:	d80a      	bhi.n	8000da6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d90:	2200      	movs	r2, #0
 8000d92:	6879      	ldr	r1, [r7, #4]
 8000d94:	f04f 30ff 	mov.w	r0, #4294967295
 8000d98:	f000 f8f9 	bl	8000f8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d9c:	4a06      	ldr	r2, [pc, #24]	; (8000db8 <HAL_InitTick+0x68>)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000da2:	2300      	movs	r3, #0
 8000da4:	e000      	b.n	8000da8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000da6:	2301      	movs	r3, #1
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	3708      	adds	r7, #8
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	2400000c 	.word	0x2400000c
 8000db4:	24000000 	.word	0x24000000
 8000db8:	24000008 	.word	0x24000008

08000dbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000dc0:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <HAL_IncTick+0x20>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <HAL_IncTick+0x24>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4413      	add	r3, r2
 8000dcc:	4a04      	ldr	r2, [pc, #16]	; (8000de0 <HAL_IncTick+0x24>)
 8000dce:	6013      	str	r3, [r2, #0]
}
 8000dd0:	bf00      	nop
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	2400000c 	.word	0x2400000c
 8000de0:	24000108 	.word	0x24000108

08000de4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  return uwTick;
 8000de8:	4b03      	ldr	r3, [pc, #12]	; (8000df8 <HAL_GetTick+0x14>)
 8000dea:	681b      	ldr	r3, [r3, #0]
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	24000108 	.word	0x24000108

08000dfc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000e00:	4b03      	ldr	r3, [pc, #12]	; (8000e10 <HAL_GetREVID+0x14>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	0c1b      	lsrs	r3, r3, #16
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr
 8000e10:	5c001000 	.word	0x5c001000

08000e14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b085      	sub	sp, #20
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	f003 0307 	and.w	r3, r3, #7
 8000e22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e24:	4b0b      	ldr	r3, [pc, #44]	; (8000e54 <__NVIC_SetPriorityGrouping+0x40>)
 8000e26:	68db      	ldr	r3, [r3, #12]
 8000e28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e2a:	68ba      	ldr	r2, [r7, #8]
 8000e2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e30:	4013      	ands	r3, r2
 8000e32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000e3c:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <__NVIC_SetPriorityGrouping+0x44>)
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e42:	4a04      	ldr	r2, [pc, #16]	; (8000e54 <__NVIC_SetPriorityGrouping+0x40>)
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	60d3      	str	r3, [r2, #12]
}
 8000e48:	bf00      	nop
 8000e4a:	3714      	adds	r7, #20
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr
 8000e54:	e000ed00 	.word	0xe000ed00
 8000e58:	05fa0000 	.word	0x05fa0000

08000e5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e60:	4b04      	ldr	r3, [pc, #16]	; (8000e74 <__NVIC_GetPriorityGrouping+0x18>)
 8000e62:	68db      	ldr	r3, [r3, #12]
 8000e64:	0a1b      	lsrs	r3, r3, #8
 8000e66:	f003 0307 	and.w	r3, r3, #7
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	e000ed00 	.word	0xe000ed00

08000e78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	6039      	str	r1, [r7, #0]
 8000e82:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000e84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	db0a      	blt.n	8000ea2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	b2da      	uxtb	r2, r3
 8000e90:	490c      	ldr	r1, [pc, #48]	; (8000ec4 <__NVIC_SetPriority+0x4c>)
 8000e92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e96:	0112      	lsls	r2, r2, #4
 8000e98:	b2d2      	uxtb	r2, r2
 8000e9a:	440b      	add	r3, r1
 8000e9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ea0:	e00a      	b.n	8000eb8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	b2da      	uxtb	r2, r3
 8000ea6:	4908      	ldr	r1, [pc, #32]	; (8000ec8 <__NVIC_SetPriority+0x50>)
 8000ea8:	88fb      	ldrh	r3, [r7, #6]
 8000eaa:	f003 030f 	and.w	r3, r3, #15
 8000eae:	3b04      	subs	r3, #4
 8000eb0:	0112      	lsls	r2, r2, #4
 8000eb2:	b2d2      	uxtb	r2, r2
 8000eb4:	440b      	add	r3, r1
 8000eb6:	761a      	strb	r2, [r3, #24]
}
 8000eb8:	bf00      	nop
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr
 8000ec4:	e000e100 	.word	0xe000e100
 8000ec8:	e000ed00 	.word	0xe000ed00

08000ecc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b089      	sub	sp, #36	; 0x24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	60f8      	str	r0, [r7, #12]
 8000ed4:	60b9      	str	r1, [r7, #8]
 8000ed6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	f003 0307 	and.w	r3, r3, #7
 8000ede:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	f1c3 0307 	rsb	r3, r3, #7
 8000ee6:	2b04      	cmp	r3, #4
 8000ee8:	bf28      	it	cs
 8000eea:	2304      	movcs	r3, #4
 8000eec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	3304      	adds	r3, #4
 8000ef2:	2b06      	cmp	r3, #6
 8000ef4:	d902      	bls.n	8000efc <NVIC_EncodePriority+0x30>
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	3b03      	subs	r3, #3
 8000efa:	e000      	b.n	8000efe <NVIC_EncodePriority+0x32>
 8000efc:	2300      	movs	r3, #0
 8000efe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f00:	f04f 32ff 	mov.w	r2, #4294967295
 8000f04:	69bb      	ldr	r3, [r7, #24]
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	43da      	mvns	r2, r3
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	401a      	ands	r2, r3
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f14:	f04f 31ff 	mov.w	r1, #4294967295
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f1e:	43d9      	mvns	r1, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f24:	4313      	orrs	r3, r2
         );
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3724      	adds	r7, #36	; 0x24
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
	...

08000f34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	3b01      	subs	r3, #1
 8000f40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f44:	d301      	bcc.n	8000f4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f46:	2301      	movs	r3, #1
 8000f48:	e00f      	b.n	8000f6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f4a:	4a0a      	ldr	r2, [pc, #40]	; (8000f74 <SysTick_Config+0x40>)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	3b01      	subs	r3, #1
 8000f50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f52:	210f      	movs	r1, #15
 8000f54:	f04f 30ff 	mov.w	r0, #4294967295
 8000f58:	f7ff ff8e 	bl	8000e78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f5c:	4b05      	ldr	r3, [pc, #20]	; (8000f74 <SysTick_Config+0x40>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f62:	4b04      	ldr	r3, [pc, #16]	; (8000f74 <SysTick_Config+0x40>)
 8000f64:	2207      	movs	r2, #7
 8000f66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f68:	2300      	movs	r3, #0
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	e000e010 	.word	0xe000e010

08000f78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f80:	6878      	ldr	r0, [r7, #4]
 8000f82:	f7ff ff47 	bl	8000e14 <__NVIC_SetPriorityGrouping>
}
 8000f86:	bf00      	nop
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}

08000f8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	b086      	sub	sp, #24
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	4603      	mov	r3, r0
 8000f96:	60b9      	str	r1, [r7, #8]
 8000f98:	607a      	str	r2, [r7, #4]
 8000f9a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f9c:	f7ff ff5e 	bl	8000e5c <__NVIC_GetPriorityGrouping>
 8000fa0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fa2:	687a      	ldr	r2, [r7, #4]
 8000fa4:	68b9      	ldr	r1, [r7, #8]
 8000fa6:	6978      	ldr	r0, [r7, #20]
 8000fa8:	f7ff ff90 	bl	8000ecc <NVIC_EncodePriority>
 8000fac:	4602      	mov	r2, r0
 8000fae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000fb2:	4611      	mov	r1, r2
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff ff5f 	bl	8000e78 <__NVIC_SetPriority>
}
 8000fba:	bf00      	nop
 8000fbc:	3718      	adds	r7, #24
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b082      	sub	sp, #8
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f7ff ffb2 	bl	8000f34 <SysTick_Config>
 8000fd0:	4603      	mov	r3, r0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
	...

08000fdc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b089      	sub	sp, #36	; 0x24
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000fea:	4b89      	ldr	r3, [pc, #548]	; (8001210 <HAL_GPIO_Init+0x234>)
 8000fec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000fee:	e194      	b.n	800131a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	2101      	movs	r1, #1
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	2b00      	cmp	r3, #0
 8001004:	f000 8186 	beq.w	8001314 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f003 0303 	and.w	r3, r3, #3
 8001010:	2b01      	cmp	r3, #1
 8001012:	d005      	beq.n	8001020 <HAL_GPIO_Init+0x44>
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f003 0303 	and.w	r3, r3, #3
 800101c:	2b02      	cmp	r3, #2
 800101e:	d130      	bne.n	8001082 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	689b      	ldr	r3, [r3, #8]
 8001024:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	2203      	movs	r2, #3
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	43db      	mvns	r3, r3
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	4013      	ands	r3, r2
 8001036:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	68da      	ldr	r2, [r3, #12]
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	4313      	orrs	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001056:	2201      	movs	r2, #1
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	fa02 f303 	lsl.w	r3, r2, r3
 800105e:	43db      	mvns	r3, r3
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	4013      	ands	r3, r2
 8001064:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	091b      	lsrs	r3, r3, #4
 800106c:	f003 0201 	and.w	r2, r3, #1
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	fa02 f303 	lsl.w	r3, r2, r3
 8001076:	69ba      	ldr	r2, [r7, #24]
 8001078:	4313      	orrs	r3, r2
 800107a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f003 0303 	and.w	r3, r3, #3
 800108a:	2b03      	cmp	r3, #3
 800108c:	d017      	beq.n	80010be <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	68db      	ldr	r3, [r3, #12]
 8001092:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	2203      	movs	r2, #3
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	43db      	mvns	r3, r3
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	4013      	ands	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	689a      	ldr	r2, [r3, #8]
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	69ba      	ldr	r2, [r7, #24]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f003 0303 	and.w	r3, r3, #3
 80010c6:	2b02      	cmp	r3, #2
 80010c8:	d123      	bne.n	8001112 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	08da      	lsrs	r2, r3, #3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	3208      	adds	r2, #8
 80010d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	f003 0307 	and.w	r3, r3, #7
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	220f      	movs	r2, #15
 80010e2:	fa02 f303 	lsl.w	r3, r2, r3
 80010e6:	43db      	mvns	r3, r3
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	4013      	ands	r3, r2
 80010ec:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	691a      	ldr	r2, [r3, #16]
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	f003 0307 	and.w	r3, r3, #7
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	4313      	orrs	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	08da      	lsrs	r2, r3, #3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	3208      	adds	r2, #8
 800110c:	69b9      	ldr	r1, [r7, #24]
 800110e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	2203      	movs	r2, #3
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	43db      	mvns	r3, r3
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	4013      	ands	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f003 0203 	and.w	r2, r3, #3
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	fa02 f303 	lsl.w	r3, r2, r3
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	4313      	orrs	r3, r2
 800113e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800114e:	2b00      	cmp	r3, #0
 8001150:	f000 80e0 	beq.w	8001314 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001154:	4b2f      	ldr	r3, [pc, #188]	; (8001214 <HAL_GPIO_Init+0x238>)
 8001156:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800115a:	4a2e      	ldr	r2, [pc, #184]	; (8001214 <HAL_GPIO_Init+0x238>)
 800115c:	f043 0302 	orr.w	r3, r3, #2
 8001160:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001164:	4b2b      	ldr	r3, [pc, #172]	; (8001214 <HAL_GPIO_Init+0x238>)
 8001166:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800116a:	f003 0302 	and.w	r3, r3, #2
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001172:	4a29      	ldr	r2, [pc, #164]	; (8001218 <HAL_GPIO_Init+0x23c>)
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	089b      	lsrs	r3, r3, #2
 8001178:	3302      	adds	r3, #2
 800117a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800117e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	f003 0303 	and.w	r3, r3, #3
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	220f      	movs	r2, #15
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	43db      	mvns	r3, r3
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	4013      	ands	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a20      	ldr	r2, [pc, #128]	; (800121c <HAL_GPIO_Init+0x240>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d052      	beq.n	8001244 <HAL_GPIO_Init+0x268>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a1f      	ldr	r2, [pc, #124]	; (8001220 <HAL_GPIO_Init+0x244>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d031      	beq.n	800120a <HAL_GPIO_Init+0x22e>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a1e      	ldr	r2, [pc, #120]	; (8001224 <HAL_GPIO_Init+0x248>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d02b      	beq.n	8001206 <HAL_GPIO_Init+0x22a>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a1d      	ldr	r2, [pc, #116]	; (8001228 <HAL_GPIO_Init+0x24c>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d025      	beq.n	8001202 <HAL_GPIO_Init+0x226>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a1c      	ldr	r2, [pc, #112]	; (800122c <HAL_GPIO_Init+0x250>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d01f      	beq.n	80011fe <HAL_GPIO_Init+0x222>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a1b      	ldr	r2, [pc, #108]	; (8001230 <HAL_GPIO_Init+0x254>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d019      	beq.n	80011fa <HAL_GPIO_Init+0x21e>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4a1a      	ldr	r2, [pc, #104]	; (8001234 <HAL_GPIO_Init+0x258>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d013      	beq.n	80011f6 <HAL_GPIO_Init+0x21a>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4a19      	ldr	r2, [pc, #100]	; (8001238 <HAL_GPIO_Init+0x25c>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d00d      	beq.n	80011f2 <HAL_GPIO_Init+0x216>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4a18      	ldr	r2, [pc, #96]	; (800123c <HAL_GPIO_Init+0x260>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d007      	beq.n	80011ee <HAL_GPIO_Init+0x212>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4a17      	ldr	r2, [pc, #92]	; (8001240 <HAL_GPIO_Init+0x264>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d101      	bne.n	80011ea <HAL_GPIO_Init+0x20e>
 80011e6:	2309      	movs	r3, #9
 80011e8:	e02d      	b.n	8001246 <HAL_GPIO_Init+0x26a>
 80011ea:	230a      	movs	r3, #10
 80011ec:	e02b      	b.n	8001246 <HAL_GPIO_Init+0x26a>
 80011ee:	2308      	movs	r3, #8
 80011f0:	e029      	b.n	8001246 <HAL_GPIO_Init+0x26a>
 80011f2:	2307      	movs	r3, #7
 80011f4:	e027      	b.n	8001246 <HAL_GPIO_Init+0x26a>
 80011f6:	2306      	movs	r3, #6
 80011f8:	e025      	b.n	8001246 <HAL_GPIO_Init+0x26a>
 80011fa:	2305      	movs	r3, #5
 80011fc:	e023      	b.n	8001246 <HAL_GPIO_Init+0x26a>
 80011fe:	2304      	movs	r3, #4
 8001200:	e021      	b.n	8001246 <HAL_GPIO_Init+0x26a>
 8001202:	2303      	movs	r3, #3
 8001204:	e01f      	b.n	8001246 <HAL_GPIO_Init+0x26a>
 8001206:	2302      	movs	r3, #2
 8001208:	e01d      	b.n	8001246 <HAL_GPIO_Init+0x26a>
 800120a:	2301      	movs	r3, #1
 800120c:	e01b      	b.n	8001246 <HAL_GPIO_Init+0x26a>
 800120e:	bf00      	nop
 8001210:	58000080 	.word	0x58000080
 8001214:	58024400 	.word	0x58024400
 8001218:	58000400 	.word	0x58000400
 800121c:	58020000 	.word	0x58020000
 8001220:	58020400 	.word	0x58020400
 8001224:	58020800 	.word	0x58020800
 8001228:	58020c00 	.word	0x58020c00
 800122c:	58021000 	.word	0x58021000
 8001230:	58021400 	.word	0x58021400
 8001234:	58021800 	.word	0x58021800
 8001238:	58021c00 	.word	0x58021c00
 800123c:	58022000 	.word	0x58022000
 8001240:	58022400 	.word	0x58022400
 8001244:	2300      	movs	r3, #0
 8001246:	69fa      	ldr	r2, [r7, #28]
 8001248:	f002 0203 	and.w	r2, r2, #3
 800124c:	0092      	lsls	r2, r2, #2
 800124e:	4093      	lsls	r3, r2
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	4313      	orrs	r3, r2
 8001254:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001256:	4938      	ldr	r1, [pc, #224]	; (8001338 <HAL_GPIO_Init+0x35c>)
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	089b      	lsrs	r3, r3, #2
 800125c:	3302      	adds	r3, #2
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001264:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	43db      	mvns	r3, r3
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4013      	ands	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d003      	beq.n	800128a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	4313      	orrs	r3, r2
 8001288:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800128a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001292:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	43db      	mvns	r3, r3
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	4013      	ands	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d003      	beq.n	80012b8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80012b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	43db      	mvns	r3, r3
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	4013      	ands	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d003      	beq.n	80012e4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	43db      	mvns	r3, r3
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	4013      	ands	r3, r2
 80012f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d003      	beq.n	800130e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	4313      	orrs	r3, r2
 800130c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	3301      	adds	r3, #1
 8001318:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	fa22 f303 	lsr.w	r3, r2, r3
 8001324:	2b00      	cmp	r3, #0
 8001326:	f47f ae63 	bne.w	8000ff0 <HAL_GPIO_Init+0x14>
  }
}
 800132a:	bf00      	nop
 800132c:	bf00      	nop
 800132e:	3724      	adds	r7, #36	; 0x24
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr
 8001338:	58000400 	.word	0x58000400

0800133c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d101      	bne.n	800134e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e07f      	b.n	800144e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001354:	b2db      	uxtb	r3, r3
 8001356:	2b00      	cmp	r3, #0
 8001358:	d106      	bne.n	8001368 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2200      	movs	r2, #0
 800135e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f7ff fb10 	bl	8000988 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2224      	movs	r2, #36	; 0x24
 800136c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f022 0201 	bic.w	r2, r2, #1
 800137e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	685a      	ldr	r2, [r3, #4]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800138c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	689a      	ldr	r2, [r3, #8]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800139c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	68db      	ldr	r3, [r3, #12]
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d107      	bne.n	80013b6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	689a      	ldr	r2, [r3, #8]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80013b2:	609a      	str	r2, [r3, #8]
 80013b4:	e006      	b.n	80013c4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	689a      	ldr	r2, [r3, #8]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80013c2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	2b02      	cmp	r3, #2
 80013ca:	d104      	bne.n	80013d6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013d4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	6859      	ldr	r1, [r3, #4]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	4b1d      	ldr	r3, [pc, #116]	; (8001458 <HAL_I2C_Init+0x11c>)
 80013e2:	430b      	orrs	r3, r1
 80013e4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	68da      	ldr	r2, [r3, #12]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80013f4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	691a      	ldr	r2, [r3, #16]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	695b      	ldr	r3, [r3, #20]
 80013fe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	699b      	ldr	r3, [r3, #24]
 8001406:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	430a      	orrs	r2, r1
 800140e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	69d9      	ldr	r1, [r3, #28]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6a1a      	ldr	r2, [r3, #32]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	430a      	orrs	r2, r1
 800141e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f042 0201 	orr.w	r2, r2, #1
 800142e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2200      	movs	r2, #0
 8001434:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2220      	movs	r2, #32
 800143a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2200      	movs	r2, #0
 8001442:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2200      	movs	r2, #0
 8001448:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800144c:	2300      	movs	r3, #0
}
 800144e:	4618      	mov	r0, r3
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	02008000 	.word	0x02008000

0800145c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b088      	sub	sp, #32
 8001460:	af02      	add	r7, sp, #8
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	4608      	mov	r0, r1
 8001466:	4611      	mov	r1, r2
 8001468:	461a      	mov	r2, r3
 800146a:	4603      	mov	r3, r0
 800146c:	817b      	strh	r3, [r7, #10]
 800146e:	460b      	mov	r3, r1
 8001470:	813b      	strh	r3, [r7, #8]
 8001472:	4613      	mov	r3, r2
 8001474:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800147c:	b2db      	uxtb	r3, r3
 800147e:	2b20      	cmp	r3, #32
 8001480:	f040 80fd 	bne.w	800167e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001484:	6a3b      	ldr	r3, [r7, #32]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d002      	beq.n	8001490 <HAL_I2C_Mem_Read+0x34>
 800148a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800148c:	2b00      	cmp	r3, #0
 800148e:	d105      	bne.n	800149c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001496:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	e0f1      	b.n	8001680 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d101      	bne.n	80014aa <HAL_I2C_Mem_Read+0x4e>
 80014a6:	2302      	movs	r3, #2
 80014a8:	e0ea      	b.n	8001680 <HAL_I2C_Mem_Read+0x224>
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	2201      	movs	r2, #1
 80014ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80014b2:	f7ff fc97 	bl	8000de4 <HAL_GetTick>
 80014b6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	9300      	str	r3, [sp, #0]
 80014bc:	2319      	movs	r3, #25
 80014be:	2201      	movs	r2, #1
 80014c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014c4:	68f8      	ldr	r0, [r7, #12]
 80014c6:	f000 f95b 	bl	8001780 <I2C_WaitOnFlagUntilTimeout>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	e0d5      	b.n	8001680 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	2222      	movs	r2, #34	; 0x22
 80014d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	2240      	movs	r2, #64	; 0x40
 80014e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	2200      	movs	r2, #0
 80014e8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	6a3a      	ldr	r2, [r7, #32]
 80014ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80014f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	2200      	movs	r2, #0
 80014fa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80014fc:	88f8      	ldrh	r0, [r7, #6]
 80014fe:	893a      	ldrh	r2, [r7, #8]
 8001500:	8979      	ldrh	r1, [r7, #10]
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	9301      	str	r3, [sp, #4]
 8001506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001508:	9300      	str	r3, [sp, #0]
 800150a:	4603      	mov	r3, r0
 800150c:	68f8      	ldr	r0, [r7, #12]
 800150e:	f000 f8bf 	bl	8001690 <I2C_RequestMemoryRead>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d005      	beq.n	8001524 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	2200      	movs	r2, #0
 800151c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	e0ad      	b.n	8001680 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001528:	b29b      	uxth	r3, r3
 800152a:	2bff      	cmp	r3, #255	; 0xff
 800152c:	d90e      	bls.n	800154c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	22ff      	movs	r2, #255	; 0xff
 8001532:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001538:	b2da      	uxtb	r2, r3
 800153a:	8979      	ldrh	r1, [r7, #10]
 800153c:	4b52      	ldr	r3, [pc, #328]	; (8001688 <HAL_I2C_Mem_Read+0x22c>)
 800153e:	9300      	str	r3, [sp, #0]
 8001540:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001544:	68f8      	ldr	r0, [r7, #12]
 8001546:	f000 fac3 	bl	8001ad0 <I2C_TransferConfig>
 800154a:	e00f      	b.n	800156c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001550:	b29a      	uxth	r2, r3
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800155a:	b2da      	uxtb	r2, r3
 800155c:	8979      	ldrh	r1, [r7, #10]
 800155e:	4b4a      	ldr	r3, [pc, #296]	; (8001688 <HAL_I2C_Mem_Read+0x22c>)
 8001560:	9300      	str	r3, [sp, #0]
 8001562:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001566:	68f8      	ldr	r0, [r7, #12]
 8001568:	f000 fab2 	bl	8001ad0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	9300      	str	r3, [sp, #0]
 8001570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001572:	2200      	movs	r2, #0
 8001574:	2104      	movs	r1, #4
 8001576:	68f8      	ldr	r0, [r7, #12]
 8001578:	f000 f902 	bl	8001780 <I2C_WaitOnFlagUntilTimeout>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e07c      	b.n	8001680 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001590:	b2d2      	uxtb	r2, r2
 8001592:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001598:	1c5a      	adds	r2, r3, #1
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015a2:	3b01      	subs	r3, #1
 80015a4:	b29a      	uxth	r2, r3
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	3b01      	subs	r3, #1
 80015b2:	b29a      	uxth	r2, r3
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015bc:	b29b      	uxth	r3, r3
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d034      	beq.n	800162c <HAL_I2C_Mem_Read+0x1d0>
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d130      	bne.n	800162c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	9300      	str	r3, [sp, #0]
 80015ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015d0:	2200      	movs	r2, #0
 80015d2:	2180      	movs	r1, #128	; 0x80
 80015d4:	68f8      	ldr	r0, [r7, #12]
 80015d6:	f000 f8d3 	bl	8001780 <I2C_WaitOnFlagUntilTimeout>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	e04d      	b.n	8001680 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015e8:	b29b      	uxth	r3, r3
 80015ea:	2bff      	cmp	r3, #255	; 0xff
 80015ec:	d90e      	bls.n	800160c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	22ff      	movs	r2, #255	; 0xff
 80015f2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015f8:	b2da      	uxtb	r2, r3
 80015fa:	8979      	ldrh	r1, [r7, #10]
 80015fc:	2300      	movs	r3, #0
 80015fe:	9300      	str	r3, [sp, #0]
 8001600:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001604:	68f8      	ldr	r0, [r7, #12]
 8001606:	f000 fa63 	bl	8001ad0 <I2C_TransferConfig>
 800160a:	e00f      	b.n	800162c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001610:	b29a      	uxth	r2, r3
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800161a:	b2da      	uxtb	r2, r3
 800161c:	8979      	ldrh	r1, [r7, #10]
 800161e:	2300      	movs	r3, #0
 8001620:	9300      	str	r3, [sp, #0]
 8001622:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001626:	68f8      	ldr	r0, [r7, #12]
 8001628:	f000 fa52 	bl	8001ad0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001630:	b29b      	uxth	r3, r3
 8001632:	2b00      	cmp	r3, #0
 8001634:	d19a      	bne.n	800156c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001636:	697a      	ldr	r2, [r7, #20]
 8001638:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800163a:	68f8      	ldr	r0, [r7, #12]
 800163c:	f000 f920 	bl	8001880 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e01a      	b.n	8001680 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	2220      	movs	r2, #32
 8001650:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	6859      	ldr	r1, [r3, #4]
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	4b0b      	ldr	r3, [pc, #44]	; (800168c <HAL_I2C_Mem_Read+0x230>)
 800165e:	400b      	ands	r3, r1
 8001660:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	2220      	movs	r2, #32
 8001666:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	2200      	movs	r2, #0
 800166e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	2200      	movs	r2, #0
 8001676:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800167a:	2300      	movs	r3, #0
 800167c:	e000      	b.n	8001680 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800167e:	2302      	movs	r3, #2
  }
}
 8001680:	4618      	mov	r0, r3
 8001682:	3718      	adds	r7, #24
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	80002400 	.word	0x80002400
 800168c:	fe00e800 	.word	0xfe00e800

08001690 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b086      	sub	sp, #24
 8001694:	af02      	add	r7, sp, #8
 8001696:	60f8      	str	r0, [r7, #12]
 8001698:	4608      	mov	r0, r1
 800169a:	4611      	mov	r1, r2
 800169c:	461a      	mov	r2, r3
 800169e:	4603      	mov	r3, r0
 80016a0:	817b      	strh	r3, [r7, #10]
 80016a2:	460b      	mov	r3, r1
 80016a4:	813b      	strh	r3, [r7, #8]
 80016a6:	4613      	mov	r3, r2
 80016a8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80016aa:	88fb      	ldrh	r3, [r7, #6]
 80016ac:	b2da      	uxtb	r2, r3
 80016ae:	8979      	ldrh	r1, [r7, #10]
 80016b0:	4b20      	ldr	r3, [pc, #128]	; (8001734 <I2C_RequestMemoryRead+0xa4>)
 80016b2:	9300      	str	r3, [sp, #0]
 80016b4:	2300      	movs	r3, #0
 80016b6:	68f8      	ldr	r0, [r7, #12]
 80016b8:	f000 fa0a 	bl	8001ad0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80016bc:	69fa      	ldr	r2, [r7, #28]
 80016be:	69b9      	ldr	r1, [r7, #24]
 80016c0:	68f8      	ldr	r0, [r7, #12]
 80016c2:	f000 f89d 	bl	8001800 <I2C_WaitOnTXISFlagUntilTimeout>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e02c      	b.n	800172a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80016d0:	88fb      	ldrh	r3, [r7, #6]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d105      	bne.n	80016e2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80016d6:	893b      	ldrh	r3, [r7, #8]
 80016d8:	b2da      	uxtb	r2, r3
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	629a      	str	r2, [r3, #40]	; 0x28
 80016e0:	e015      	b.n	800170e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80016e2:	893b      	ldrh	r3, [r7, #8]
 80016e4:	0a1b      	lsrs	r3, r3, #8
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	b2da      	uxtb	r2, r3
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80016f0:	69fa      	ldr	r2, [r7, #28]
 80016f2:	69b9      	ldr	r1, [r7, #24]
 80016f4:	68f8      	ldr	r0, [r7, #12]
 80016f6:	f000 f883 	bl	8001800 <I2C_WaitOnTXISFlagUntilTimeout>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e012      	b.n	800172a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001704:	893b      	ldrh	r3, [r7, #8]
 8001706:	b2da      	uxtb	r2, r3
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	9300      	str	r3, [sp, #0]
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	2200      	movs	r2, #0
 8001716:	2140      	movs	r1, #64	; 0x40
 8001718:	68f8      	ldr	r0, [r7, #12]
 800171a:	f000 f831 	bl	8001780 <I2C_WaitOnFlagUntilTimeout>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e000      	b.n	800172a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001728:	2300      	movs	r3, #0
}
 800172a:	4618      	mov	r0, r3
 800172c:	3710      	adds	r7, #16
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	80002000 	.word	0x80002000

08001738 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	699b      	ldr	r3, [r3, #24]
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	2b02      	cmp	r3, #2
 800174c:	d103      	bne.n	8001756 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	2200      	movs	r2, #0
 8001754:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	699b      	ldr	r3, [r3, #24]
 800175c:	f003 0301 	and.w	r3, r3, #1
 8001760:	2b01      	cmp	r3, #1
 8001762:	d007      	beq.n	8001774 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	699a      	ldr	r2, [r3, #24]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f042 0201 	orr.w	r2, r2, #1
 8001772:	619a      	str	r2, [r3, #24]
  }
}
 8001774:	bf00      	nop
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	60f8      	str	r0, [r7, #12]
 8001788:	60b9      	str	r1, [r7, #8]
 800178a:	603b      	str	r3, [r7, #0]
 800178c:	4613      	mov	r3, r2
 800178e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001790:	e022      	b.n	80017d8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001798:	d01e      	beq.n	80017d8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800179a:	f7ff fb23 	bl	8000de4 <HAL_GetTick>
 800179e:	4602      	mov	r2, r0
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	683a      	ldr	r2, [r7, #0]
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d302      	bcc.n	80017b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d113      	bne.n	80017d8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b4:	f043 0220 	orr.w	r2, r3, #32
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	2220      	movs	r2, #32
 80017c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	2200      	movs	r2, #0
 80017c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	2200      	movs	r2, #0
 80017d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	e00f      	b.n	80017f8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	699a      	ldr	r2, [r3, #24]
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	4013      	ands	r3, r2
 80017e2:	68ba      	ldr	r2, [r7, #8]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	bf0c      	ite	eq
 80017e8:	2301      	moveq	r3, #1
 80017ea:	2300      	movne	r3, #0
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	461a      	mov	r2, r3
 80017f0:	79fb      	ldrb	r3, [r7, #7]
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d0cd      	beq.n	8001792 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80017f6:	2300      	movs	r3, #0
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3710      	adds	r7, #16
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}

08001800 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	60b9      	str	r1, [r7, #8]
 800180a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800180c:	e02c      	b.n	8001868 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	68b9      	ldr	r1, [r7, #8]
 8001812:	68f8      	ldr	r0, [r7, #12]
 8001814:	f000 f870 	bl	80018f8 <I2C_IsErrorOccurred>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e02a      	b.n	8001878 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001828:	d01e      	beq.n	8001868 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800182a:	f7ff fadb 	bl	8000de4 <HAL_GetTick>
 800182e:	4602      	mov	r2, r0
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	68ba      	ldr	r2, [r7, #8]
 8001836:	429a      	cmp	r2, r3
 8001838:	d302      	bcc.n	8001840 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d113      	bne.n	8001868 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001844:	f043 0220 	orr.w	r2, r3, #32
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2220      	movs	r2, #32
 8001850:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	2200      	movs	r2, #0
 8001858:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	2200      	movs	r2, #0
 8001860:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e007      	b.n	8001878 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	699b      	ldr	r3, [r3, #24]
 800186e:	f003 0302 	and.w	r3, r3, #2
 8001872:	2b02      	cmp	r3, #2
 8001874:	d1cb      	bne.n	800180e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001876:	2300      	movs	r3, #0
}
 8001878:	4618      	mov	r0, r3
 800187a:	3710      	adds	r7, #16
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}

08001880 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	60b9      	str	r1, [r7, #8]
 800188a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800188c:	e028      	b.n	80018e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	68b9      	ldr	r1, [r7, #8]
 8001892:	68f8      	ldr	r0, [r7, #12]
 8001894:	f000 f830 	bl	80018f8 <I2C_IsErrorOccurred>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e026      	b.n	80018f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018a2:	f7ff fa9f 	bl	8000de4 <HAL_GetTick>
 80018a6:	4602      	mov	r2, r0
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	68ba      	ldr	r2, [r7, #8]
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d302      	bcc.n	80018b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d113      	bne.n	80018e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018bc:	f043 0220 	orr.w	r2, r3, #32
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2220      	movs	r2, #32
 80018c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	2200      	movs	r2, #0
 80018d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	2200      	movs	r2, #0
 80018d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e007      	b.n	80018f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	699b      	ldr	r3, [r3, #24]
 80018e6:	f003 0320 	and.w	r3, r3, #32
 80018ea:	2b20      	cmp	r3, #32
 80018ec:	d1cf      	bne.n	800188e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80018ee:	2300      	movs	r3, #0
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3710      	adds	r7, #16
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b08a      	sub	sp, #40	; 0x28
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001904:	2300      	movs	r3, #0
 8001906:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001912:	2300      	movs	r3, #0
 8001914:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800191a:	69bb      	ldr	r3, [r7, #24]
 800191c:	f003 0310 	and.w	r3, r3, #16
 8001920:	2b00      	cmp	r3, #0
 8001922:	d075      	beq.n	8001a10 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2210      	movs	r2, #16
 800192a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800192c:	e056      	b.n	80019dc <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001934:	d052      	beq.n	80019dc <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001936:	f7ff fa55 	bl	8000de4 <HAL_GetTick>
 800193a:	4602      	mov	r2, r0
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	68ba      	ldr	r2, [r7, #8]
 8001942:	429a      	cmp	r2, r3
 8001944:	d302      	bcc.n	800194c <I2C_IsErrorOccurred+0x54>
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d147      	bne.n	80019dc <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001956:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800195e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	699b      	ldr	r3, [r3, #24]
 8001966:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800196a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800196e:	d12e      	bne.n	80019ce <I2C_IsErrorOccurred+0xd6>
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001976:	d02a      	beq.n	80019ce <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8001978:	7cfb      	ldrb	r3, [r7, #19]
 800197a:	2b20      	cmp	r3, #32
 800197c:	d027      	beq.n	80019ce <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	685a      	ldr	r2, [r3, #4]
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800198c:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800198e:	f7ff fa29 	bl	8000de4 <HAL_GetTick>
 8001992:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001994:	e01b      	b.n	80019ce <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001996:	f7ff fa25 	bl	8000de4 <HAL_GetTick>
 800199a:	4602      	mov	r2, r0
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	2b19      	cmp	r3, #25
 80019a2:	d914      	bls.n	80019ce <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a8:	f043 0220 	orr.w	r2, r3, #32
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	2220      	movs	r2, #32
 80019b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2200      	movs	r2, #0
 80019bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2200      	movs	r2, #0
 80019c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	699b      	ldr	r3, [r3, #24]
 80019d4:	f003 0320 	and.w	r3, r3, #32
 80019d8:	2b20      	cmp	r3, #32
 80019da:	d1dc      	bne.n	8001996 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	699b      	ldr	r3, [r3, #24]
 80019e2:	f003 0320 	and.w	r3, r3, #32
 80019e6:	2b20      	cmp	r3, #32
 80019e8:	d003      	beq.n	80019f2 <I2C_IsErrorOccurred+0xfa>
 80019ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d09d      	beq.n	800192e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80019f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d103      	bne.n	8001a02 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	2220      	movs	r2, #32
 8001a00:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001a02:	6a3b      	ldr	r3, [r7, #32]
 8001a04:	f043 0304 	orr.w	r3, r3, #4
 8001a08:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	699b      	ldr	r3, [r3, #24]
 8001a16:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d00b      	beq.n	8001a3a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001a22:	6a3b      	ldr	r3, [r7, #32]
 8001a24:	f043 0301 	orr.w	r3, r3, #1
 8001a28:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a32:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d00b      	beq.n	8001a5c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001a44:	6a3b      	ldr	r3, [r7, #32]
 8001a46:	f043 0308 	orr.w	r3, r3, #8
 8001a4a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a54:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001a5c:	69bb      	ldr	r3, [r7, #24]
 8001a5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d00b      	beq.n	8001a7e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001a66:	6a3b      	ldr	r3, [r7, #32]
 8001a68:	f043 0302 	orr.w	r3, r3, #2
 8001a6c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a76:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001a7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d01c      	beq.n	8001ac0 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001a86:	68f8      	ldr	r0, [r7, #12]
 8001a88:	f7ff fe56 	bl	8001738 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	6859      	ldr	r1, [r3, #4]
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	4b0d      	ldr	r3, [pc, #52]	; (8001acc <I2C_IsErrorOccurred+0x1d4>)
 8001a98:	400b      	ands	r3, r1
 8001a9a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001aa0:	6a3b      	ldr	r3, [r7, #32]
 8001aa2:	431a      	orrs	r2, r3
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2220      	movs	r2, #32
 8001aac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2200      	movs	r2, #0
 8001abc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001ac0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3728      	adds	r7, #40	; 0x28
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	fe00e800 	.word	0xfe00e800

08001ad0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b087      	sub	sp, #28
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	60f8      	str	r0, [r7, #12]
 8001ad8:	607b      	str	r3, [r7, #4]
 8001ada:	460b      	mov	r3, r1
 8001adc:	817b      	strh	r3, [r7, #10]
 8001ade:	4613      	mov	r3, r2
 8001ae0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001ae2:	897b      	ldrh	r3, [r7, #10]
 8001ae4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001ae8:	7a7b      	ldrb	r3, [r7, #9]
 8001aea:	041b      	lsls	r3, r3, #16
 8001aec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001af0:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001af6:	6a3b      	ldr	r3, [r7, #32]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001afe:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	685a      	ldr	r2, [r3, #4]
 8001b06:	6a3b      	ldr	r3, [r7, #32]
 8001b08:	0d5b      	lsrs	r3, r3, #21
 8001b0a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001b0e:	4b08      	ldr	r3, [pc, #32]	; (8001b30 <I2C_TransferConfig+0x60>)
 8001b10:	430b      	orrs	r3, r1
 8001b12:	43db      	mvns	r3, r3
 8001b14:	ea02 0103 	and.w	r1, r2, r3
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	697a      	ldr	r2, [r7, #20]
 8001b1e:	430a      	orrs	r2, r1
 8001b20:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001b22:	bf00      	nop
 8001b24:	371c      	adds	r7, #28
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	03ff63ff 	.word	0x03ff63ff

08001b34 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	2b20      	cmp	r3, #32
 8001b48:	d138      	bne.n	8001bbc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d101      	bne.n	8001b58 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001b54:	2302      	movs	r3, #2
 8001b56:	e032      	b.n	8001bbe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2224      	movs	r2, #36	; 0x24
 8001b64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f022 0201 	bic.w	r2, r2, #1
 8001b76:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001b86:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	6819      	ldr	r1, [r3, #0]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	683a      	ldr	r2, [r7, #0]
 8001b94:	430a      	orrs	r2, r1
 8001b96:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f042 0201 	orr.w	r2, r2, #1
 8001ba6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2220      	movs	r2, #32
 8001bac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	e000      	b.n	8001bbe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001bbc:	2302      	movs	r3, #2
  }
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr

08001bca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	b085      	sub	sp, #20
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
 8001bd2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	2b20      	cmp	r3, #32
 8001bde:	d139      	bne.n	8001c54 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d101      	bne.n	8001bee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001bea:	2302      	movs	r3, #2
 8001bec:	e033      	b.n	8001c56 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2224      	movs	r2, #36	; 0x24
 8001bfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f022 0201 	bic.w	r2, r2, #1
 8001c0c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001c1c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	021b      	lsls	r3, r3, #8
 8001c22:	68fa      	ldr	r2, [r7, #12]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	68fa      	ldr	r2, [r7, #12]
 8001c2e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f042 0201 	orr.w	r2, r2, #1
 8001c3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2220      	movs	r2, #32
 8001c44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001c50:	2300      	movs	r3, #0
 8001c52:	e000      	b.n	8001c56 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001c54:	2302      	movs	r3, #2
  }
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3714      	adds	r7, #20
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
	...

08001c64 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001c6c:	4b19      	ldr	r3, [pc, #100]	; (8001cd4 <HAL_PWREx_ConfigSupply+0x70>)
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	f003 0304 	and.w	r3, r3, #4
 8001c74:	2b04      	cmp	r3, #4
 8001c76:	d00a      	beq.n	8001c8e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001c78:	4b16      	ldr	r3, [pc, #88]	; (8001cd4 <HAL_PWREx_ConfigSupply+0x70>)
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	f003 0307 	and.w	r3, r3, #7
 8001c80:	687a      	ldr	r2, [r7, #4]
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d001      	beq.n	8001c8a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e01f      	b.n	8001cca <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	e01d      	b.n	8001cca <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001c8e:	4b11      	ldr	r3, [pc, #68]	; (8001cd4 <HAL_PWREx_ConfigSupply+0x70>)
 8001c90:	68db      	ldr	r3, [r3, #12]
 8001c92:	f023 0207 	bic.w	r2, r3, #7
 8001c96:	490f      	ldr	r1, [pc, #60]	; (8001cd4 <HAL_PWREx_ConfigSupply+0x70>)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001c9e:	f7ff f8a1 	bl	8000de4 <HAL_GetTick>
 8001ca2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001ca4:	e009      	b.n	8001cba <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001ca6:	f7ff f89d 	bl	8000de4 <HAL_GetTick>
 8001caa:	4602      	mov	r2, r0
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001cb4:	d901      	bls.n	8001cba <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e007      	b.n	8001cca <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001cba:	4b06      	ldr	r3, [pc, #24]	; (8001cd4 <HAL_PWREx_ConfigSupply+0x70>)
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cc6:	d1ee      	bne.n	8001ca6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001cc8:	2300      	movs	r3, #0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3710      	adds	r7, #16
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	58024800 	.word	0x58024800

08001cd8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b08c      	sub	sp, #48	; 0x30
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d102      	bne.n	8001cec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	f000 bc1d 	b.w	8002526 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0301 	and.w	r3, r3, #1
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	f000 8087 	beq.w	8001e08 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cfa:	4b99      	ldr	r3, [pc, #612]	; (8001f60 <HAL_RCC_OscConfig+0x288>)
 8001cfc:	691b      	ldr	r3, [r3, #16]
 8001cfe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d02:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001d04:	4b96      	ldr	r3, [pc, #600]	; (8001f60 <HAL_RCC_OscConfig+0x288>)
 8001d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d08:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d0c:	2b10      	cmp	r3, #16
 8001d0e:	d007      	beq.n	8001d20 <HAL_RCC_OscConfig+0x48>
 8001d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d12:	2b18      	cmp	r3, #24
 8001d14:	d110      	bne.n	8001d38 <HAL_RCC_OscConfig+0x60>
 8001d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d18:	f003 0303 	and.w	r3, r3, #3
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d10b      	bne.n	8001d38 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d20:	4b8f      	ldr	r3, [pc, #572]	; (8001f60 <HAL_RCC_OscConfig+0x288>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d06c      	beq.n	8001e06 <HAL_RCC_OscConfig+0x12e>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d168      	bne.n	8001e06 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e3f6      	b.n	8002526 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d40:	d106      	bne.n	8001d50 <HAL_RCC_OscConfig+0x78>
 8001d42:	4b87      	ldr	r3, [pc, #540]	; (8001f60 <HAL_RCC_OscConfig+0x288>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a86      	ldr	r2, [pc, #536]	; (8001f60 <HAL_RCC_OscConfig+0x288>)
 8001d48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d4c:	6013      	str	r3, [r2, #0]
 8001d4e:	e02e      	b.n	8001dae <HAL_RCC_OscConfig+0xd6>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d10c      	bne.n	8001d72 <HAL_RCC_OscConfig+0x9a>
 8001d58:	4b81      	ldr	r3, [pc, #516]	; (8001f60 <HAL_RCC_OscConfig+0x288>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a80      	ldr	r2, [pc, #512]	; (8001f60 <HAL_RCC_OscConfig+0x288>)
 8001d5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d62:	6013      	str	r3, [r2, #0]
 8001d64:	4b7e      	ldr	r3, [pc, #504]	; (8001f60 <HAL_RCC_OscConfig+0x288>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a7d      	ldr	r2, [pc, #500]	; (8001f60 <HAL_RCC_OscConfig+0x288>)
 8001d6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d6e:	6013      	str	r3, [r2, #0]
 8001d70:	e01d      	b.n	8001dae <HAL_RCC_OscConfig+0xd6>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d7a:	d10c      	bne.n	8001d96 <HAL_RCC_OscConfig+0xbe>
 8001d7c:	4b78      	ldr	r3, [pc, #480]	; (8001f60 <HAL_RCC_OscConfig+0x288>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a77      	ldr	r2, [pc, #476]	; (8001f60 <HAL_RCC_OscConfig+0x288>)
 8001d82:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d86:	6013      	str	r3, [r2, #0]
 8001d88:	4b75      	ldr	r3, [pc, #468]	; (8001f60 <HAL_RCC_OscConfig+0x288>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a74      	ldr	r2, [pc, #464]	; (8001f60 <HAL_RCC_OscConfig+0x288>)
 8001d8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d92:	6013      	str	r3, [r2, #0]
 8001d94:	e00b      	b.n	8001dae <HAL_RCC_OscConfig+0xd6>
 8001d96:	4b72      	ldr	r3, [pc, #456]	; (8001f60 <HAL_RCC_OscConfig+0x288>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a71      	ldr	r2, [pc, #452]	; (8001f60 <HAL_RCC_OscConfig+0x288>)
 8001d9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001da0:	6013      	str	r3, [r2, #0]
 8001da2:	4b6f      	ldr	r3, [pc, #444]	; (8001f60 <HAL_RCC_OscConfig+0x288>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a6e      	ldr	r2, [pc, #440]	; (8001f60 <HAL_RCC_OscConfig+0x288>)
 8001da8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dac:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d013      	beq.n	8001dde <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db6:	f7ff f815 	bl	8000de4 <HAL_GetTick>
 8001dba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001dbc:	e008      	b.n	8001dd0 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dbe:	f7ff f811 	bl	8000de4 <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	2b64      	cmp	r3, #100	; 0x64
 8001dca:	d901      	bls.n	8001dd0 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e3aa      	b.n	8002526 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001dd0:	4b63      	ldr	r3, [pc, #396]	; (8001f60 <HAL_RCC_OscConfig+0x288>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d0f0      	beq.n	8001dbe <HAL_RCC_OscConfig+0xe6>
 8001ddc:	e014      	b.n	8001e08 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dde:	f7ff f801 	bl	8000de4 <HAL_GetTick>
 8001de2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001de4:	e008      	b.n	8001df8 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001de6:	f7fe fffd 	bl	8000de4 <HAL_GetTick>
 8001dea:	4602      	mov	r2, r0
 8001dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	2b64      	cmp	r3, #100	; 0x64
 8001df2:	d901      	bls.n	8001df8 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	e396      	b.n	8002526 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001df8:	4b59      	ldr	r3, [pc, #356]	; (8001f60 <HAL_RCC_OscConfig+0x288>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d1f0      	bne.n	8001de6 <HAL_RCC_OscConfig+0x10e>
 8001e04:	e000      	b.n	8001e08 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e06:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0302 	and.w	r3, r3, #2
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	f000 80cb 	beq.w	8001fac <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e16:	4b52      	ldr	r3, [pc, #328]	; (8001f60 <HAL_RCC_OscConfig+0x288>)
 8001e18:	691b      	ldr	r3, [r3, #16]
 8001e1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001e1e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001e20:	4b4f      	ldr	r3, [pc, #316]	; (8001f60 <HAL_RCC_OscConfig+0x288>)
 8001e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e24:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001e26:	6a3b      	ldr	r3, [r7, #32]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d007      	beq.n	8001e3c <HAL_RCC_OscConfig+0x164>
 8001e2c:	6a3b      	ldr	r3, [r7, #32]
 8001e2e:	2b18      	cmp	r3, #24
 8001e30:	d156      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x208>
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	f003 0303 	and.w	r3, r3, #3
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d151      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e3c:	4b48      	ldr	r3, [pc, #288]	; (8001f60 <HAL_RCC_OscConfig+0x288>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0304 	and.w	r3, r3, #4
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d005      	beq.n	8001e54 <HAL_RCC_OscConfig+0x17c>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d101      	bne.n	8001e54 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e368      	b.n	8002526 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001e54:	4b42      	ldr	r3, [pc, #264]	; (8001f60 <HAL_RCC_OscConfig+0x288>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f023 0219 	bic.w	r2, r3, #25
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	493f      	ldr	r1, [pc, #252]	; (8001f60 <HAL_RCC_OscConfig+0x288>)
 8001e62:	4313      	orrs	r3, r2
 8001e64:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e66:	f7fe ffbd 	bl	8000de4 <HAL_GetTick>
 8001e6a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e6c:	e008      	b.n	8001e80 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e6e:	f7fe ffb9 	bl	8000de4 <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d901      	bls.n	8001e80 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e352      	b.n	8002526 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e80:	4b37      	ldr	r3, [pc, #220]	; (8001f60 <HAL_RCC_OscConfig+0x288>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0304 	and.w	r3, r3, #4
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d0f0      	beq.n	8001e6e <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e8c:	f7fe ffb6 	bl	8000dfc <HAL_GetREVID>
 8001e90:	4603      	mov	r3, r0
 8001e92:	f241 0203 	movw	r2, #4099	; 0x1003
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d817      	bhi.n	8001eca <HAL_RCC_OscConfig+0x1f2>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	691b      	ldr	r3, [r3, #16]
 8001e9e:	2b40      	cmp	r3, #64	; 0x40
 8001ea0:	d108      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x1dc>
 8001ea2:	4b2f      	ldr	r3, [pc, #188]	; (8001f60 <HAL_RCC_OscConfig+0x288>)
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001eaa:	4a2d      	ldr	r2, [pc, #180]	; (8001f60 <HAL_RCC_OscConfig+0x288>)
 8001eac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eb0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001eb2:	e07b      	b.n	8001fac <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eb4:	4b2a      	ldr	r3, [pc, #168]	; (8001f60 <HAL_RCC_OscConfig+0x288>)
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	691b      	ldr	r3, [r3, #16]
 8001ec0:	031b      	lsls	r3, r3, #12
 8001ec2:	4927      	ldr	r1, [pc, #156]	; (8001f60 <HAL_RCC_OscConfig+0x288>)
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ec8:	e070      	b.n	8001fac <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eca:	4b25      	ldr	r3, [pc, #148]	; (8001f60 <HAL_RCC_OscConfig+0x288>)
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	691b      	ldr	r3, [r3, #16]
 8001ed6:	061b      	lsls	r3, r3, #24
 8001ed8:	4921      	ldr	r1, [pc, #132]	; (8001f60 <HAL_RCC_OscConfig+0x288>)
 8001eda:	4313      	orrs	r3, r2
 8001edc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ede:	e065      	b.n	8001fac <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d048      	beq.n	8001f7a <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001ee8:	4b1d      	ldr	r3, [pc, #116]	; (8001f60 <HAL_RCC_OscConfig+0x288>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f023 0219 	bic.w	r2, r3, #25
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	491a      	ldr	r1, [pc, #104]	; (8001f60 <HAL_RCC_OscConfig+0x288>)
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001efa:	f7fe ff73 	bl	8000de4 <HAL_GetTick>
 8001efe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f00:	e008      	b.n	8001f14 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f02:	f7fe ff6f 	bl	8000de4 <HAL_GetTick>
 8001f06:	4602      	mov	r2, r0
 8001f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d901      	bls.n	8001f14 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8001f10:	2303      	movs	r3, #3
 8001f12:	e308      	b.n	8002526 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f14:	4b12      	ldr	r3, [pc, #72]	; (8001f60 <HAL_RCC_OscConfig+0x288>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0304 	and.w	r3, r3, #4
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d0f0      	beq.n	8001f02 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f20:	f7fe ff6c 	bl	8000dfc <HAL_GetREVID>
 8001f24:	4603      	mov	r3, r0
 8001f26:	f241 0203 	movw	r2, #4099	; 0x1003
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d81a      	bhi.n	8001f64 <HAL_RCC_OscConfig+0x28c>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	2b40      	cmp	r3, #64	; 0x40
 8001f34:	d108      	bne.n	8001f48 <HAL_RCC_OscConfig+0x270>
 8001f36:	4b0a      	ldr	r3, [pc, #40]	; (8001f60 <HAL_RCC_OscConfig+0x288>)
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001f3e:	4a08      	ldr	r2, [pc, #32]	; (8001f60 <HAL_RCC_OscConfig+0x288>)
 8001f40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f44:	6053      	str	r3, [r2, #4]
 8001f46:	e031      	b.n	8001fac <HAL_RCC_OscConfig+0x2d4>
 8001f48:	4b05      	ldr	r3, [pc, #20]	; (8001f60 <HAL_RCC_OscConfig+0x288>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	691b      	ldr	r3, [r3, #16]
 8001f54:	031b      	lsls	r3, r3, #12
 8001f56:	4902      	ldr	r1, [pc, #8]	; (8001f60 <HAL_RCC_OscConfig+0x288>)
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	604b      	str	r3, [r1, #4]
 8001f5c:	e026      	b.n	8001fac <HAL_RCC_OscConfig+0x2d4>
 8001f5e:	bf00      	nop
 8001f60:	58024400 	.word	0x58024400
 8001f64:	4b9a      	ldr	r3, [pc, #616]	; (80021d0 <HAL_RCC_OscConfig+0x4f8>)
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	691b      	ldr	r3, [r3, #16]
 8001f70:	061b      	lsls	r3, r3, #24
 8001f72:	4997      	ldr	r1, [pc, #604]	; (80021d0 <HAL_RCC_OscConfig+0x4f8>)
 8001f74:	4313      	orrs	r3, r2
 8001f76:	604b      	str	r3, [r1, #4]
 8001f78:	e018      	b.n	8001fac <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f7a:	4b95      	ldr	r3, [pc, #596]	; (80021d0 <HAL_RCC_OscConfig+0x4f8>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a94      	ldr	r2, [pc, #592]	; (80021d0 <HAL_RCC_OscConfig+0x4f8>)
 8001f80:	f023 0301 	bic.w	r3, r3, #1
 8001f84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f86:	f7fe ff2d 	bl	8000de4 <HAL_GetTick>
 8001f8a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001f8c:	e008      	b.n	8001fa0 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f8e:	f7fe ff29 	bl	8000de4 <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d901      	bls.n	8001fa0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e2c2      	b.n	8002526 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001fa0:	4b8b      	ldr	r3, [pc, #556]	; (80021d0 <HAL_RCC_OscConfig+0x4f8>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0304 	and.w	r3, r3, #4
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d1f0      	bne.n	8001f8e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0310 	and.w	r3, r3, #16
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	f000 80a9 	beq.w	800210c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fba:	4b85      	ldr	r3, [pc, #532]	; (80021d0 <HAL_RCC_OscConfig+0x4f8>)
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001fc2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001fc4:	4b82      	ldr	r3, [pc, #520]	; (80021d0 <HAL_RCC_OscConfig+0x4f8>)
 8001fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	2b08      	cmp	r3, #8
 8001fce:	d007      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x308>
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	2b18      	cmp	r3, #24
 8001fd4:	d13a      	bne.n	800204c <HAL_RCC_OscConfig+0x374>
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	f003 0303 	and.w	r3, r3, #3
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d135      	bne.n	800204c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001fe0:	4b7b      	ldr	r3, [pc, #492]	; (80021d0 <HAL_RCC_OscConfig+0x4f8>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d005      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x320>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	69db      	ldr	r3, [r3, #28]
 8001ff0:	2b80      	cmp	r3, #128	; 0x80
 8001ff2:	d001      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e296      	b.n	8002526 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001ff8:	f7fe ff00 	bl	8000dfc <HAL_GetREVID>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	f241 0203 	movw	r2, #4099	; 0x1003
 8002002:	4293      	cmp	r3, r2
 8002004:	d817      	bhi.n	8002036 <HAL_RCC_OscConfig+0x35e>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6a1b      	ldr	r3, [r3, #32]
 800200a:	2b20      	cmp	r3, #32
 800200c:	d108      	bne.n	8002020 <HAL_RCC_OscConfig+0x348>
 800200e:	4b70      	ldr	r3, [pc, #448]	; (80021d0 <HAL_RCC_OscConfig+0x4f8>)
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002016:	4a6e      	ldr	r2, [pc, #440]	; (80021d0 <HAL_RCC_OscConfig+0x4f8>)
 8002018:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800201c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800201e:	e075      	b.n	800210c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002020:	4b6b      	ldr	r3, [pc, #428]	; (80021d0 <HAL_RCC_OscConfig+0x4f8>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6a1b      	ldr	r3, [r3, #32]
 800202c:	069b      	lsls	r3, r3, #26
 800202e:	4968      	ldr	r1, [pc, #416]	; (80021d0 <HAL_RCC_OscConfig+0x4f8>)
 8002030:	4313      	orrs	r3, r2
 8002032:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002034:	e06a      	b.n	800210c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002036:	4b66      	ldr	r3, [pc, #408]	; (80021d0 <HAL_RCC_OscConfig+0x4f8>)
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6a1b      	ldr	r3, [r3, #32]
 8002042:	061b      	lsls	r3, r3, #24
 8002044:	4962      	ldr	r1, [pc, #392]	; (80021d0 <HAL_RCC_OscConfig+0x4f8>)
 8002046:	4313      	orrs	r3, r2
 8002048:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800204a:	e05f      	b.n	800210c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	69db      	ldr	r3, [r3, #28]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d042      	beq.n	80020da <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002054:	4b5e      	ldr	r3, [pc, #376]	; (80021d0 <HAL_RCC_OscConfig+0x4f8>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a5d      	ldr	r2, [pc, #372]	; (80021d0 <HAL_RCC_OscConfig+0x4f8>)
 800205a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800205e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002060:	f7fe fec0 	bl	8000de4 <HAL_GetTick>
 8002064:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002066:	e008      	b.n	800207a <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002068:	f7fe febc 	bl	8000de4 <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	2b02      	cmp	r3, #2
 8002074:	d901      	bls.n	800207a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e255      	b.n	8002526 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800207a:	4b55      	ldr	r3, [pc, #340]	; (80021d0 <HAL_RCC_OscConfig+0x4f8>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002082:	2b00      	cmp	r3, #0
 8002084:	d0f0      	beq.n	8002068 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002086:	f7fe feb9 	bl	8000dfc <HAL_GetREVID>
 800208a:	4603      	mov	r3, r0
 800208c:	f241 0203 	movw	r2, #4099	; 0x1003
 8002090:	4293      	cmp	r3, r2
 8002092:	d817      	bhi.n	80020c4 <HAL_RCC_OscConfig+0x3ec>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a1b      	ldr	r3, [r3, #32]
 8002098:	2b20      	cmp	r3, #32
 800209a:	d108      	bne.n	80020ae <HAL_RCC_OscConfig+0x3d6>
 800209c:	4b4c      	ldr	r3, [pc, #304]	; (80021d0 <HAL_RCC_OscConfig+0x4f8>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80020a4:	4a4a      	ldr	r2, [pc, #296]	; (80021d0 <HAL_RCC_OscConfig+0x4f8>)
 80020a6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80020aa:	6053      	str	r3, [r2, #4]
 80020ac:	e02e      	b.n	800210c <HAL_RCC_OscConfig+0x434>
 80020ae:	4b48      	ldr	r3, [pc, #288]	; (80021d0 <HAL_RCC_OscConfig+0x4f8>)
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6a1b      	ldr	r3, [r3, #32]
 80020ba:	069b      	lsls	r3, r3, #26
 80020bc:	4944      	ldr	r1, [pc, #272]	; (80021d0 <HAL_RCC_OscConfig+0x4f8>)
 80020be:	4313      	orrs	r3, r2
 80020c0:	604b      	str	r3, [r1, #4]
 80020c2:	e023      	b.n	800210c <HAL_RCC_OscConfig+0x434>
 80020c4:	4b42      	ldr	r3, [pc, #264]	; (80021d0 <HAL_RCC_OscConfig+0x4f8>)
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6a1b      	ldr	r3, [r3, #32]
 80020d0:	061b      	lsls	r3, r3, #24
 80020d2:	493f      	ldr	r1, [pc, #252]	; (80021d0 <HAL_RCC_OscConfig+0x4f8>)
 80020d4:	4313      	orrs	r3, r2
 80020d6:	60cb      	str	r3, [r1, #12]
 80020d8:	e018      	b.n	800210c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80020da:	4b3d      	ldr	r3, [pc, #244]	; (80021d0 <HAL_RCC_OscConfig+0x4f8>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a3c      	ldr	r2, [pc, #240]	; (80021d0 <HAL_RCC_OscConfig+0x4f8>)
 80020e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80020e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e6:	f7fe fe7d 	bl	8000de4 <HAL_GetTick>
 80020ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80020ec:	e008      	b.n	8002100 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80020ee:	f7fe fe79 	bl	8000de4 <HAL_GetTick>
 80020f2:	4602      	mov	r2, r0
 80020f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d901      	bls.n	8002100 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	e212      	b.n	8002526 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002100:	4b33      	ldr	r3, [pc, #204]	; (80021d0 <HAL_RCC_OscConfig+0x4f8>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002108:	2b00      	cmp	r3, #0
 800210a:	d1f0      	bne.n	80020ee <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0308 	and.w	r3, r3, #8
 8002114:	2b00      	cmp	r3, #0
 8002116:	d036      	beq.n	8002186 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	695b      	ldr	r3, [r3, #20]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d019      	beq.n	8002154 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002120:	4b2b      	ldr	r3, [pc, #172]	; (80021d0 <HAL_RCC_OscConfig+0x4f8>)
 8002122:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002124:	4a2a      	ldr	r2, [pc, #168]	; (80021d0 <HAL_RCC_OscConfig+0x4f8>)
 8002126:	f043 0301 	orr.w	r3, r3, #1
 800212a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800212c:	f7fe fe5a 	bl	8000de4 <HAL_GetTick>
 8002130:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002132:	e008      	b.n	8002146 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002134:	f7fe fe56 	bl	8000de4 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b02      	cmp	r3, #2
 8002140:	d901      	bls.n	8002146 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e1ef      	b.n	8002526 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002146:	4b22      	ldr	r3, [pc, #136]	; (80021d0 <HAL_RCC_OscConfig+0x4f8>)
 8002148:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	2b00      	cmp	r3, #0
 8002150:	d0f0      	beq.n	8002134 <HAL_RCC_OscConfig+0x45c>
 8002152:	e018      	b.n	8002186 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002154:	4b1e      	ldr	r3, [pc, #120]	; (80021d0 <HAL_RCC_OscConfig+0x4f8>)
 8002156:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002158:	4a1d      	ldr	r2, [pc, #116]	; (80021d0 <HAL_RCC_OscConfig+0x4f8>)
 800215a:	f023 0301 	bic.w	r3, r3, #1
 800215e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002160:	f7fe fe40 	bl	8000de4 <HAL_GetTick>
 8002164:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002166:	e008      	b.n	800217a <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002168:	f7fe fe3c 	bl	8000de4 <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	2b02      	cmp	r3, #2
 8002174:	d901      	bls.n	800217a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e1d5      	b.n	8002526 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800217a:	4b15      	ldr	r3, [pc, #84]	; (80021d0 <HAL_RCC_OscConfig+0x4f8>)
 800217c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800217e:	f003 0302 	and.w	r3, r3, #2
 8002182:	2b00      	cmp	r3, #0
 8002184:	d1f0      	bne.n	8002168 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0320 	and.w	r3, r3, #32
 800218e:	2b00      	cmp	r3, #0
 8002190:	d039      	beq.n	8002206 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	699b      	ldr	r3, [r3, #24]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d01c      	beq.n	80021d4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800219a:	4b0d      	ldr	r3, [pc, #52]	; (80021d0 <HAL_RCC_OscConfig+0x4f8>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a0c      	ldr	r2, [pc, #48]	; (80021d0 <HAL_RCC_OscConfig+0x4f8>)
 80021a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80021a4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80021a6:	f7fe fe1d 	bl	8000de4 <HAL_GetTick>
 80021aa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80021ac:	e008      	b.n	80021c0 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80021ae:	f7fe fe19 	bl	8000de4 <HAL_GetTick>
 80021b2:	4602      	mov	r2, r0
 80021b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d901      	bls.n	80021c0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	e1b2      	b.n	8002526 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80021c0:	4b03      	ldr	r3, [pc, #12]	; (80021d0 <HAL_RCC_OscConfig+0x4f8>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d0f0      	beq.n	80021ae <HAL_RCC_OscConfig+0x4d6>
 80021cc:	e01b      	b.n	8002206 <HAL_RCC_OscConfig+0x52e>
 80021ce:	bf00      	nop
 80021d0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80021d4:	4b9b      	ldr	r3, [pc, #620]	; (8002444 <HAL_RCC_OscConfig+0x76c>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a9a      	ldr	r2, [pc, #616]	; (8002444 <HAL_RCC_OscConfig+0x76c>)
 80021da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80021de:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80021e0:	f7fe fe00 	bl	8000de4 <HAL_GetTick>
 80021e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80021e6:	e008      	b.n	80021fa <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80021e8:	f7fe fdfc 	bl	8000de4 <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e195      	b.n	8002526 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80021fa:	4b92      	ldr	r3, [pc, #584]	; (8002444 <HAL_RCC_OscConfig+0x76c>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d1f0      	bne.n	80021e8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0304 	and.w	r3, r3, #4
 800220e:	2b00      	cmp	r3, #0
 8002210:	f000 8081 	beq.w	8002316 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002214:	4b8c      	ldr	r3, [pc, #560]	; (8002448 <HAL_RCC_OscConfig+0x770>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a8b      	ldr	r2, [pc, #556]	; (8002448 <HAL_RCC_OscConfig+0x770>)
 800221a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800221e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002220:	f7fe fde0 	bl	8000de4 <HAL_GetTick>
 8002224:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002226:	e008      	b.n	800223a <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002228:	f7fe fddc 	bl	8000de4 <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	2b64      	cmp	r3, #100	; 0x64
 8002234:	d901      	bls.n	800223a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e175      	b.n	8002526 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800223a:	4b83      	ldr	r3, [pc, #524]	; (8002448 <HAL_RCC_OscConfig+0x770>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002242:	2b00      	cmp	r3, #0
 8002244:	d0f0      	beq.n	8002228 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d106      	bne.n	800225c <HAL_RCC_OscConfig+0x584>
 800224e:	4b7d      	ldr	r3, [pc, #500]	; (8002444 <HAL_RCC_OscConfig+0x76c>)
 8002250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002252:	4a7c      	ldr	r2, [pc, #496]	; (8002444 <HAL_RCC_OscConfig+0x76c>)
 8002254:	f043 0301 	orr.w	r3, r3, #1
 8002258:	6713      	str	r3, [r2, #112]	; 0x70
 800225a:	e02d      	b.n	80022b8 <HAL_RCC_OscConfig+0x5e0>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d10c      	bne.n	800227e <HAL_RCC_OscConfig+0x5a6>
 8002264:	4b77      	ldr	r3, [pc, #476]	; (8002444 <HAL_RCC_OscConfig+0x76c>)
 8002266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002268:	4a76      	ldr	r2, [pc, #472]	; (8002444 <HAL_RCC_OscConfig+0x76c>)
 800226a:	f023 0301 	bic.w	r3, r3, #1
 800226e:	6713      	str	r3, [r2, #112]	; 0x70
 8002270:	4b74      	ldr	r3, [pc, #464]	; (8002444 <HAL_RCC_OscConfig+0x76c>)
 8002272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002274:	4a73      	ldr	r2, [pc, #460]	; (8002444 <HAL_RCC_OscConfig+0x76c>)
 8002276:	f023 0304 	bic.w	r3, r3, #4
 800227a:	6713      	str	r3, [r2, #112]	; 0x70
 800227c:	e01c      	b.n	80022b8 <HAL_RCC_OscConfig+0x5e0>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	2b05      	cmp	r3, #5
 8002284:	d10c      	bne.n	80022a0 <HAL_RCC_OscConfig+0x5c8>
 8002286:	4b6f      	ldr	r3, [pc, #444]	; (8002444 <HAL_RCC_OscConfig+0x76c>)
 8002288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800228a:	4a6e      	ldr	r2, [pc, #440]	; (8002444 <HAL_RCC_OscConfig+0x76c>)
 800228c:	f043 0304 	orr.w	r3, r3, #4
 8002290:	6713      	str	r3, [r2, #112]	; 0x70
 8002292:	4b6c      	ldr	r3, [pc, #432]	; (8002444 <HAL_RCC_OscConfig+0x76c>)
 8002294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002296:	4a6b      	ldr	r2, [pc, #428]	; (8002444 <HAL_RCC_OscConfig+0x76c>)
 8002298:	f043 0301 	orr.w	r3, r3, #1
 800229c:	6713      	str	r3, [r2, #112]	; 0x70
 800229e:	e00b      	b.n	80022b8 <HAL_RCC_OscConfig+0x5e0>
 80022a0:	4b68      	ldr	r3, [pc, #416]	; (8002444 <HAL_RCC_OscConfig+0x76c>)
 80022a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a4:	4a67      	ldr	r2, [pc, #412]	; (8002444 <HAL_RCC_OscConfig+0x76c>)
 80022a6:	f023 0301 	bic.w	r3, r3, #1
 80022aa:	6713      	str	r3, [r2, #112]	; 0x70
 80022ac:	4b65      	ldr	r3, [pc, #404]	; (8002444 <HAL_RCC_OscConfig+0x76c>)
 80022ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022b0:	4a64      	ldr	r2, [pc, #400]	; (8002444 <HAL_RCC_OscConfig+0x76c>)
 80022b2:	f023 0304 	bic.w	r3, r3, #4
 80022b6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d015      	beq.n	80022ec <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022c0:	f7fe fd90 	bl	8000de4 <HAL_GetTick>
 80022c4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80022c6:	e00a      	b.n	80022de <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022c8:	f7fe fd8c 	bl	8000de4 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d901      	bls.n	80022de <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e123      	b.n	8002526 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80022de:	4b59      	ldr	r3, [pc, #356]	; (8002444 <HAL_RCC_OscConfig+0x76c>)
 80022e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022e2:	f003 0302 	and.w	r3, r3, #2
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d0ee      	beq.n	80022c8 <HAL_RCC_OscConfig+0x5f0>
 80022ea:	e014      	b.n	8002316 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ec:	f7fe fd7a 	bl	8000de4 <HAL_GetTick>
 80022f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80022f2:	e00a      	b.n	800230a <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022f4:	f7fe fd76 	bl	8000de4 <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002302:	4293      	cmp	r3, r2
 8002304:	d901      	bls.n	800230a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e10d      	b.n	8002526 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800230a:	4b4e      	ldr	r3, [pc, #312]	; (8002444 <HAL_RCC_OscConfig+0x76c>)
 800230c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d1ee      	bne.n	80022f4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231a:	2b00      	cmp	r3, #0
 800231c:	f000 8102 	beq.w	8002524 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002320:	4b48      	ldr	r3, [pc, #288]	; (8002444 <HAL_RCC_OscConfig+0x76c>)
 8002322:	691b      	ldr	r3, [r3, #16]
 8002324:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002328:	2b18      	cmp	r3, #24
 800232a:	f000 80bd 	beq.w	80024a8 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002332:	2b02      	cmp	r3, #2
 8002334:	f040 809e 	bne.w	8002474 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002338:	4b42      	ldr	r3, [pc, #264]	; (8002444 <HAL_RCC_OscConfig+0x76c>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a41      	ldr	r2, [pc, #260]	; (8002444 <HAL_RCC_OscConfig+0x76c>)
 800233e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002342:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002344:	f7fe fd4e 	bl	8000de4 <HAL_GetTick>
 8002348:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800234a:	e008      	b.n	800235e <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800234c:	f7fe fd4a 	bl	8000de4 <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	2b02      	cmp	r3, #2
 8002358:	d901      	bls.n	800235e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e0e3      	b.n	8002526 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800235e:	4b39      	ldr	r3, [pc, #228]	; (8002444 <HAL_RCC_OscConfig+0x76c>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d1f0      	bne.n	800234c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800236a:	4b36      	ldr	r3, [pc, #216]	; (8002444 <HAL_RCC_OscConfig+0x76c>)
 800236c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800236e:	4b37      	ldr	r3, [pc, #220]	; (800244c <HAL_RCC_OscConfig+0x774>)
 8002370:	4013      	ands	r3, r2
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800237a:	0112      	lsls	r2, r2, #4
 800237c:	430a      	orrs	r2, r1
 800237e:	4931      	ldr	r1, [pc, #196]	; (8002444 <HAL_RCC_OscConfig+0x76c>)
 8002380:	4313      	orrs	r3, r2
 8002382:	628b      	str	r3, [r1, #40]	; 0x28
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002388:	3b01      	subs	r3, #1
 800238a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002392:	3b01      	subs	r3, #1
 8002394:	025b      	lsls	r3, r3, #9
 8002396:	b29b      	uxth	r3, r3
 8002398:	431a      	orrs	r2, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800239e:	3b01      	subs	r3, #1
 80023a0:	041b      	lsls	r3, r3, #16
 80023a2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80023a6:	431a      	orrs	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ac:	3b01      	subs	r3, #1
 80023ae:	061b      	lsls	r3, r3, #24
 80023b0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80023b4:	4923      	ldr	r1, [pc, #140]	; (8002444 <HAL_RCC_OscConfig+0x76c>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80023ba:	4b22      	ldr	r3, [pc, #136]	; (8002444 <HAL_RCC_OscConfig+0x76c>)
 80023bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023be:	4a21      	ldr	r2, [pc, #132]	; (8002444 <HAL_RCC_OscConfig+0x76c>)
 80023c0:	f023 0301 	bic.w	r3, r3, #1
 80023c4:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80023c6:	4b1f      	ldr	r3, [pc, #124]	; (8002444 <HAL_RCC_OscConfig+0x76c>)
 80023c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023ca:	4b21      	ldr	r3, [pc, #132]	; (8002450 <HAL_RCC_OscConfig+0x778>)
 80023cc:	4013      	ands	r3, r2
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80023d2:	00d2      	lsls	r2, r2, #3
 80023d4:	491b      	ldr	r1, [pc, #108]	; (8002444 <HAL_RCC_OscConfig+0x76c>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80023da:	4b1a      	ldr	r3, [pc, #104]	; (8002444 <HAL_RCC_OscConfig+0x76c>)
 80023dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023de:	f023 020c 	bic.w	r2, r3, #12
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e6:	4917      	ldr	r1, [pc, #92]	; (8002444 <HAL_RCC_OscConfig+0x76c>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80023ec:	4b15      	ldr	r3, [pc, #84]	; (8002444 <HAL_RCC_OscConfig+0x76c>)
 80023ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f0:	f023 0202 	bic.w	r2, r3, #2
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f8:	4912      	ldr	r1, [pc, #72]	; (8002444 <HAL_RCC_OscConfig+0x76c>)
 80023fa:	4313      	orrs	r3, r2
 80023fc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80023fe:	4b11      	ldr	r3, [pc, #68]	; (8002444 <HAL_RCC_OscConfig+0x76c>)
 8002400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002402:	4a10      	ldr	r2, [pc, #64]	; (8002444 <HAL_RCC_OscConfig+0x76c>)
 8002404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002408:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800240a:	4b0e      	ldr	r3, [pc, #56]	; (8002444 <HAL_RCC_OscConfig+0x76c>)
 800240c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800240e:	4a0d      	ldr	r2, [pc, #52]	; (8002444 <HAL_RCC_OscConfig+0x76c>)
 8002410:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002414:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002416:	4b0b      	ldr	r3, [pc, #44]	; (8002444 <HAL_RCC_OscConfig+0x76c>)
 8002418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800241a:	4a0a      	ldr	r2, [pc, #40]	; (8002444 <HAL_RCC_OscConfig+0x76c>)
 800241c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002420:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002422:	4b08      	ldr	r3, [pc, #32]	; (8002444 <HAL_RCC_OscConfig+0x76c>)
 8002424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002426:	4a07      	ldr	r2, [pc, #28]	; (8002444 <HAL_RCC_OscConfig+0x76c>)
 8002428:	f043 0301 	orr.w	r3, r3, #1
 800242c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800242e:	4b05      	ldr	r3, [pc, #20]	; (8002444 <HAL_RCC_OscConfig+0x76c>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a04      	ldr	r2, [pc, #16]	; (8002444 <HAL_RCC_OscConfig+0x76c>)
 8002434:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002438:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800243a:	f7fe fcd3 	bl	8000de4 <HAL_GetTick>
 800243e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002440:	e011      	b.n	8002466 <HAL_RCC_OscConfig+0x78e>
 8002442:	bf00      	nop
 8002444:	58024400 	.word	0x58024400
 8002448:	58024800 	.word	0x58024800
 800244c:	fffffc0c 	.word	0xfffffc0c
 8002450:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002454:	f7fe fcc6 	bl	8000de4 <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	2b02      	cmp	r3, #2
 8002460:	d901      	bls.n	8002466 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e05f      	b.n	8002526 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002466:	4b32      	ldr	r3, [pc, #200]	; (8002530 <HAL_RCC_OscConfig+0x858>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d0f0      	beq.n	8002454 <HAL_RCC_OscConfig+0x77c>
 8002472:	e057      	b.n	8002524 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002474:	4b2e      	ldr	r3, [pc, #184]	; (8002530 <HAL_RCC_OscConfig+0x858>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a2d      	ldr	r2, [pc, #180]	; (8002530 <HAL_RCC_OscConfig+0x858>)
 800247a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800247e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002480:	f7fe fcb0 	bl	8000de4 <HAL_GetTick>
 8002484:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002486:	e008      	b.n	800249a <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002488:	f7fe fcac 	bl	8000de4 <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	2b02      	cmp	r3, #2
 8002494:	d901      	bls.n	800249a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e045      	b.n	8002526 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800249a:	4b25      	ldr	r3, [pc, #148]	; (8002530 <HAL_RCC_OscConfig+0x858>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d1f0      	bne.n	8002488 <HAL_RCC_OscConfig+0x7b0>
 80024a6:	e03d      	b.n	8002524 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80024a8:	4b21      	ldr	r3, [pc, #132]	; (8002530 <HAL_RCC_OscConfig+0x858>)
 80024aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ac:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80024ae:	4b20      	ldr	r3, [pc, #128]	; (8002530 <HAL_RCC_OscConfig+0x858>)
 80024b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d031      	beq.n	8002520 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	f003 0203 	and.w	r2, r3, #3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d12a      	bne.n	8002520 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	091b      	lsrs	r3, r3, #4
 80024ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d122      	bne.n	8002520 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d11a      	bne.n	8002520 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	0a5b      	lsrs	r3, r3, #9
 80024ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024f6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d111      	bne.n	8002520 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	0c1b      	lsrs	r3, r3, #16
 8002500:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002508:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800250a:	429a      	cmp	r2, r3
 800250c:	d108      	bne.n	8002520 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	0e1b      	lsrs	r3, r3, #24
 8002512:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800251a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800251c:	429a      	cmp	r2, r3
 800251e:	d001      	beq.n	8002524 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e000      	b.n	8002526 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8002524:	2300      	movs	r3, #0
}
 8002526:	4618      	mov	r0, r3
 8002528:	3730      	adds	r7, #48	; 0x30
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	58024400 	.word	0x58024400

08002534 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b086      	sub	sp, #24
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d101      	bne.n	8002548 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e19c      	b.n	8002882 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002548:	4b8a      	ldr	r3, [pc, #552]	; (8002774 <HAL_RCC_ClockConfig+0x240>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 030f 	and.w	r3, r3, #15
 8002550:	683a      	ldr	r2, [r7, #0]
 8002552:	429a      	cmp	r2, r3
 8002554:	d910      	bls.n	8002578 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002556:	4b87      	ldr	r3, [pc, #540]	; (8002774 <HAL_RCC_ClockConfig+0x240>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f023 020f 	bic.w	r2, r3, #15
 800255e:	4985      	ldr	r1, [pc, #532]	; (8002774 <HAL_RCC_ClockConfig+0x240>)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	4313      	orrs	r3, r2
 8002564:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002566:	4b83      	ldr	r3, [pc, #524]	; (8002774 <HAL_RCC_ClockConfig+0x240>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 030f 	and.w	r3, r3, #15
 800256e:	683a      	ldr	r2, [r7, #0]
 8002570:	429a      	cmp	r2, r3
 8002572:	d001      	beq.n	8002578 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e184      	b.n	8002882 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0304 	and.w	r3, r3, #4
 8002580:	2b00      	cmp	r3, #0
 8002582:	d010      	beq.n	80025a6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	691a      	ldr	r2, [r3, #16]
 8002588:	4b7b      	ldr	r3, [pc, #492]	; (8002778 <HAL_RCC_ClockConfig+0x244>)
 800258a:	699b      	ldr	r3, [r3, #24]
 800258c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002590:	429a      	cmp	r2, r3
 8002592:	d908      	bls.n	80025a6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002594:	4b78      	ldr	r3, [pc, #480]	; (8002778 <HAL_RCC_ClockConfig+0x244>)
 8002596:	699b      	ldr	r3, [r3, #24]
 8002598:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	691b      	ldr	r3, [r3, #16]
 80025a0:	4975      	ldr	r1, [pc, #468]	; (8002778 <HAL_RCC_ClockConfig+0x244>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0308 	and.w	r3, r3, #8
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d010      	beq.n	80025d4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	695a      	ldr	r2, [r3, #20]
 80025b6:	4b70      	ldr	r3, [pc, #448]	; (8002778 <HAL_RCC_ClockConfig+0x244>)
 80025b8:	69db      	ldr	r3, [r3, #28]
 80025ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80025be:	429a      	cmp	r2, r3
 80025c0:	d908      	bls.n	80025d4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80025c2:	4b6d      	ldr	r3, [pc, #436]	; (8002778 <HAL_RCC_ClockConfig+0x244>)
 80025c4:	69db      	ldr	r3, [r3, #28]
 80025c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	695b      	ldr	r3, [r3, #20]
 80025ce:	496a      	ldr	r1, [pc, #424]	; (8002778 <HAL_RCC_ClockConfig+0x244>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0310 	and.w	r3, r3, #16
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d010      	beq.n	8002602 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	699a      	ldr	r2, [r3, #24]
 80025e4:	4b64      	ldr	r3, [pc, #400]	; (8002778 <HAL_RCC_ClockConfig+0x244>)
 80025e6:	69db      	ldr	r3, [r3, #28]
 80025e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d908      	bls.n	8002602 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80025f0:	4b61      	ldr	r3, [pc, #388]	; (8002778 <HAL_RCC_ClockConfig+0x244>)
 80025f2:	69db      	ldr	r3, [r3, #28]
 80025f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	699b      	ldr	r3, [r3, #24]
 80025fc:	495e      	ldr	r1, [pc, #376]	; (8002778 <HAL_RCC_ClockConfig+0x244>)
 80025fe:	4313      	orrs	r3, r2
 8002600:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0320 	and.w	r3, r3, #32
 800260a:	2b00      	cmp	r3, #0
 800260c:	d010      	beq.n	8002630 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	69da      	ldr	r2, [r3, #28]
 8002612:	4b59      	ldr	r3, [pc, #356]	; (8002778 <HAL_RCC_ClockConfig+0x244>)
 8002614:	6a1b      	ldr	r3, [r3, #32]
 8002616:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800261a:	429a      	cmp	r2, r3
 800261c:	d908      	bls.n	8002630 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800261e:	4b56      	ldr	r3, [pc, #344]	; (8002778 <HAL_RCC_ClockConfig+0x244>)
 8002620:	6a1b      	ldr	r3, [r3, #32]
 8002622:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	69db      	ldr	r3, [r3, #28]
 800262a:	4953      	ldr	r1, [pc, #332]	; (8002778 <HAL_RCC_ClockConfig+0x244>)
 800262c:	4313      	orrs	r3, r2
 800262e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0302 	and.w	r3, r3, #2
 8002638:	2b00      	cmp	r3, #0
 800263a:	d010      	beq.n	800265e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	68da      	ldr	r2, [r3, #12]
 8002640:	4b4d      	ldr	r3, [pc, #308]	; (8002778 <HAL_RCC_ClockConfig+0x244>)
 8002642:	699b      	ldr	r3, [r3, #24]
 8002644:	f003 030f 	and.w	r3, r3, #15
 8002648:	429a      	cmp	r2, r3
 800264a:	d908      	bls.n	800265e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800264c:	4b4a      	ldr	r3, [pc, #296]	; (8002778 <HAL_RCC_ClockConfig+0x244>)
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	f023 020f 	bic.w	r2, r3, #15
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	4947      	ldr	r1, [pc, #284]	; (8002778 <HAL_RCC_ClockConfig+0x244>)
 800265a:	4313      	orrs	r3, r2
 800265c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	2b00      	cmp	r3, #0
 8002668:	d055      	beq.n	8002716 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800266a:	4b43      	ldr	r3, [pc, #268]	; (8002778 <HAL_RCC_ClockConfig+0x244>)
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	4940      	ldr	r1, [pc, #256]	; (8002778 <HAL_RCC_ClockConfig+0x244>)
 8002678:	4313      	orrs	r3, r2
 800267a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	2b02      	cmp	r3, #2
 8002682:	d107      	bne.n	8002694 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002684:	4b3c      	ldr	r3, [pc, #240]	; (8002778 <HAL_RCC_ClockConfig+0x244>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d121      	bne.n	80026d4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e0f6      	b.n	8002882 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	2b03      	cmp	r3, #3
 800269a:	d107      	bne.n	80026ac <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800269c:	4b36      	ldr	r3, [pc, #216]	; (8002778 <HAL_RCC_ClockConfig+0x244>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d115      	bne.n	80026d4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e0ea      	b.n	8002882 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d107      	bne.n	80026c4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80026b4:	4b30      	ldr	r3, [pc, #192]	; (8002778 <HAL_RCC_ClockConfig+0x244>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d109      	bne.n	80026d4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e0de      	b.n	8002882 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026c4:	4b2c      	ldr	r3, [pc, #176]	; (8002778 <HAL_RCC_ClockConfig+0x244>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0304 	and.w	r3, r3, #4
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d101      	bne.n	80026d4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e0d6      	b.n	8002882 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80026d4:	4b28      	ldr	r3, [pc, #160]	; (8002778 <HAL_RCC_ClockConfig+0x244>)
 80026d6:	691b      	ldr	r3, [r3, #16]
 80026d8:	f023 0207 	bic.w	r2, r3, #7
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	4925      	ldr	r1, [pc, #148]	; (8002778 <HAL_RCC_ClockConfig+0x244>)
 80026e2:	4313      	orrs	r3, r2
 80026e4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026e6:	f7fe fb7d 	bl	8000de4 <HAL_GetTick>
 80026ea:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ec:	e00a      	b.n	8002704 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026ee:	f7fe fb79 	bl	8000de4 <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d901      	bls.n	8002704 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	e0be      	b.n	8002882 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002704:	4b1c      	ldr	r3, [pc, #112]	; (8002778 <HAL_RCC_ClockConfig+0x244>)
 8002706:	691b      	ldr	r3, [r3, #16]
 8002708:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	00db      	lsls	r3, r3, #3
 8002712:	429a      	cmp	r2, r3
 8002714:	d1eb      	bne.n	80026ee <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0302 	and.w	r3, r3, #2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d010      	beq.n	8002744 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	68da      	ldr	r2, [r3, #12]
 8002726:	4b14      	ldr	r3, [pc, #80]	; (8002778 <HAL_RCC_ClockConfig+0x244>)
 8002728:	699b      	ldr	r3, [r3, #24]
 800272a:	f003 030f 	and.w	r3, r3, #15
 800272e:	429a      	cmp	r2, r3
 8002730:	d208      	bcs.n	8002744 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002732:	4b11      	ldr	r3, [pc, #68]	; (8002778 <HAL_RCC_ClockConfig+0x244>)
 8002734:	699b      	ldr	r3, [r3, #24]
 8002736:	f023 020f 	bic.w	r2, r3, #15
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	490e      	ldr	r1, [pc, #56]	; (8002778 <HAL_RCC_ClockConfig+0x244>)
 8002740:	4313      	orrs	r3, r2
 8002742:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002744:	4b0b      	ldr	r3, [pc, #44]	; (8002774 <HAL_RCC_ClockConfig+0x240>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 030f 	and.w	r3, r3, #15
 800274c:	683a      	ldr	r2, [r7, #0]
 800274e:	429a      	cmp	r2, r3
 8002750:	d214      	bcs.n	800277c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002752:	4b08      	ldr	r3, [pc, #32]	; (8002774 <HAL_RCC_ClockConfig+0x240>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f023 020f 	bic.w	r2, r3, #15
 800275a:	4906      	ldr	r1, [pc, #24]	; (8002774 <HAL_RCC_ClockConfig+0x240>)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	4313      	orrs	r3, r2
 8002760:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002762:	4b04      	ldr	r3, [pc, #16]	; (8002774 <HAL_RCC_ClockConfig+0x240>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 030f 	and.w	r3, r3, #15
 800276a:	683a      	ldr	r2, [r7, #0]
 800276c:	429a      	cmp	r2, r3
 800276e:	d005      	beq.n	800277c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e086      	b.n	8002882 <HAL_RCC_ClockConfig+0x34e>
 8002774:	52002000 	.word	0x52002000
 8002778:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0304 	and.w	r3, r3, #4
 8002784:	2b00      	cmp	r3, #0
 8002786:	d010      	beq.n	80027aa <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	691a      	ldr	r2, [r3, #16]
 800278c:	4b3f      	ldr	r3, [pc, #252]	; (800288c <HAL_RCC_ClockConfig+0x358>)
 800278e:	699b      	ldr	r3, [r3, #24]
 8002790:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002794:	429a      	cmp	r2, r3
 8002796:	d208      	bcs.n	80027aa <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002798:	4b3c      	ldr	r3, [pc, #240]	; (800288c <HAL_RCC_ClockConfig+0x358>)
 800279a:	699b      	ldr	r3, [r3, #24]
 800279c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	691b      	ldr	r3, [r3, #16]
 80027a4:	4939      	ldr	r1, [pc, #228]	; (800288c <HAL_RCC_ClockConfig+0x358>)
 80027a6:	4313      	orrs	r3, r2
 80027a8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0308 	and.w	r3, r3, #8
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d010      	beq.n	80027d8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	695a      	ldr	r2, [r3, #20]
 80027ba:	4b34      	ldr	r3, [pc, #208]	; (800288c <HAL_RCC_ClockConfig+0x358>)
 80027bc:	69db      	ldr	r3, [r3, #28]
 80027be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d208      	bcs.n	80027d8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80027c6:	4b31      	ldr	r3, [pc, #196]	; (800288c <HAL_RCC_ClockConfig+0x358>)
 80027c8:	69db      	ldr	r3, [r3, #28]
 80027ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	695b      	ldr	r3, [r3, #20]
 80027d2:	492e      	ldr	r1, [pc, #184]	; (800288c <HAL_RCC_ClockConfig+0x358>)
 80027d4:	4313      	orrs	r3, r2
 80027d6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0310 	and.w	r3, r3, #16
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d010      	beq.n	8002806 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	699a      	ldr	r2, [r3, #24]
 80027e8:	4b28      	ldr	r3, [pc, #160]	; (800288c <HAL_RCC_ClockConfig+0x358>)
 80027ea:	69db      	ldr	r3, [r3, #28]
 80027ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d208      	bcs.n	8002806 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80027f4:	4b25      	ldr	r3, [pc, #148]	; (800288c <HAL_RCC_ClockConfig+0x358>)
 80027f6:	69db      	ldr	r3, [r3, #28]
 80027f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	4922      	ldr	r1, [pc, #136]	; (800288c <HAL_RCC_ClockConfig+0x358>)
 8002802:	4313      	orrs	r3, r2
 8002804:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0320 	and.w	r3, r3, #32
 800280e:	2b00      	cmp	r3, #0
 8002810:	d010      	beq.n	8002834 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	69da      	ldr	r2, [r3, #28]
 8002816:	4b1d      	ldr	r3, [pc, #116]	; (800288c <HAL_RCC_ClockConfig+0x358>)
 8002818:	6a1b      	ldr	r3, [r3, #32]
 800281a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800281e:	429a      	cmp	r2, r3
 8002820:	d208      	bcs.n	8002834 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002822:	4b1a      	ldr	r3, [pc, #104]	; (800288c <HAL_RCC_ClockConfig+0x358>)
 8002824:	6a1b      	ldr	r3, [r3, #32]
 8002826:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	69db      	ldr	r3, [r3, #28]
 800282e:	4917      	ldr	r1, [pc, #92]	; (800288c <HAL_RCC_ClockConfig+0x358>)
 8002830:	4313      	orrs	r3, r2
 8002832:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002834:	f000 f834 	bl	80028a0 <HAL_RCC_GetSysClockFreq>
 8002838:	4602      	mov	r2, r0
 800283a:	4b14      	ldr	r3, [pc, #80]	; (800288c <HAL_RCC_ClockConfig+0x358>)
 800283c:	699b      	ldr	r3, [r3, #24]
 800283e:	0a1b      	lsrs	r3, r3, #8
 8002840:	f003 030f 	and.w	r3, r3, #15
 8002844:	4912      	ldr	r1, [pc, #72]	; (8002890 <HAL_RCC_ClockConfig+0x35c>)
 8002846:	5ccb      	ldrb	r3, [r1, r3]
 8002848:	f003 031f 	and.w	r3, r3, #31
 800284c:	fa22 f303 	lsr.w	r3, r2, r3
 8002850:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002852:	4b0e      	ldr	r3, [pc, #56]	; (800288c <HAL_RCC_ClockConfig+0x358>)
 8002854:	699b      	ldr	r3, [r3, #24]
 8002856:	f003 030f 	and.w	r3, r3, #15
 800285a:	4a0d      	ldr	r2, [pc, #52]	; (8002890 <HAL_RCC_ClockConfig+0x35c>)
 800285c:	5cd3      	ldrb	r3, [r2, r3]
 800285e:	f003 031f 	and.w	r3, r3, #31
 8002862:	693a      	ldr	r2, [r7, #16]
 8002864:	fa22 f303 	lsr.w	r3, r2, r3
 8002868:	4a0a      	ldr	r2, [pc, #40]	; (8002894 <HAL_RCC_ClockConfig+0x360>)
 800286a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800286c:	4a0a      	ldr	r2, [pc, #40]	; (8002898 <HAL_RCC_ClockConfig+0x364>)
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002872:	4b0a      	ldr	r3, [pc, #40]	; (800289c <HAL_RCC_ClockConfig+0x368>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4618      	mov	r0, r3
 8002878:	f7fe fa6a 	bl	8000d50 <HAL_InitTick>
 800287c:	4603      	mov	r3, r0
 800287e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002880:	7bfb      	ldrb	r3, [r7, #15]
}
 8002882:	4618      	mov	r0, r3
 8002884:	3718      	adds	r7, #24
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	58024400 	.word	0x58024400
 8002890:	080055f4 	.word	0x080055f4
 8002894:	24000004 	.word	0x24000004
 8002898:	24000000 	.word	0x24000000
 800289c:	24000008 	.word	0x24000008

080028a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b089      	sub	sp, #36	; 0x24
 80028a4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028a6:	4bb3      	ldr	r3, [pc, #716]	; (8002b74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028a8:	691b      	ldr	r3, [r3, #16]
 80028aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80028ae:	2b18      	cmp	r3, #24
 80028b0:	f200 8155 	bhi.w	8002b5e <HAL_RCC_GetSysClockFreq+0x2be>
 80028b4:	a201      	add	r2, pc, #4	; (adr r2, 80028bc <HAL_RCC_GetSysClockFreq+0x1c>)
 80028b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ba:	bf00      	nop
 80028bc:	08002921 	.word	0x08002921
 80028c0:	08002b5f 	.word	0x08002b5f
 80028c4:	08002b5f 	.word	0x08002b5f
 80028c8:	08002b5f 	.word	0x08002b5f
 80028cc:	08002b5f 	.word	0x08002b5f
 80028d0:	08002b5f 	.word	0x08002b5f
 80028d4:	08002b5f 	.word	0x08002b5f
 80028d8:	08002b5f 	.word	0x08002b5f
 80028dc:	08002947 	.word	0x08002947
 80028e0:	08002b5f 	.word	0x08002b5f
 80028e4:	08002b5f 	.word	0x08002b5f
 80028e8:	08002b5f 	.word	0x08002b5f
 80028ec:	08002b5f 	.word	0x08002b5f
 80028f0:	08002b5f 	.word	0x08002b5f
 80028f4:	08002b5f 	.word	0x08002b5f
 80028f8:	08002b5f 	.word	0x08002b5f
 80028fc:	0800294d 	.word	0x0800294d
 8002900:	08002b5f 	.word	0x08002b5f
 8002904:	08002b5f 	.word	0x08002b5f
 8002908:	08002b5f 	.word	0x08002b5f
 800290c:	08002b5f 	.word	0x08002b5f
 8002910:	08002b5f 	.word	0x08002b5f
 8002914:	08002b5f 	.word	0x08002b5f
 8002918:	08002b5f 	.word	0x08002b5f
 800291c:	08002953 	.word	0x08002953
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002920:	4b94      	ldr	r3, [pc, #592]	; (8002b74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0320 	and.w	r3, r3, #32
 8002928:	2b00      	cmp	r3, #0
 800292a:	d009      	beq.n	8002940 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800292c:	4b91      	ldr	r3, [pc, #580]	; (8002b74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	08db      	lsrs	r3, r3, #3
 8002932:	f003 0303 	and.w	r3, r3, #3
 8002936:	4a90      	ldr	r2, [pc, #576]	; (8002b78 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002938:	fa22 f303 	lsr.w	r3, r2, r3
 800293c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800293e:	e111      	b.n	8002b64 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002940:	4b8d      	ldr	r3, [pc, #564]	; (8002b78 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002942:	61bb      	str	r3, [r7, #24]
    break;
 8002944:	e10e      	b.n	8002b64 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002946:	4b8d      	ldr	r3, [pc, #564]	; (8002b7c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002948:	61bb      	str	r3, [r7, #24]
    break;
 800294a:	e10b      	b.n	8002b64 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800294c:	4b8c      	ldr	r3, [pc, #560]	; (8002b80 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800294e:	61bb      	str	r3, [r7, #24]
    break;
 8002950:	e108      	b.n	8002b64 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002952:	4b88      	ldr	r3, [pc, #544]	; (8002b74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002956:	f003 0303 	and.w	r3, r3, #3
 800295a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800295c:	4b85      	ldr	r3, [pc, #532]	; (8002b74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800295e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002960:	091b      	lsrs	r3, r3, #4
 8002962:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002966:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002968:	4b82      	ldr	r3, [pc, #520]	; (8002b74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800296a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800296c:	f003 0301 	and.w	r3, r3, #1
 8002970:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002972:	4b80      	ldr	r3, [pc, #512]	; (8002b74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002976:	08db      	lsrs	r3, r3, #3
 8002978:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800297c:	68fa      	ldr	r2, [r7, #12]
 800297e:	fb02 f303 	mul.w	r3, r2, r3
 8002982:	ee07 3a90 	vmov	s15, r3
 8002986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800298a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	2b00      	cmp	r3, #0
 8002992:	f000 80e1 	beq.w	8002b58 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	2b02      	cmp	r3, #2
 800299a:	f000 8083 	beq.w	8002aa4 <HAL_RCC_GetSysClockFreq+0x204>
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	f200 80a1 	bhi.w	8002ae8 <HAL_RCC_GetSysClockFreq+0x248>
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d003      	beq.n	80029b4 <HAL_RCC_GetSysClockFreq+0x114>
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d056      	beq.n	8002a60 <HAL_RCC_GetSysClockFreq+0x1c0>
 80029b2:	e099      	b.n	8002ae8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80029b4:	4b6f      	ldr	r3, [pc, #444]	; (8002b74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0320 	and.w	r3, r3, #32
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d02d      	beq.n	8002a1c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80029c0:	4b6c      	ldr	r3, [pc, #432]	; (8002b74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	08db      	lsrs	r3, r3, #3
 80029c6:	f003 0303 	and.w	r3, r3, #3
 80029ca:	4a6b      	ldr	r2, [pc, #428]	; (8002b78 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80029cc:	fa22 f303 	lsr.w	r3, r2, r3
 80029d0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	ee07 3a90 	vmov	s15, r3
 80029d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	ee07 3a90 	vmov	s15, r3
 80029e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80029ea:	4b62      	ldr	r3, [pc, #392]	; (8002b74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029f2:	ee07 3a90 	vmov	s15, r3
 80029f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80029fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80029fe:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002b84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002a0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a16:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002a1a:	e087      	b.n	8002b2c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	ee07 3a90 	vmov	s15, r3
 8002a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a26:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002b88 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002a2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a2e:	4b51      	ldr	r3, [pc, #324]	; (8002b74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a36:	ee07 3a90 	vmov	s15, r3
 8002a3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a42:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002b84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002a52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002a5e:	e065      	b.n	8002b2c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	ee07 3a90 	vmov	s15, r3
 8002a66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a6a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002b8c <HAL_RCC_GetSysClockFreq+0x2ec>
 8002a6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a72:	4b40      	ldr	r3, [pc, #256]	; (8002b74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a7a:	ee07 3a90 	vmov	s15, r3
 8002a7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a82:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a86:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002b84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002a96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002aa2:	e043      	b.n	8002b2c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	ee07 3a90 	vmov	s15, r3
 8002aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002aae:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002b90 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002ab2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ab6:	4b2f      	ldr	r3, [pc, #188]	; (8002b74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002abe:	ee07 3a90 	vmov	s15, r3
 8002ac2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ac6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002aca:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002b84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002ace:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ad2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ad6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002ada:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ade:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ae2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002ae6:	e021      	b.n	8002b2c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	ee07 3a90 	vmov	s15, r3
 8002aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002af2:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002b8c <HAL_RCC_GetSysClockFreq+0x2ec>
 8002af6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002afa:	4b1e      	ldr	r3, [pc, #120]	; (8002b74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b02:	ee07 3a90 	vmov	s15, r3
 8002b06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b0e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002b84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002b1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002b2a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002b2c:	4b11      	ldr	r3, [pc, #68]	; (8002b74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b30:	0a5b      	lsrs	r3, r3, #9
 8002b32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b36:	3301      	adds	r3, #1
 8002b38:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	ee07 3a90 	vmov	s15, r3
 8002b40:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002b44:	edd7 6a07 	vldr	s13, [r7, #28]
 8002b48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b50:	ee17 3a90 	vmov	r3, s15
 8002b54:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002b56:	e005      	b.n	8002b64 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	61bb      	str	r3, [r7, #24]
    break;
 8002b5c:	e002      	b.n	8002b64 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8002b5e:	4b07      	ldr	r3, [pc, #28]	; (8002b7c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002b60:	61bb      	str	r3, [r7, #24]
    break;
 8002b62:	bf00      	nop
  }

  return sysclockfreq;
 8002b64:	69bb      	ldr	r3, [r7, #24]
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3724      	adds	r7, #36	; 0x24
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	58024400 	.word	0x58024400
 8002b78:	03d09000 	.word	0x03d09000
 8002b7c:	003d0900 	.word	0x003d0900
 8002b80:	017d7840 	.word	0x017d7840
 8002b84:	46000000 	.word	0x46000000
 8002b88:	4c742400 	.word	0x4c742400
 8002b8c:	4a742400 	.word	0x4a742400
 8002b90:	4bbebc20 	.word	0x4bbebc20

08002b94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002b9a:	f7ff fe81 	bl	80028a0 <HAL_RCC_GetSysClockFreq>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	4b10      	ldr	r3, [pc, #64]	; (8002be4 <HAL_RCC_GetHCLKFreq+0x50>)
 8002ba2:	699b      	ldr	r3, [r3, #24]
 8002ba4:	0a1b      	lsrs	r3, r3, #8
 8002ba6:	f003 030f 	and.w	r3, r3, #15
 8002baa:	490f      	ldr	r1, [pc, #60]	; (8002be8 <HAL_RCC_GetHCLKFreq+0x54>)
 8002bac:	5ccb      	ldrb	r3, [r1, r3]
 8002bae:	f003 031f 	and.w	r3, r3, #31
 8002bb2:	fa22 f303 	lsr.w	r3, r2, r3
 8002bb6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002bb8:	4b0a      	ldr	r3, [pc, #40]	; (8002be4 <HAL_RCC_GetHCLKFreq+0x50>)
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	f003 030f 	and.w	r3, r3, #15
 8002bc0:	4a09      	ldr	r2, [pc, #36]	; (8002be8 <HAL_RCC_GetHCLKFreq+0x54>)
 8002bc2:	5cd3      	ldrb	r3, [r2, r3]
 8002bc4:	f003 031f 	and.w	r3, r3, #31
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	fa22 f303 	lsr.w	r3, r2, r3
 8002bce:	4a07      	ldr	r2, [pc, #28]	; (8002bec <HAL_RCC_GetHCLKFreq+0x58>)
 8002bd0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002bd2:	4a07      	ldr	r2, [pc, #28]	; (8002bf0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002bd8:	4b04      	ldr	r3, [pc, #16]	; (8002bec <HAL_RCC_GetHCLKFreq+0x58>)
 8002bda:	681b      	ldr	r3, [r3, #0]
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3708      	adds	r7, #8
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	58024400 	.word	0x58024400
 8002be8:	080055f4 	.word	0x080055f4
 8002bec:	24000004 	.word	0x24000004
 8002bf0:	24000000 	.word	0x24000000

08002bf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002bf8:	f7ff ffcc 	bl	8002b94 <HAL_RCC_GetHCLKFreq>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	4b06      	ldr	r3, [pc, #24]	; (8002c18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c00:	69db      	ldr	r3, [r3, #28]
 8002c02:	091b      	lsrs	r3, r3, #4
 8002c04:	f003 0307 	and.w	r3, r3, #7
 8002c08:	4904      	ldr	r1, [pc, #16]	; (8002c1c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002c0a:	5ccb      	ldrb	r3, [r1, r3]
 8002c0c:	f003 031f 	and.w	r3, r3, #31
 8002c10:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	58024400 	.word	0x58024400
 8002c1c:	080055f4 	.word	0x080055f4

08002c20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002c24:	f7ff ffb6 	bl	8002b94 <HAL_RCC_GetHCLKFreq>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	4b06      	ldr	r3, [pc, #24]	; (8002c44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c2c:	69db      	ldr	r3, [r3, #28]
 8002c2e:	0a1b      	lsrs	r3, r3, #8
 8002c30:	f003 0307 	and.w	r3, r3, #7
 8002c34:	4904      	ldr	r1, [pc, #16]	; (8002c48 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002c36:	5ccb      	ldrb	r3, [r1, r3]
 8002c38:	f003 031f 	and.w	r3, r3, #31
 8002c3c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	58024400 	.word	0x58024400
 8002c48:	080055f4 	.word	0x080055f4

08002c4c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b086      	sub	sp, #24
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002c54:	2300      	movs	r3, #0
 8002c56:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c58:	2300      	movs	r3, #0
 8002c5a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d03f      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c6c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002c70:	d02a      	beq.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002c72:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002c76:	d824      	bhi.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002c78:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c7c:	d018      	beq.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002c7e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c82:	d81e      	bhi.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d003      	beq.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002c88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c8c:	d007      	beq.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002c8e:	e018      	b.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c90:	4ba3      	ldr	r3, [pc, #652]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c94:	4aa2      	ldr	r2, [pc, #648]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002c96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c9a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002c9c:	e015      	b.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	3304      	adds	r3, #4
 8002ca2:	2102      	movs	r1, #2
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f001 f9d5 	bl	8004054 <RCCEx_PLL2_Config>
 8002caa:	4603      	mov	r3, r0
 8002cac:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002cae:	e00c      	b.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	3324      	adds	r3, #36	; 0x24
 8002cb4:	2102      	movs	r1, #2
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f001 fa7e 	bl	80041b8 <RCCEx_PLL3_Config>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002cc0:	e003      	b.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	75fb      	strb	r3, [r7, #23]
      break;
 8002cc6:	e000      	b.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002cc8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002cca:	7dfb      	ldrb	r3, [r7, #23]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d109      	bne.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002cd0:	4b93      	ldr	r3, [pc, #588]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002cd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cd4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cdc:	4990      	ldr	r1, [pc, #576]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	650b      	str	r3, [r1, #80]	; 0x50
 8002ce2:	e001      	b.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ce4:	7dfb      	ldrb	r3, [r7, #23]
 8002ce6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d03d      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cf8:	2b04      	cmp	r3, #4
 8002cfa:	d826      	bhi.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002cfc:	a201      	add	r2, pc, #4	; (adr r2, 8002d04 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8002cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d02:	bf00      	nop
 8002d04:	08002d19 	.word	0x08002d19
 8002d08:	08002d27 	.word	0x08002d27
 8002d0c:	08002d39 	.word	0x08002d39
 8002d10:	08002d51 	.word	0x08002d51
 8002d14:	08002d51 	.word	0x08002d51
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d18:	4b81      	ldr	r3, [pc, #516]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d1c:	4a80      	ldr	r2, [pc, #512]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002d1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d22:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002d24:	e015      	b.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	3304      	adds	r3, #4
 8002d2a:	2100      	movs	r1, #0
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f001 f991 	bl	8004054 <RCCEx_PLL2_Config>
 8002d32:	4603      	mov	r3, r0
 8002d34:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002d36:	e00c      	b.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	3324      	adds	r3, #36	; 0x24
 8002d3c:	2100      	movs	r1, #0
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f001 fa3a 	bl	80041b8 <RCCEx_PLL3_Config>
 8002d44:	4603      	mov	r3, r0
 8002d46:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002d48:	e003      	b.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	75fb      	strb	r3, [r7, #23]
      break;
 8002d4e:	e000      	b.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002d50:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d52:	7dfb      	ldrb	r3, [r7, #23]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d109      	bne.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d58:	4b71      	ldr	r3, [pc, #452]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002d5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d5c:	f023 0207 	bic.w	r2, r3, #7
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d64:	496e      	ldr	r1, [pc, #440]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	650b      	str	r3, [r1, #80]	; 0x50
 8002d6a:	e001      	b.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d6c:	7dfb      	ldrb	r3, [r7, #23]
 8002d6e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d042      	beq.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d84:	d02b      	beq.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x192>
 8002d86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d8a:	d825      	bhi.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002d8c:	2bc0      	cmp	r3, #192	; 0xc0
 8002d8e:	d028      	beq.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002d90:	2bc0      	cmp	r3, #192	; 0xc0
 8002d92:	d821      	bhi.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002d94:	2b80      	cmp	r3, #128	; 0x80
 8002d96:	d016      	beq.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8002d98:	2b80      	cmp	r3, #128	; 0x80
 8002d9a:	d81d      	bhi.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d002      	beq.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8002da0:	2b40      	cmp	r3, #64	; 0x40
 8002da2:	d007      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002da4:	e018      	b.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002da6:	4b5e      	ldr	r3, [pc, #376]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002daa:	4a5d      	ldr	r2, [pc, #372]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002dac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002db0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002db2:	e017      	b.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	3304      	adds	r3, #4
 8002db8:	2100      	movs	r1, #0
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f001 f94a 	bl	8004054 <RCCEx_PLL2_Config>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002dc4:	e00e      	b.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	3324      	adds	r3, #36	; 0x24
 8002dca:	2100      	movs	r1, #0
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f001 f9f3 	bl	80041b8 <RCCEx_PLL3_Config>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002dd6:	e005      	b.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	75fb      	strb	r3, [r7, #23]
      break;
 8002ddc:	e002      	b.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002dde:	bf00      	nop
 8002de0:	e000      	b.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002de2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002de4:	7dfb      	ldrb	r3, [r7, #23]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d109      	bne.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002dea:	4b4d      	ldr	r3, [pc, #308]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002dec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dee:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002df6:	494a      	ldr	r1, [pc, #296]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	650b      	str	r3, [r1, #80]	; 0x50
 8002dfc:	e001      	b.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dfe:	7dfb      	ldrb	r3, [r7, #23]
 8002e00:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d049      	beq.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002e14:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e18:	d030      	beq.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x230>
 8002e1a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e1e:	d82a      	bhi.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002e20:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002e24:	d02c      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8002e26:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002e2a:	d824      	bhi.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002e2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e30:	d018      	beq.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8002e32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e36:	d81e      	bhi.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d003      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002e3c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e40:	d007      	beq.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8002e42:	e018      	b.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e44:	4b36      	ldr	r3, [pc, #216]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e48:	4a35      	ldr	r2, [pc, #212]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002e4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e4e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002e50:	e017      	b.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	3304      	adds	r3, #4
 8002e56:	2100      	movs	r1, #0
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f001 f8fb 	bl	8004054 <RCCEx_PLL2_Config>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002e62:	e00e      	b.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	3324      	adds	r3, #36	; 0x24
 8002e68:	2100      	movs	r1, #0
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f001 f9a4 	bl	80041b8 <RCCEx_PLL3_Config>
 8002e70:	4603      	mov	r3, r0
 8002e72:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002e74:	e005      	b.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	75fb      	strb	r3, [r7, #23]
      break;
 8002e7a:	e002      	b.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002e7c:	bf00      	nop
 8002e7e:	e000      	b.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002e80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e82:	7dfb      	ldrb	r3, [r7, #23]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d10a      	bne.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002e88:	4b25      	ldr	r3, [pc, #148]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e8c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002e96:	4922      	ldr	r1, [pc, #136]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	658b      	str	r3, [r1, #88]	; 0x58
 8002e9c:	e001      	b.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e9e:	7dfb      	ldrb	r3, [r7, #23]
 8002ea0:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d04b      	beq.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002eb4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002eb8:	d030      	beq.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8002eba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ebe:	d82a      	bhi.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002ec0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002ec4:	d02e      	beq.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8002ec6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002eca:	d824      	bhi.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002ecc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ed0:	d018      	beq.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8002ed2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ed6:	d81e      	bhi.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d003      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002edc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ee0:	d007      	beq.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8002ee2:	e018      	b.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ee4:	4b0e      	ldr	r3, [pc, #56]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee8:	4a0d      	ldr	r2, [pc, #52]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002eea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002eee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002ef0:	e019      	b.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	3304      	adds	r3, #4
 8002ef6:	2100      	movs	r1, #0
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f001 f8ab 	bl	8004054 <RCCEx_PLL2_Config>
 8002efe:	4603      	mov	r3, r0
 8002f00:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002f02:	e010      	b.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	3324      	adds	r3, #36	; 0x24
 8002f08:	2100      	movs	r1, #0
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f001 f954 	bl	80041b8 <RCCEx_PLL3_Config>
 8002f10:	4603      	mov	r3, r0
 8002f12:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002f14:	e007      	b.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	75fb      	strb	r3, [r7, #23]
      break;
 8002f1a:	e004      	b.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8002f1c:	bf00      	nop
 8002f1e:	e002      	b.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8002f20:	58024400 	.word	0x58024400
      break;
 8002f24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f26:	7dfb      	ldrb	r3, [r7, #23]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d10a      	bne.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002f2c:	4b99      	ldr	r3, [pc, #612]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f30:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002f3a:	4996      	ldr	r1, [pc, #600]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	658b      	str	r3, [r1, #88]	; 0x58
 8002f40:	e001      	b.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f42:	7dfb      	ldrb	r3, [r7, #23]
 8002f44:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d032      	beq.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f56:	2b30      	cmp	r3, #48	; 0x30
 8002f58:	d01c      	beq.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8002f5a:	2b30      	cmp	r3, #48	; 0x30
 8002f5c:	d817      	bhi.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8002f5e:	2b20      	cmp	r3, #32
 8002f60:	d00c      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x330>
 8002f62:	2b20      	cmp	r3, #32
 8002f64:	d813      	bhi.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d016      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8002f6a:	2b10      	cmp	r3, #16
 8002f6c:	d10f      	bne.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f6e:	4b89      	ldr	r3, [pc, #548]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f72:	4a88      	ldr	r2, [pc, #544]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002f74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f78:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002f7a:	e00e      	b.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	3304      	adds	r3, #4
 8002f80:	2102      	movs	r1, #2
 8002f82:	4618      	mov	r0, r3
 8002f84:	f001 f866 	bl	8004054 <RCCEx_PLL2_Config>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002f8c:	e005      	b.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	75fb      	strb	r3, [r7, #23]
      break;
 8002f92:	e002      	b.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8002f94:	bf00      	nop
 8002f96:	e000      	b.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8002f98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f9a:	7dfb      	ldrb	r3, [r7, #23]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d109      	bne.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002fa0:	4b7c      	ldr	r3, [pc, #496]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002fa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fa4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fac:	4979      	ldr	r1, [pc, #484]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002fb2:	e001      	b.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fb4:	7dfb      	ldrb	r3, [r7, #23]
 8002fb6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d047      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fc8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002fcc:	d030      	beq.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002fce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002fd2:	d82a      	bhi.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002fd4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002fd8:	d02c      	beq.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002fda:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002fde:	d824      	bhi.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002fe0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fe4:	d018      	beq.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8002fe6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fea:	d81e      	bhi.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d003      	beq.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8002ff0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ff4:	d007      	beq.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8002ff6:	e018      	b.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ff8:	4b66      	ldr	r3, [pc, #408]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ffc:	4a65      	ldr	r2, [pc, #404]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002ffe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003002:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003004:	e017      	b.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	3304      	adds	r3, #4
 800300a:	2100      	movs	r1, #0
 800300c:	4618      	mov	r0, r3
 800300e:	f001 f821 	bl	8004054 <RCCEx_PLL2_Config>
 8003012:	4603      	mov	r3, r0
 8003014:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003016:	e00e      	b.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	3324      	adds	r3, #36	; 0x24
 800301c:	2100      	movs	r1, #0
 800301e:	4618      	mov	r0, r3
 8003020:	f001 f8ca 	bl	80041b8 <RCCEx_PLL3_Config>
 8003024:	4603      	mov	r3, r0
 8003026:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003028:	e005      	b.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	75fb      	strb	r3, [r7, #23]
      break;
 800302e:	e002      	b.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8003030:	bf00      	nop
 8003032:	e000      	b.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8003034:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003036:	7dfb      	ldrb	r3, [r7, #23]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d109      	bne.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800303c:	4b55      	ldr	r3, [pc, #340]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800303e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003040:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003048:	4952      	ldr	r1, [pc, #328]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800304a:	4313      	orrs	r3, r2
 800304c:	650b      	str	r3, [r1, #80]	; 0x50
 800304e:	e001      	b.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003050:	7dfb      	ldrb	r3, [r7, #23]
 8003052:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d049      	beq.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003064:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003068:	d02e      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800306a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800306e:	d828      	bhi.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003070:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003074:	d02a      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x480>
 8003076:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800307a:	d822      	bhi.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800307c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003080:	d026      	beq.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8003082:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003086:	d81c      	bhi.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003088:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800308c:	d010      	beq.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x464>
 800308e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003092:	d816      	bhi.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003094:	2b00      	cmp	r3, #0
 8003096:	d01d      	beq.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8003098:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800309c:	d111      	bne.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	3304      	adds	r3, #4
 80030a2:	2101      	movs	r1, #1
 80030a4:	4618      	mov	r0, r3
 80030a6:	f000 ffd5 	bl	8004054 <RCCEx_PLL2_Config>
 80030aa:	4603      	mov	r3, r0
 80030ac:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80030ae:	e012      	b.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	3324      	adds	r3, #36	; 0x24
 80030b4:	2101      	movs	r1, #1
 80030b6:	4618      	mov	r0, r3
 80030b8:	f001 f87e 	bl	80041b8 <RCCEx_PLL3_Config>
 80030bc:	4603      	mov	r3, r0
 80030be:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80030c0:	e009      	b.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	75fb      	strb	r3, [r7, #23]
      break;
 80030c6:	e006      	b.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80030c8:	bf00      	nop
 80030ca:	e004      	b.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80030cc:	bf00      	nop
 80030ce:	e002      	b.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80030d0:	bf00      	nop
 80030d2:	e000      	b.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80030d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030d6:	7dfb      	ldrb	r3, [r7, #23]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d109      	bne.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80030dc:	4b2d      	ldr	r3, [pc, #180]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80030de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030e0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030e8:	492a      	ldr	r1, [pc, #168]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80030ea:	4313      	orrs	r3, r2
 80030ec:	650b      	str	r3, [r1, #80]	; 0x50
 80030ee:	e001      	b.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030f0:	7dfb      	ldrb	r3, [r7, #23]
 80030f2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d04d      	beq.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003106:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800310a:	d02e      	beq.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800310c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003110:	d828      	bhi.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003112:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003116:	d02a      	beq.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x522>
 8003118:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800311c:	d822      	bhi.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800311e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003122:	d026      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8003124:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003128:	d81c      	bhi.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800312a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800312e:	d010      	beq.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8003130:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003134:	d816      	bhi.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003136:	2b00      	cmp	r3, #0
 8003138:	d01d      	beq.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800313a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800313e:	d111      	bne.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	3304      	adds	r3, #4
 8003144:	2101      	movs	r1, #1
 8003146:	4618      	mov	r0, r3
 8003148:	f000 ff84 	bl	8004054 <RCCEx_PLL2_Config>
 800314c:	4603      	mov	r3, r0
 800314e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003150:	e012      	b.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	3324      	adds	r3, #36	; 0x24
 8003156:	2101      	movs	r1, #1
 8003158:	4618      	mov	r0, r3
 800315a:	f001 f82d 	bl	80041b8 <RCCEx_PLL3_Config>
 800315e:	4603      	mov	r3, r0
 8003160:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003162:	e009      	b.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	75fb      	strb	r3, [r7, #23]
      break;
 8003168:	e006      	b.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800316a:	bf00      	nop
 800316c:	e004      	b.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800316e:	bf00      	nop
 8003170:	e002      	b.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003172:	bf00      	nop
 8003174:	e000      	b.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003176:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003178:	7dfb      	ldrb	r3, [r7, #23]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d10c      	bne.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800317e:	4b05      	ldr	r3, [pc, #20]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003182:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800318c:	4901      	ldr	r1, [pc, #4]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800318e:	4313      	orrs	r3, r2
 8003190:	658b      	str	r3, [r1, #88]	; 0x58
 8003192:	e003      	b.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8003194:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003198:	7dfb      	ldrb	r3, [r7, #23]
 800319a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d02f      	beq.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031b0:	d00e      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x584>
 80031b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031b6:	d814      	bhi.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x596>
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d015      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 80031bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80031c0:	d10f      	bne.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031c2:	4baf      	ldr	r3, [pc, #700]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80031c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c6:	4aae      	ldr	r2, [pc, #696]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80031c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031cc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80031ce:	e00c      	b.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	3304      	adds	r3, #4
 80031d4:	2101      	movs	r1, #1
 80031d6:	4618      	mov	r0, r3
 80031d8:	f000 ff3c 	bl	8004054 <RCCEx_PLL2_Config>
 80031dc:	4603      	mov	r3, r0
 80031de:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80031e0:	e003      	b.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	75fb      	strb	r3, [r7, #23]
      break;
 80031e6:	e000      	b.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 80031e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031ea:	7dfb      	ldrb	r3, [r7, #23]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d109      	bne.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80031f0:	4ba3      	ldr	r3, [pc, #652]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80031f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031f4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031fc:	49a0      	ldr	r1, [pc, #640]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	650b      	str	r3, [r1, #80]	; 0x50
 8003202:	e001      	b.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003204:	7dfb      	ldrb	r3, [r7, #23]
 8003206:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003210:	2b00      	cmp	r3, #0
 8003212:	d032      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003218:	2b03      	cmp	r3, #3
 800321a:	d81b      	bhi.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800321c:	a201      	add	r2, pc, #4	; (adr r2, 8003224 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800321e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003222:	bf00      	nop
 8003224:	0800325b 	.word	0x0800325b
 8003228:	08003235 	.word	0x08003235
 800322c:	08003243 	.word	0x08003243
 8003230:	0800325b 	.word	0x0800325b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003234:	4b92      	ldr	r3, [pc, #584]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003238:	4a91      	ldr	r2, [pc, #580]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800323a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800323e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003240:	e00c      	b.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	3304      	adds	r3, #4
 8003246:	2102      	movs	r1, #2
 8003248:	4618      	mov	r0, r3
 800324a:	f000 ff03 	bl	8004054 <RCCEx_PLL2_Config>
 800324e:	4603      	mov	r3, r0
 8003250:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003252:	e003      	b.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	75fb      	strb	r3, [r7, #23]
      break;
 8003258:	e000      	b.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800325a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800325c:	7dfb      	ldrb	r3, [r7, #23]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d109      	bne.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003262:	4b87      	ldr	r3, [pc, #540]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003266:	f023 0203 	bic.w	r2, r3, #3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800326e:	4984      	ldr	r1, [pc, #528]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003270:	4313      	orrs	r3, r2
 8003272:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003274:	e001      	b.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003276:	7dfb      	ldrb	r3, [r7, #23]
 8003278:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003282:	2b00      	cmp	r3, #0
 8003284:	f000 8086 	beq.w	8003394 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003288:	4b7e      	ldr	r3, [pc, #504]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a7d      	ldr	r2, [pc, #500]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800328e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003292:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003294:	f7fd fda6 	bl	8000de4 <HAL_GetTick>
 8003298:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800329a:	e009      	b.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800329c:	f7fd fda2 	bl	8000de4 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b64      	cmp	r3, #100	; 0x64
 80032a8:	d902      	bls.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	75fb      	strb	r3, [r7, #23]
        break;
 80032ae:	e005      	b.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80032b0:	4b74      	ldr	r3, [pc, #464]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d0ef      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80032bc:	7dfb      	ldrb	r3, [r7, #23]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d166      	bne.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80032c2:	4b6f      	ldr	r3, [pc, #444]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80032c4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80032cc:	4053      	eors	r3, r2
 80032ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d013      	beq.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80032d6:	4b6a      	ldr	r3, [pc, #424]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80032d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032de:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80032e0:	4b67      	ldr	r3, [pc, #412]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80032e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e4:	4a66      	ldr	r2, [pc, #408]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80032e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032ea:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80032ec:	4b64      	ldr	r3, [pc, #400]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80032ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f0:	4a63      	ldr	r2, [pc, #396]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80032f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032f6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80032f8:	4a61      	ldr	r2, [pc, #388]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003304:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003308:	d115      	bne.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800330a:	f7fd fd6b 	bl	8000de4 <HAL_GetTick>
 800330e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003310:	e00b      	b.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003312:	f7fd fd67 	bl	8000de4 <HAL_GetTick>
 8003316:	4602      	mov	r2, r0
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003320:	4293      	cmp	r3, r2
 8003322:	d902      	bls.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	75fb      	strb	r3, [r7, #23]
            break;
 8003328:	e005      	b.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800332a:	4b55      	ldr	r3, [pc, #340]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800332c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800332e:	f003 0302 	and.w	r3, r3, #2
 8003332:	2b00      	cmp	r3, #0
 8003334:	d0ed      	beq.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8003336:	7dfb      	ldrb	r3, [r7, #23]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d126      	bne.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003342:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003346:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800334a:	d10d      	bne.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800334c:	4b4c      	ldr	r3, [pc, #304]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800334e:	691b      	ldr	r3, [r3, #16]
 8003350:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800335a:	0919      	lsrs	r1, r3, #4
 800335c:	4b4a      	ldr	r3, [pc, #296]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800335e:	400b      	ands	r3, r1
 8003360:	4947      	ldr	r1, [pc, #284]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003362:	4313      	orrs	r3, r2
 8003364:	610b      	str	r3, [r1, #16]
 8003366:	e005      	b.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003368:	4b45      	ldr	r3, [pc, #276]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800336a:	691b      	ldr	r3, [r3, #16]
 800336c:	4a44      	ldr	r2, [pc, #272]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800336e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003372:	6113      	str	r3, [r2, #16]
 8003374:	4b42      	ldr	r3, [pc, #264]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003376:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800337e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003382:	493f      	ldr	r1, [pc, #252]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003384:	4313      	orrs	r3, r2
 8003386:	670b      	str	r3, [r1, #112]	; 0x70
 8003388:	e004      	b.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800338a:	7dfb      	ldrb	r3, [r7, #23]
 800338c:	75bb      	strb	r3, [r7, #22]
 800338e:	e001      	b.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003390:	7dfb      	ldrb	r3, [r7, #23]
 8003392:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0301 	and.w	r3, r3, #1
 800339c:	2b00      	cmp	r3, #0
 800339e:	f000 8085 	beq.w	80034ac <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033a6:	2b28      	cmp	r3, #40	; 0x28
 80033a8:	d866      	bhi.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80033aa:	a201      	add	r2, pc, #4	; (adr r2, 80033b0 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80033ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033b0:	0800348d 	.word	0x0800348d
 80033b4:	08003479 	.word	0x08003479
 80033b8:	08003479 	.word	0x08003479
 80033bc:	08003479 	.word	0x08003479
 80033c0:	08003479 	.word	0x08003479
 80033c4:	08003479 	.word	0x08003479
 80033c8:	08003479 	.word	0x08003479
 80033cc:	08003479 	.word	0x08003479
 80033d0:	08003455 	.word	0x08003455
 80033d4:	08003479 	.word	0x08003479
 80033d8:	08003479 	.word	0x08003479
 80033dc:	08003479 	.word	0x08003479
 80033e0:	08003479 	.word	0x08003479
 80033e4:	08003479 	.word	0x08003479
 80033e8:	08003479 	.word	0x08003479
 80033ec:	08003479 	.word	0x08003479
 80033f0:	08003467 	.word	0x08003467
 80033f4:	08003479 	.word	0x08003479
 80033f8:	08003479 	.word	0x08003479
 80033fc:	08003479 	.word	0x08003479
 8003400:	08003479 	.word	0x08003479
 8003404:	08003479 	.word	0x08003479
 8003408:	08003479 	.word	0x08003479
 800340c:	08003479 	.word	0x08003479
 8003410:	0800348d 	.word	0x0800348d
 8003414:	08003479 	.word	0x08003479
 8003418:	08003479 	.word	0x08003479
 800341c:	08003479 	.word	0x08003479
 8003420:	08003479 	.word	0x08003479
 8003424:	08003479 	.word	0x08003479
 8003428:	08003479 	.word	0x08003479
 800342c:	08003479 	.word	0x08003479
 8003430:	0800348d 	.word	0x0800348d
 8003434:	08003479 	.word	0x08003479
 8003438:	08003479 	.word	0x08003479
 800343c:	08003479 	.word	0x08003479
 8003440:	08003479 	.word	0x08003479
 8003444:	08003479 	.word	0x08003479
 8003448:	08003479 	.word	0x08003479
 800344c:	08003479 	.word	0x08003479
 8003450:	0800348d 	.word	0x0800348d
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	3304      	adds	r3, #4
 8003458:	2101      	movs	r1, #1
 800345a:	4618      	mov	r0, r3
 800345c:	f000 fdfa 	bl	8004054 <RCCEx_PLL2_Config>
 8003460:	4603      	mov	r3, r0
 8003462:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003464:	e013      	b.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	3324      	adds	r3, #36	; 0x24
 800346a:	2101      	movs	r1, #1
 800346c:	4618      	mov	r0, r3
 800346e:	f000 fea3 	bl	80041b8 <RCCEx_PLL3_Config>
 8003472:	4603      	mov	r3, r0
 8003474:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003476:	e00a      	b.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	75fb      	strb	r3, [r7, #23]
      break;
 800347c:	e007      	b.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x842>
 800347e:	bf00      	nop
 8003480:	58024400 	.word	0x58024400
 8003484:	58024800 	.word	0x58024800
 8003488:	00ffffcf 	.word	0x00ffffcf
      break;
 800348c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800348e:	7dfb      	ldrb	r3, [r7, #23]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d109      	bne.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003494:	4b96      	ldr	r3, [pc, #600]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003498:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034a0:	4993      	ldr	r1, [pc, #588]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	654b      	str	r3, [r1, #84]	; 0x54
 80034a6:	e001      	b.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034a8:	7dfb      	ldrb	r3, [r7, #23]
 80034aa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 0302 	and.w	r3, r3, #2
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d038      	beq.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034bc:	2b05      	cmp	r3, #5
 80034be:	d821      	bhi.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80034c0:	a201      	add	r2, pc, #4	; (adr r2, 80034c8 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 80034c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034c6:	bf00      	nop
 80034c8:	0800350b 	.word	0x0800350b
 80034cc:	080034e1 	.word	0x080034e1
 80034d0:	080034f3 	.word	0x080034f3
 80034d4:	0800350b 	.word	0x0800350b
 80034d8:	0800350b 	.word	0x0800350b
 80034dc:	0800350b 	.word	0x0800350b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	3304      	adds	r3, #4
 80034e4:	2101      	movs	r1, #1
 80034e6:	4618      	mov	r0, r3
 80034e8:	f000 fdb4 	bl	8004054 <RCCEx_PLL2_Config>
 80034ec:	4603      	mov	r3, r0
 80034ee:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80034f0:	e00c      	b.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	3324      	adds	r3, #36	; 0x24
 80034f6:	2101      	movs	r1, #1
 80034f8:	4618      	mov	r0, r3
 80034fa:	f000 fe5d 	bl	80041b8 <RCCEx_PLL3_Config>
 80034fe:	4603      	mov	r3, r0
 8003500:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003502:	e003      	b.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	75fb      	strb	r3, [r7, #23]
      break;
 8003508:	e000      	b.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800350a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800350c:	7dfb      	ldrb	r3, [r7, #23]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d109      	bne.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003512:	4b77      	ldr	r3, [pc, #476]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003516:	f023 0207 	bic.w	r2, r3, #7
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800351e:	4974      	ldr	r1, [pc, #464]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003520:	4313      	orrs	r3, r2
 8003522:	654b      	str	r3, [r1, #84]	; 0x54
 8003524:	e001      	b.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003526:	7dfb      	ldrb	r3, [r7, #23]
 8003528:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0304 	and.w	r3, r3, #4
 8003532:	2b00      	cmp	r3, #0
 8003534:	d03a      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800353c:	2b05      	cmp	r3, #5
 800353e:	d821      	bhi.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8003540:	a201      	add	r2, pc, #4	; (adr r2, 8003548 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8003542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003546:	bf00      	nop
 8003548:	0800358b 	.word	0x0800358b
 800354c:	08003561 	.word	0x08003561
 8003550:	08003573 	.word	0x08003573
 8003554:	0800358b 	.word	0x0800358b
 8003558:	0800358b 	.word	0x0800358b
 800355c:	0800358b 	.word	0x0800358b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	3304      	adds	r3, #4
 8003564:	2101      	movs	r1, #1
 8003566:	4618      	mov	r0, r3
 8003568:	f000 fd74 	bl	8004054 <RCCEx_PLL2_Config>
 800356c:	4603      	mov	r3, r0
 800356e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003570:	e00c      	b.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	3324      	adds	r3, #36	; 0x24
 8003576:	2101      	movs	r1, #1
 8003578:	4618      	mov	r0, r3
 800357a:	f000 fe1d 	bl	80041b8 <RCCEx_PLL3_Config>
 800357e:	4603      	mov	r3, r0
 8003580:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003582:	e003      	b.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	75fb      	strb	r3, [r7, #23]
      break;
 8003588:	e000      	b.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800358a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800358c:	7dfb      	ldrb	r3, [r7, #23]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d10a      	bne.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003592:	4b57      	ldr	r3, [pc, #348]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003596:	f023 0207 	bic.w	r2, r3, #7
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035a0:	4953      	ldr	r1, [pc, #332]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	658b      	str	r3, [r1, #88]	; 0x58
 80035a6:	e001      	b.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035a8:	7dfb      	ldrb	r3, [r7, #23]
 80035aa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0320 	and.w	r3, r3, #32
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d04b      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035c2:	d02e      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80035c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035c8:	d828      	bhi.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80035ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035ce:	d02a      	beq.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80035d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035d4:	d822      	bhi.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80035d6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80035da:	d026      	beq.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80035dc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80035e0:	d81c      	bhi.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80035e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035e6:	d010      	beq.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x9be>
 80035e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035ec:	d816      	bhi.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d01d      	beq.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 80035f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035f6:	d111      	bne.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	3304      	adds	r3, #4
 80035fc:	2100      	movs	r1, #0
 80035fe:	4618      	mov	r0, r3
 8003600:	f000 fd28 	bl	8004054 <RCCEx_PLL2_Config>
 8003604:	4603      	mov	r3, r0
 8003606:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003608:	e012      	b.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	3324      	adds	r3, #36	; 0x24
 800360e:	2102      	movs	r1, #2
 8003610:	4618      	mov	r0, r3
 8003612:	f000 fdd1 	bl	80041b8 <RCCEx_PLL3_Config>
 8003616:	4603      	mov	r3, r0
 8003618:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800361a:	e009      	b.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	75fb      	strb	r3, [r7, #23]
      break;
 8003620:	e006      	b.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003622:	bf00      	nop
 8003624:	e004      	b.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003626:	bf00      	nop
 8003628:	e002      	b.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800362a:	bf00      	nop
 800362c:	e000      	b.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800362e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003630:	7dfb      	ldrb	r3, [r7, #23]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d10a      	bne.n	800364c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003636:	4b2e      	ldr	r3, [pc, #184]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800363a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003644:	492a      	ldr	r1, [pc, #168]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003646:	4313      	orrs	r3, r2
 8003648:	654b      	str	r3, [r1, #84]	; 0x54
 800364a:	e001      	b.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800364c:	7dfb      	ldrb	r3, [r7, #23]
 800364e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003658:	2b00      	cmp	r3, #0
 800365a:	d04d      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003662:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003666:	d02e      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8003668:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800366c:	d828      	bhi.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800366e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003672:	d02a      	beq.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003674:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003678:	d822      	bhi.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800367a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800367e:	d026      	beq.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8003680:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003684:	d81c      	bhi.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003686:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800368a:	d010      	beq.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0xa62>
 800368c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003690:	d816      	bhi.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003692:	2b00      	cmp	r3, #0
 8003694:	d01d      	beq.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8003696:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800369a:	d111      	bne.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	3304      	adds	r3, #4
 80036a0:	2100      	movs	r1, #0
 80036a2:	4618      	mov	r0, r3
 80036a4:	f000 fcd6 	bl	8004054 <RCCEx_PLL2_Config>
 80036a8:	4603      	mov	r3, r0
 80036aa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80036ac:	e012      	b.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	3324      	adds	r3, #36	; 0x24
 80036b2:	2102      	movs	r1, #2
 80036b4:	4618      	mov	r0, r3
 80036b6:	f000 fd7f 	bl	80041b8 <RCCEx_PLL3_Config>
 80036ba:	4603      	mov	r3, r0
 80036bc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80036be:	e009      	b.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	75fb      	strb	r3, [r7, #23]
      break;
 80036c4:	e006      	b.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80036c6:	bf00      	nop
 80036c8:	e004      	b.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80036ca:	bf00      	nop
 80036cc:	e002      	b.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80036ce:	bf00      	nop
 80036d0:	e000      	b.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80036d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036d4:	7dfb      	ldrb	r3, [r7, #23]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d10c      	bne.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80036da:	4b05      	ldr	r3, [pc, #20]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80036dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036de:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036e8:	4901      	ldr	r1, [pc, #4]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80036ea:	4313      	orrs	r3, r2
 80036ec:	658b      	str	r3, [r1, #88]	; 0x58
 80036ee:	e003      	b.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80036f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036f4:	7dfb      	ldrb	r3, [r7, #23]
 80036f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003700:	2b00      	cmp	r3, #0
 8003702:	d04b      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800370a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800370e:	d02e      	beq.n	800376e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8003710:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003714:	d828      	bhi.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003716:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800371a:	d02a      	beq.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800371c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003720:	d822      	bhi.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003722:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003726:	d026      	beq.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8003728:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800372c:	d81c      	bhi.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800372e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003732:	d010      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8003734:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003738:	d816      	bhi.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800373a:	2b00      	cmp	r3, #0
 800373c:	d01d      	beq.n	800377a <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800373e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003742:	d111      	bne.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	3304      	adds	r3, #4
 8003748:	2100      	movs	r1, #0
 800374a:	4618      	mov	r0, r3
 800374c:	f000 fc82 	bl	8004054 <RCCEx_PLL2_Config>
 8003750:	4603      	mov	r3, r0
 8003752:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003754:	e012      	b.n	800377c <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	3324      	adds	r3, #36	; 0x24
 800375a:	2102      	movs	r1, #2
 800375c:	4618      	mov	r0, r3
 800375e:	f000 fd2b 	bl	80041b8 <RCCEx_PLL3_Config>
 8003762:	4603      	mov	r3, r0
 8003764:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003766:	e009      	b.n	800377c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	75fb      	strb	r3, [r7, #23]
      break;
 800376c:	e006      	b.n	800377c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800376e:	bf00      	nop
 8003770:	e004      	b.n	800377c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003772:	bf00      	nop
 8003774:	e002      	b.n	800377c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003776:	bf00      	nop
 8003778:	e000      	b.n	800377c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800377a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800377c:	7dfb      	ldrb	r3, [r7, #23]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d10a      	bne.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003782:	4b9d      	ldr	r3, [pc, #628]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003786:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003790:	4999      	ldr	r1, [pc, #612]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003792:	4313      	orrs	r3, r2
 8003794:	658b      	str	r3, [r1, #88]	; 0x58
 8003796:	e001      	b.n	800379c <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003798:	7dfb      	ldrb	r3, [r7, #23]
 800379a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0308 	and.w	r3, r3, #8
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d01a      	beq.n	80037de <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037b2:	d10a      	bne.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	3324      	adds	r3, #36	; 0x24
 80037b8:	2102      	movs	r1, #2
 80037ba:	4618      	mov	r0, r3
 80037bc:	f000 fcfc 	bl	80041b8 <RCCEx_PLL3_Config>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d001      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80037ca:	4b8b      	ldr	r3, [pc, #556]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80037cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ce:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037d8:	4987      	ldr	r1, [pc, #540]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80037da:	4313      	orrs	r3, r2
 80037dc:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0310 	and.w	r3, r3, #16
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d01a      	beq.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037f4:	d10a      	bne.n	800380c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	3324      	adds	r3, #36	; 0x24
 80037fa:	2102      	movs	r1, #2
 80037fc:	4618      	mov	r0, r3
 80037fe:	f000 fcdb 	bl	80041b8 <RCCEx_PLL3_Config>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d001      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800380c:	4b7a      	ldr	r3, [pc, #488]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800380e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003810:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800381a:	4977      	ldr	r1, [pc, #476]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800381c:	4313      	orrs	r3, r2
 800381e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d034      	beq.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003832:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003836:	d01d      	beq.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8003838:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800383c:	d817      	bhi.n	800386e <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800383e:	2b00      	cmp	r3, #0
 8003840:	d003      	beq.n	800384a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8003842:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003846:	d009      	beq.n	800385c <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8003848:	e011      	b.n	800386e <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	3304      	adds	r3, #4
 800384e:	2100      	movs	r1, #0
 8003850:	4618      	mov	r0, r3
 8003852:	f000 fbff 	bl	8004054 <RCCEx_PLL2_Config>
 8003856:	4603      	mov	r3, r0
 8003858:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800385a:	e00c      	b.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	3324      	adds	r3, #36	; 0x24
 8003860:	2102      	movs	r1, #2
 8003862:	4618      	mov	r0, r3
 8003864:	f000 fca8 	bl	80041b8 <RCCEx_PLL3_Config>
 8003868:	4603      	mov	r3, r0
 800386a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800386c:	e003      	b.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	75fb      	strb	r3, [r7, #23]
      break;
 8003872:	e000      	b.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8003874:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003876:	7dfb      	ldrb	r3, [r7, #23]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d10a      	bne.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800387c:	4b5e      	ldr	r3, [pc, #376]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800387e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003880:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800388a:	495b      	ldr	r1, [pc, #364]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800388c:	4313      	orrs	r3, r2
 800388e:	658b      	str	r3, [r1, #88]	; 0x58
 8003890:	e001      	b.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003892:	7dfb      	ldrb	r3, [r7, #23]
 8003894:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d033      	beq.n	800390a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038a8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80038ac:	d01c      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 80038ae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80038b2:	d816      	bhi.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80038b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038b8:	d003      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80038ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80038be:	d007      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80038c0:	e00f      	b.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038c2:	4b4d      	ldr	r3, [pc, #308]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80038c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c6:	4a4c      	ldr	r2, [pc, #304]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80038c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038cc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80038ce:	e00c      	b.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	3324      	adds	r3, #36	; 0x24
 80038d4:	2101      	movs	r1, #1
 80038d6:	4618      	mov	r0, r3
 80038d8:	f000 fc6e 	bl	80041b8 <RCCEx_PLL3_Config>
 80038dc:	4603      	mov	r3, r0
 80038de:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80038e0:	e003      	b.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	75fb      	strb	r3, [r7, #23]
      break;
 80038e6:	e000      	b.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 80038e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038ea:	7dfb      	ldrb	r3, [r7, #23]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d10a      	bne.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80038f0:	4b41      	ldr	r3, [pc, #260]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80038f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038fe:	493e      	ldr	r1, [pc, #248]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003900:	4313      	orrs	r3, r2
 8003902:	654b      	str	r3, [r1, #84]	; 0x54
 8003904:	e001      	b.n	800390a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003906:	7dfb      	ldrb	r3, [r7, #23]
 8003908:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d029      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800391a:	2b00      	cmp	r3, #0
 800391c:	d003      	beq.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800391e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003922:	d007      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8003924:	e00f      	b.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003926:	4b34      	ldr	r3, [pc, #208]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392a:	4a33      	ldr	r2, [pc, #204]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800392c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003930:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003932:	e00b      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	3304      	adds	r3, #4
 8003938:	2102      	movs	r1, #2
 800393a:	4618      	mov	r0, r3
 800393c:	f000 fb8a 	bl	8004054 <RCCEx_PLL2_Config>
 8003940:	4603      	mov	r3, r0
 8003942:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003944:	e002      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	75fb      	strb	r3, [r7, #23]
      break;
 800394a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800394c:	7dfb      	ldrb	r3, [r7, #23]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d109      	bne.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003952:	4b29      	ldr	r3, [pc, #164]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003956:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800395e:	4926      	ldr	r1, [pc, #152]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003960:	4313      	orrs	r3, r2
 8003962:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003964:	e001      	b.n	800396a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003966:	7dfb      	ldrb	r3, [r7, #23]
 8003968:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00a      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	3324      	adds	r3, #36	; 0x24
 800397a:	2102      	movs	r1, #2
 800397c:	4618      	mov	r0, r3
 800397e:	f000 fc1b 	bl	80041b8 <RCCEx_PLL3_Config>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d001      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d033      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800399c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039a0:	d017      	beq.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80039a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039a6:	d811      	bhi.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80039a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039ac:	d013      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80039ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039b2:	d80b      	bhi.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d010      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80039b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039bc:	d106      	bne.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039be:	4b0e      	ldr	r3, [pc, #56]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80039c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c2:	4a0d      	ldr	r2, [pc, #52]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80039c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039c8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80039ca:	e007      	b.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	75fb      	strb	r3, [r7, #23]
      break;
 80039d0:	e004      	b.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80039d2:	bf00      	nop
 80039d4:	e002      	b.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80039d6:	bf00      	nop
 80039d8:	e000      	b.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80039da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039dc:	7dfb      	ldrb	r3, [r7, #23]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d10c      	bne.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80039e2:	4b05      	ldr	r3, [pc, #20]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80039e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039e6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039ee:	4902      	ldr	r1, [pc, #8]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80039f0:	4313      	orrs	r3, r2
 80039f2:	654b      	str	r3, [r1, #84]	; 0x54
 80039f4:	e004      	b.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80039f6:	bf00      	nop
 80039f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039fc:	7dfb      	ldrb	r3, [r7, #23]
 80039fe:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d008      	beq.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003a0c:	4b31      	ldr	r3, [pc, #196]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003a0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a10:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a18:	492e      	ldr	r1, [pc, #184]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d009      	beq.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003a2a:	4b2a      	ldr	r3, [pc, #168]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003a2c:	691b      	ldr	r3, [r3, #16]
 8003a2e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003a38:	4926      	ldr	r1, [pc, #152]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d008      	beq.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003a4a:	4b22      	ldr	r3, [pc, #136]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003a4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a4e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a56:	491f      	ldr	r1, [pc, #124]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d00d      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003a68:	4b1a      	ldr	r3, [pc, #104]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003a6a:	691b      	ldr	r3, [r3, #16]
 8003a6c:	4a19      	ldr	r2, [pc, #100]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003a6e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003a72:	6113      	str	r3, [r2, #16]
 8003a74:	4b17      	ldr	r3, [pc, #92]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003a76:	691a      	ldr	r2, [r3, #16]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003a7e:	4915      	ldr	r1, [pc, #84]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003a80:	4313      	orrs	r3, r2
 8003a82:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	da08      	bge.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003a8c:	4b11      	ldr	r3, [pc, #68]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003a8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a90:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a98:	490e      	ldr	r1, [pc, #56]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d009      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003aaa:	4b0a      	ldr	r3, [pc, #40]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ab8:	4906      	ldr	r1, [pc, #24]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8003abe:	7dbb      	ldrb	r3, [r7, #22]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d101      	bne.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	e000      	b.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3718      	adds	r7, #24
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	58024400 	.word	0x58024400

08003ad8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003adc:	f7ff f85a 	bl	8002b94 <HAL_RCC_GetHCLKFreq>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	4b06      	ldr	r3, [pc, #24]	; (8003afc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003ae4:	6a1b      	ldr	r3, [r3, #32]
 8003ae6:	091b      	lsrs	r3, r3, #4
 8003ae8:	f003 0307 	and.w	r3, r3, #7
 8003aec:	4904      	ldr	r1, [pc, #16]	; (8003b00 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003aee:	5ccb      	ldrb	r3, [r1, r3]
 8003af0:	f003 031f 	and.w	r3, r3, #31
 8003af4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	58024400 	.word	0x58024400
 8003b00:	080055f4 	.word	0x080055f4

08003b04 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b089      	sub	sp, #36	; 0x24
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003b0c:	4ba1      	ldr	r3, [pc, #644]	; (8003d94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b10:	f003 0303 	and.w	r3, r3, #3
 8003b14:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8003b16:	4b9f      	ldr	r3, [pc, #636]	; (8003d94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b1a:	0b1b      	lsrs	r3, r3, #12
 8003b1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b20:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003b22:	4b9c      	ldr	r3, [pc, #624]	; (8003d94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b26:	091b      	lsrs	r3, r3, #4
 8003b28:	f003 0301 	and.w	r3, r3, #1
 8003b2c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003b2e:	4b99      	ldr	r3, [pc, #612]	; (8003d94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b32:	08db      	lsrs	r3, r3, #3
 8003b34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003b38:	693a      	ldr	r2, [r7, #16]
 8003b3a:	fb02 f303 	mul.w	r3, r2, r3
 8003b3e:	ee07 3a90 	vmov	s15, r3
 8003b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b46:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	f000 8111 	beq.w	8003d74 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	f000 8083 	beq.w	8003c60 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	2b02      	cmp	r3, #2
 8003b5e:	f200 80a1 	bhi.w	8003ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003b62:	69bb      	ldr	r3, [r7, #24]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d003      	beq.n	8003b70 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003b68:	69bb      	ldr	r3, [r7, #24]
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d056      	beq.n	8003c1c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003b6e:	e099      	b.n	8003ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003b70:	4b88      	ldr	r3, [pc, #544]	; (8003d94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0320 	and.w	r3, r3, #32
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d02d      	beq.n	8003bd8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003b7c:	4b85      	ldr	r3, [pc, #532]	; (8003d94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	08db      	lsrs	r3, r3, #3
 8003b82:	f003 0303 	and.w	r3, r3, #3
 8003b86:	4a84      	ldr	r2, [pc, #528]	; (8003d98 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003b88:	fa22 f303 	lsr.w	r3, r2, r3
 8003b8c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	ee07 3a90 	vmov	s15, r3
 8003b94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	ee07 3a90 	vmov	s15, r3
 8003b9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ba2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ba6:	4b7b      	ldr	r3, [pc, #492]	; (8003d94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003baa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bae:	ee07 3a90 	vmov	s15, r3
 8003bb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003bba:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003d9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003bbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bd2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003bd6:	e087      	b.n	8003ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	ee07 3a90 	vmov	s15, r3
 8003bde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003be2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003da0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003be6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bea:	4b6a      	ldr	r3, [pc, #424]	; (8003d94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bf2:	ee07 3a90 	vmov	s15, r3
 8003bf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8003bfe:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003d9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003c02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c16:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003c1a:	e065      	b.n	8003ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	ee07 3a90 	vmov	s15, r3
 8003c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c26:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003da4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003c2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c2e:	4b59      	ldr	r3, [pc, #356]	; (8003d94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c36:	ee07 3a90 	vmov	s15, r3
 8003c3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c42:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003d9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003c46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c5a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003c5e:	e043      	b.n	8003ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	ee07 3a90 	vmov	s15, r3
 8003c66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c6a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003da8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003c6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c72:	4b48      	ldr	r3, [pc, #288]	; (8003d94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c7a:	ee07 3a90 	vmov	s15, r3
 8003c7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c82:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c86:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003d9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003c8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c9e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003ca2:	e021      	b.n	8003ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	ee07 3a90 	vmov	s15, r3
 8003caa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cae:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003da4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003cb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cb6:	4b37      	ldr	r3, [pc, #220]	; (8003d94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cbe:	ee07 3a90 	vmov	s15, r3
 8003cc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003cca:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003d9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003cce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003cda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ce2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003ce6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8003ce8:	4b2a      	ldr	r3, [pc, #168]	; (8003d94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cec:	0a5b      	lsrs	r3, r3, #9
 8003cee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cf2:	ee07 3a90 	vmov	s15, r3
 8003cf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cfa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003cfe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003d02:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d0e:	ee17 2a90 	vmov	r2, s15
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8003d16:	4b1f      	ldr	r3, [pc, #124]	; (8003d94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d1a:	0c1b      	lsrs	r3, r3, #16
 8003d1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d20:	ee07 3a90 	vmov	s15, r3
 8003d24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d28:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003d2c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003d30:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d3c:	ee17 2a90 	vmov	r2, s15
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8003d44:	4b13      	ldr	r3, [pc, #76]	; (8003d94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d48:	0e1b      	lsrs	r3, r3, #24
 8003d4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d4e:	ee07 3a90 	vmov	s15, r3
 8003d52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003d5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003d5e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d6a:	ee17 2a90 	vmov	r2, s15
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003d72:	e008      	b.n	8003d86 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	609a      	str	r2, [r3, #8]
}
 8003d86:	bf00      	nop
 8003d88:	3724      	adds	r7, #36	; 0x24
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr
 8003d92:	bf00      	nop
 8003d94:	58024400 	.word	0x58024400
 8003d98:	03d09000 	.word	0x03d09000
 8003d9c:	46000000 	.word	0x46000000
 8003da0:	4c742400 	.word	0x4c742400
 8003da4:	4a742400 	.word	0x4a742400
 8003da8:	4bbebc20 	.word	0x4bbebc20

08003dac <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b089      	sub	sp, #36	; 0x24
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003db4:	4ba1      	ldr	r3, [pc, #644]	; (800403c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db8:	f003 0303 	and.w	r3, r3, #3
 8003dbc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8003dbe:	4b9f      	ldr	r3, [pc, #636]	; (800403c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc2:	0d1b      	lsrs	r3, r3, #20
 8003dc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003dc8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003dca:	4b9c      	ldr	r3, [pc, #624]	; (800403c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dce:	0a1b      	lsrs	r3, r3, #8
 8003dd0:	f003 0301 	and.w	r3, r3, #1
 8003dd4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8003dd6:	4b99      	ldr	r3, [pc, #612]	; (800403c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dda:	08db      	lsrs	r3, r3, #3
 8003ddc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003de0:	693a      	ldr	r2, [r7, #16]
 8003de2:	fb02 f303 	mul.w	r3, r2, r3
 8003de6:	ee07 3a90 	vmov	s15, r3
 8003dea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	f000 8111 	beq.w	800401c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	f000 8083 	beq.w	8003f08 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003e02:	69bb      	ldr	r3, [r7, #24]
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	f200 80a1 	bhi.w	8003f4c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d003      	beq.n	8003e18 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d056      	beq.n	8003ec4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003e16:	e099      	b.n	8003f4c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003e18:	4b88      	ldr	r3, [pc, #544]	; (800403c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0320 	and.w	r3, r3, #32
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d02d      	beq.n	8003e80 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003e24:	4b85      	ldr	r3, [pc, #532]	; (800403c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	08db      	lsrs	r3, r3, #3
 8003e2a:	f003 0303 	and.w	r3, r3, #3
 8003e2e:	4a84      	ldr	r2, [pc, #528]	; (8004040 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003e30:	fa22 f303 	lsr.w	r3, r2, r3
 8003e34:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	ee07 3a90 	vmov	s15, r3
 8003e3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	ee07 3a90 	vmov	s15, r3
 8003e46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e4e:	4b7b      	ldr	r3, [pc, #492]	; (800403c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e56:	ee07 3a90 	vmov	s15, r3
 8003e5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e62:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004044 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003e66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e7a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003e7e:	e087      	b.n	8003f90 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	ee07 3a90 	vmov	s15, r3
 8003e86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e8a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004048 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003e8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e92:	4b6a      	ldr	r3, [pc, #424]	; (800403c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e9a:	ee07 3a90 	vmov	s15, r3
 8003e9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ea2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ea6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004044 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003eaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003eae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003eb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003eb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003eba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ebe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003ec2:	e065      	b.n	8003f90 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	ee07 3a90 	vmov	s15, r3
 8003eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ece:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800404c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003ed2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ed6:	4b59      	ldr	r3, [pc, #356]	; (800403c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ede:	ee07 3a90 	vmov	s15, r3
 8003ee2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ee6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003eea:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004044 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003eee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ef2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ef6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003efa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003efe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f02:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003f06:	e043      	b.n	8003f90 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	ee07 3a90 	vmov	s15, r3
 8003f0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f12:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004050 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003f16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f1a:	4b48      	ldr	r3, [pc, #288]	; (800403c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f22:	ee07 3a90 	vmov	s15, r3
 8003f26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f2e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004044 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003f32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f46:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003f4a:	e021      	b.n	8003f90 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	ee07 3a90 	vmov	s15, r3
 8003f52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f56:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800404c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003f5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f5e:	4b37      	ldr	r3, [pc, #220]	; (800403c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f66:	ee07 3a90 	vmov	s15, r3
 8003f6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f72:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004044 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003f76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f8a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003f8e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003f90:	4b2a      	ldr	r3, [pc, #168]	; (800403c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f94:	0a5b      	lsrs	r3, r3, #9
 8003f96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f9a:	ee07 3a90 	vmov	s15, r3
 8003f9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fa2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003fa6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003faa:	edd7 6a07 	vldr	s13, [r7, #28]
 8003fae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fb6:	ee17 2a90 	vmov	r2, s15
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8003fbe:	4b1f      	ldr	r3, [pc, #124]	; (800403c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc2:	0c1b      	lsrs	r3, r3, #16
 8003fc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fc8:	ee07 3a90 	vmov	s15, r3
 8003fcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fd0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003fd4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003fd8:	edd7 6a07 	vldr	s13, [r7, #28]
 8003fdc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fe0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fe4:	ee17 2a90 	vmov	r2, s15
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8003fec:	4b13      	ldr	r3, [pc, #76]	; (800403c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff0:	0e1b      	lsrs	r3, r3, #24
 8003ff2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ff6:	ee07 3a90 	vmov	s15, r3
 8003ffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ffe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004002:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004006:	edd7 6a07 	vldr	s13, [r7, #28]
 800400a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800400e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004012:	ee17 2a90 	vmov	r2, s15
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800401a:	e008      	b.n	800402e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	609a      	str	r2, [r3, #8]
}
 800402e:	bf00      	nop
 8004030:	3724      	adds	r7, #36	; 0x24
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr
 800403a:	bf00      	nop
 800403c:	58024400 	.word	0x58024400
 8004040:	03d09000 	.word	0x03d09000
 8004044:	46000000 	.word	0x46000000
 8004048:	4c742400 	.word	0x4c742400
 800404c:	4a742400 	.word	0x4a742400
 8004050:	4bbebc20 	.word	0x4bbebc20

08004054 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800405e:	2300      	movs	r3, #0
 8004060:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004062:	4b53      	ldr	r3, [pc, #332]	; (80041b0 <RCCEx_PLL2_Config+0x15c>)
 8004064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004066:	f003 0303 	and.w	r3, r3, #3
 800406a:	2b03      	cmp	r3, #3
 800406c:	d101      	bne.n	8004072 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e099      	b.n	80041a6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004072:	4b4f      	ldr	r3, [pc, #316]	; (80041b0 <RCCEx_PLL2_Config+0x15c>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a4e      	ldr	r2, [pc, #312]	; (80041b0 <RCCEx_PLL2_Config+0x15c>)
 8004078:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800407c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800407e:	f7fc feb1 	bl	8000de4 <HAL_GetTick>
 8004082:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004084:	e008      	b.n	8004098 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004086:	f7fc fead 	bl	8000de4 <HAL_GetTick>
 800408a:	4602      	mov	r2, r0
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	1ad3      	subs	r3, r2, r3
 8004090:	2b02      	cmp	r3, #2
 8004092:	d901      	bls.n	8004098 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004094:	2303      	movs	r3, #3
 8004096:	e086      	b.n	80041a6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004098:	4b45      	ldr	r3, [pc, #276]	; (80041b0 <RCCEx_PLL2_Config+0x15c>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d1f0      	bne.n	8004086 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80040a4:	4b42      	ldr	r3, [pc, #264]	; (80041b0 <RCCEx_PLL2_Config+0x15c>)
 80040a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	031b      	lsls	r3, r3, #12
 80040b2:	493f      	ldr	r1, [pc, #252]	; (80041b0 <RCCEx_PLL2_Config+0x15c>)
 80040b4:	4313      	orrs	r3, r2
 80040b6:	628b      	str	r3, [r1, #40]	; 0x28
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	3b01      	subs	r3, #1
 80040be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	3b01      	subs	r3, #1
 80040c8:	025b      	lsls	r3, r3, #9
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	431a      	orrs	r2, r3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	3b01      	subs	r3, #1
 80040d4:	041b      	lsls	r3, r3, #16
 80040d6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80040da:	431a      	orrs	r2, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	691b      	ldr	r3, [r3, #16]
 80040e0:	3b01      	subs	r3, #1
 80040e2:	061b      	lsls	r3, r3, #24
 80040e4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80040e8:	4931      	ldr	r1, [pc, #196]	; (80041b0 <RCCEx_PLL2_Config+0x15c>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80040ee:	4b30      	ldr	r3, [pc, #192]	; (80041b0 <RCCEx_PLL2_Config+0x15c>)
 80040f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	695b      	ldr	r3, [r3, #20]
 80040fa:	492d      	ldr	r1, [pc, #180]	; (80041b0 <RCCEx_PLL2_Config+0x15c>)
 80040fc:	4313      	orrs	r3, r2
 80040fe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004100:	4b2b      	ldr	r3, [pc, #172]	; (80041b0 <RCCEx_PLL2_Config+0x15c>)
 8004102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004104:	f023 0220 	bic.w	r2, r3, #32
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	699b      	ldr	r3, [r3, #24]
 800410c:	4928      	ldr	r1, [pc, #160]	; (80041b0 <RCCEx_PLL2_Config+0x15c>)
 800410e:	4313      	orrs	r3, r2
 8004110:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004112:	4b27      	ldr	r3, [pc, #156]	; (80041b0 <RCCEx_PLL2_Config+0x15c>)
 8004114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004116:	4a26      	ldr	r2, [pc, #152]	; (80041b0 <RCCEx_PLL2_Config+0x15c>)
 8004118:	f023 0310 	bic.w	r3, r3, #16
 800411c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800411e:	4b24      	ldr	r3, [pc, #144]	; (80041b0 <RCCEx_PLL2_Config+0x15c>)
 8004120:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004122:	4b24      	ldr	r3, [pc, #144]	; (80041b4 <RCCEx_PLL2_Config+0x160>)
 8004124:	4013      	ands	r3, r2
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	69d2      	ldr	r2, [r2, #28]
 800412a:	00d2      	lsls	r2, r2, #3
 800412c:	4920      	ldr	r1, [pc, #128]	; (80041b0 <RCCEx_PLL2_Config+0x15c>)
 800412e:	4313      	orrs	r3, r2
 8004130:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004132:	4b1f      	ldr	r3, [pc, #124]	; (80041b0 <RCCEx_PLL2_Config+0x15c>)
 8004134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004136:	4a1e      	ldr	r2, [pc, #120]	; (80041b0 <RCCEx_PLL2_Config+0x15c>)
 8004138:	f043 0310 	orr.w	r3, r3, #16
 800413c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d106      	bne.n	8004152 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004144:	4b1a      	ldr	r3, [pc, #104]	; (80041b0 <RCCEx_PLL2_Config+0x15c>)
 8004146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004148:	4a19      	ldr	r2, [pc, #100]	; (80041b0 <RCCEx_PLL2_Config+0x15c>)
 800414a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800414e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004150:	e00f      	b.n	8004172 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	2b01      	cmp	r3, #1
 8004156:	d106      	bne.n	8004166 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004158:	4b15      	ldr	r3, [pc, #84]	; (80041b0 <RCCEx_PLL2_Config+0x15c>)
 800415a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800415c:	4a14      	ldr	r2, [pc, #80]	; (80041b0 <RCCEx_PLL2_Config+0x15c>)
 800415e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004162:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004164:	e005      	b.n	8004172 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004166:	4b12      	ldr	r3, [pc, #72]	; (80041b0 <RCCEx_PLL2_Config+0x15c>)
 8004168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800416a:	4a11      	ldr	r2, [pc, #68]	; (80041b0 <RCCEx_PLL2_Config+0x15c>)
 800416c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004170:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004172:	4b0f      	ldr	r3, [pc, #60]	; (80041b0 <RCCEx_PLL2_Config+0x15c>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a0e      	ldr	r2, [pc, #56]	; (80041b0 <RCCEx_PLL2_Config+0x15c>)
 8004178:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800417c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800417e:	f7fc fe31 	bl	8000de4 <HAL_GetTick>
 8004182:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004184:	e008      	b.n	8004198 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004186:	f7fc fe2d 	bl	8000de4 <HAL_GetTick>
 800418a:	4602      	mov	r2, r0
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	2b02      	cmp	r3, #2
 8004192:	d901      	bls.n	8004198 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004194:	2303      	movs	r3, #3
 8004196:	e006      	b.n	80041a6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004198:	4b05      	ldr	r3, [pc, #20]	; (80041b0 <RCCEx_PLL2_Config+0x15c>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d0f0      	beq.n	8004186 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80041a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3710      	adds	r7, #16
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	58024400 	.word	0x58024400
 80041b4:	ffff0007 	.word	0xffff0007

080041b8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80041c2:	2300      	movs	r3, #0
 80041c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80041c6:	4b53      	ldr	r3, [pc, #332]	; (8004314 <RCCEx_PLL3_Config+0x15c>)
 80041c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ca:	f003 0303 	and.w	r3, r3, #3
 80041ce:	2b03      	cmp	r3, #3
 80041d0:	d101      	bne.n	80041d6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e099      	b.n	800430a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80041d6:	4b4f      	ldr	r3, [pc, #316]	; (8004314 <RCCEx_PLL3_Config+0x15c>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a4e      	ldr	r2, [pc, #312]	; (8004314 <RCCEx_PLL3_Config+0x15c>)
 80041dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041e2:	f7fc fdff 	bl	8000de4 <HAL_GetTick>
 80041e6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80041e8:	e008      	b.n	80041fc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80041ea:	f7fc fdfb 	bl	8000de4 <HAL_GetTick>
 80041ee:	4602      	mov	r2, r0
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	1ad3      	subs	r3, r2, r3
 80041f4:	2b02      	cmp	r3, #2
 80041f6:	d901      	bls.n	80041fc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80041f8:	2303      	movs	r3, #3
 80041fa:	e086      	b.n	800430a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80041fc:	4b45      	ldr	r3, [pc, #276]	; (8004314 <RCCEx_PLL3_Config+0x15c>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004204:	2b00      	cmp	r3, #0
 8004206:	d1f0      	bne.n	80041ea <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004208:	4b42      	ldr	r3, [pc, #264]	; (8004314 <RCCEx_PLL3_Config+0x15c>)
 800420a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800420c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	051b      	lsls	r3, r3, #20
 8004216:	493f      	ldr	r1, [pc, #252]	; (8004314 <RCCEx_PLL3_Config+0x15c>)
 8004218:	4313      	orrs	r3, r2
 800421a:	628b      	str	r3, [r1, #40]	; 0x28
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	3b01      	subs	r3, #1
 8004222:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	3b01      	subs	r3, #1
 800422c:	025b      	lsls	r3, r3, #9
 800422e:	b29b      	uxth	r3, r3
 8004230:	431a      	orrs	r2, r3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	3b01      	subs	r3, #1
 8004238:	041b      	lsls	r3, r3, #16
 800423a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800423e:	431a      	orrs	r2, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	691b      	ldr	r3, [r3, #16]
 8004244:	3b01      	subs	r3, #1
 8004246:	061b      	lsls	r3, r3, #24
 8004248:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800424c:	4931      	ldr	r1, [pc, #196]	; (8004314 <RCCEx_PLL3_Config+0x15c>)
 800424e:	4313      	orrs	r3, r2
 8004250:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004252:	4b30      	ldr	r3, [pc, #192]	; (8004314 <RCCEx_PLL3_Config+0x15c>)
 8004254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004256:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	695b      	ldr	r3, [r3, #20]
 800425e:	492d      	ldr	r1, [pc, #180]	; (8004314 <RCCEx_PLL3_Config+0x15c>)
 8004260:	4313      	orrs	r3, r2
 8004262:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004264:	4b2b      	ldr	r3, [pc, #172]	; (8004314 <RCCEx_PLL3_Config+0x15c>)
 8004266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004268:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	699b      	ldr	r3, [r3, #24]
 8004270:	4928      	ldr	r1, [pc, #160]	; (8004314 <RCCEx_PLL3_Config+0x15c>)
 8004272:	4313      	orrs	r3, r2
 8004274:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004276:	4b27      	ldr	r3, [pc, #156]	; (8004314 <RCCEx_PLL3_Config+0x15c>)
 8004278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800427a:	4a26      	ldr	r2, [pc, #152]	; (8004314 <RCCEx_PLL3_Config+0x15c>)
 800427c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004280:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004282:	4b24      	ldr	r3, [pc, #144]	; (8004314 <RCCEx_PLL3_Config+0x15c>)
 8004284:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004286:	4b24      	ldr	r3, [pc, #144]	; (8004318 <RCCEx_PLL3_Config+0x160>)
 8004288:	4013      	ands	r3, r2
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	69d2      	ldr	r2, [r2, #28]
 800428e:	00d2      	lsls	r2, r2, #3
 8004290:	4920      	ldr	r1, [pc, #128]	; (8004314 <RCCEx_PLL3_Config+0x15c>)
 8004292:	4313      	orrs	r3, r2
 8004294:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004296:	4b1f      	ldr	r3, [pc, #124]	; (8004314 <RCCEx_PLL3_Config+0x15c>)
 8004298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800429a:	4a1e      	ldr	r2, [pc, #120]	; (8004314 <RCCEx_PLL3_Config+0x15c>)
 800429c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d106      	bne.n	80042b6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80042a8:	4b1a      	ldr	r3, [pc, #104]	; (8004314 <RCCEx_PLL3_Config+0x15c>)
 80042aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ac:	4a19      	ldr	r2, [pc, #100]	; (8004314 <RCCEx_PLL3_Config+0x15c>)
 80042ae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80042b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80042b4:	e00f      	b.n	80042d6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d106      	bne.n	80042ca <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80042bc:	4b15      	ldr	r3, [pc, #84]	; (8004314 <RCCEx_PLL3_Config+0x15c>)
 80042be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c0:	4a14      	ldr	r2, [pc, #80]	; (8004314 <RCCEx_PLL3_Config+0x15c>)
 80042c2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80042c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80042c8:	e005      	b.n	80042d6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80042ca:	4b12      	ldr	r3, [pc, #72]	; (8004314 <RCCEx_PLL3_Config+0x15c>)
 80042cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ce:	4a11      	ldr	r2, [pc, #68]	; (8004314 <RCCEx_PLL3_Config+0x15c>)
 80042d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042d4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80042d6:	4b0f      	ldr	r3, [pc, #60]	; (8004314 <RCCEx_PLL3_Config+0x15c>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a0e      	ldr	r2, [pc, #56]	; (8004314 <RCCEx_PLL3_Config+0x15c>)
 80042dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042e2:	f7fc fd7f 	bl	8000de4 <HAL_GetTick>
 80042e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80042e8:	e008      	b.n	80042fc <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80042ea:	f7fc fd7b 	bl	8000de4 <HAL_GetTick>
 80042ee:	4602      	mov	r2, r0
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	2b02      	cmp	r3, #2
 80042f6:	d901      	bls.n	80042fc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	e006      	b.n	800430a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80042fc:	4b05      	ldr	r3, [pc, #20]	; (8004314 <RCCEx_PLL3_Config+0x15c>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004304:	2b00      	cmp	r3, #0
 8004306:	d0f0      	beq.n	80042ea <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004308:	7bfb      	ldrb	r3, [r7, #15]
}
 800430a:	4618      	mov	r0, r3
 800430c:	3710      	adds	r7, #16
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	58024400 	.word	0x58024400
 8004318:	ffff0007 	.word	0xffff0007

0800431c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b082      	sub	sp, #8
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d101      	bne.n	800432e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e042      	b.n	80043b4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004334:	2b00      	cmp	r3, #0
 8004336:	d106      	bne.n	8004346 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f7fc fb87 	bl	8000a54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2224      	movs	r2, #36	; 0x24
 800434a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f022 0201 	bic.w	r2, r2, #1
 800435c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f000 f8c2 	bl	80044e8 <UART_SetConfig>
 8004364:	4603      	mov	r3, r0
 8004366:	2b01      	cmp	r3, #1
 8004368:	d101      	bne.n	800436e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e022      	b.n	80043b4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004372:	2b00      	cmp	r3, #0
 8004374:	d002      	beq.n	800437c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f000 fe1e 	bl	8004fb8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	685a      	ldr	r2, [r3, #4]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800438a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	689a      	ldr	r2, [r3, #8]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800439a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f042 0201 	orr.w	r2, r2, #1
 80043aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f000 fea5 	bl	80050fc <UART_CheckIdleState>
 80043b2:	4603      	mov	r3, r0
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3708      	adds	r7, #8
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}

080043bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b08a      	sub	sp, #40	; 0x28
 80043c0:	af02      	add	r7, sp, #8
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	603b      	str	r3, [r7, #0]
 80043c8:	4613      	mov	r3, r2
 80043ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043d2:	2b20      	cmp	r3, #32
 80043d4:	f040 8083 	bne.w	80044de <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d002      	beq.n	80043e4 <HAL_UART_Transmit+0x28>
 80043de:	88fb      	ldrh	r3, [r7, #6]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d101      	bne.n	80043e8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e07b      	b.n	80044e0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d101      	bne.n	80043f6 <HAL_UART_Transmit+0x3a>
 80043f2:	2302      	movs	r3, #2
 80043f4:	e074      	b.n	80044e0 <HAL_UART_Transmit+0x124>
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2201      	movs	r2, #1
 80043fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2200      	movs	r2, #0
 8004402:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2221      	movs	r2, #33	; 0x21
 800440a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800440e:	f7fc fce9 	bl	8000de4 <HAL_GetTick>
 8004412:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	88fa      	ldrh	r2, [r7, #6]
 8004418:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	88fa      	ldrh	r2, [r7, #6]
 8004420:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800442c:	d108      	bne.n	8004440 <HAL_UART_Transmit+0x84>
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	691b      	ldr	r3, [r3, #16]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d104      	bne.n	8004440 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004436:	2300      	movs	r3, #0
 8004438:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	61bb      	str	r3, [r7, #24]
 800443e:	e003      	b.n	8004448 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004444:	2300      	movs	r3, #0
 8004446:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2200      	movs	r2, #0
 800444c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004450:	e02c      	b.n	80044ac <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	9300      	str	r3, [sp, #0]
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	2200      	movs	r2, #0
 800445a:	2180      	movs	r1, #128	; 0x80
 800445c:	68f8      	ldr	r0, [r7, #12]
 800445e:	f000 fe98 	bl	8005192 <UART_WaitOnFlagUntilTimeout>
 8004462:	4603      	mov	r3, r0
 8004464:	2b00      	cmp	r3, #0
 8004466:	d001      	beq.n	800446c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004468:	2303      	movs	r3, #3
 800446a:	e039      	b.n	80044e0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800446c:	69fb      	ldr	r3, [r7, #28]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d10b      	bne.n	800448a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	881b      	ldrh	r3, [r3, #0]
 8004476:	461a      	mov	r2, r3
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004480:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004482:	69bb      	ldr	r3, [r7, #24]
 8004484:	3302      	adds	r3, #2
 8004486:	61bb      	str	r3, [r7, #24]
 8004488:	e007      	b.n	800449a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800448a:	69fb      	ldr	r3, [r7, #28]
 800448c:	781a      	ldrb	r2, [r3, #0]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	3301      	adds	r3, #1
 8004498:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	3b01      	subs	r3, #1
 80044a4:	b29a      	uxth	r2, r3
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d1cc      	bne.n	8004452 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	9300      	str	r3, [sp, #0]
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	2200      	movs	r2, #0
 80044c0:	2140      	movs	r1, #64	; 0x40
 80044c2:	68f8      	ldr	r0, [r7, #12]
 80044c4:	f000 fe65 	bl	8005192 <UART_WaitOnFlagUntilTimeout>
 80044c8:	4603      	mov	r3, r0
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d001      	beq.n	80044d2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	e006      	b.n	80044e0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2220      	movs	r2, #32
 80044d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80044da:	2300      	movs	r3, #0
 80044dc:	e000      	b.n	80044e0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80044de:	2302      	movs	r3, #2
  }
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3720      	adds	r7, #32
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044ec:	b092      	sub	sp, #72	; 0x48
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80044f2:	2300      	movs	r3, #0
 80044f4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	689a      	ldr	r2, [r3, #8]
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	691b      	ldr	r3, [r3, #16]
 8004500:	431a      	orrs	r2, r3
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	695b      	ldr	r3, [r3, #20]
 8004506:	431a      	orrs	r2, r3
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	69db      	ldr	r3, [r3, #28]
 800450c:	4313      	orrs	r3, r2
 800450e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	4bbe      	ldr	r3, [pc, #760]	; (8004810 <UART_SetConfig+0x328>)
 8004518:	4013      	ands	r3, r2
 800451a:	697a      	ldr	r2, [r7, #20]
 800451c:	6812      	ldr	r2, [r2, #0]
 800451e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004520:	430b      	orrs	r3, r1
 8004522:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	68da      	ldr	r2, [r3, #12]
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	430a      	orrs	r2, r1
 8004538:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	699b      	ldr	r3, [r3, #24]
 800453e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4ab3      	ldr	r2, [pc, #716]	; (8004814 <UART_SetConfig+0x32c>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d004      	beq.n	8004554 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	6a1b      	ldr	r3, [r3, #32]
 800454e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004550:	4313      	orrs	r3, r2
 8004552:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	689a      	ldr	r2, [r3, #8]
 800455a:	4baf      	ldr	r3, [pc, #700]	; (8004818 <UART_SetConfig+0x330>)
 800455c:	4013      	ands	r3, r2
 800455e:	697a      	ldr	r2, [r7, #20]
 8004560:	6812      	ldr	r2, [r2, #0]
 8004562:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004564:	430b      	orrs	r3, r1
 8004566:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800456e:	f023 010f 	bic.w	r1, r3, #15
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	430a      	orrs	r2, r1
 800457c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4aa6      	ldr	r2, [pc, #664]	; (800481c <UART_SetConfig+0x334>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d177      	bne.n	8004678 <UART_SetConfig+0x190>
 8004588:	4ba5      	ldr	r3, [pc, #660]	; (8004820 <UART_SetConfig+0x338>)
 800458a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800458c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004590:	2b28      	cmp	r3, #40	; 0x28
 8004592:	d86d      	bhi.n	8004670 <UART_SetConfig+0x188>
 8004594:	a201      	add	r2, pc, #4	; (adr r2, 800459c <UART_SetConfig+0xb4>)
 8004596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800459a:	bf00      	nop
 800459c:	08004641 	.word	0x08004641
 80045a0:	08004671 	.word	0x08004671
 80045a4:	08004671 	.word	0x08004671
 80045a8:	08004671 	.word	0x08004671
 80045ac:	08004671 	.word	0x08004671
 80045b0:	08004671 	.word	0x08004671
 80045b4:	08004671 	.word	0x08004671
 80045b8:	08004671 	.word	0x08004671
 80045bc:	08004649 	.word	0x08004649
 80045c0:	08004671 	.word	0x08004671
 80045c4:	08004671 	.word	0x08004671
 80045c8:	08004671 	.word	0x08004671
 80045cc:	08004671 	.word	0x08004671
 80045d0:	08004671 	.word	0x08004671
 80045d4:	08004671 	.word	0x08004671
 80045d8:	08004671 	.word	0x08004671
 80045dc:	08004651 	.word	0x08004651
 80045e0:	08004671 	.word	0x08004671
 80045e4:	08004671 	.word	0x08004671
 80045e8:	08004671 	.word	0x08004671
 80045ec:	08004671 	.word	0x08004671
 80045f0:	08004671 	.word	0x08004671
 80045f4:	08004671 	.word	0x08004671
 80045f8:	08004671 	.word	0x08004671
 80045fc:	08004659 	.word	0x08004659
 8004600:	08004671 	.word	0x08004671
 8004604:	08004671 	.word	0x08004671
 8004608:	08004671 	.word	0x08004671
 800460c:	08004671 	.word	0x08004671
 8004610:	08004671 	.word	0x08004671
 8004614:	08004671 	.word	0x08004671
 8004618:	08004671 	.word	0x08004671
 800461c:	08004661 	.word	0x08004661
 8004620:	08004671 	.word	0x08004671
 8004624:	08004671 	.word	0x08004671
 8004628:	08004671 	.word	0x08004671
 800462c:	08004671 	.word	0x08004671
 8004630:	08004671 	.word	0x08004671
 8004634:	08004671 	.word	0x08004671
 8004638:	08004671 	.word	0x08004671
 800463c:	08004669 	.word	0x08004669
 8004640:	2301      	movs	r3, #1
 8004642:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004646:	e222      	b.n	8004a8e <UART_SetConfig+0x5a6>
 8004648:	2304      	movs	r3, #4
 800464a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800464e:	e21e      	b.n	8004a8e <UART_SetConfig+0x5a6>
 8004650:	2308      	movs	r3, #8
 8004652:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004656:	e21a      	b.n	8004a8e <UART_SetConfig+0x5a6>
 8004658:	2310      	movs	r3, #16
 800465a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800465e:	e216      	b.n	8004a8e <UART_SetConfig+0x5a6>
 8004660:	2320      	movs	r3, #32
 8004662:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004666:	e212      	b.n	8004a8e <UART_SetConfig+0x5a6>
 8004668:	2340      	movs	r3, #64	; 0x40
 800466a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800466e:	e20e      	b.n	8004a8e <UART_SetConfig+0x5a6>
 8004670:	2380      	movs	r3, #128	; 0x80
 8004672:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004676:	e20a      	b.n	8004a8e <UART_SetConfig+0x5a6>
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a69      	ldr	r2, [pc, #420]	; (8004824 <UART_SetConfig+0x33c>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d130      	bne.n	80046e4 <UART_SetConfig+0x1fc>
 8004682:	4b67      	ldr	r3, [pc, #412]	; (8004820 <UART_SetConfig+0x338>)
 8004684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004686:	f003 0307 	and.w	r3, r3, #7
 800468a:	2b05      	cmp	r3, #5
 800468c:	d826      	bhi.n	80046dc <UART_SetConfig+0x1f4>
 800468e:	a201      	add	r2, pc, #4	; (adr r2, 8004694 <UART_SetConfig+0x1ac>)
 8004690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004694:	080046ad 	.word	0x080046ad
 8004698:	080046b5 	.word	0x080046b5
 800469c:	080046bd 	.word	0x080046bd
 80046a0:	080046c5 	.word	0x080046c5
 80046a4:	080046cd 	.word	0x080046cd
 80046a8:	080046d5 	.word	0x080046d5
 80046ac:	2300      	movs	r3, #0
 80046ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046b2:	e1ec      	b.n	8004a8e <UART_SetConfig+0x5a6>
 80046b4:	2304      	movs	r3, #4
 80046b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046ba:	e1e8      	b.n	8004a8e <UART_SetConfig+0x5a6>
 80046bc:	2308      	movs	r3, #8
 80046be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046c2:	e1e4      	b.n	8004a8e <UART_SetConfig+0x5a6>
 80046c4:	2310      	movs	r3, #16
 80046c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046ca:	e1e0      	b.n	8004a8e <UART_SetConfig+0x5a6>
 80046cc:	2320      	movs	r3, #32
 80046ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046d2:	e1dc      	b.n	8004a8e <UART_SetConfig+0x5a6>
 80046d4:	2340      	movs	r3, #64	; 0x40
 80046d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046da:	e1d8      	b.n	8004a8e <UART_SetConfig+0x5a6>
 80046dc:	2380      	movs	r3, #128	; 0x80
 80046de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046e2:	e1d4      	b.n	8004a8e <UART_SetConfig+0x5a6>
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a4f      	ldr	r2, [pc, #316]	; (8004828 <UART_SetConfig+0x340>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d130      	bne.n	8004750 <UART_SetConfig+0x268>
 80046ee:	4b4c      	ldr	r3, [pc, #304]	; (8004820 <UART_SetConfig+0x338>)
 80046f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046f2:	f003 0307 	and.w	r3, r3, #7
 80046f6:	2b05      	cmp	r3, #5
 80046f8:	d826      	bhi.n	8004748 <UART_SetConfig+0x260>
 80046fa:	a201      	add	r2, pc, #4	; (adr r2, 8004700 <UART_SetConfig+0x218>)
 80046fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004700:	08004719 	.word	0x08004719
 8004704:	08004721 	.word	0x08004721
 8004708:	08004729 	.word	0x08004729
 800470c:	08004731 	.word	0x08004731
 8004710:	08004739 	.word	0x08004739
 8004714:	08004741 	.word	0x08004741
 8004718:	2300      	movs	r3, #0
 800471a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800471e:	e1b6      	b.n	8004a8e <UART_SetConfig+0x5a6>
 8004720:	2304      	movs	r3, #4
 8004722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004726:	e1b2      	b.n	8004a8e <UART_SetConfig+0x5a6>
 8004728:	2308      	movs	r3, #8
 800472a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800472e:	e1ae      	b.n	8004a8e <UART_SetConfig+0x5a6>
 8004730:	2310      	movs	r3, #16
 8004732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004736:	e1aa      	b.n	8004a8e <UART_SetConfig+0x5a6>
 8004738:	2320      	movs	r3, #32
 800473a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800473e:	e1a6      	b.n	8004a8e <UART_SetConfig+0x5a6>
 8004740:	2340      	movs	r3, #64	; 0x40
 8004742:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004746:	e1a2      	b.n	8004a8e <UART_SetConfig+0x5a6>
 8004748:	2380      	movs	r3, #128	; 0x80
 800474a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800474e:	e19e      	b.n	8004a8e <UART_SetConfig+0x5a6>
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a35      	ldr	r2, [pc, #212]	; (800482c <UART_SetConfig+0x344>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d130      	bne.n	80047bc <UART_SetConfig+0x2d4>
 800475a:	4b31      	ldr	r3, [pc, #196]	; (8004820 <UART_SetConfig+0x338>)
 800475c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800475e:	f003 0307 	and.w	r3, r3, #7
 8004762:	2b05      	cmp	r3, #5
 8004764:	d826      	bhi.n	80047b4 <UART_SetConfig+0x2cc>
 8004766:	a201      	add	r2, pc, #4	; (adr r2, 800476c <UART_SetConfig+0x284>)
 8004768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800476c:	08004785 	.word	0x08004785
 8004770:	0800478d 	.word	0x0800478d
 8004774:	08004795 	.word	0x08004795
 8004778:	0800479d 	.word	0x0800479d
 800477c:	080047a5 	.word	0x080047a5
 8004780:	080047ad 	.word	0x080047ad
 8004784:	2300      	movs	r3, #0
 8004786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800478a:	e180      	b.n	8004a8e <UART_SetConfig+0x5a6>
 800478c:	2304      	movs	r3, #4
 800478e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004792:	e17c      	b.n	8004a8e <UART_SetConfig+0x5a6>
 8004794:	2308      	movs	r3, #8
 8004796:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800479a:	e178      	b.n	8004a8e <UART_SetConfig+0x5a6>
 800479c:	2310      	movs	r3, #16
 800479e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047a2:	e174      	b.n	8004a8e <UART_SetConfig+0x5a6>
 80047a4:	2320      	movs	r3, #32
 80047a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047aa:	e170      	b.n	8004a8e <UART_SetConfig+0x5a6>
 80047ac:	2340      	movs	r3, #64	; 0x40
 80047ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047b2:	e16c      	b.n	8004a8e <UART_SetConfig+0x5a6>
 80047b4:	2380      	movs	r3, #128	; 0x80
 80047b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047ba:	e168      	b.n	8004a8e <UART_SetConfig+0x5a6>
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a1b      	ldr	r2, [pc, #108]	; (8004830 <UART_SetConfig+0x348>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d142      	bne.n	800484c <UART_SetConfig+0x364>
 80047c6:	4b16      	ldr	r3, [pc, #88]	; (8004820 <UART_SetConfig+0x338>)
 80047c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ca:	f003 0307 	and.w	r3, r3, #7
 80047ce:	2b05      	cmp	r3, #5
 80047d0:	d838      	bhi.n	8004844 <UART_SetConfig+0x35c>
 80047d2:	a201      	add	r2, pc, #4	; (adr r2, 80047d8 <UART_SetConfig+0x2f0>)
 80047d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047d8:	080047f1 	.word	0x080047f1
 80047dc:	080047f9 	.word	0x080047f9
 80047e0:	08004801 	.word	0x08004801
 80047e4:	08004809 	.word	0x08004809
 80047e8:	08004835 	.word	0x08004835
 80047ec:	0800483d 	.word	0x0800483d
 80047f0:	2300      	movs	r3, #0
 80047f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047f6:	e14a      	b.n	8004a8e <UART_SetConfig+0x5a6>
 80047f8:	2304      	movs	r3, #4
 80047fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047fe:	e146      	b.n	8004a8e <UART_SetConfig+0x5a6>
 8004800:	2308      	movs	r3, #8
 8004802:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004806:	e142      	b.n	8004a8e <UART_SetConfig+0x5a6>
 8004808:	2310      	movs	r3, #16
 800480a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800480e:	e13e      	b.n	8004a8e <UART_SetConfig+0x5a6>
 8004810:	cfff69f3 	.word	0xcfff69f3
 8004814:	58000c00 	.word	0x58000c00
 8004818:	11fff4ff 	.word	0x11fff4ff
 800481c:	40011000 	.word	0x40011000
 8004820:	58024400 	.word	0x58024400
 8004824:	40004400 	.word	0x40004400
 8004828:	40004800 	.word	0x40004800
 800482c:	40004c00 	.word	0x40004c00
 8004830:	40005000 	.word	0x40005000
 8004834:	2320      	movs	r3, #32
 8004836:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800483a:	e128      	b.n	8004a8e <UART_SetConfig+0x5a6>
 800483c:	2340      	movs	r3, #64	; 0x40
 800483e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004842:	e124      	b.n	8004a8e <UART_SetConfig+0x5a6>
 8004844:	2380      	movs	r3, #128	; 0x80
 8004846:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800484a:	e120      	b.n	8004a8e <UART_SetConfig+0x5a6>
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4acb      	ldr	r2, [pc, #812]	; (8004b80 <UART_SetConfig+0x698>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d176      	bne.n	8004944 <UART_SetConfig+0x45c>
 8004856:	4bcb      	ldr	r3, [pc, #812]	; (8004b84 <UART_SetConfig+0x69c>)
 8004858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800485a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800485e:	2b28      	cmp	r3, #40	; 0x28
 8004860:	d86c      	bhi.n	800493c <UART_SetConfig+0x454>
 8004862:	a201      	add	r2, pc, #4	; (adr r2, 8004868 <UART_SetConfig+0x380>)
 8004864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004868:	0800490d 	.word	0x0800490d
 800486c:	0800493d 	.word	0x0800493d
 8004870:	0800493d 	.word	0x0800493d
 8004874:	0800493d 	.word	0x0800493d
 8004878:	0800493d 	.word	0x0800493d
 800487c:	0800493d 	.word	0x0800493d
 8004880:	0800493d 	.word	0x0800493d
 8004884:	0800493d 	.word	0x0800493d
 8004888:	08004915 	.word	0x08004915
 800488c:	0800493d 	.word	0x0800493d
 8004890:	0800493d 	.word	0x0800493d
 8004894:	0800493d 	.word	0x0800493d
 8004898:	0800493d 	.word	0x0800493d
 800489c:	0800493d 	.word	0x0800493d
 80048a0:	0800493d 	.word	0x0800493d
 80048a4:	0800493d 	.word	0x0800493d
 80048a8:	0800491d 	.word	0x0800491d
 80048ac:	0800493d 	.word	0x0800493d
 80048b0:	0800493d 	.word	0x0800493d
 80048b4:	0800493d 	.word	0x0800493d
 80048b8:	0800493d 	.word	0x0800493d
 80048bc:	0800493d 	.word	0x0800493d
 80048c0:	0800493d 	.word	0x0800493d
 80048c4:	0800493d 	.word	0x0800493d
 80048c8:	08004925 	.word	0x08004925
 80048cc:	0800493d 	.word	0x0800493d
 80048d0:	0800493d 	.word	0x0800493d
 80048d4:	0800493d 	.word	0x0800493d
 80048d8:	0800493d 	.word	0x0800493d
 80048dc:	0800493d 	.word	0x0800493d
 80048e0:	0800493d 	.word	0x0800493d
 80048e4:	0800493d 	.word	0x0800493d
 80048e8:	0800492d 	.word	0x0800492d
 80048ec:	0800493d 	.word	0x0800493d
 80048f0:	0800493d 	.word	0x0800493d
 80048f4:	0800493d 	.word	0x0800493d
 80048f8:	0800493d 	.word	0x0800493d
 80048fc:	0800493d 	.word	0x0800493d
 8004900:	0800493d 	.word	0x0800493d
 8004904:	0800493d 	.word	0x0800493d
 8004908:	08004935 	.word	0x08004935
 800490c:	2301      	movs	r3, #1
 800490e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004912:	e0bc      	b.n	8004a8e <UART_SetConfig+0x5a6>
 8004914:	2304      	movs	r3, #4
 8004916:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800491a:	e0b8      	b.n	8004a8e <UART_SetConfig+0x5a6>
 800491c:	2308      	movs	r3, #8
 800491e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004922:	e0b4      	b.n	8004a8e <UART_SetConfig+0x5a6>
 8004924:	2310      	movs	r3, #16
 8004926:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800492a:	e0b0      	b.n	8004a8e <UART_SetConfig+0x5a6>
 800492c:	2320      	movs	r3, #32
 800492e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004932:	e0ac      	b.n	8004a8e <UART_SetConfig+0x5a6>
 8004934:	2340      	movs	r3, #64	; 0x40
 8004936:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800493a:	e0a8      	b.n	8004a8e <UART_SetConfig+0x5a6>
 800493c:	2380      	movs	r3, #128	; 0x80
 800493e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004942:	e0a4      	b.n	8004a8e <UART_SetConfig+0x5a6>
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a8f      	ldr	r2, [pc, #572]	; (8004b88 <UART_SetConfig+0x6a0>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d130      	bne.n	80049b0 <UART_SetConfig+0x4c8>
 800494e:	4b8d      	ldr	r3, [pc, #564]	; (8004b84 <UART_SetConfig+0x69c>)
 8004950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004952:	f003 0307 	and.w	r3, r3, #7
 8004956:	2b05      	cmp	r3, #5
 8004958:	d826      	bhi.n	80049a8 <UART_SetConfig+0x4c0>
 800495a:	a201      	add	r2, pc, #4	; (adr r2, 8004960 <UART_SetConfig+0x478>)
 800495c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004960:	08004979 	.word	0x08004979
 8004964:	08004981 	.word	0x08004981
 8004968:	08004989 	.word	0x08004989
 800496c:	08004991 	.word	0x08004991
 8004970:	08004999 	.word	0x08004999
 8004974:	080049a1 	.word	0x080049a1
 8004978:	2300      	movs	r3, #0
 800497a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800497e:	e086      	b.n	8004a8e <UART_SetConfig+0x5a6>
 8004980:	2304      	movs	r3, #4
 8004982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004986:	e082      	b.n	8004a8e <UART_SetConfig+0x5a6>
 8004988:	2308      	movs	r3, #8
 800498a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800498e:	e07e      	b.n	8004a8e <UART_SetConfig+0x5a6>
 8004990:	2310      	movs	r3, #16
 8004992:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004996:	e07a      	b.n	8004a8e <UART_SetConfig+0x5a6>
 8004998:	2320      	movs	r3, #32
 800499a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800499e:	e076      	b.n	8004a8e <UART_SetConfig+0x5a6>
 80049a0:	2340      	movs	r3, #64	; 0x40
 80049a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049a6:	e072      	b.n	8004a8e <UART_SetConfig+0x5a6>
 80049a8:	2380      	movs	r3, #128	; 0x80
 80049aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049ae:	e06e      	b.n	8004a8e <UART_SetConfig+0x5a6>
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a75      	ldr	r2, [pc, #468]	; (8004b8c <UART_SetConfig+0x6a4>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d130      	bne.n	8004a1c <UART_SetConfig+0x534>
 80049ba:	4b72      	ldr	r3, [pc, #456]	; (8004b84 <UART_SetConfig+0x69c>)
 80049bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049be:	f003 0307 	and.w	r3, r3, #7
 80049c2:	2b05      	cmp	r3, #5
 80049c4:	d826      	bhi.n	8004a14 <UART_SetConfig+0x52c>
 80049c6:	a201      	add	r2, pc, #4	; (adr r2, 80049cc <UART_SetConfig+0x4e4>)
 80049c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049cc:	080049e5 	.word	0x080049e5
 80049d0:	080049ed 	.word	0x080049ed
 80049d4:	080049f5 	.word	0x080049f5
 80049d8:	080049fd 	.word	0x080049fd
 80049dc:	08004a05 	.word	0x08004a05
 80049e0:	08004a0d 	.word	0x08004a0d
 80049e4:	2300      	movs	r3, #0
 80049e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049ea:	e050      	b.n	8004a8e <UART_SetConfig+0x5a6>
 80049ec:	2304      	movs	r3, #4
 80049ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049f2:	e04c      	b.n	8004a8e <UART_SetConfig+0x5a6>
 80049f4:	2308      	movs	r3, #8
 80049f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049fa:	e048      	b.n	8004a8e <UART_SetConfig+0x5a6>
 80049fc:	2310      	movs	r3, #16
 80049fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a02:	e044      	b.n	8004a8e <UART_SetConfig+0x5a6>
 8004a04:	2320      	movs	r3, #32
 8004a06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a0a:	e040      	b.n	8004a8e <UART_SetConfig+0x5a6>
 8004a0c:	2340      	movs	r3, #64	; 0x40
 8004a0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a12:	e03c      	b.n	8004a8e <UART_SetConfig+0x5a6>
 8004a14:	2380      	movs	r3, #128	; 0x80
 8004a16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a1a:	e038      	b.n	8004a8e <UART_SetConfig+0x5a6>
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a5b      	ldr	r2, [pc, #364]	; (8004b90 <UART_SetConfig+0x6a8>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d130      	bne.n	8004a88 <UART_SetConfig+0x5a0>
 8004a26:	4b57      	ldr	r3, [pc, #348]	; (8004b84 <UART_SetConfig+0x69c>)
 8004a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a2a:	f003 0307 	and.w	r3, r3, #7
 8004a2e:	2b05      	cmp	r3, #5
 8004a30:	d826      	bhi.n	8004a80 <UART_SetConfig+0x598>
 8004a32:	a201      	add	r2, pc, #4	; (adr r2, 8004a38 <UART_SetConfig+0x550>)
 8004a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a38:	08004a51 	.word	0x08004a51
 8004a3c:	08004a59 	.word	0x08004a59
 8004a40:	08004a61 	.word	0x08004a61
 8004a44:	08004a69 	.word	0x08004a69
 8004a48:	08004a71 	.word	0x08004a71
 8004a4c:	08004a79 	.word	0x08004a79
 8004a50:	2302      	movs	r3, #2
 8004a52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a56:	e01a      	b.n	8004a8e <UART_SetConfig+0x5a6>
 8004a58:	2304      	movs	r3, #4
 8004a5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a5e:	e016      	b.n	8004a8e <UART_SetConfig+0x5a6>
 8004a60:	2308      	movs	r3, #8
 8004a62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a66:	e012      	b.n	8004a8e <UART_SetConfig+0x5a6>
 8004a68:	2310      	movs	r3, #16
 8004a6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a6e:	e00e      	b.n	8004a8e <UART_SetConfig+0x5a6>
 8004a70:	2320      	movs	r3, #32
 8004a72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a76:	e00a      	b.n	8004a8e <UART_SetConfig+0x5a6>
 8004a78:	2340      	movs	r3, #64	; 0x40
 8004a7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a7e:	e006      	b.n	8004a8e <UART_SetConfig+0x5a6>
 8004a80:	2380      	movs	r3, #128	; 0x80
 8004a82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a86:	e002      	b.n	8004a8e <UART_SetConfig+0x5a6>
 8004a88:	2380      	movs	r3, #128	; 0x80
 8004a8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a3f      	ldr	r2, [pc, #252]	; (8004b90 <UART_SetConfig+0x6a8>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	f040 80f8 	bne.w	8004c8a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004a9a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004a9e:	2b20      	cmp	r3, #32
 8004aa0:	dc46      	bgt.n	8004b30 <UART_SetConfig+0x648>
 8004aa2:	2b02      	cmp	r3, #2
 8004aa4:	f2c0 8082 	blt.w	8004bac <UART_SetConfig+0x6c4>
 8004aa8:	3b02      	subs	r3, #2
 8004aaa:	2b1e      	cmp	r3, #30
 8004aac:	d87e      	bhi.n	8004bac <UART_SetConfig+0x6c4>
 8004aae:	a201      	add	r2, pc, #4	; (adr r2, 8004ab4 <UART_SetConfig+0x5cc>)
 8004ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ab4:	08004b37 	.word	0x08004b37
 8004ab8:	08004bad 	.word	0x08004bad
 8004abc:	08004b3f 	.word	0x08004b3f
 8004ac0:	08004bad 	.word	0x08004bad
 8004ac4:	08004bad 	.word	0x08004bad
 8004ac8:	08004bad 	.word	0x08004bad
 8004acc:	08004b4f 	.word	0x08004b4f
 8004ad0:	08004bad 	.word	0x08004bad
 8004ad4:	08004bad 	.word	0x08004bad
 8004ad8:	08004bad 	.word	0x08004bad
 8004adc:	08004bad 	.word	0x08004bad
 8004ae0:	08004bad 	.word	0x08004bad
 8004ae4:	08004bad 	.word	0x08004bad
 8004ae8:	08004bad 	.word	0x08004bad
 8004aec:	08004b5f 	.word	0x08004b5f
 8004af0:	08004bad 	.word	0x08004bad
 8004af4:	08004bad 	.word	0x08004bad
 8004af8:	08004bad 	.word	0x08004bad
 8004afc:	08004bad 	.word	0x08004bad
 8004b00:	08004bad 	.word	0x08004bad
 8004b04:	08004bad 	.word	0x08004bad
 8004b08:	08004bad 	.word	0x08004bad
 8004b0c:	08004bad 	.word	0x08004bad
 8004b10:	08004bad 	.word	0x08004bad
 8004b14:	08004bad 	.word	0x08004bad
 8004b18:	08004bad 	.word	0x08004bad
 8004b1c:	08004bad 	.word	0x08004bad
 8004b20:	08004bad 	.word	0x08004bad
 8004b24:	08004bad 	.word	0x08004bad
 8004b28:	08004bad 	.word	0x08004bad
 8004b2c:	08004b9f 	.word	0x08004b9f
 8004b30:	2b40      	cmp	r3, #64	; 0x40
 8004b32:	d037      	beq.n	8004ba4 <UART_SetConfig+0x6bc>
 8004b34:	e03a      	b.n	8004bac <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004b36:	f7fe ffcf 	bl	8003ad8 <HAL_RCCEx_GetD3PCLK1Freq>
 8004b3a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004b3c:	e03c      	b.n	8004bb8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004b3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b42:	4618      	mov	r0, r3
 8004b44:	f7fe ffde 	bl	8003b04 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004b4c:	e034      	b.n	8004bb8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004b4e:	f107 0318 	add.w	r3, r7, #24
 8004b52:	4618      	mov	r0, r3
 8004b54:	f7ff f92a 	bl	8003dac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004b5c:	e02c      	b.n	8004bb8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b5e:	4b09      	ldr	r3, [pc, #36]	; (8004b84 <UART_SetConfig+0x69c>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 0320 	and.w	r3, r3, #32
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d016      	beq.n	8004b98 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004b6a:	4b06      	ldr	r3, [pc, #24]	; (8004b84 <UART_SetConfig+0x69c>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	08db      	lsrs	r3, r3, #3
 8004b70:	f003 0303 	and.w	r3, r3, #3
 8004b74:	4a07      	ldr	r2, [pc, #28]	; (8004b94 <UART_SetConfig+0x6ac>)
 8004b76:	fa22 f303 	lsr.w	r3, r2, r3
 8004b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004b7c:	e01c      	b.n	8004bb8 <UART_SetConfig+0x6d0>
 8004b7e:	bf00      	nop
 8004b80:	40011400 	.word	0x40011400
 8004b84:	58024400 	.word	0x58024400
 8004b88:	40007800 	.word	0x40007800
 8004b8c:	40007c00 	.word	0x40007c00
 8004b90:	58000c00 	.word	0x58000c00
 8004b94:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8004b98:	4b9d      	ldr	r3, [pc, #628]	; (8004e10 <UART_SetConfig+0x928>)
 8004b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004b9c:	e00c      	b.n	8004bb8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004b9e:	4b9d      	ldr	r3, [pc, #628]	; (8004e14 <UART_SetConfig+0x92c>)
 8004ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004ba2:	e009      	b.n	8004bb8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ba4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004baa:	e005      	b.n	8004bb8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8004bac:	2300      	movs	r3, #0
 8004bae:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004bb6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004bb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	f000 81de 	beq.w	8004f7c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc4:	4a94      	ldr	r2, [pc, #592]	; (8004e18 <UART_SetConfig+0x930>)
 8004bc6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004bca:	461a      	mov	r2, r3
 8004bcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bce:	fbb3 f3f2 	udiv	r3, r3, r2
 8004bd2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	685a      	ldr	r2, [r3, #4]
 8004bd8:	4613      	mov	r3, r2
 8004bda:	005b      	lsls	r3, r3, #1
 8004bdc:	4413      	add	r3, r2
 8004bde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d305      	bcc.n	8004bf0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004bea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d903      	bls.n	8004bf8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004bf6:	e1c1      	b.n	8004f7c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004bf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	60bb      	str	r3, [r7, #8]
 8004bfe:	60fa      	str	r2, [r7, #12]
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c04:	4a84      	ldr	r2, [pc, #528]	; (8004e18 <UART_SetConfig+0x930>)
 8004c06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	603b      	str	r3, [r7, #0]
 8004c10:	607a      	str	r2, [r7, #4]
 8004c12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c16:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004c1a:	f7fb fb5d 	bl	80002d8 <__aeabi_uldivmod>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	460b      	mov	r3, r1
 8004c22:	4610      	mov	r0, r2
 8004c24:	4619      	mov	r1, r3
 8004c26:	f04f 0200 	mov.w	r2, #0
 8004c2a:	f04f 0300 	mov.w	r3, #0
 8004c2e:	020b      	lsls	r3, r1, #8
 8004c30:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004c34:	0202      	lsls	r2, r0, #8
 8004c36:	6979      	ldr	r1, [r7, #20]
 8004c38:	6849      	ldr	r1, [r1, #4]
 8004c3a:	0849      	lsrs	r1, r1, #1
 8004c3c:	2000      	movs	r0, #0
 8004c3e:	460c      	mov	r4, r1
 8004c40:	4605      	mov	r5, r0
 8004c42:	eb12 0804 	adds.w	r8, r2, r4
 8004c46:	eb43 0905 	adc.w	r9, r3, r5
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	469a      	mov	sl, r3
 8004c52:	4693      	mov	fp, r2
 8004c54:	4652      	mov	r2, sl
 8004c56:	465b      	mov	r3, fp
 8004c58:	4640      	mov	r0, r8
 8004c5a:	4649      	mov	r1, r9
 8004c5c:	f7fb fb3c 	bl	80002d8 <__aeabi_uldivmod>
 8004c60:	4602      	mov	r2, r0
 8004c62:	460b      	mov	r3, r1
 8004c64:	4613      	mov	r3, r2
 8004c66:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c6e:	d308      	bcc.n	8004c82 <UART_SetConfig+0x79a>
 8004c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c76:	d204      	bcs.n	8004c82 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c7e:	60da      	str	r2, [r3, #12]
 8004c80:	e17c      	b.n	8004f7c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004c88:	e178      	b.n	8004f7c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	69db      	ldr	r3, [r3, #28]
 8004c8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c92:	f040 80c5 	bne.w	8004e20 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8004c96:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004c9a:	2b20      	cmp	r3, #32
 8004c9c:	dc48      	bgt.n	8004d30 <UART_SetConfig+0x848>
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	db7b      	blt.n	8004d9a <UART_SetConfig+0x8b2>
 8004ca2:	2b20      	cmp	r3, #32
 8004ca4:	d879      	bhi.n	8004d9a <UART_SetConfig+0x8b2>
 8004ca6:	a201      	add	r2, pc, #4	; (adr r2, 8004cac <UART_SetConfig+0x7c4>)
 8004ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cac:	08004d37 	.word	0x08004d37
 8004cb0:	08004d3f 	.word	0x08004d3f
 8004cb4:	08004d9b 	.word	0x08004d9b
 8004cb8:	08004d9b 	.word	0x08004d9b
 8004cbc:	08004d47 	.word	0x08004d47
 8004cc0:	08004d9b 	.word	0x08004d9b
 8004cc4:	08004d9b 	.word	0x08004d9b
 8004cc8:	08004d9b 	.word	0x08004d9b
 8004ccc:	08004d57 	.word	0x08004d57
 8004cd0:	08004d9b 	.word	0x08004d9b
 8004cd4:	08004d9b 	.word	0x08004d9b
 8004cd8:	08004d9b 	.word	0x08004d9b
 8004cdc:	08004d9b 	.word	0x08004d9b
 8004ce0:	08004d9b 	.word	0x08004d9b
 8004ce4:	08004d9b 	.word	0x08004d9b
 8004ce8:	08004d9b 	.word	0x08004d9b
 8004cec:	08004d67 	.word	0x08004d67
 8004cf0:	08004d9b 	.word	0x08004d9b
 8004cf4:	08004d9b 	.word	0x08004d9b
 8004cf8:	08004d9b 	.word	0x08004d9b
 8004cfc:	08004d9b 	.word	0x08004d9b
 8004d00:	08004d9b 	.word	0x08004d9b
 8004d04:	08004d9b 	.word	0x08004d9b
 8004d08:	08004d9b 	.word	0x08004d9b
 8004d0c:	08004d9b 	.word	0x08004d9b
 8004d10:	08004d9b 	.word	0x08004d9b
 8004d14:	08004d9b 	.word	0x08004d9b
 8004d18:	08004d9b 	.word	0x08004d9b
 8004d1c:	08004d9b 	.word	0x08004d9b
 8004d20:	08004d9b 	.word	0x08004d9b
 8004d24:	08004d9b 	.word	0x08004d9b
 8004d28:	08004d9b 	.word	0x08004d9b
 8004d2c:	08004d8d 	.word	0x08004d8d
 8004d30:	2b40      	cmp	r3, #64	; 0x40
 8004d32:	d02e      	beq.n	8004d92 <UART_SetConfig+0x8aa>
 8004d34:	e031      	b.n	8004d9a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d36:	f7fd ff5d 	bl	8002bf4 <HAL_RCC_GetPCLK1Freq>
 8004d3a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004d3c:	e033      	b.n	8004da6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d3e:	f7fd ff6f 	bl	8002c20 <HAL_RCC_GetPCLK2Freq>
 8004d42:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004d44:	e02f      	b.n	8004da6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004d46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f7fe feda 	bl	8003b04 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004d54:	e027      	b.n	8004da6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004d56:	f107 0318 	add.w	r3, r7, #24
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f7ff f826 	bl	8003dac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004d60:	69fb      	ldr	r3, [r7, #28]
 8004d62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004d64:	e01f      	b.n	8004da6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d66:	4b2d      	ldr	r3, [pc, #180]	; (8004e1c <UART_SetConfig+0x934>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 0320 	and.w	r3, r3, #32
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d009      	beq.n	8004d86 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004d72:	4b2a      	ldr	r3, [pc, #168]	; (8004e1c <UART_SetConfig+0x934>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	08db      	lsrs	r3, r3, #3
 8004d78:	f003 0303 	and.w	r3, r3, #3
 8004d7c:	4a24      	ldr	r2, [pc, #144]	; (8004e10 <UART_SetConfig+0x928>)
 8004d7e:	fa22 f303 	lsr.w	r3, r2, r3
 8004d82:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004d84:	e00f      	b.n	8004da6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8004d86:	4b22      	ldr	r3, [pc, #136]	; (8004e10 <UART_SetConfig+0x928>)
 8004d88:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004d8a:	e00c      	b.n	8004da6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004d8c:	4b21      	ldr	r3, [pc, #132]	; (8004e14 <UART_SetConfig+0x92c>)
 8004d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004d90:	e009      	b.n	8004da6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004d98:	e005      	b.n	8004da6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004da4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004da6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	f000 80e7 	beq.w	8004f7c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db2:	4a19      	ldr	r2, [pc, #100]	; (8004e18 <UART_SetConfig+0x930>)
 8004db4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004db8:	461a      	mov	r2, r3
 8004dba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dbc:	fbb3 f3f2 	udiv	r3, r3, r2
 8004dc0:	005a      	lsls	r2, r3, #1
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	085b      	lsrs	r3, r3, #1
 8004dc8:	441a      	add	r2, r3
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dd2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dd6:	2b0f      	cmp	r3, #15
 8004dd8:	d916      	bls.n	8004e08 <UART_SetConfig+0x920>
 8004dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ddc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004de0:	d212      	bcs.n	8004e08 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	f023 030f 	bic.w	r3, r3, #15
 8004dea:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dee:	085b      	lsrs	r3, r3, #1
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	f003 0307 	and.w	r3, r3, #7
 8004df6:	b29a      	uxth	r2, r3
 8004df8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004e04:	60da      	str	r2, [r3, #12]
 8004e06:	e0b9      	b.n	8004f7c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004e0e:	e0b5      	b.n	8004f7c <UART_SetConfig+0xa94>
 8004e10:	03d09000 	.word	0x03d09000
 8004e14:	003d0900 	.word	0x003d0900
 8004e18:	08005604 	.word	0x08005604
 8004e1c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8004e20:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004e24:	2b20      	cmp	r3, #32
 8004e26:	dc49      	bgt.n	8004ebc <UART_SetConfig+0x9d4>
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	db7c      	blt.n	8004f26 <UART_SetConfig+0xa3e>
 8004e2c:	2b20      	cmp	r3, #32
 8004e2e:	d87a      	bhi.n	8004f26 <UART_SetConfig+0xa3e>
 8004e30:	a201      	add	r2, pc, #4	; (adr r2, 8004e38 <UART_SetConfig+0x950>)
 8004e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e36:	bf00      	nop
 8004e38:	08004ec3 	.word	0x08004ec3
 8004e3c:	08004ecb 	.word	0x08004ecb
 8004e40:	08004f27 	.word	0x08004f27
 8004e44:	08004f27 	.word	0x08004f27
 8004e48:	08004ed3 	.word	0x08004ed3
 8004e4c:	08004f27 	.word	0x08004f27
 8004e50:	08004f27 	.word	0x08004f27
 8004e54:	08004f27 	.word	0x08004f27
 8004e58:	08004ee3 	.word	0x08004ee3
 8004e5c:	08004f27 	.word	0x08004f27
 8004e60:	08004f27 	.word	0x08004f27
 8004e64:	08004f27 	.word	0x08004f27
 8004e68:	08004f27 	.word	0x08004f27
 8004e6c:	08004f27 	.word	0x08004f27
 8004e70:	08004f27 	.word	0x08004f27
 8004e74:	08004f27 	.word	0x08004f27
 8004e78:	08004ef3 	.word	0x08004ef3
 8004e7c:	08004f27 	.word	0x08004f27
 8004e80:	08004f27 	.word	0x08004f27
 8004e84:	08004f27 	.word	0x08004f27
 8004e88:	08004f27 	.word	0x08004f27
 8004e8c:	08004f27 	.word	0x08004f27
 8004e90:	08004f27 	.word	0x08004f27
 8004e94:	08004f27 	.word	0x08004f27
 8004e98:	08004f27 	.word	0x08004f27
 8004e9c:	08004f27 	.word	0x08004f27
 8004ea0:	08004f27 	.word	0x08004f27
 8004ea4:	08004f27 	.word	0x08004f27
 8004ea8:	08004f27 	.word	0x08004f27
 8004eac:	08004f27 	.word	0x08004f27
 8004eb0:	08004f27 	.word	0x08004f27
 8004eb4:	08004f27 	.word	0x08004f27
 8004eb8:	08004f19 	.word	0x08004f19
 8004ebc:	2b40      	cmp	r3, #64	; 0x40
 8004ebe:	d02e      	beq.n	8004f1e <UART_SetConfig+0xa36>
 8004ec0:	e031      	b.n	8004f26 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ec2:	f7fd fe97 	bl	8002bf4 <HAL_RCC_GetPCLK1Freq>
 8004ec6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004ec8:	e033      	b.n	8004f32 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004eca:	f7fd fea9 	bl	8002c20 <HAL_RCC_GetPCLK2Freq>
 8004ece:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004ed0:	e02f      	b.n	8004f32 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004ed2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f7fe fe14 	bl	8003b04 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ede:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004ee0:	e027      	b.n	8004f32 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004ee2:	f107 0318 	add.w	r3, r7, #24
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f7fe ff60 	bl	8003dac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004eec:	69fb      	ldr	r3, [r7, #28]
 8004eee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004ef0:	e01f      	b.n	8004f32 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ef2:	4b2d      	ldr	r3, [pc, #180]	; (8004fa8 <UART_SetConfig+0xac0>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 0320 	and.w	r3, r3, #32
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d009      	beq.n	8004f12 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004efe:	4b2a      	ldr	r3, [pc, #168]	; (8004fa8 <UART_SetConfig+0xac0>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	08db      	lsrs	r3, r3, #3
 8004f04:	f003 0303 	and.w	r3, r3, #3
 8004f08:	4a28      	ldr	r2, [pc, #160]	; (8004fac <UART_SetConfig+0xac4>)
 8004f0a:	fa22 f303 	lsr.w	r3, r2, r3
 8004f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004f10:	e00f      	b.n	8004f32 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8004f12:	4b26      	ldr	r3, [pc, #152]	; (8004fac <UART_SetConfig+0xac4>)
 8004f14:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004f16:	e00c      	b.n	8004f32 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004f18:	4b25      	ldr	r3, [pc, #148]	; (8004fb0 <UART_SetConfig+0xac8>)
 8004f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004f1c:	e009      	b.n	8004f32 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004f24:	e005      	b.n	8004f32 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8004f26:	2300      	movs	r3, #0
 8004f28:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004f30:	bf00      	nop
    }

    if (pclk != 0U)
 8004f32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d021      	beq.n	8004f7c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3c:	4a1d      	ldr	r2, [pc, #116]	; (8004fb4 <UART_SetConfig+0xacc>)
 8004f3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f42:	461a      	mov	r2, r3
 8004f44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f46:	fbb3 f2f2 	udiv	r2, r3, r2
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	085b      	lsrs	r3, r3, #1
 8004f50:	441a      	add	r2, r3
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f5a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f5e:	2b0f      	cmp	r3, #15
 8004f60:	d909      	bls.n	8004f76 <UART_SetConfig+0xa8e>
 8004f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f68:	d205      	bcs.n	8004f76 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f6c:	b29a      	uxth	r2, r3
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	60da      	str	r2, [r3, #12]
 8004f74:	e002      	b.n	8004f7c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	2200      	movs	r2, #0
 8004f96:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004f98:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3748      	adds	r7, #72	; 0x48
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fa6:	bf00      	nop
 8004fa8:	58024400 	.word	0x58024400
 8004fac:	03d09000 	.word	0x03d09000
 8004fb0:	003d0900 	.word	0x003d0900
 8004fb4:	08005604 	.word	0x08005604

08004fb8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b083      	sub	sp, #12
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fc4:	f003 0301 	and.w	r3, r3, #1
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d00a      	beq.n	8004fe2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	430a      	orrs	r2, r1
 8004fe0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe6:	f003 0302 	and.w	r3, r3, #2
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d00a      	beq.n	8005004 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	430a      	orrs	r2, r1
 8005002:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005008:	f003 0304 	and.w	r3, r3, #4
 800500c:	2b00      	cmp	r3, #0
 800500e:	d00a      	beq.n	8005026 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	430a      	orrs	r2, r1
 8005024:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800502a:	f003 0308 	and.w	r3, r3, #8
 800502e:	2b00      	cmp	r3, #0
 8005030:	d00a      	beq.n	8005048 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	430a      	orrs	r2, r1
 8005046:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800504c:	f003 0310 	and.w	r3, r3, #16
 8005050:	2b00      	cmp	r3, #0
 8005052:	d00a      	beq.n	800506a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	430a      	orrs	r2, r1
 8005068:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800506e:	f003 0320 	and.w	r3, r3, #32
 8005072:	2b00      	cmp	r3, #0
 8005074:	d00a      	beq.n	800508c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	430a      	orrs	r2, r1
 800508a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005094:	2b00      	cmp	r3, #0
 8005096:	d01a      	beq.n	80050ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	430a      	orrs	r2, r1
 80050ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050b6:	d10a      	bne.n	80050ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	430a      	orrs	r2, r1
 80050cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d00a      	beq.n	80050f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	430a      	orrs	r2, r1
 80050ee:	605a      	str	r2, [r3, #4]
  }
}
 80050f0:	bf00      	nop
 80050f2:	370c      	adds	r7, #12
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr

080050fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b086      	sub	sp, #24
 8005100:	af02      	add	r7, sp, #8
 8005102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2200      	movs	r2, #0
 8005108:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800510c:	f7fb fe6a 	bl	8000de4 <HAL_GetTick>
 8005110:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f003 0308 	and.w	r3, r3, #8
 800511c:	2b08      	cmp	r3, #8
 800511e:	d10e      	bne.n	800513e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005120:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005124:	9300      	str	r3, [sp, #0]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2200      	movs	r2, #0
 800512a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f000 f82f 	bl	8005192 <UART_WaitOnFlagUntilTimeout>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d001      	beq.n	800513e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800513a:	2303      	movs	r3, #3
 800513c:	e025      	b.n	800518a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 0304 	and.w	r3, r3, #4
 8005148:	2b04      	cmp	r3, #4
 800514a:	d10e      	bne.n	800516a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800514c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005150:	9300      	str	r3, [sp, #0]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2200      	movs	r2, #0
 8005156:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 f819 	bl	8005192 <UART_WaitOnFlagUntilTimeout>
 8005160:	4603      	mov	r3, r0
 8005162:	2b00      	cmp	r3, #0
 8005164:	d001      	beq.n	800516a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005166:	2303      	movs	r3, #3
 8005168:	e00f      	b.n	800518a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2220      	movs	r2, #32
 800516e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2220      	movs	r2, #32
 8005176:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2200      	movs	r2, #0
 8005184:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005188:	2300      	movs	r3, #0
}
 800518a:	4618      	mov	r0, r3
 800518c:	3710      	adds	r7, #16
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}

08005192 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005192:	b580      	push	{r7, lr}
 8005194:	b09c      	sub	sp, #112	; 0x70
 8005196:	af00      	add	r7, sp, #0
 8005198:	60f8      	str	r0, [r7, #12]
 800519a:	60b9      	str	r1, [r7, #8]
 800519c:	603b      	str	r3, [r7, #0]
 800519e:	4613      	mov	r3, r2
 80051a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051a2:	e0a9      	b.n	80052f8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051aa:	f000 80a5 	beq.w	80052f8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051ae:	f7fb fe19 	bl	8000de4 <HAL_GetTick>
 80051b2:	4602      	mov	r2, r0
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	1ad3      	subs	r3, r2, r3
 80051b8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d302      	bcc.n	80051c4 <UART_WaitOnFlagUntilTimeout+0x32>
 80051be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d140      	bne.n	8005246 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051cc:	e853 3f00 	ldrex	r3, [r3]
 80051d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80051d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051d4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80051d8:	667b      	str	r3, [r7, #100]	; 0x64
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	461a      	mov	r2, r3
 80051e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051e4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80051e8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80051ea:	e841 2300 	strex	r3, r2, [r1]
 80051ee:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80051f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d1e6      	bne.n	80051c4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	3308      	adds	r3, #8
 80051fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005200:	e853 3f00 	ldrex	r3, [r3]
 8005204:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005208:	f023 0301 	bic.w	r3, r3, #1
 800520c:	663b      	str	r3, [r7, #96]	; 0x60
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	3308      	adds	r3, #8
 8005214:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005216:	64ba      	str	r2, [r7, #72]	; 0x48
 8005218:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800521a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800521c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800521e:	e841 2300 	strex	r3, r2, [r1]
 8005222:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005224:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005226:	2b00      	cmp	r3, #0
 8005228:	d1e5      	bne.n	80051f6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2220      	movs	r2, #32
 800522e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2220      	movs	r2, #32
 8005236:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2200      	movs	r2, #0
 800523e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005242:	2303      	movs	r3, #3
 8005244:	e069      	b.n	800531a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 0304 	and.w	r3, r3, #4
 8005250:	2b00      	cmp	r3, #0
 8005252:	d051      	beq.n	80052f8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	69db      	ldr	r3, [r3, #28]
 800525a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800525e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005262:	d149      	bne.n	80052f8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800526c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005276:	e853 3f00 	ldrex	r3, [r3]
 800527a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800527c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005282:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	461a      	mov	r2, r3
 800528a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800528c:	637b      	str	r3, [r7, #52]	; 0x34
 800528e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005290:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005292:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005294:	e841 2300 	strex	r3, r2, [r1]
 8005298:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800529a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800529c:	2b00      	cmp	r3, #0
 800529e:	d1e6      	bne.n	800526e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	3308      	adds	r3, #8
 80052a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	e853 3f00 	ldrex	r3, [r3]
 80052ae:	613b      	str	r3, [r7, #16]
   return(result);
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	f023 0301 	bic.w	r3, r3, #1
 80052b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	3308      	adds	r3, #8
 80052be:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80052c0:	623a      	str	r2, [r7, #32]
 80052c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c4:	69f9      	ldr	r1, [r7, #28]
 80052c6:	6a3a      	ldr	r2, [r7, #32]
 80052c8:	e841 2300 	strex	r3, r2, [r1]
 80052cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80052ce:	69bb      	ldr	r3, [r7, #24]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d1e5      	bne.n	80052a0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2220      	movs	r2, #32
 80052d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2220      	movs	r2, #32
 80052e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2220      	movs	r2, #32
 80052e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2200      	movs	r2, #0
 80052f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80052f4:	2303      	movs	r3, #3
 80052f6:	e010      	b.n	800531a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	69da      	ldr	r2, [r3, #28]
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	4013      	ands	r3, r2
 8005302:	68ba      	ldr	r2, [r7, #8]
 8005304:	429a      	cmp	r2, r3
 8005306:	bf0c      	ite	eq
 8005308:	2301      	moveq	r3, #1
 800530a:	2300      	movne	r3, #0
 800530c:	b2db      	uxtb	r3, r3
 800530e:	461a      	mov	r2, r3
 8005310:	79fb      	ldrb	r3, [r7, #7]
 8005312:	429a      	cmp	r2, r3
 8005314:	f43f af46 	beq.w	80051a4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005318:	2300      	movs	r3, #0
}
 800531a:	4618      	mov	r0, r3
 800531c:	3770      	adds	r7, #112	; 0x70
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}

08005322 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005322:	b480      	push	{r7}
 8005324:	b085      	sub	sp, #20
 8005326:	af00      	add	r7, sp, #0
 8005328:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005330:	2b01      	cmp	r3, #1
 8005332:	d101      	bne.n	8005338 <HAL_UARTEx_DisableFifoMode+0x16>
 8005334:	2302      	movs	r3, #2
 8005336:	e027      	b.n	8005388 <HAL_UARTEx_DisableFifoMode+0x66>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2224      	movs	r2, #36	; 0x24
 8005344:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f022 0201 	bic.w	r2, r2, #1
 800535e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005366:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2200      	movs	r2, #0
 800536c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	68fa      	ldr	r2, [r7, #12]
 8005374:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2220      	movs	r2, #32
 800537a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2200      	movs	r2, #0
 8005382:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005386:	2300      	movs	r3, #0
}
 8005388:	4618      	mov	r0, r3
 800538a:	3714      	adds	r7, #20
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr

08005394 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b084      	sub	sp, #16
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d101      	bne.n	80053ac <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80053a8:	2302      	movs	r3, #2
 80053aa:	e02d      	b.n	8005408 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2224      	movs	r2, #36	; 0x24
 80053b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f022 0201 	bic.w	r2, r2, #1
 80053d2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	683a      	ldr	r2, [r7, #0]
 80053e4:	430a      	orrs	r2, r1
 80053e6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f000 f84f 	bl	800548c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	68fa      	ldr	r2, [r7, #12]
 80053f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2220      	movs	r2, #32
 80053fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005406:	2300      	movs	r3, #0
}
 8005408:	4618      	mov	r0, r3
 800540a:	3710      	adds	r7, #16
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}

08005410 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b084      	sub	sp, #16
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005420:	2b01      	cmp	r3, #1
 8005422:	d101      	bne.n	8005428 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005424:	2302      	movs	r3, #2
 8005426:	e02d      	b.n	8005484 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2224      	movs	r2, #36	; 0x24
 8005434:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f022 0201 	bic.w	r2, r2, #1
 800544e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	683a      	ldr	r2, [r7, #0]
 8005460:	430a      	orrs	r2, r1
 8005462:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f000 f811 	bl	800548c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	68fa      	ldr	r2, [r7, #12]
 8005470:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2220      	movs	r2, #32
 8005476:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005482:	2300      	movs	r3, #0
}
 8005484:	4618      	mov	r0, r3
 8005486:	3710      	adds	r7, #16
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}

0800548c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800548c:	b480      	push	{r7}
 800548e:	b085      	sub	sp, #20
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005498:	2b00      	cmp	r3, #0
 800549a:	d108      	bne.n	80054ae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80054ac:	e031      	b.n	8005512 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80054ae:	2310      	movs	r3, #16
 80054b0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80054b2:	2310      	movs	r3, #16
 80054b4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	0e5b      	lsrs	r3, r3, #25
 80054be:	b2db      	uxtb	r3, r3
 80054c0:	f003 0307 	and.w	r3, r3, #7
 80054c4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	0f5b      	lsrs	r3, r3, #29
 80054ce:	b2db      	uxtb	r3, r3
 80054d0:	f003 0307 	and.w	r3, r3, #7
 80054d4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80054d6:	7bbb      	ldrb	r3, [r7, #14]
 80054d8:	7b3a      	ldrb	r2, [r7, #12]
 80054da:	4911      	ldr	r1, [pc, #68]	; (8005520 <UARTEx_SetNbDataToProcess+0x94>)
 80054dc:	5c8a      	ldrb	r2, [r1, r2]
 80054de:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80054e2:	7b3a      	ldrb	r2, [r7, #12]
 80054e4:	490f      	ldr	r1, [pc, #60]	; (8005524 <UARTEx_SetNbDataToProcess+0x98>)
 80054e6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80054e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80054ec:	b29a      	uxth	r2, r3
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80054f4:	7bfb      	ldrb	r3, [r7, #15]
 80054f6:	7b7a      	ldrb	r2, [r7, #13]
 80054f8:	4909      	ldr	r1, [pc, #36]	; (8005520 <UARTEx_SetNbDataToProcess+0x94>)
 80054fa:	5c8a      	ldrb	r2, [r1, r2]
 80054fc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005500:	7b7a      	ldrb	r2, [r7, #13]
 8005502:	4908      	ldr	r1, [pc, #32]	; (8005524 <UARTEx_SetNbDataToProcess+0x98>)
 8005504:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005506:	fb93 f3f2 	sdiv	r3, r3, r2
 800550a:	b29a      	uxth	r2, r3
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005512:	bf00      	nop
 8005514:	3714      	adds	r7, #20
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr
 800551e:	bf00      	nop
 8005520:	0800561c 	.word	0x0800561c
 8005524:	08005624 	.word	0x08005624

08005528 <__libc_init_array>:
 8005528:	b570      	push	{r4, r5, r6, lr}
 800552a:	4d0d      	ldr	r5, [pc, #52]	; (8005560 <__libc_init_array+0x38>)
 800552c:	4c0d      	ldr	r4, [pc, #52]	; (8005564 <__libc_init_array+0x3c>)
 800552e:	1b64      	subs	r4, r4, r5
 8005530:	10a4      	asrs	r4, r4, #2
 8005532:	2600      	movs	r6, #0
 8005534:	42a6      	cmp	r6, r4
 8005536:	d109      	bne.n	800554c <__libc_init_array+0x24>
 8005538:	4d0b      	ldr	r5, [pc, #44]	; (8005568 <__libc_init_array+0x40>)
 800553a:	4c0c      	ldr	r4, [pc, #48]	; (800556c <__libc_init_array+0x44>)
 800553c:	f000 f820 	bl	8005580 <_init>
 8005540:	1b64      	subs	r4, r4, r5
 8005542:	10a4      	asrs	r4, r4, #2
 8005544:	2600      	movs	r6, #0
 8005546:	42a6      	cmp	r6, r4
 8005548:	d105      	bne.n	8005556 <__libc_init_array+0x2e>
 800554a:	bd70      	pop	{r4, r5, r6, pc}
 800554c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005550:	4798      	blx	r3
 8005552:	3601      	adds	r6, #1
 8005554:	e7ee      	b.n	8005534 <__libc_init_array+0xc>
 8005556:	f855 3b04 	ldr.w	r3, [r5], #4
 800555a:	4798      	blx	r3
 800555c:	3601      	adds	r6, #1
 800555e:	e7f2      	b.n	8005546 <__libc_init_array+0x1e>
 8005560:	08005634 	.word	0x08005634
 8005564:	08005634 	.word	0x08005634
 8005568:	08005634 	.word	0x08005634
 800556c:	08005638 	.word	0x08005638

08005570 <memset>:
 8005570:	4402      	add	r2, r0
 8005572:	4603      	mov	r3, r0
 8005574:	4293      	cmp	r3, r2
 8005576:	d100      	bne.n	800557a <memset+0xa>
 8005578:	4770      	bx	lr
 800557a:	f803 1b01 	strb.w	r1, [r3], #1
 800557e:	e7f9      	b.n	8005574 <memset+0x4>

08005580 <_init>:
 8005580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005582:	bf00      	nop
 8005584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005586:	bc08      	pop	{r3}
 8005588:	469e      	mov	lr, r3
 800558a:	4770      	bx	lr

0800558c <_fini>:
 800558c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800558e:	bf00      	nop
 8005590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005592:	bc08      	pop	{r3}
 8005594:	469e      	mov	lr, r3
 8005596:	4770      	bx	lr
