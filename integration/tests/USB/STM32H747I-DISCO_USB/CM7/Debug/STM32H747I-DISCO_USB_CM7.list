
STM32H747I-DISCO_USB_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a41c  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  0800a6b4  0800a6b4  0001a6b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a744  0800a744  00020100  2**0
                  CONTENTS
  4 .ARM          00000008  0800a744  0800a744  0001a744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a74c  0800a74c  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a74c  0800a74c  0001a74c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a750  0800a750  0001a750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  24000000  0800a754  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001cbc  24000100  0800a854  00020100  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24001dbc  0800a854  00021dbc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b461  00000000  00000000  0002012e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038f5  00000000  00000000  0003b58f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001260  00000000  00000000  0003ee88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001108  00000000  00000000  000400e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00041d05  00000000  00000000  000411f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001950c  00000000  00000000  00082ef5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0019910b  00000000  00000000  0009c401  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0023550c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b90  00000000  00000000  0023555c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000100 	.word	0x24000100
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800a69c 	.word	0x0800a69c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000104 	.word	0x24000104
 80002d4:	0800a69c 	.word	0x0800a69c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005e0:	4b3d      	ldr	r3, [pc, #244]	; (80006d8 <SystemInit+0xfc>)
 80005e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005e6:	4a3c      	ldr	r2, [pc, #240]	; (80006d8 <SystemInit+0xfc>)
 80005e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0xfc>)
 80005f2:	691b      	ldr	r3, [r3, #16]
 80005f4:	4a38      	ldr	r2, [pc, #224]	; (80006d8 <SystemInit+0xfc>)
 80005f6:	f043 0310 	orr.w	r3, r3, #16
 80005fa:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005fc:	4b37      	ldr	r3, [pc, #220]	; (80006dc <SystemInit+0x100>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f003 030f 	and.w	r3, r3, #15
 8000604:	2b06      	cmp	r3, #6
 8000606:	d807      	bhi.n	8000618 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000608:	4b34      	ldr	r3, [pc, #208]	; (80006dc <SystemInit+0x100>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f023 030f 	bic.w	r3, r3, #15
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x100>)
 8000612:	f043 0307 	orr.w	r3, r3, #7
 8000616:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000618:	4b31      	ldr	r3, [pc, #196]	; (80006e0 <SystemInit+0x104>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a30      	ldr	r2, [pc, #192]	; (80006e0 <SystemInit+0x104>)
 800061e:	f043 0301 	orr.w	r3, r3, #1
 8000622:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x104>)
 8000626:	2200      	movs	r2, #0
 8000628:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800062a:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <SystemInit+0x104>)
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	492c      	ldr	r1, [pc, #176]	; (80006e0 <SystemInit+0x104>)
 8000630:	4b2c      	ldr	r3, [pc, #176]	; (80006e4 <SystemInit+0x108>)
 8000632:	4013      	ands	r3, r2
 8000634:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000636:	4b29      	ldr	r3, [pc, #164]	; (80006dc <SystemInit+0x100>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f003 0308 	and.w	r3, r3, #8
 800063e:	2b00      	cmp	r3, #0
 8000640:	d007      	beq.n	8000652 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000642:	4b26      	ldr	r3, [pc, #152]	; (80006dc <SystemInit+0x100>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f023 030f 	bic.w	r3, r3, #15
 800064a:	4a24      	ldr	r2, [pc, #144]	; (80006dc <SystemInit+0x100>)
 800064c:	f043 0307 	orr.w	r3, r3, #7
 8000650:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000652:	4b23      	ldr	r3, [pc, #140]	; (80006e0 <SystemInit+0x104>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000658:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <SystemInit+0x104>)
 800065a:	2200      	movs	r2, #0
 800065c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800065e:	4b20      	ldr	r3, [pc, #128]	; (80006e0 <SystemInit+0x104>)
 8000660:	2200      	movs	r2, #0
 8000662:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000664:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <SystemInit+0x104>)
 8000666:	4a20      	ldr	r2, [pc, #128]	; (80006e8 <SystemInit+0x10c>)
 8000668:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800066a:	4b1d      	ldr	r3, [pc, #116]	; (80006e0 <SystemInit+0x104>)
 800066c:	4a1f      	ldr	r2, [pc, #124]	; (80006ec <SystemInit+0x110>)
 800066e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <SystemInit+0x104>)
 8000672:	4a1f      	ldr	r2, [pc, #124]	; (80006f0 <SystemInit+0x114>)
 8000674:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000676:	4b1a      	ldr	r3, [pc, #104]	; (80006e0 <SystemInit+0x104>)
 8000678:	2200      	movs	r2, #0
 800067a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <SystemInit+0x104>)
 800067e:	4a1c      	ldr	r2, [pc, #112]	; (80006f0 <SystemInit+0x114>)
 8000680:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000682:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <SystemInit+0x104>)
 8000684:	2200      	movs	r2, #0
 8000686:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000688:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <SystemInit+0x104>)
 800068a:	4a19      	ldr	r2, [pc, #100]	; (80006f0 <SystemInit+0x114>)
 800068c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800068e:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <SystemInit+0x104>)
 8000690:	2200      	movs	r2, #0
 8000692:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <SystemInit+0x104>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a11      	ldr	r2, [pc, #68]	; (80006e0 <SystemInit+0x104>)
 800069a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800069e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <SystemInit+0x104>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x118>)
 80006a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006aa:	4a12      	ldr	r2, [pc, #72]	; (80006f4 <SystemInit+0x118>)
 80006ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b0:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <SystemInit+0x11c>)
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x120>)
 80006b8:	4013      	ands	r3, r2
 80006ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006be:	d202      	bcs.n	80006c6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <SystemInit+0x124>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006c6:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <SystemInit+0x128>)
 80006c8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006cc:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ce:	bf00      	nop
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	e000ed00 	.word	0xe000ed00
 80006dc:	52002000 	.word	0x52002000
 80006e0:	58024400 	.word	0x58024400
 80006e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e8:	02020200 	.word	0x02020200
 80006ec:	01ff0000 	.word	0x01ff0000
 80006f0:	01010280 	.word	0x01010280
 80006f4:	580000c0 	.word	0x580000c0
 80006f8:	5c001000 	.word	0x5c001000
 80006fc:	ffff0000 	.word	0xffff0000
 8000700:	51008108 	.word	0x51008108
 8000704:	52004000 	.word	0x52004000

08000708 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000708:	b590      	push	{r4, r7, lr}
 800070a:	b087      	sub	sp, #28
 800070c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t buffer[] = "Hello World\r\n";
 800070e:	4b18      	ldr	r3, [pc, #96]	; (8000770 <main+0x68>)
 8000710:	f107 0408 	add.w	r4, r7, #8
 8000714:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000716:	c407      	stmia	r4!, {r0, r1, r2}
 8000718:	8023      	strh	r3, [r4, #0]

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800071a:	f000 fa5d 	bl	8000bd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800071e:	f000 f82b 	bl	8000778 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000722:	4b14      	ldr	r3, [pc, #80]	; (8000774 <main+0x6c>)
 8000724:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000728:	4a12      	ldr	r2, [pc, #72]	; (8000774 <main+0x6c>)
 800072a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800072e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000732:	4b10      	ldr	r3, [pc, #64]	; (8000774 <main+0x6c>)
 8000734:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000738:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000740:	2000      	movs	r0, #0
 8000742:	f000 fdcb 	bl	80012dc <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000746:	2100      	movs	r1, #0
 8000748:	2000      	movs	r0, #0
 800074a:	f000 fde1 	bl	8001310 <HAL_HSEM_Release>
  /* USER CODE BEGIN SysInit */
extern uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len);
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800074e:	f000 f8db 	bl	8000908 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000752:	f000 f88d 	bl	8000870 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8000756:	f009 f97d 	bl	8009a54 <MX_USB_DEVICE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  CDC_Transmit_HS(buffer, sizeof(buffer));
 800075a:	f107 0308 	add.w	r3, r7, #8
 800075e:	210e      	movs	r1, #14
 8000760:	4618      	mov	r0, r3
 8000762:	f009 fa37 	bl	8009bd4 <CDC_Transmit_HS>
	  HAL_Delay(1000);
 8000766:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800076a:	f000 fac7 	bl	8000cfc <HAL_Delay>
	  CDC_Transmit_HS(buffer, sizeof(buffer));
 800076e:	e7f4      	b.n	800075a <main+0x52>
 8000770:	0800a6b4 	.word	0x0800a6b4
 8000774:	58024400 	.word	0x58024400

08000778 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b09c      	sub	sp, #112	; 0x70
 800077c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800077e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000782:	224c      	movs	r2, #76	; 0x4c
 8000784:	2100      	movs	r1, #0
 8000786:	4618      	mov	r0, r3
 8000788:	f009 ff80 	bl	800a68c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800078c:	1d3b      	adds	r3, r7, #4
 800078e:	2220      	movs	r2, #32
 8000790:	2100      	movs	r1, #0
 8000792:	4618      	mov	r0, r3
 8000794:	f009 ff7a 	bl	800a68c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000798:	2004      	movs	r0, #4
 800079a:	f002 f8a3 	bl	80028e4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800079e:	2300      	movs	r3, #0
 80007a0:	603b      	str	r3, [r7, #0]
 80007a2:	4b31      	ldr	r3, [pc, #196]	; (8000868 <SystemClock_Config+0xf0>)
 80007a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007a6:	4a30      	ldr	r2, [pc, #192]	; (8000868 <SystemClock_Config+0xf0>)
 80007a8:	f023 0301 	bic.w	r3, r3, #1
 80007ac:	62d3      	str	r3, [r2, #44]	; 0x2c
 80007ae:	4b2e      	ldr	r3, [pc, #184]	; (8000868 <SystemClock_Config+0xf0>)
 80007b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	603b      	str	r3, [r7, #0]
 80007b8:	4b2c      	ldr	r3, [pc, #176]	; (800086c <SystemClock_Config+0xf4>)
 80007ba:	699b      	ldr	r3, [r3, #24]
 80007bc:	4a2b      	ldr	r2, [pc, #172]	; (800086c <SystemClock_Config+0xf4>)
 80007be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007c2:	6193      	str	r3, [r2, #24]
 80007c4:	4b29      	ldr	r3, [pc, #164]	; (800086c <SystemClock_Config+0xf4>)
 80007c6:	699b      	ldr	r3, [r3, #24]
 80007c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007cc:	603b      	str	r3, [r7, #0]
 80007ce:	683b      	ldr	r3, [r7, #0]
  //while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80007d0:	2303      	movs	r3, #3
 80007d2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007d8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80007da:	2301      	movs	r3, #1
 80007dc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007de:	2340      	movs	r3, #64	; 0x40
 80007e0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007e2:	2302      	movs	r3, #2
 80007e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007e6:	2302      	movs	r3, #2
 80007e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 80007ea:	2305      	movs	r3, #5
 80007ec:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 48;
 80007ee:	2330      	movs	r3, #48	; 0x30
 80007f0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80007f2:	2302      	movs	r3, #2
 80007f4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80007f6:	2305      	movs	r3, #5
 80007f8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007fa:	2302      	movs	r3, #2
 80007fc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80007fe:	2308      	movs	r3, #8
 8000800:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000802:	2300      	movs	r3, #0
 8000804:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000806:	2300      	movs	r3, #0
 8000808:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800080a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800080e:	4618      	mov	r0, r3
 8000810:	f002 f8d2 	bl	80029b8 <HAL_RCC_OscConfig>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800081a:	f000 f8e5 	bl	80009e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800081e:	233f      	movs	r3, #63	; 0x3f
 8000820:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000822:	2300      	movs	r3, #0
 8000824:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000826:	2300      	movs	r3, #0
 8000828:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800082a:	2300      	movs	r3, #0
 800082c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800082e:	2300      	movs	r3, #0
 8000830:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000832:	2300      	movs	r3, #0
 8000834:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000836:	2300      	movs	r3, #0
 8000838:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800083a:	2300      	movs	r3, #0
 800083c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800083e:	1d3b      	adds	r3, r7, #4
 8000840:	2100      	movs	r1, #0
 8000842:	4618      	mov	r0, r3
 8000844:	f002 fce6 	bl	8003214 <HAL_RCC_ClockConfig>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <SystemClock_Config+0xda>
  {
    Error_Handler();
 800084e:	f000 f8cb 	bl	80009e8 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000852:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000856:	2100      	movs	r1, #0
 8000858:	2000      	movs	r0, #0
 800085a:	f002 fe91 	bl	8003580 <HAL_RCC_MCOConfig>
}
 800085e:	bf00      	nop
 8000860:	3770      	adds	r7, #112	; 0x70
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	58000400 	.word	0x58000400
 800086c:	58024800 	.word	0x58024800

08000870 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000874:	4b22      	ldr	r3, [pc, #136]	; (8000900 <MX_USART1_UART_Init+0x90>)
 8000876:	4a23      	ldr	r2, [pc, #140]	; (8000904 <MX_USART1_UART_Init+0x94>)
 8000878:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800087a:	4b21      	ldr	r3, [pc, #132]	; (8000900 <MX_USART1_UART_Init+0x90>)
 800087c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000880:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000882:	4b1f      	ldr	r3, [pc, #124]	; (8000900 <MX_USART1_UART_Init+0x90>)
 8000884:	2200      	movs	r2, #0
 8000886:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000888:	4b1d      	ldr	r3, [pc, #116]	; (8000900 <MX_USART1_UART_Init+0x90>)
 800088a:	2200      	movs	r2, #0
 800088c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800088e:	4b1c      	ldr	r3, [pc, #112]	; (8000900 <MX_USART1_UART_Init+0x90>)
 8000890:	2200      	movs	r2, #0
 8000892:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000894:	4b1a      	ldr	r3, [pc, #104]	; (8000900 <MX_USART1_UART_Init+0x90>)
 8000896:	220c      	movs	r2, #12
 8000898:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800089a:	4b19      	ldr	r3, [pc, #100]	; (8000900 <MX_USART1_UART_Init+0x90>)
 800089c:	2200      	movs	r2, #0
 800089e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008a0:	4b17      	ldr	r3, [pc, #92]	; (8000900 <MX_USART1_UART_Init+0x90>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008a6:	4b16      	ldr	r3, [pc, #88]	; (8000900 <MX_USART1_UART_Init+0x90>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008ac:	4b14      	ldr	r3, [pc, #80]	; (8000900 <MX_USART1_UART_Init+0x90>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008b2:	4b13      	ldr	r3, [pc, #76]	; (8000900 <MX_USART1_UART_Init+0x90>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008b8:	4811      	ldr	r0, [pc, #68]	; (8000900 <MX_USART1_UART_Init+0x90>)
 80008ba:	f004 fc31 	bl	8005120 <HAL_UART_Init>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80008c4:	f000 f890 	bl	80009e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008c8:	2100      	movs	r1, #0
 80008ca:	480d      	ldr	r0, [pc, #52]	; (8000900 <MX_USART1_UART_Init+0x90>)
 80008cc:	f005 fbce 	bl	800606c <HAL_UARTEx_SetTxFifoThreshold>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80008d6:	f000 f887 	bl	80009e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008da:	2100      	movs	r1, #0
 80008dc:	4808      	ldr	r0, [pc, #32]	; (8000900 <MX_USART1_UART_Init+0x90>)
 80008de:	f005 fc03 	bl	80060e8 <HAL_UARTEx_SetRxFifoThreshold>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80008e8:	f000 f87e 	bl	80009e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80008ec:	4804      	ldr	r0, [pc, #16]	; (8000900 <MX_USART1_UART_Init+0x90>)
 80008ee:	f005 fb84 	bl	8005ffa <HAL_UARTEx_DisableFifoMode>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80008f8:	f000 f876 	bl	80009e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008fc:	bf00      	nop
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	2400011c 	.word	0x2400011c
 8000904:	40011000 	.word	0x40011000

08000908 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b08a      	sub	sp, #40	; 0x28
 800090c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090e:	f107 0314 	add.w	r3, r7, #20
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	605a      	str	r2, [r3, #4]
 8000918:	609a      	str	r2, [r3, #8]
 800091a:	60da      	str	r2, [r3, #12]
 800091c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800091e:	4b30      	ldr	r3, [pc, #192]	; (80009e0 <MX_GPIO_Init+0xd8>)
 8000920:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000924:	4a2e      	ldr	r2, [pc, #184]	; (80009e0 <MX_GPIO_Init+0xd8>)
 8000926:	f043 0302 	orr.w	r3, r3, #2
 800092a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800092e:	4b2c      	ldr	r3, [pc, #176]	; (80009e0 <MX_GPIO_Init+0xd8>)
 8000930:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000934:	f003 0302 	and.w	r3, r3, #2
 8000938:	613b      	str	r3, [r7, #16]
 800093a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800093c:	4b28      	ldr	r3, [pc, #160]	; (80009e0 <MX_GPIO_Init+0xd8>)
 800093e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000942:	4a27      	ldr	r2, [pc, #156]	; (80009e0 <MX_GPIO_Init+0xd8>)
 8000944:	f043 0304 	orr.w	r3, r3, #4
 8000948:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800094c:	4b24      	ldr	r3, [pc, #144]	; (80009e0 <MX_GPIO_Init+0xd8>)
 800094e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000952:	f003 0304 	and.w	r3, r3, #4
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800095a:	4b21      	ldr	r3, [pc, #132]	; (80009e0 <MX_GPIO_Init+0xd8>)
 800095c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000960:	4a1f      	ldr	r2, [pc, #124]	; (80009e0 <MX_GPIO_Init+0xd8>)
 8000962:	f043 0301 	orr.w	r3, r3, #1
 8000966:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800096a:	4b1d      	ldr	r3, [pc, #116]	; (80009e0 <MX_GPIO_Init+0xd8>)
 800096c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000970:	f003 0301 	and.w	r3, r3, #1
 8000974:	60bb      	str	r3, [r7, #8]
 8000976:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000978:	4b19      	ldr	r3, [pc, #100]	; (80009e0 <MX_GPIO_Init+0xd8>)
 800097a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800097e:	4a18      	ldr	r2, [pc, #96]	; (80009e0 <MX_GPIO_Init+0xd8>)
 8000980:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000984:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000988:	4b15      	ldr	r3, [pc, #84]	; (80009e0 <MX_GPIO_Init+0xd8>)
 800098a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800098e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000992:	607b      	str	r3, [r7, #4]
 8000994:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000996:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <MX_GPIO_Init+0xd8>)
 8000998:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800099c:	4a10      	ldr	r2, [pc, #64]	; (80009e0 <MX_GPIO_Init+0xd8>)
 800099e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009a6:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <MX_GPIO_Init+0xd8>)
 80009a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009b0:	603b      	str	r3, [r7, #0]
 80009b2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : CEC_CK_MCO1_Pin */
  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 80009b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ba:	2302      	movs	r3, #2
 80009bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c2:	2300      	movs	r3, #0
 80009c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80009c6:	2300      	movs	r3, #0
 80009c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 80009ca:	f107 0314 	add.w	r3, r7, #20
 80009ce:	4619      	mov	r1, r3
 80009d0:	4804      	ldr	r0, [pc, #16]	; (80009e4 <MX_GPIO_Init+0xdc>)
 80009d2:	f000 fad3 	bl	8000f7c <HAL_GPIO_Init>

}
 80009d6:	bf00      	nop
 80009d8:	3728      	adds	r7, #40	; 0x28
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	58024400 	.word	0x58024400
 80009e4:	58020000 	.word	0x58020000

080009e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009ec:	b672      	cpsid	i
}
 80009ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009f0:	e7fe      	b.n	80009f0 <Error_Handler+0x8>
	...

080009f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009fa:	4b0a      	ldr	r3, [pc, #40]	; (8000a24 <HAL_MspInit+0x30>)
 80009fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a00:	4a08      	ldr	r2, [pc, #32]	; (8000a24 <HAL_MspInit+0x30>)
 8000a02:	f043 0302 	orr.w	r3, r3, #2
 8000a06:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000a0a:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <HAL_MspInit+0x30>)
 8000a0c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a10:	f003 0302 	and.w	r3, r3, #2
 8000a14:	607b      	str	r3, [r7, #4]
 8000a16:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a18:	bf00      	nop
 8000a1a:	370c      	adds	r7, #12
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr
 8000a24:	58024400 	.word	0x58024400

08000a28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b0ba      	sub	sp, #232	; 0xe8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a30:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
 8000a38:	605a      	str	r2, [r3, #4]
 8000a3a:	609a      	str	r2, [r3, #8]
 8000a3c:	60da      	str	r2, [r3, #12]
 8000a3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a40:	f107 0314 	add.w	r3, r7, #20
 8000a44:	22c0      	movs	r2, #192	; 0xc0
 8000a46:	2100      	movs	r1, #0
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f009 fe1f 	bl	800a68c <memset>
  if(huart->Instance==USART1)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4a25      	ldr	r2, [pc, #148]	; (8000ae8 <HAL_UART_MspInit+0xc0>)
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d142      	bne.n	8000ade <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a62:	f107 0314 	add.w	r3, r7, #20
 8000a66:	4618      	mov	r0, r3
 8000a68:	f002 ffca 	bl	8003a00 <HAL_RCCEx_PeriphCLKConfig>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000a72:	f7ff ffb9 	bl	80009e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a76:	4b1d      	ldr	r3, [pc, #116]	; (8000aec <HAL_UART_MspInit+0xc4>)
 8000a78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000a7c:	4a1b      	ldr	r2, [pc, #108]	; (8000aec <HAL_UART_MspInit+0xc4>)
 8000a7e:	f043 0310 	orr.w	r3, r3, #16
 8000a82:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000a86:	4b19      	ldr	r3, [pc, #100]	; (8000aec <HAL_UART_MspInit+0xc4>)
 8000a88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000a8c:	f003 0310 	and.w	r3, r3, #16
 8000a90:	613b      	str	r3, [r7, #16]
 8000a92:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a94:	4b15      	ldr	r3, [pc, #84]	; (8000aec <HAL_UART_MspInit+0xc4>)
 8000a96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a9a:	4a14      	ldr	r2, [pc, #80]	; (8000aec <HAL_UART_MspInit+0xc4>)
 8000a9c:	f043 0301 	orr.w	r3, r3, #1
 8000aa0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aa4:	4b11      	ldr	r3, [pc, #68]	; (8000aec <HAL_UART_MspInit+0xc4>)
 8000aa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aaa:	f003 0301 	and.w	r3, r3, #1
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8000ab2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000ab6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aba:	2302      	movs	r3, #2
 8000abc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000acc:	2307      	movs	r3, #7
 8000ace:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4805      	ldr	r0, [pc, #20]	; (8000af0 <HAL_UART_MspInit+0xc8>)
 8000ada:	f000 fa4f 	bl	8000f7c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000ade:	bf00      	nop
 8000ae0:	37e8      	adds	r7, #232	; 0xe8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40011000 	.word	0x40011000
 8000aec:	58024400 	.word	0x58024400
 8000af0:	58020000 	.word	0x58020000

08000af4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000af8:	e7fe      	b.n	8000af8 <NMI_Handler+0x4>

08000afa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000afa:	b480      	push	{r7}
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000afe:	e7fe      	b.n	8000afe <HardFault_Handler+0x4>

08000b00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <MemManage_Handler+0x4>

08000b06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b0a:	e7fe      	b.n	8000b0a <BusFault_Handler+0x4>

08000b0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b10:	e7fe      	b.n	8000b10 <UsageFault_Handler+0x4>

08000b12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b12:	b480      	push	{r7}
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b16:	bf00      	nop
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr

08000b20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b24:	bf00      	nop
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr

08000b2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr

08000b3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b40:	f000 f8bc 	bl	8000cbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b44:	bf00      	nop
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <OTG_HS_EP1_OUT_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS End Point 1 Out global interrupt.
  */
void OTG_HS_EP1_OUT_IRQHandler(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_EP1_OUT_IRQn 0 */

  /* USER CODE END OTG_HS_EP1_OUT_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8000b4c:	4802      	ldr	r0, [pc, #8]	; (8000b58 <OTG_HS_EP1_OUT_IRQHandler+0x10>)
 8000b4e:	f000 fd4a 	bl	80015e6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_EP1_OUT_IRQn 1 */

  /* USER CODE END OTG_HS_EP1_OUT_IRQn 1 */
}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	24001690 	.word	0x24001690

08000b5c <OTG_HS_EP1_IN_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS End Point 1 In global interrupt.
  */
void OTG_HS_EP1_IN_IRQHandler(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_EP1_IN_IRQn 0 */

  /* USER CODE END OTG_HS_EP1_IN_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8000b60:	4802      	ldr	r0, [pc, #8]	; (8000b6c <OTG_HS_EP1_IN_IRQHandler+0x10>)
 8000b62:	f000 fd40 	bl	80015e6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_EP1_IN_IRQn 1 */

  /* USER CODE END OTG_HS_EP1_IN_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	24001690 	.word	0x24001690

08000b70 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8000b74:	4802      	ldr	r0, [pc, #8]	; (8000b80 <OTG_HS_IRQHandler+0x10>)
 8000b76:	f000 fd36 	bl	80015e6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	24001690 	.word	0x24001690

08000b84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000b84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bbc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b88:	f7ff fd28 	bl	80005dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b8c:	480c      	ldr	r0, [pc, #48]	; (8000bc0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b8e:	490d      	ldr	r1, [pc, #52]	; (8000bc4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b90:	4a0d      	ldr	r2, [pc, #52]	; (8000bc8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b94:	e002      	b.n	8000b9c <LoopCopyDataInit>

08000b96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b9a:	3304      	adds	r3, #4

08000b9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba0:	d3f9      	bcc.n	8000b96 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ba2:	4a0a      	ldr	r2, [pc, #40]	; (8000bcc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ba4:	4c0a      	ldr	r4, [pc, #40]	; (8000bd0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ba6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ba8:	e001      	b.n	8000bae <LoopFillZerobss>

08000baa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000baa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bac:	3204      	adds	r2, #4

08000bae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb0:	d3fb      	bcc.n	8000baa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bb2:	f009 fd47 	bl	800a644 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bb6:	f7ff fda7 	bl	8000708 <main>
  bx  lr
 8000bba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bbc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000bc0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000bc4:	24000100 	.word	0x24000100
  ldr r2, =_sidata
 8000bc8:	0800a754 	.word	0x0800a754
  ldr r2, =_sbss
 8000bcc:	24000100 	.word	0x24000100
  ldr r4, =_ebss
 8000bd0:	24001dbc 	.word	0x24001dbc

08000bd4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bd4:	e7fe      	b.n	8000bd4 <ADC3_IRQHandler>
	...

08000bd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bde:	2003      	movs	r0, #3
 8000be0:	f000 f98c 	bl	8000efc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000be4:	f002 fd36 	bl	8003654 <HAL_RCC_GetSysClockFreq>
 8000be8:	4602      	mov	r2, r0
 8000bea:	4b15      	ldr	r3, [pc, #84]	; (8000c40 <HAL_Init+0x68>)
 8000bec:	699b      	ldr	r3, [r3, #24]
 8000bee:	0a1b      	lsrs	r3, r3, #8
 8000bf0:	f003 030f 	and.w	r3, r3, #15
 8000bf4:	4913      	ldr	r1, [pc, #76]	; (8000c44 <HAL_Init+0x6c>)
 8000bf6:	5ccb      	ldrb	r3, [r1, r3]
 8000bf8:	f003 031f 	and.w	r3, r3, #31
 8000bfc:	fa22 f303 	lsr.w	r3, r2, r3
 8000c00:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000c02:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <HAL_Init+0x68>)
 8000c04:	699b      	ldr	r3, [r3, #24]
 8000c06:	f003 030f 	and.w	r3, r3, #15
 8000c0a:	4a0e      	ldr	r2, [pc, #56]	; (8000c44 <HAL_Init+0x6c>)
 8000c0c:	5cd3      	ldrb	r3, [r2, r3]
 8000c0e:	f003 031f 	and.w	r3, r3, #31
 8000c12:	687a      	ldr	r2, [r7, #4]
 8000c14:	fa22 f303 	lsr.w	r3, r2, r3
 8000c18:	4a0b      	ldr	r2, [pc, #44]	; (8000c48 <HAL_Init+0x70>)
 8000c1a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000c1c:	4a0b      	ldr	r2, [pc, #44]	; (8000c4c <HAL_Init+0x74>)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c22:	2000      	movs	r0, #0
 8000c24:	f000 f814 	bl	8000c50 <HAL_InitTick>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	e002      	b.n	8000c38 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000c32:	f7ff fedf 	bl	80009f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c36:	2300      	movs	r3, #0
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	58024400 	.word	0x58024400
 8000c44:	0800a70c 	.word	0x0800a70c
 8000c48:	24000004 	.word	0x24000004
 8000c4c:	24000000 	.word	0x24000000

08000c50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000c58:	4b15      	ldr	r3, [pc, #84]	; (8000cb0 <HAL_InitTick+0x60>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d101      	bne.n	8000c64 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000c60:	2301      	movs	r3, #1
 8000c62:	e021      	b.n	8000ca8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000c64:	4b13      	ldr	r3, [pc, #76]	; (8000cb4 <HAL_InitTick+0x64>)
 8000c66:	681a      	ldr	r2, [r3, #0]
 8000c68:	4b11      	ldr	r3, [pc, #68]	; (8000cb0 <HAL_InitTick+0x60>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c72:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f000 f971 	bl	8000f62 <HAL_SYSTICK_Config>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000c86:	2301      	movs	r3, #1
 8000c88:	e00e      	b.n	8000ca8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2b0f      	cmp	r3, #15
 8000c8e:	d80a      	bhi.n	8000ca6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c90:	2200      	movs	r2, #0
 8000c92:	6879      	ldr	r1, [r7, #4]
 8000c94:	f04f 30ff 	mov.w	r0, #4294967295
 8000c98:	f000 f93b 	bl	8000f12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c9c:	4a06      	ldr	r2, [pc, #24]	; (8000cb8 <HAL_InitTick+0x68>)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	e000      	b.n	8000ca8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000ca6:	2301      	movs	r3, #1
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3708      	adds	r7, #8
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	2400000c 	.word	0x2400000c
 8000cb4:	24000000 	.word	0x24000000
 8000cb8:	24000008 	.word	0x24000008

08000cbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cc0:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <HAL_IncTick+0x20>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <HAL_IncTick+0x24>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4413      	add	r3, r2
 8000ccc:	4a04      	ldr	r2, [pc, #16]	; (8000ce0 <HAL_IncTick+0x24>)
 8000cce:	6013      	str	r3, [r2, #0]
}
 8000cd0:	bf00      	nop
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	2400000c 	.word	0x2400000c
 8000ce0:	240001ac 	.word	0x240001ac

08000ce4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ce8:	4b03      	ldr	r3, [pc, #12]	; (8000cf8 <HAL_GetTick+0x14>)
 8000cea:	681b      	ldr	r3, [r3, #0]
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	240001ac 	.word	0x240001ac

08000cfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d04:	f7ff ffee 	bl	8000ce4 <HAL_GetTick>
 8000d08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d14:	d005      	beq.n	8000d22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d16:	4b0a      	ldr	r3, [pc, #40]	; (8000d40 <HAL_Delay+0x44>)
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	4413      	add	r3, r2
 8000d20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d22:	bf00      	nop
 8000d24:	f7ff ffde 	bl	8000ce4 <HAL_GetTick>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	68bb      	ldr	r3, [r7, #8]
 8000d2c:	1ad3      	subs	r3, r2, r3
 8000d2e:	68fa      	ldr	r2, [r7, #12]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d8f7      	bhi.n	8000d24 <HAL_Delay+0x28>
  {
  }
}
 8000d34:	bf00      	nop
 8000d36:	bf00      	nop
 8000d38:	3710      	adds	r7, #16
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	2400000c 	.word	0x2400000c

08000d44 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000d48:	4b03      	ldr	r3, [pc, #12]	; (8000d58 <HAL_GetREVID+0x14>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	0c1b      	lsrs	r3, r3, #16
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr
 8000d58:	5c001000 	.word	0x5c001000

08000d5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b085      	sub	sp, #20
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	f003 0307 	and.w	r3, r3, #7
 8000d6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d6c:	4b0b      	ldr	r3, [pc, #44]	; (8000d9c <__NVIC_SetPriorityGrouping+0x40>)
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d72:	68ba      	ldr	r2, [r7, #8]
 8000d74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d78:	4013      	ands	r3, r2
 8000d7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d84:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d86:	4313      	orrs	r3, r2
 8000d88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d8a:	4a04      	ldr	r2, [pc, #16]	; (8000d9c <__NVIC_SetPriorityGrouping+0x40>)
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	60d3      	str	r3, [r2, #12]
}
 8000d90:	bf00      	nop
 8000d92:	3714      	adds	r7, #20
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr
 8000d9c:	e000ed00 	.word	0xe000ed00
 8000da0:	05fa0000 	.word	0x05fa0000

08000da4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000da8:	4b04      	ldr	r3, [pc, #16]	; (8000dbc <__NVIC_GetPriorityGrouping+0x18>)
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	0a1b      	lsrs	r3, r3, #8
 8000dae:	f003 0307 	and.w	r3, r3, #7
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000dca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	db0b      	blt.n	8000dea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dd2:	88fb      	ldrh	r3, [r7, #6]
 8000dd4:	f003 021f 	and.w	r2, r3, #31
 8000dd8:	4907      	ldr	r1, [pc, #28]	; (8000df8 <__NVIC_EnableIRQ+0x38>)
 8000dda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000dde:	095b      	lsrs	r3, r3, #5
 8000de0:	2001      	movs	r0, #1
 8000de2:	fa00 f202 	lsl.w	r2, r0, r2
 8000de6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dea:	bf00      	nop
 8000dec:	370c      	adds	r7, #12
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	e000e100 	.word	0xe000e100

08000dfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4603      	mov	r3, r0
 8000e04:	6039      	str	r1, [r7, #0]
 8000e06:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000e08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	db0a      	blt.n	8000e26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	b2da      	uxtb	r2, r3
 8000e14:	490c      	ldr	r1, [pc, #48]	; (8000e48 <__NVIC_SetPriority+0x4c>)
 8000e16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e1a:	0112      	lsls	r2, r2, #4
 8000e1c:	b2d2      	uxtb	r2, r2
 8000e1e:	440b      	add	r3, r1
 8000e20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e24:	e00a      	b.n	8000e3c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	b2da      	uxtb	r2, r3
 8000e2a:	4908      	ldr	r1, [pc, #32]	; (8000e4c <__NVIC_SetPriority+0x50>)
 8000e2c:	88fb      	ldrh	r3, [r7, #6]
 8000e2e:	f003 030f 	and.w	r3, r3, #15
 8000e32:	3b04      	subs	r3, #4
 8000e34:	0112      	lsls	r2, r2, #4
 8000e36:	b2d2      	uxtb	r2, r2
 8000e38:	440b      	add	r3, r1
 8000e3a:	761a      	strb	r2, [r3, #24]
}
 8000e3c:	bf00      	nop
 8000e3e:	370c      	adds	r7, #12
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	e000e100 	.word	0xe000e100
 8000e4c:	e000ed00 	.word	0xe000ed00

08000e50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b089      	sub	sp, #36	; 0x24
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	60f8      	str	r0, [r7, #12]
 8000e58:	60b9      	str	r1, [r7, #8]
 8000e5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	f003 0307 	and.w	r3, r3, #7
 8000e62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	f1c3 0307 	rsb	r3, r3, #7
 8000e6a:	2b04      	cmp	r3, #4
 8000e6c:	bf28      	it	cs
 8000e6e:	2304      	movcs	r3, #4
 8000e70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	3304      	adds	r3, #4
 8000e76:	2b06      	cmp	r3, #6
 8000e78:	d902      	bls.n	8000e80 <NVIC_EncodePriority+0x30>
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	3b03      	subs	r3, #3
 8000e7e:	e000      	b.n	8000e82 <NVIC_EncodePriority+0x32>
 8000e80:	2300      	movs	r3, #0
 8000e82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e84:	f04f 32ff 	mov.w	r2, #4294967295
 8000e88:	69bb      	ldr	r3, [r7, #24]
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	43da      	mvns	r2, r3
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	401a      	ands	r2, r3
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e98:	f04f 31ff 	mov.w	r1, #4294967295
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea2:	43d9      	mvns	r1, r3
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea8:	4313      	orrs	r3, r2
         );
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3724      	adds	r7, #36	; 0x24
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
	...

08000eb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	3b01      	subs	r3, #1
 8000ec4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ec8:	d301      	bcc.n	8000ece <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e00f      	b.n	8000eee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ece:	4a0a      	ldr	r2, [pc, #40]	; (8000ef8 <SysTick_Config+0x40>)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	3b01      	subs	r3, #1
 8000ed4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ed6:	210f      	movs	r1, #15
 8000ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8000edc:	f7ff ff8e 	bl	8000dfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ee0:	4b05      	ldr	r3, [pc, #20]	; (8000ef8 <SysTick_Config+0x40>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ee6:	4b04      	ldr	r3, [pc, #16]	; (8000ef8 <SysTick_Config+0x40>)
 8000ee8:	2207      	movs	r2, #7
 8000eea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eec:	2300      	movs	r3, #0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	e000e010 	.word	0xe000e010

08000efc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f7ff ff29 	bl	8000d5c <__NVIC_SetPriorityGrouping>
}
 8000f0a:	bf00      	nop
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b086      	sub	sp, #24
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	4603      	mov	r3, r0
 8000f1a:	60b9      	str	r1, [r7, #8]
 8000f1c:	607a      	str	r2, [r7, #4]
 8000f1e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f20:	f7ff ff40 	bl	8000da4 <__NVIC_GetPriorityGrouping>
 8000f24:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f26:	687a      	ldr	r2, [r7, #4]
 8000f28:	68b9      	ldr	r1, [r7, #8]
 8000f2a:	6978      	ldr	r0, [r7, #20]
 8000f2c:	f7ff ff90 	bl	8000e50 <NVIC_EncodePriority>
 8000f30:	4602      	mov	r2, r0
 8000f32:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f36:	4611      	mov	r1, r2
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff ff5f 	bl	8000dfc <__NVIC_SetPriority>
}
 8000f3e:	bf00      	nop
 8000f40:	3718      	adds	r7, #24
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}

08000f46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b082      	sub	sp, #8
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff ff33 	bl	8000dc0 <__NVIC_EnableIRQ>
}
 8000f5a:	bf00      	nop
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b082      	sub	sp, #8
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f7ff ffa4 	bl	8000eb8 <SysTick_Config>
 8000f70:	4603      	mov	r3, r0
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
	...

08000f7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b089      	sub	sp, #36	; 0x24
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000f86:	2300      	movs	r3, #0
 8000f88:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000f8a:	4b89      	ldr	r3, [pc, #548]	; (80011b0 <HAL_GPIO_Init+0x234>)
 8000f8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000f8e:	e194      	b.n	80012ba <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	2101      	movs	r1, #1
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	fa01 f303 	lsl.w	r3, r1, r3
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	f000 8186 	beq.w	80012b4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f003 0303 	and.w	r3, r3, #3
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d005      	beq.n	8000fc0 <HAL_GPIO_Init+0x44>
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f003 0303 	and.w	r3, r3, #3
 8000fbc:	2b02      	cmp	r3, #2
 8000fbe:	d130      	bne.n	8001022 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	689b      	ldr	r3, [r3, #8]
 8000fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	2203      	movs	r2, #3
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	68da      	ldr	r2, [r3, #12]
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	43db      	mvns	r3, r3
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	4013      	ands	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	091b      	lsrs	r3, r3, #4
 800100c:	f003 0201 	and.w	r2, r3, #1
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	fa02 f303 	lsl.w	r3, r2, r3
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	4313      	orrs	r3, r2
 800101a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	f003 0303 	and.w	r3, r3, #3
 800102a:	2b03      	cmp	r3, #3
 800102c:	d017      	beq.n	800105e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	68db      	ldr	r3, [r3, #12]
 8001032:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	2203      	movs	r2, #3
 800103a:	fa02 f303 	lsl.w	r3, r2, r3
 800103e:	43db      	mvns	r3, r3
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	4013      	ands	r3, r2
 8001044:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	689a      	ldr	r2, [r3, #8]
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	fa02 f303 	lsl.w	r3, r2, r3
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	4313      	orrs	r3, r2
 8001056:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	f003 0303 	and.w	r3, r3, #3
 8001066:	2b02      	cmp	r3, #2
 8001068:	d123      	bne.n	80010b2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	08da      	lsrs	r2, r3, #3
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	3208      	adds	r2, #8
 8001072:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001076:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	f003 0307 	and.w	r3, r3, #7
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	220f      	movs	r2, #15
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	43db      	mvns	r3, r3
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	4013      	ands	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	691a      	ldr	r2, [r3, #16]
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	f003 0307 	and.w	r3, r3, #7
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	08da      	lsrs	r2, r3, #3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	3208      	adds	r2, #8
 80010ac:	69b9      	ldr	r1, [r7, #24]
 80010ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	2203      	movs	r2, #3
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	43db      	mvns	r3, r3
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	4013      	ands	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f003 0203 	and.w	r2, r3, #3
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	4313      	orrs	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	f000 80e0 	beq.w	80012b4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010f4:	4b2f      	ldr	r3, [pc, #188]	; (80011b4 <HAL_GPIO_Init+0x238>)
 80010f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80010fa:	4a2e      	ldr	r2, [pc, #184]	; (80011b4 <HAL_GPIO_Init+0x238>)
 80010fc:	f043 0302 	orr.w	r3, r3, #2
 8001100:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001104:	4b2b      	ldr	r3, [pc, #172]	; (80011b4 <HAL_GPIO_Init+0x238>)
 8001106:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800110a:	f003 0302 	and.w	r3, r3, #2
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001112:	4a29      	ldr	r2, [pc, #164]	; (80011b8 <HAL_GPIO_Init+0x23c>)
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	089b      	lsrs	r3, r3, #2
 8001118:	3302      	adds	r3, #2
 800111a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800111e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	f003 0303 	and.w	r3, r3, #3
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	220f      	movs	r2, #15
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	43db      	mvns	r3, r3
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	4013      	ands	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a20      	ldr	r2, [pc, #128]	; (80011bc <HAL_GPIO_Init+0x240>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d052      	beq.n	80011e4 <HAL_GPIO_Init+0x268>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a1f      	ldr	r2, [pc, #124]	; (80011c0 <HAL_GPIO_Init+0x244>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d031      	beq.n	80011aa <HAL_GPIO_Init+0x22e>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a1e      	ldr	r2, [pc, #120]	; (80011c4 <HAL_GPIO_Init+0x248>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d02b      	beq.n	80011a6 <HAL_GPIO_Init+0x22a>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a1d      	ldr	r2, [pc, #116]	; (80011c8 <HAL_GPIO_Init+0x24c>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d025      	beq.n	80011a2 <HAL_GPIO_Init+0x226>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a1c      	ldr	r2, [pc, #112]	; (80011cc <HAL_GPIO_Init+0x250>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d01f      	beq.n	800119e <HAL_GPIO_Init+0x222>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a1b      	ldr	r2, [pc, #108]	; (80011d0 <HAL_GPIO_Init+0x254>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d019      	beq.n	800119a <HAL_GPIO_Init+0x21e>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a1a      	ldr	r2, [pc, #104]	; (80011d4 <HAL_GPIO_Init+0x258>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d013      	beq.n	8001196 <HAL_GPIO_Init+0x21a>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4a19      	ldr	r2, [pc, #100]	; (80011d8 <HAL_GPIO_Init+0x25c>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d00d      	beq.n	8001192 <HAL_GPIO_Init+0x216>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a18      	ldr	r2, [pc, #96]	; (80011dc <HAL_GPIO_Init+0x260>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d007      	beq.n	800118e <HAL_GPIO_Init+0x212>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a17      	ldr	r2, [pc, #92]	; (80011e0 <HAL_GPIO_Init+0x264>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d101      	bne.n	800118a <HAL_GPIO_Init+0x20e>
 8001186:	2309      	movs	r3, #9
 8001188:	e02d      	b.n	80011e6 <HAL_GPIO_Init+0x26a>
 800118a:	230a      	movs	r3, #10
 800118c:	e02b      	b.n	80011e6 <HAL_GPIO_Init+0x26a>
 800118e:	2308      	movs	r3, #8
 8001190:	e029      	b.n	80011e6 <HAL_GPIO_Init+0x26a>
 8001192:	2307      	movs	r3, #7
 8001194:	e027      	b.n	80011e6 <HAL_GPIO_Init+0x26a>
 8001196:	2306      	movs	r3, #6
 8001198:	e025      	b.n	80011e6 <HAL_GPIO_Init+0x26a>
 800119a:	2305      	movs	r3, #5
 800119c:	e023      	b.n	80011e6 <HAL_GPIO_Init+0x26a>
 800119e:	2304      	movs	r3, #4
 80011a0:	e021      	b.n	80011e6 <HAL_GPIO_Init+0x26a>
 80011a2:	2303      	movs	r3, #3
 80011a4:	e01f      	b.n	80011e6 <HAL_GPIO_Init+0x26a>
 80011a6:	2302      	movs	r3, #2
 80011a8:	e01d      	b.n	80011e6 <HAL_GPIO_Init+0x26a>
 80011aa:	2301      	movs	r3, #1
 80011ac:	e01b      	b.n	80011e6 <HAL_GPIO_Init+0x26a>
 80011ae:	bf00      	nop
 80011b0:	58000080 	.word	0x58000080
 80011b4:	58024400 	.word	0x58024400
 80011b8:	58000400 	.word	0x58000400
 80011bc:	58020000 	.word	0x58020000
 80011c0:	58020400 	.word	0x58020400
 80011c4:	58020800 	.word	0x58020800
 80011c8:	58020c00 	.word	0x58020c00
 80011cc:	58021000 	.word	0x58021000
 80011d0:	58021400 	.word	0x58021400
 80011d4:	58021800 	.word	0x58021800
 80011d8:	58021c00 	.word	0x58021c00
 80011dc:	58022000 	.word	0x58022000
 80011e0:	58022400 	.word	0x58022400
 80011e4:	2300      	movs	r3, #0
 80011e6:	69fa      	ldr	r2, [r7, #28]
 80011e8:	f002 0203 	and.w	r2, r2, #3
 80011ec:	0092      	lsls	r2, r2, #2
 80011ee:	4093      	lsls	r3, r2
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011f6:	4938      	ldr	r1, [pc, #224]	; (80012d8 <HAL_GPIO_Init+0x35c>)
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	089b      	lsrs	r3, r3, #2
 80011fc:	3302      	adds	r3, #2
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001204:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	43db      	mvns	r3, r3
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	4013      	ands	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800121e:	2b00      	cmp	r3, #0
 8001220:	d003      	beq.n	800122a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	4313      	orrs	r3, r2
 8001228:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800122a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800122e:	69bb      	ldr	r3, [r7, #24]
 8001230:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001232:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	43db      	mvns	r3, r3
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	4013      	ands	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800124c:	2b00      	cmp	r3, #0
 800124e:	d003      	beq.n	8001258 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	4313      	orrs	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001258:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800125c:	69bb      	ldr	r3, [r7, #24]
 800125e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	43db      	mvns	r3, r3
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	4013      	ands	r3, r2
 800126e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001278:	2b00      	cmp	r3, #0
 800127a:	d003      	beq.n	8001284 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	4313      	orrs	r3, r2
 8001282:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	43db      	mvns	r3, r3
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	4013      	ands	r3, r2
 8001298:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d003      	beq.n	80012ae <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	3301      	adds	r3, #1
 80012b8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	fa22 f303 	lsr.w	r3, r2, r3
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	f47f ae63 	bne.w	8000f90 <HAL_GPIO_Init+0x14>
  }
}
 80012ca:	bf00      	nop
 80012cc:	bf00      	nop
 80012ce:	3724      	adds	r7, #36	; 0x24
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr
 80012d8:	58000400 	.word	0x58000400

080012dc <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80012e4:	4a08      	ldr	r2, [pc, #32]	; (8001308 <HAL_HSEM_FastTake+0x2c>)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	3320      	adds	r3, #32
 80012ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ee:	4a07      	ldr	r2, [pc, #28]	; (800130c <HAL_HSEM_FastTake+0x30>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d101      	bne.n	80012f8 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80012f4:	2300      	movs	r3, #0
 80012f6:	e000      	b.n	80012fa <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80012f8:	2301      	movs	r3, #1
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	370c      	adds	r7, #12
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	58026400 	.word	0x58026400
 800130c:	80000300 	.word	0x80000300

08001310 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800131a:	4906      	ldr	r1, [pc, #24]	; (8001334 <HAL_HSEM_Release+0x24>)
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001328:	bf00      	nop
 800132a:	370c      	adds	r7, #12
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr
 8001334:	58026400 	.word	0x58026400

08001338 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001338:	b5f0      	push	{r4, r5, r6, r7, lr}
 800133a:	b08f      	sub	sp, #60	; 0x3c
 800133c:	af0a      	add	r7, sp, #40	; 0x28
 800133e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d101      	bne.n	800134a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e116      	b.n	8001578 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001356:	b2db      	uxtb	r3, r3
 8001358:	2b00      	cmp	r3, #0
 800135a:	d106      	bne.n	800136a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2200      	movs	r2, #0
 8001360:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f008 fd7d 	bl	8009e64 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2203      	movs	r2, #3
 800136e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800137a:	2b00      	cmp	r3, #0
 800137c:	d102      	bne.n	8001384 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2200      	movs	r2, #0
 8001382:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4618      	mov	r0, r3
 800138a:	f005 f85a 	bl	8006442 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	603b      	str	r3, [r7, #0]
 8001394:	687e      	ldr	r6, [r7, #4]
 8001396:	466d      	mov	r5, sp
 8001398:	f106 0410 	add.w	r4, r6, #16
 800139c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800139e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013a4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80013a8:	e885 0003 	stmia.w	r5, {r0, r1}
 80013ac:	1d33      	adds	r3, r6, #4
 80013ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013b0:	6838      	ldr	r0, [r7, #0]
 80013b2:	f004 ff25 	bl	8006200 <USB_CoreInit>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d005      	beq.n	80013c8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2202      	movs	r2, #2
 80013c0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	e0d7      	b.n	8001578 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2100      	movs	r1, #0
 80013ce:	4618      	mov	r0, r3
 80013d0:	f005 f848 	bl	8006464 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013d4:	2300      	movs	r3, #0
 80013d6:	73fb      	strb	r3, [r7, #15]
 80013d8:	e04a      	b.n	8001470 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80013da:	7bfa      	ldrb	r2, [r7, #15]
 80013dc:	6879      	ldr	r1, [r7, #4]
 80013de:	4613      	mov	r3, r2
 80013e0:	00db      	lsls	r3, r3, #3
 80013e2:	4413      	add	r3, r2
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	440b      	add	r3, r1
 80013e8:	333d      	adds	r3, #61	; 0x3d
 80013ea:	2201      	movs	r2, #1
 80013ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80013ee:	7bfa      	ldrb	r2, [r7, #15]
 80013f0:	6879      	ldr	r1, [r7, #4]
 80013f2:	4613      	mov	r3, r2
 80013f4:	00db      	lsls	r3, r3, #3
 80013f6:	4413      	add	r3, r2
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	440b      	add	r3, r1
 80013fc:	333c      	adds	r3, #60	; 0x3c
 80013fe:	7bfa      	ldrb	r2, [r7, #15]
 8001400:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001402:	7bfa      	ldrb	r2, [r7, #15]
 8001404:	7bfb      	ldrb	r3, [r7, #15]
 8001406:	b298      	uxth	r0, r3
 8001408:	6879      	ldr	r1, [r7, #4]
 800140a:	4613      	mov	r3, r2
 800140c:	00db      	lsls	r3, r3, #3
 800140e:	4413      	add	r3, r2
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	440b      	add	r3, r1
 8001414:	3344      	adds	r3, #68	; 0x44
 8001416:	4602      	mov	r2, r0
 8001418:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800141a:	7bfa      	ldrb	r2, [r7, #15]
 800141c:	6879      	ldr	r1, [r7, #4]
 800141e:	4613      	mov	r3, r2
 8001420:	00db      	lsls	r3, r3, #3
 8001422:	4413      	add	r3, r2
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	440b      	add	r3, r1
 8001428:	3340      	adds	r3, #64	; 0x40
 800142a:	2200      	movs	r2, #0
 800142c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800142e:	7bfa      	ldrb	r2, [r7, #15]
 8001430:	6879      	ldr	r1, [r7, #4]
 8001432:	4613      	mov	r3, r2
 8001434:	00db      	lsls	r3, r3, #3
 8001436:	4413      	add	r3, r2
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	440b      	add	r3, r1
 800143c:	3348      	adds	r3, #72	; 0x48
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001442:	7bfa      	ldrb	r2, [r7, #15]
 8001444:	6879      	ldr	r1, [r7, #4]
 8001446:	4613      	mov	r3, r2
 8001448:	00db      	lsls	r3, r3, #3
 800144a:	4413      	add	r3, r2
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	440b      	add	r3, r1
 8001450:	334c      	adds	r3, #76	; 0x4c
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001456:	7bfa      	ldrb	r2, [r7, #15]
 8001458:	6879      	ldr	r1, [r7, #4]
 800145a:	4613      	mov	r3, r2
 800145c:	00db      	lsls	r3, r3, #3
 800145e:	4413      	add	r3, r2
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	440b      	add	r3, r1
 8001464:	3354      	adds	r3, #84	; 0x54
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800146a:	7bfb      	ldrb	r3, [r7, #15]
 800146c:	3301      	adds	r3, #1
 800146e:	73fb      	strb	r3, [r7, #15]
 8001470:	7bfa      	ldrb	r2, [r7, #15]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	429a      	cmp	r2, r3
 8001478:	d3af      	bcc.n	80013da <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800147a:	2300      	movs	r3, #0
 800147c:	73fb      	strb	r3, [r7, #15]
 800147e:	e044      	b.n	800150a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001480:	7bfa      	ldrb	r2, [r7, #15]
 8001482:	6879      	ldr	r1, [r7, #4]
 8001484:	4613      	mov	r3, r2
 8001486:	00db      	lsls	r3, r3, #3
 8001488:	4413      	add	r3, r2
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	440b      	add	r3, r1
 800148e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001492:	2200      	movs	r2, #0
 8001494:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001496:	7bfa      	ldrb	r2, [r7, #15]
 8001498:	6879      	ldr	r1, [r7, #4]
 800149a:	4613      	mov	r3, r2
 800149c:	00db      	lsls	r3, r3, #3
 800149e:	4413      	add	r3, r2
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	440b      	add	r3, r1
 80014a4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80014a8:	7bfa      	ldrb	r2, [r7, #15]
 80014aa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80014ac:	7bfa      	ldrb	r2, [r7, #15]
 80014ae:	6879      	ldr	r1, [r7, #4]
 80014b0:	4613      	mov	r3, r2
 80014b2:	00db      	lsls	r3, r3, #3
 80014b4:	4413      	add	r3, r2
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	440b      	add	r3, r1
 80014ba:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80014be:	2200      	movs	r2, #0
 80014c0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80014c2:	7bfa      	ldrb	r2, [r7, #15]
 80014c4:	6879      	ldr	r1, [r7, #4]
 80014c6:	4613      	mov	r3, r2
 80014c8:	00db      	lsls	r3, r3, #3
 80014ca:	4413      	add	r3, r2
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	440b      	add	r3, r1
 80014d0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80014d8:	7bfa      	ldrb	r2, [r7, #15]
 80014da:	6879      	ldr	r1, [r7, #4]
 80014dc:	4613      	mov	r3, r2
 80014de:	00db      	lsls	r3, r3, #3
 80014e0:	4413      	add	r3, r2
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	440b      	add	r3, r1
 80014e6:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80014ee:	7bfa      	ldrb	r2, [r7, #15]
 80014f0:	6879      	ldr	r1, [r7, #4]
 80014f2:	4613      	mov	r3, r2
 80014f4:	00db      	lsls	r3, r3, #3
 80014f6:	4413      	add	r3, r2
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	440b      	add	r3, r1
 80014fc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001504:	7bfb      	ldrb	r3, [r7, #15]
 8001506:	3301      	adds	r3, #1
 8001508:	73fb      	strb	r3, [r7, #15]
 800150a:	7bfa      	ldrb	r2, [r7, #15]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	429a      	cmp	r2, r3
 8001512:	d3b5      	bcc.n	8001480 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	603b      	str	r3, [r7, #0]
 800151a:	687e      	ldr	r6, [r7, #4]
 800151c:	466d      	mov	r5, sp
 800151e:	f106 0410 	add.w	r4, r6, #16
 8001522:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001524:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001526:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001528:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800152a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800152e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001532:	1d33      	adds	r3, r6, #4
 8001534:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001536:	6838      	ldr	r0, [r7, #0]
 8001538:	f004 ffe0 	bl	80064fc <USB_DevInit>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d005      	beq.n	800154e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2202      	movs	r2, #2
 8001546:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e014      	b.n	8001578 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2200      	movs	r2, #0
 8001552:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2201      	movs	r2, #1
 800155a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001562:	2b01      	cmp	r3, #1
 8001564:	d102      	bne.n	800156c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f001 f98c 	bl	8002884 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4618      	mov	r0, r3
 8001572:	f006 f92e 	bl	80077d2 <USB_DevDisconnect>

  return HAL_OK;
 8001576:	2300      	movs	r3, #0
}
 8001578:	4618      	mov	r0, r3
 800157a:	3714      	adds	r7, #20
 800157c:	46bd      	mov	sp, r7
 800157e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001580 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001594:	2b01      	cmp	r3, #1
 8001596:	d101      	bne.n	800159c <HAL_PCD_Start+0x1c>
 8001598:	2302      	movs	r3, #2
 800159a:	e020      	b.n	80015de <HAL_PCD_Start+0x5e>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2201      	movs	r2, #1
 80015a0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d109      	bne.n	80015c0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d005      	beq.n	80015c0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015b8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f004 ff2b 	bl	8006420 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f006 f8de 	bl	8007790 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2200      	movs	r2, #0
 80015d8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80015dc:	2300      	movs	r3, #0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3710      	adds	r7, #16
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80015e6:	b590      	push	{r4, r7, lr}
 80015e8:	b08d      	sub	sp, #52	; 0x34
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80015f4:	6a3b      	ldr	r3, [r7, #32]
 80015f6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f006 f99c 	bl	800793a <USB_GetMode>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	f040 84b7 	bne.w	8001f78 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4618      	mov	r0, r3
 8001610:	f006 f900 	bl	8007814 <USB_ReadInterrupts>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	f000 84ad 	beq.w	8001f76 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	0a1b      	lsrs	r3, r3, #8
 8001626:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4618      	mov	r0, r3
 8001636:	f006 f8ed 	bl	8007814 <USB_ReadInterrupts>
 800163a:	4603      	mov	r3, r0
 800163c:	f003 0302 	and.w	r3, r3, #2
 8001640:	2b02      	cmp	r3, #2
 8001642:	d107      	bne.n	8001654 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	695a      	ldr	r2, [r3, #20]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f002 0202 	and.w	r2, r2, #2
 8001652:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4618      	mov	r0, r3
 800165a:	f006 f8db 	bl	8007814 <USB_ReadInterrupts>
 800165e:	4603      	mov	r3, r0
 8001660:	f003 0310 	and.w	r3, r3, #16
 8001664:	2b10      	cmp	r3, #16
 8001666:	d161      	bne.n	800172c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	699a      	ldr	r2, [r3, #24]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f022 0210 	bic.w	r2, r2, #16
 8001676:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001678:	6a3b      	ldr	r3, [r7, #32]
 800167a:	6a1b      	ldr	r3, [r3, #32]
 800167c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	f003 020f 	and.w	r2, r3, #15
 8001684:	4613      	mov	r3, r2
 8001686:	00db      	lsls	r3, r3, #3
 8001688:	4413      	add	r3, r2
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	4413      	add	r3, r2
 8001694:	3304      	adds	r3, #4
 8001696:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	0c5b      	lsrs	r3, r3, #17
 800169c:	f003 030f 	and.w	r3, r3, #15
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d124      	bne.n	80016ee <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80016aa:	4013      	ands	r3, r2
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d035      	beq.n	800171c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	091b      	lsrs	r3, r3, #4
 80016b8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80016ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016be:	b29b      	uxth	r3, r3
 80016c0:	461a      	mov	r2, r3
 80016c2:	6a38      	ldr	r0, [r7, #32]
 80016c4:	f005 ff12 	bl	80074ec <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	691a      	ldr	r2, [r3, #16]
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	091b      	lsrs	r3, r3, #4
 80016d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016d4:	441a      	add	r2, r3
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	6a1a      	ldr	r2, [r3, #32]
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	091b      	lsrs	r3, r3, #4
 80016e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016e6:	441a      	add	r2, r3
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	621a      	str	r2, [r3, #32]
 80016ec:	e016      	b.n	800171c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80016ee:	69bb      	ldr	r3, [r7, #24]
 80016f0:	0c5b      	lsrs	r3, r3, #17
 80016f2:	f003 030f 	and.w	r3, r3, #15
 80016f6:	2b06      	cmp	r3, #6
 80016f8:	d110      	bne.n	800171c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001700:	2208      	movs	r2, #8
 8001702:	4619      	mov	r1, r3
 8001704:	6a38      	ldr	r0, [r7, #32]
 8001706:	f005 fef1 	bl	80074ec <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	6a1a      	ldr	r2, [r3, #32]
 800170e:	69bb      	ldr	r3, [r7, #24]
 8001710:	091b      	lsrs	r3, r3, #4
 8001712:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001716:	441a      	add	r2, r3
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	699a      	ldr	r2, [r3, #24]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f042 0210 	orr.w	r2, r2, #16
 800172a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4618      	mov	r0, r3
 8001732:	f006 f86f 	bl	8007814 <USB_ReadInterrupts>
 8001736:	4603      	mov	r3, r0
 8001738:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800173c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001740:	f040 80a7 	bne.w	8001892 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001744:	2300      	movs	r3, #0
 8001746:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4618      	mov	r0, r3
 800174e:	f006 f874 	bl	800783a <USB_ReadDevAllOutEpInterrupt>
 8001752:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001754:	e099      	b.n	800188a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001758:	f003 0301 	and.w	r3, r3, #1
 800175c:	2b00      	cmp	r3, #0
 800175e:	f000 808e 	beq.w	800187e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001768:	b2d2      	uxtb	r2, r2
 800176a:	4611      	mov	r1, r2
 800176c:	4618      	mov	r0, r3
 800176e:	f006 f898 	bl	80078a2 <USB_ReadDevOutEPInterrupt>
 8001772:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	f003 0301 	and.w	r3, r3, #1
 800177a:	2b00      	cmp	r3, #0
 800177c:	d00c      	beq.n	8001798 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800177e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001780:	015a      	lsls	r2, r3, #5
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	4413      	add	r3, r2
 8001786:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800178a:	461a      	mov	r2, r3
 800178c:	2301      	movs	r3, #1
 800178e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001790:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f000 fef0 	bl	8002578 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	f003 0308 	and.w	r3, r3, #8
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d00c      	beq.n	80017bc <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80017a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a4:	015a      	lsls	r2, r3, #5
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	4413      	add	r3, r2
 80017aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017ae:	461a      	mov	r2, r3
 80017b0:	2308      	movs	r3, #8
 80017b2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80017b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f000 ffc6 	bl	8002748 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	f003 0310 	and.w	r3, r3, #16
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d008      	beq.n	80017d8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80017c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c8:	015a      	lsls	r2, r3, #5
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	4413      	add	r3, r2
 80017ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017d2:	461a      	mov	r2, r3
 80017d4:	2310      	movs	r3, #16
 80017d6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	f003 0302 	and.w	r3, r3, #2
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d030      	beq.n	8001844 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80017e2:	6a3b      	ldr	r3, [r7, #32]
 80017e4:	695b      	ldr	r3, [r3, #20]
 80017e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017ea:	2b80      	cmp	r3, #128	; 0x80
 80017ec:	d109      	bne.n	8001802 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	69fa      	ldr	r2, [r7, #28]
 80017f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001800:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001802:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001804:	4613      	mov	r3, r2
 8001806:	00db      	lsls	r3, r3, #3
 8001808:	4413      	add	r3, r2
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001810:	687a      	ldr	r2, [r7, #4]
 8001812:	4413      	add	r3, r2
 8001814:	3304      	adds	r3, #4
 8001816:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	78db      	ldrb	r3, [r3, #3]
 800181c:	2b01      	cmp	r3, #1
 800181e:	d108      	bne.n	8001832 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	2200      	movs	r2, #0
 8001824:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001828:	b2db      	uxtb	r3, r3
 800182a:	4619      	mov	r1, r3
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f008 fcf5 	bl	800a21c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001834:	015a      	lsls	r2, r3, #5
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	4413      	add	r3, r2
 800183a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800183e:	461a      	mov	r2, r3
 8001840:	2302      	movs	r3, #2
 8001842:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	f003 0320 	and.w	r3, r3, #32
 800184a:	2b00      	cmp	r3, #0
 800184c:	d008      	beq.n	8001860 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800184e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001850:	015a      	lsls	r2, r3, #5
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	4413      	add	r3, r2
 8001856:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800185a:	461a      	mov	r2, r3
 800185c:	2320      	movs	r3, #32
 800185e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d009      	beq.n	800187e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800186a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186c:	015a      	lsls	r2, r3, #5
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	4413      	add	r3, r2
 8001872:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001876:	461a      	mov	r2, r3
 8001878:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800187c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800187e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001880:	3301      	adds	r3, #1
 8001882:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001886:	085b      	lsrs	r3, r3, #1
 8001888:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800188a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800188c:	2b00      	cmp	r3, #0
 800188e:	f47f af62 	bne.w	8001756 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4618      	mov	r0, r3
 8001898:	f005 ffbc 	bl	8007814 <USB_ReadInterrupts>
 800189c:	4603      	mov	r3, r0
 800189e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018a2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80018a6:	f040 80db 	bne.w	8001a60 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f005 ffdd 	bl	800786e <USB_ReadDevAllInEpInterrupt>
 80018b4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80018b6:	2300      	movs	r3, #0
 80018b8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80018ba:	e0cd      	b.n	8001a58 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80018bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018be:	f003 0301 	and.w	r3, r3, #1
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	f000 80c2 	beq.w	8001a4c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018ce:	b2d2      	uxtb	r2, r2
 80018d0:	4611      	mov	r1, r2
 80018d2:	4618      	mov	r0, r3
 80018d4:	f006 f803 	bl	80078de <USB_ReadDevInEPInterrupt>
 80018d8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	f003 0301 	and.w	r3, r3, #1
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d057      	beq.n	8001994 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80018e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e6:	f003 030f 	and.w	r3, r3, #15
 80018ea:	2201      	movs	r2, #1
 80018ec:	fa02 f303 	lsl.w	r3, r2, r3
 80018f0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	43db      	mvns	r3, r3
 80018fe:	69f9      	ldr	r1, [r7, #28]
 8001900:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001904:	4013      	ands	r3, r2
 8001906:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190a:	015a      	lsls	r2, r3, #5
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	4413      	add	r3, r2
 8001910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001914:	461a      	mov	r2, r3
 8001916:	2301      	movs	r3, #1
 8001918:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	691b      	ldr	r3, [r3, #16]
 800191e:	2b01      	cmp	r3, #1
 8001920:	d132      	bne.n	8001988 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001922:	6879      	ldr	r1, [r7, #4]
 8001924:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001926:	4613      	mov	r3, r2
 8001928:	00db      	lsls	r3, r3, #3
 800192a:	4413      	add	r3, r2
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	440b      	add	r3, r1
 8001930:	334c      	adds	r3, #76	; 0x4c
 8001932:	6819      	ldr	r1, [r3, #0]
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001938:	4613      	mov	r3, r2
 800193a:	00db      	lsls	r3, r3, #3
 800193c:	4413      	add	r3, r2
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	4403      	add	r3, r0
 8001942:	3348      	adds	r3, #72	; 0x48
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4419      	add	r1, r3
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800194c:	4613      	mov	r3, r2
 800194e:	00db      	lsls	r3, r3, #3
 8001950:	4413      	add	r3, r2
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	4403      	add	r3, r0
 8001956:	334c      	adds	r3, #76	; 0x4c
 8001958:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800195a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195c:	2b00      	cmp	r3, #0
 800195e:	d113      	bne.n	8001988 <HAL_PCD_IRQHandler+0x3a2>
 8001960:	6879      	ldr	r1, [r7, #4]
 8001962:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001964:	4613      	mov	r3, r2
 8001966:	00db      	lsls	r3, r3, #3
 8001968:	4413      	add	r3, r2
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	440b      	add	r3, r1
 800196e:	3354      	adds	r3, #84	; 0x54
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d108      	bne.n	8001988 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6818      	ldr	r0, [r3, #0]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001980:	461a      	mov	r2, r3
 8001982:	2101      	movs	r1, #1
 8001984:	f006 f80c 	bl	80079a0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198a:	b2db      	uxtb	r3, r3
 800198c:	4619      	mov	r1, r3
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f008 fbbf 	bl	800a112 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	f003 0308 	and.w	r3, r3, #8
 800199a:	2b00      	cmp	r3, #0
 800199c:	d008      	beq.n	80019b0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800199e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a0:	015a      	lsls	r2, r3, #5
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	4413      	add	r3, r2
 80019a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019aa:	461a      	mov	r2, r3
 80019ac:	2308      	movs	r3, #8
 80019ae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	f003 0310 	and.w	r3, r3, #16
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d008      	beq.n	80019cc <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80019ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019bc:	015a      	lsls	r2, r3, #5
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	4413      	add	r3, r2
 80019c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019c6:	461a      	mov	r2, r3
 80019c8:	2310      	movs	r3, #16
 80019ca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d008      	beq.n	80019e8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80019d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d8:	015a      	lsls	r2, r3, #5
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	4413      	add	r3, r2
 80019de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019e2:	461a      	mov	r2, r3
 80019e4:	2340      	movs	r3, #64	; 0x40
 80019e6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d023      	beq.n	8001a3a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80019f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80019f4:	6a38      	ldr	r0, [r7, #32]
 80019f6:	f004 fedf 	bl	80067b8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80019fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019fc:	4613      	mov	r3, r2
 80019fe:	00db      	lsls	r3, r3, #3
 8001a00:	4413      	add	r3, r2
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	3338      	adds	r3, #56	; 0x38
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	4413      	add	r3, r2
 8001a0a:	3304      	adds	r3, #4
 8001a0c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	78db      	ldrb	r3, [r3, #3]
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d108      	bne.n	8001a28 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	4619      	mov	r1, r3
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f008 fc0c 	bl	800a240 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2a:	015a      	lsls	r2, r3, #5
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	4413      	add	r3, r2
 8001a30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a34:	461a      	mov	r2, r3
 8001a36:	2302      	movs	r3, #2
 8001a38:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d003      	beq.n	8001a4c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001a44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f000 fd08 	bl	800245c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4e:	3301      	adds	r3, #1
 8001a50:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a54:	085b      	lsrs	r3, r3, #1
 8001a56:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	f47f af2e 	bne.w	80018bc <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f005 fed5 	bl	8007814 <USB_ReadInterrupts>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001a70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001a74:	d122      	bne.n	8001abc <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	69fa      	ldr	r2, [r7, #28]
 8001a80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a84:	f023 0301 	bic.w	r3, r3, #1
 8001a88:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d108      	bne.n	8001aa6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2200      	movs	r2, #0
 8001a98:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f000 ff14 	bl	80028cc <HAL_PCDEx_LPM_Callback>
 8001aa4:	e002      	b.n	8001aac <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f008 fbaa 	bl	800a200 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	695a      	ldr	r2, [r3, #20]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001aba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f005 fea7 	bl	8007814 <USB_ReadInterrupts>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001acc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ad0:	d112      	bne.n	8001af8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	f003 0301 	and.w	r3, r3, #1
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d102      	bne.n	8001ae8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f008 fb66 	bl	800a1b4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	695a      	ldr	r2, [r3, #20]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001af6:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f005 fe89 	bl	8007814 <USB_ReadInterrupts>
 8001b02:	4603      	mov	r3, r0
 8001b04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001b08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001b0c:	d121      	bne.n	8001b52 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	695a      	ldr	r2, [r3, #20]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001b1c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d111      	bne.n	8001b4c <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b36:	089b      	lsrs	r3, r3, #2
 8001b38:	f003 020f 	and.w	r2, r3, #15
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001b42:	2101      	movs	r1, #1
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f000 fec1 	bl	80028cc <HAL_PCDEx_LPM_Callback>
 8001b4a:	e002      	b.n	8001b52 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f008 fb31 	bl	800a1b4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f005 fe5c 	bl	8007814 <USB_ReadInterrupts>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b66:	f040 80b7 	bne.w	8001cd8 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	69fa      	ldr	r2, [r7, #28]
 8001b74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b78:	f023 0301 	bic.w	r3, r3, #1
 8001b7c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2110      	movs	r1, #16
 8001b84:	4618      	mov	r0, r3
 8001b86:	f004 fe17 	bl	80067b8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b8e:	e046      	b.n	8001c1e <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b92:	015a      	lsls	r2, r3, #5
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	4413      	add	r3, r2
 8001b98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001ba2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ba6:	015a      	lsls	r2, r3, #5
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	4413      	add	r3, r2
 8001bac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bb4:	0151      	lsls	r1, r2, #5
 8001bb6:	69fa      	ldr	r2, [r7, #28]
 8001bb8:	440a      	add	r2, r1
 8001bba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001bbe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001bc2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bc6:	015a      	lsls	r2, r3, #5
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	4413      	add	r3, r2
 8001bcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001bd6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bda:	015a      	lsls	r2, r3, #5
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	4413      	add	r3, r2
 8001be0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001be8:	0151      	lsls	r1, r2, #5
 8001bea:	69fa      	ldr	r2, [r7, #28]
 8001bec:	440a      	add	r2, r1
 8001bee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001bf2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001bf6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bfa:	015a      	lsls	r2, r3, #5
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	4413      	add	r3, r2
 8001c00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c08:	0151      	lsls	r1, r2, #5
 8001c0a:	69fa      	ldr	r2, [r7, #28]
 8001c0c:	440a      	add	r2, r1
 8001c0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001c12:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001c16:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d3b3      	bcc.n	8001b90 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c2e:	69db      	ldr	r3, [r3, #28]
 8001c30:	69fa      	ldr	r2, [r7, #28]
 8001c32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c36:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001c3a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d016      	beq.n	8001c72 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c4e:	69fa      	ldr	r2, [r7, #28]
 8001c50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c54:	f043 030b 	orr.w	r3, r3, #11
 8001c58:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c64:	69fa      	ldr	r2, [r7, #28]
 8001c66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c6a:	f043 030b 	orr.w	r3, r3, #11
 8001c6e:	6453      	str	r3, [r2, #68]	; 0x44
 8001c70:	e015      	b.n	8001c9e <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c78:	695a      	ldr	r2, [r3, #20]
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c80:	4619      	mov	r1, r3
 8001c82:	f242 032b 	movw	r3, #8235	; 0x202b
 8001c86:	4313      	orrs	r3, r2
 8001c88:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c90:	691b      	ldr	r3, [r3, #16]
 8001c92:	69fa      	ldr	r2, [r7, #28]
 8001c94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c98:	f043 030b 	orr.w	r3, r3, #11
 8001c9c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	69fa      	ldr	r2, [r7, #28]
 8001ca8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001cac:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001cb0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6818      	ldr	r0, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	691b      	ldr	r3, [r3, #16]
 8001cba:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	f005 fe6c 	bl	80079a0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	695a      	ldr	r2, [r3, #20]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001cd6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f005 fd99 	bl	8007814 <USB_ReadInterrupts>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ce8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cec:	d124      	bne.n	8001d38 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f005 fe30 	bl	8007958 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f004 fdd8 	bl	80068b2 <USB_GetDevSpeed>
 8001d02:	4603      	mov	r3, r0
 8001d04:	461a      	mov	r2, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681c      	ldr	r4, [r3, #0]
 8001d0e:	f001 fe1b 	bl	8003948 <HAL_RCC_GetHCLKFreq>
 8001d12:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	4620      	mov	r0, r4
 8001d1e:	f004 fadd 	bl	80062dc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f008 fa1d 	bl	800a162 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	695a      	ldr	r2, [r3, #20]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001d36:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f005 fd69 	bl	8007814 <USB_ReadInterrupts>
 8001d42:	4603      	mov	r3, r0
 8001d44:	f003 0308 	and.w	r3, r3, #8
 8001d48:	2b08      	cmp	r3, #8
 8001d4a:	d10a      	bne.n	8001d62 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f008 f9fa 	bl	800a146 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	695a      	ldr	r2, [r3, #20]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f002 0208 	and.w	r2, r2, #8
 8001d60:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f005 fd54 	bl	8007814 <USB_ReadInterrupts>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d72:	2b80      	cmp	r3, #128	; 0x80
 8001d74:	d122      	bne.n	8001dbc <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001d76:	6a3b      	ldr	r3, [r7, #32]
 8001d78:	699b      	ldr	r3, [r3, #24]
 8001d7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d7e:	6a3b      	ldr	r3, [r7, #32]
 8001d80:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d82:	2301      	movs	r3, #1
 8001d84:	627b      	str	r3, [r7, #36]	; 0x24
 8001d86:	e014      	b.n	8001db2 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001d88:	6879      	ldr	r1, [r7, #4]
 8001d8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	00db      	lsls	r3, r3, #3
 8001d90:	4413      	add	r3, r2
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	440b      	add	r3, r1
 8001d96:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d105      	bne.n	8001dac <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	4619      	mov	r1, r3
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f000 fb27 	bl	80023fa <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dae:	3301      	adds	r3, #1
 8001db0:	627b      	str	r3, [r7, #36]	; 0x24
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d3e5      	bcc.n	8001d88 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f005 fd27 	bl	8007814 <USB_ReadInterrupts>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dcc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001dd0:	d13b      	bne.n	8001e4a <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	627b      	str	r3, [r7, #36]	; 0x24
 8001dd6:	e02b      	b.n	8001e30 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dda:	015a      	lsls	r2, r3, #5
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	4413      	add	r3, r2
 8001de0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001de8:	6879      	ldr	r1, [r7, #4]
 8001dea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dec:	4613      	mov	r3, r2
 8001dee:	00db      	lsls	r3, r3, #3
 8001df0:	4413      	add	r3, r2
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	440b      	add	r3, r1
 8001df6:	3340      	adds	r3, #64	; 0x40
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d115      	bne.n	8001e2a <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001dfe:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	da12      	bge.n	8001e2a <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001e04:	6879      	ldr	r1, [r7, #4]
 8001e06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e08:	4613      	mov	r3, r2
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	4413      	add	r3, r2
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	440b      	add	r3, r1
 8001e12:	333f      	adds	r3, #63	; 0x3f
 8001e14:	2201      	movs	r2, #1
 8001e16:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	4619      	mov	r1, r3
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f000 fae8 	bl	80023fa <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	627b      	str	r3, [r7, #36]	; 0x24
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d3ce      	bcc.n	8001dd8 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	695a      	ldr	r2, [r3, #20]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001e48:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f005 fce0 	bl	8007814 <USB_ReadInterrupts>
 8001e54:	4603      	mov	r3, r0
 8001e56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001e5e:	d155      	bne.n	8001f0c <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e60:	2301      	movs	r3, #1
 8001e62:	627b      	str	r3, [r7, #36]	; 0x24
 8001e64:	e045      	b.n	8001ef2 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e68:	015a      	lsls	r2, r3, #5
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	4413      	add	r3, r2
 8001e6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001e76:	6879      	ldr	r1, [r7, #4]
 8001e78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	00db      	lsls	r3, r3, #3
 8001e7e:	4413      	add	r3, r2
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	440b      	add	r3, r1
 8001e84:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d12e      	bne.n	8001eec <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001e8e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	da2b      	bge.n	8001eec <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001ea0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d121      	bne.n	8001eec <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001ea8:	6879      	ldr	r1, [r7, #4]
 8001eaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eac:	4613      	mov	r3, r2
 8001eae:	00db      	lsls	r3, r3, #3
 8001eb0:	4413      	add	r3, r2
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	440b      	add	r3, r1
 8001eb6:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001eba:	2201      	movs	r2, #1
 8001ebc:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001ebe:	6a3b      	ldr	r3, [r7, #32]
 8001ec0:	699b      	ldr	r3, [r3, #24]
 8001ec2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001ec6:	6a3b      	ldr	r3, [r7, #32]
 8001ec8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001eca:	6a3b      	ldr	r3, [r7, #32]
 8001ecc:	695b      	ldr	r3, [r3, #20]
 8001ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d10a      	bne.n	8001eec <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	69fa      	ldr	r2, [r7, #28]
 8001ee0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ee4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ee8:	6053      	str	r3, [r2, #4]
            break;
 8001eea:	e007      	b.n	8001efc <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eee:	3301      	adds	r3, #1
 8001ef0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d3b4      	bcc.n	8001e66 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	695a      	ldr	r2, [r3, #20]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001f0a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4618      	mov	r0, r3
 8001f12:	f005 fc7f 	bl	8007814 <USB_ReadInterrupts>
 8001f16:	4603      	mov	r3, r0
 8001f18:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001f1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f20:	d10a      	bne.n	8001f38 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f008 f99e 	bl	800a264 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	695a      	ldr	r2, [r3, #20]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001f36:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f005 fc69 	bl	8007814 <USB_ReadInterrupts>
 8001f42:	4603      	mov	r3, r0
 8001f44:	f003 0304 	and.w	r3, r3, #4
 8001f48:	2b04      	cmp	r3, #4
 8001f4a:	d115      	bne.n	8001f78 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	f003 0304 	and.w	r3, r3, #4
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d002      	beq.n	8001f64 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f008 f98e 	bl	800a280 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	6859      	ldr	r1, [r3, #4]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	430a      	orrs	r2, r1
 8001f72:	605a      	str	r2, [r3, #4]
 8001f74:	e000      	b.n	8001f78 <HAL_PCD_IRQHandler+0x992>
      return;
 8001f76:	bf00      	nop
    }
  }
}
 8001f78:	3734      	adds	r7, #52	; 0x34
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd90      	pop	{r4, r7, pc}

08001f7e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	b082      	sub	sp, #8
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
 8001f86:	460b      	mov	r3, r1
 8001f88:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d101      	bne.n	8001f98 <HAL_PCD_SetAddress+0x1a>
 8001f94:	2302      	movs	r3, #2
 8001f96:	e013      	b.n	8001fc0 <HAL_PCD_SetAddress+0x42>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	78fa      	ldrb	r2, [r7, #3]
 8001fa4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	78fa      	ldrb	r2, [r7, #3]
 8001fae:	4611      	mov	r1, r2
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f005 fbc7 	bl	8007744 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001fbe:	2300      	movs	r3, #0
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3708      	adds	r7, #8
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	4608      	mov	r0, r1
 8001fd2:	4611      	mov	r1, r2
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	70fb      	strb	r3, [r7, #3]
 8001fda:	460b      	mov	r3, r1
 8001fdc:	803b      	strh	r3, [r7, #0]
 8001fde:	4613      	mov	r3, r2
 8001fe0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001fe6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	da0f      	bge.n	800200e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fee:	78fb      	ldrb	r3, [r7, #3]
 8001ff0:	f003 020f 	and.w	r2, r3, #15
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	00db      	lsls	r3, r3, #3
 8001ff8:	4413      	add	r3, r2
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	3338      	adds	r3, #56	; 0x38
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	4413      	add	r3, r2
 8002002:	3304      	adds	r3, #4
 8002004:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2201      	movs	r2, #1
 800200a:	705a      	strb	r2, [r3, #1]
 800200c:	e00f      	b.n	800202e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800200e:	78fb      	ldrb	r3, [r7, #3]
 8002010:	f003 020f 	and.w	r2, r3, #15
 8002014:	4613      	mov	r3, r2
 8002016:	00db      	lsls	r3, r3, #3
 8002018:	4413      	add	r3, r2
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	4413      	add	r3, r2
 8002024:	3304      	adds	r3, #4
 8002026:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2200      	movs	r2, #0
 800202c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800202e:	78fb      	ldrb	r3, [r7, #3]
 8002030:	f003 030f 	and.w	r3, r3, #15
 8002034:	b2da      	uxtb	r2, r3
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800203a:	883a      	ldrh	r2, [r7, #0]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	78ba      	ldrb	r2, [r7, #2]
 8002044:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	785b      	ldrb	r3, [r3, #1]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d004      	beq.n	8002058 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	b29a      	uxth	r2, r3
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002058:	78bb      	ldrb	r3, [r7, #2]
 800205a:	2b02      	cmp	r3, #2
 800205c:	d102      	bne.n	8002064 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2200      	movs	r2, #0
 8002062:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800206a:	2b01      	cmp	r3, #1
 800206c:	d101      	bne.n	8002072 <HAL_PCD_EP_Open+0xaa>
 800206e:	2302      	movs	r3, #2
 8002070:	e00e      	b.n	8002090 <HAL_PCD_EP_Open+0xc8>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2201      	movs	r2, #1
 8002076:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	68f9      	ldr	r1, [r7, #12]
 8002080:	4618      	mov	r0, r3
 8002082:	f004 fc3b 	bl	80068fc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800208e:	7afb      	ldrb	r3, [r7, #11]
}
 8002090:	4618      	mov	r0, r3
 8002092:	3710      	adds	r7, #16
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	460b      	mov	r3, r1
 80020a2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80020a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	da0f      	bge.n	80020cc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020ac:	78fb      	ldrb	r3, [r7, #3]
 80020ae:	f003 020f 	and.w	r2, r3, #15
 80020b2:	4613      	mov	r3, r2
 80020b4:	00db      	lsls	r3, r3, #3
 80020b6:	4413      	add	r3, r2
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	3338      	adds	r3, #56	; 0x38
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	4413      	add	r3, r2
 80020c0:	3304      	adds	r3, #4
 80020c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2201      	movs	r2, #1
 80020c8:	705a      	strb	r2, [r3, #1]
 80020ca:	e00f      	b.n	80020ec <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020cc:	78fb      	ldrb	r3, [r7, #3]
 80020ce:	f003 020f 	and.w	r2, r3, #15
 80020d2:	4613      	mov	r3, r2
 80020d4:	00db      	lsls	r3, r3, #3
 80020d6:	4413      	add	r3, r2
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	4413      	add	r3, r2
 80020e2:	3304      	adds	r3, #4
 80020e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2200      	movs	r2, #0
 80020ea:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80020ec:	78fb      	ldrb	r3, [r7, #3]
 80020ee:	f003 030f 	and.w	r3, r3, #15
 80020f2:	b2da      	uxtb	r2, r3
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d101      	bne.n	8002106 <HAL_PCD_EP_Close+0x6e>
 8002102:	2302      	movs	r3, #2
 8002104:	e00e      	b.n	8002124 <HAL_PCD_EP_Close+0x8c>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2201      	movs	r2, #1
 800210a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	68f9      	ldr	r1, [r7, #12]
 8002114:	4618      	mov	r0, r3
 8002116:	f004 fc79 	bl	8006a0c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2200      	movs	r2, #0
 800211e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002122:	2300      	movs	r3, #0
}
 8002124:	4618      	mov	r0, r3
 8002126:	3710      	adds	r7, #16
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}

0800212c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b086      	sub	sp, #24
 8002130:	af00      	add	r7, sp, #0
 8002132:	60f8      	str	r0, [r7, #12]
 8002134:	607a      	str	r2, [r7, #4]
 8002136:	603b      	str	r3, [r7, #0]
 8002138:	460b      	mov	r3, r1
 800213a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800213c:	7afb      	ldrb	r3, [r7, #11]
 800213e:	f003 020f 	and.w	r2, r3, #15
 8002142:	4613      	mov	r3, r2
 8002144:	00db      	lsls	r3, r3, #3
 8002146:	4413      	add	r3, r2
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800214e:	68fa      	ldr	r2, [r7, #12]
 8002150:	4413      	add	r3, r2
 8002152:	3304      	adds	r3, #4
 8002154:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	683a      	ldr	r2, [r7, #0]
 8002160:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	2200      	movs	r2, #0
 8002166:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	2200      	movs	r2, #0
 800216c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800216e:	7afb      	ldrb	r3, [r7, #11]
 8002170:	f003 030f 	and.w	r3, r3, #15
 8002174:	b2da      	uxtb	r2, r3
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	691b      	ldr	r3, [r3, #16]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d102      	bne.n	8002188 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002188:	7afb      	ldrb	r3, [r7, #11]
 800218a:	f003 030f 	and.w	r3, r3, #15
 800218e:	2b00      	cmp	r3, #0
 8002190:	d109      	bne.n	80021a6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	6818      	ldr	r0, [r3, #0]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	b2db      	uxtb	r3, r3
 800219c:	461a      	mov	r2, r3
 800219e:	6979      	ldr	r1, [r7, #20]
 80021a0:	f004 ff60 	bl	8007064 <USB_EP0StartXfer>
 80021a4:	e008      	b.n	80021b8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	6818      	ldr	r0, [r3, #0]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	691b      	ldr	r3, [r3, #16]
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	461a      	mov	r2, r3
 80021b2:	6979      	ldr	r1, [r7, #20]
 80021b4:	f004 fd06 	bl	8006bc4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3718      	adds	r7, #24
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021c2:	b480      	push	{r7}
 80021c4:	b083      	sub	sp, #12
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	6078      	str	r0, [r7, #4]
 80021ca:	460b      	mov	r3, r1
 80021cc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80021ce:	78fb      	ldrb	r3, [r7, #3]
 80021d0:	f003 020f 	and.w	r2, r3, #15
 80021d4:	6879      	ldr	r1, [r7, #4]
 80021d6:	4613      	mov	r3, r2
 80021d8:	00db      	lsls	r3, r3, #3
 80021da:	4413      	add	r3, r2
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	440b      	add	r3, r1
 80021e0:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80021e4:	681b      	ldr	r3, [r3, #0]
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	370c      	adds	r7, #12
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr

080021f2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80021f2:	b580      	push	{r7, lr}
 80021f4:	b086      	sub	sp, #24
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	60f8      	str	r0, [r7, #12]
 80021fa:	607a      	str	r2, [r7, #4]
 80021fc:	603b      	str	r3, [r7, #0]
 80021fe:	460b      	mov	r3, r1
 8002200:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002202:	7afb      	ldrb	r3, [r7, #11]
 8002204:	f003 020f 	and.w	r2, r3, #15
 8002208:	4613      	mov	r3, r2
 800220a:	00db      	lsls	r3, r3, #3
 800220c:	4413      	add	r3, r2
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	3338      	adds	r3, #56	; 0x38
 8002212:	68fa      	ldr	r2, [r7, #12]
 8002214:	4413      	add	r3, r2
 8002216:	3304      	adds	r3, #4
 8002218:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	683a      	ldr	r2, [r7, #0]
 8002224:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	2200      	movs	r2, #0
 800222a:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	2201      	movs	r2, #1
 8002230:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002232:	7afb      	ldrb	r3, [r7, #11]
 8002234:	f003 030f 	and.w	r3, r3, #15
 8002238:	b2da      	uxtb	r2, r3
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	691b      	ldr	r3, [r3, #16]
 8002242:	2b01      	cmp	r3, #1
 8002244:	d102      	bne.n	800224c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800224c:	7afb      	ldrb	r3, [r7, #11]
 800224e:	f003 030f 	and.w	r3, r3, #15
 8002252:	2b00      	cmp	r3, #0
 8002254:	d109      	bne.n	800226a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	6818      	ldr	r0, [r3, #0]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	691b      	ldr	r3, [r3, #16]
 800225e:	b2db      	uxtb	r3, r3
 8002260:	461a      	mov	r2, r3
 8002262:	6979      	ldr	r1, [r7, #20]
 8002264:	f004 fefe 	bl	8007064 <USB_EP0StartXfer>
 8002268:	e008      	b.n	800227c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	6818      	ldr	r0, [r3, #0]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	691b      	ldr	r3, [r3, #16]
 8002272:	b2db      	uxtb	r3, r3
 8002274:	461a      	mov	r2, r3
 8002276:	6979      	ldr	r1, [r7, #20]
 8002278:	f004 fca4 	bl	8006bc4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	3718      	adds	r7, #24
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}

08002286 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002286:	b580      	push	{r7, lr}
 8002288:	b084      	sub	sp, #16
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
 800228e:	460b      	mov	r3, r1
 8002290:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002292:	78fb      	ldrb	r3, [r7, #3]
 8002294:	f003 020f 	and.w	r2, r3, #15
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	429a      	cmp	r2, r3
 800229e:	d901      	bls.n	80022a4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e050      	b.n	8002346 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80022a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	da0f      	bge.n	80022cc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022ac:	78fb      	ldrb	r3, [r7, #3]
 80022ae:	f003 020f 	and.w	r2, r3, #15
 80022b2:	4613      	mov	r3, r2
 80022b4:	00db      	lsls	r3, r3, #3
 80022b6:	4413      	add	r3, r2
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	3338      	adds	r3, #56	; 0x38
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	4413      	add	r3, r2
 80022c0:	3304      	adds	r3, #4
 80022c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2201      	movs	r2, #1
 80022c8:	705a      	strb	r2, [r3, #1]
 80022ca:	e00d      	b.n	80022e8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80022cc:	78fa      	ldrb	r2, [r7, #3]
 80022ce:	4613      	mov	r3, r2
 80022d0:	00db      	lsls	r3, r3, #3
 80022d2:	4413      	add	r3, r2
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	4413      	add	r3, r2
 80022de:	3304      	adds	r3, #4
 80022e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2200      	movs	r2, #0
 80022e6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2201      	movs	r2, #1
 80022ec:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022ee:	78fb      	ldrb	r3, [r7, #3]
 80022f0:	f003 030f 	and.w	r3, r3, #15
 80022f4:	b2da      	uxtb	r2, r3
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002300:	2b01      	cmp	r3, #1
 8002302:	d101      	bne.n	8002308 <HAL_PCD_EP_SetStall+0x82>
 8002304:	2302      	movs	r3, #2
 8002306:	e01e      	b.n	8002346 <HAL_PCD_EP_SetStall+0xc0>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2201      	movs	r2, #1
 800230c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	68f9      	ldr	r1, [r7, #12]
 8002316:	4618      	mov	r0, r3
 8002318:	f005 f940 	bl	800759c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800231c:	78fb      	ldrb	r3, [r7, #3]
 800231e:	f003 030f 	and.w	r3, r3, #15
 8002322:	2b00      	cmp	r3, #0
 8002324:	d10a      	bne.n	800233c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6818      	ldr	r0, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	691b      	ldr	r3, [r3, #16]
 800232e:	b2d9      	uxtb	r1, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002336:	461a      	mov	r2, r3
 8002338:	f005 fb32 	bl	80079a0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	3710      	adds	r7, #16
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}

0800234e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800234e:	b580      	push	{r7, lr}
 8002350:	b084      	sub	sp, #16
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
 8002356:	460b      	mov	r3, r1
 8002358:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800235a:	78fb      	ldrb	r3, [r7, #3]
 800235c:	f003 020f 	and.w	r2, r3, #15
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	429a      	cmp	r2, r3
 8002366:	d901      	bls.n	800236c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e042      	b.n	80023f2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800236c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002370:	2b00      	cmp	r3, #0
 8002372:	da0f      	bge.n	8002394 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002374:	78fb      	ldrb	r3, [r7, #3]
 8002376:	f003 020f 	and.w	r2, r3, #15
 800237a:	4613      	mov	r3, r2
 800237c:	00db      	lsls	r3, r3, #3
 800237e:	4413      	add	r3, r2
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	3338      	adds	r3, #56	; 0x38
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	4413      	add	r3, r2
 8002388:	3304      	adds	r3, #4
 800238a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2201      	movs	r2, #1
 8002390:	705a      	strb	r2, [r3, #1]
 8002392:	e00f      	b.n	80023b4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002394:	78fb      	ldrb	r3, [r7, #3]
 8002396:	f003 020f 	and.w	r2, r3, #15
 800239a:	4613      	mov	r3, r2
 800239c:	00db      	lsls	r3, r3, #3
 800239e:	4413      	add	r3, r2
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	4413      	add	r3, r2
 80023aa:	3304      	adds	r3, #4
 80023ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2200      	movs	r2, #0
 80023b2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2200      	movs	r2, #0
 80023b8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023ba:	78fb      	ldrb	r3, [r7, #3]
 80023bc:	f003 030f 	and.w	r3, r3, #15
 80023c0:	b2da      	uxtb	r2, r3
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d101      	bne.n	80023d4 <HAL_PCD_EP_ClrStall+0x86>
 80023d0:	2302      	movs	r3, #2
 80023d2:	e00e      	b.n	80023f2 <HAL_PCD_EP_ClrStall+0xa4>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2201      	movs	r2, #1
 80023d8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	68f9      	ldr	r1, [r7, #12]
 80023e2:	4618      	mov	r0, r3
 80023e4:	f005 f948 	bl	8007678 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3710      	adds	r7, #16
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}

080023fa <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023fa:	b580      	push	{r7, lr}
 80023fc:	b084      	sub	sp, #16
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
 8002402:	460b      	mov	r3, r1
 8002404:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002406:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800240a:	2b00      	cmp	r3, #0
 800240c:	da0c      	bge.n	8002428 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800240e:	78fb      	ldrb	r3, [r7, #3]
 8002410:	f003 020f 	and.w	r2, r3, #15
 8002414:	4613      	mov	r3, r2
 8002416:	00db      	lsls	r3, r3, #3
 8002418:	4413      	add	r3, r2
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	3338      	adds	r3, #56	; 0x38
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	4413      	add	r3, r2
 8002422:	3304      	adds	r3, #4
 8002424:	60fb      	str	r3, [r7, #12]
 8002426:	e00c      	b.n	8002442 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002428:	78fb      	ldrb	r3, [r7, #3]
 800242a:	f003 020f 	and.w	r2, r3, #15
 800242e:	4613      	mov	r3, r2
 8002430:	00db      	lsls	r3, r3, #3
 8002432:	4413      	add	r3, r2
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	4413      	add	r3, r2
 800243e:	3304      	adds	r3, #4
 8002440:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	68f9      	ldr	r1, [r7, #12]
 8002448:	4618      	mov	r0, r3
 800244a:	f004 ff67 	bl	800731c <USB_EPStopXfer>
 800244e:	4603      	mov	r3, r0
 8002450:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002452:	7afb      	ldrb	r3, [r7, #11]
}
 8002454:	4618      	mov	r0, r3
 8002456:	3710      	adds	r7, #16
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}

0800245c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b08a      	sub	sp, #40	; 0x28
 8002460:	af02      	add	r7, sp, #8
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002470:	683a      	ldr	r2, [r7, #0]
 8002472:	4613      	mov	r3, r2
 8002474:	00db      	lsls	r3, r3, #3
 8002476:	4413      	add	r3, r2
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	3338      	adds	r3, #56	; 0x38
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	4413      	add	r3, r2
 8002480:	3304      	adds	r3, #4
 8002482:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	6a1a      	ldr	r2, [r3, #32]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	699b      	ldr	r3, [r3, #24]
 800248c:	429a      	cmp	r2, r3
 800248e:	d901      	bls.n	8002494 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e06c      	b.n	800256e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	699a      	ldr	r2, [r3, #24]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	6a1b      	ldr	r3, [r3, #32]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	69fa      	ldr	r2, [r7, #28]
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d902      	bls.n	80024b0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	3303      	adds	r3, #3
 80024b4:	089b      	lsrs	r3, r3, #2
 80024b6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80024b8:	e02b      	b.n	8002512 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	699a      	ldr	r2, [r3, #24]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	6a1b      	ldr	r3, [r3, #32]
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	69fa      	ldr	r2, [r7, #28]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d902      	bls.n	80024d6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	3303      	adds	r3, #3
 80024da:	089b      	lsrs	r3, r3, #2
 80024dc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	6919      	ldr	r1, [r3, #16]
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	b2da      	uxtb	r2, r3
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	9300      	str	r3, [sp, #0]
 80024f2:	4603      	mov	r3, r0
 80024f4:	6978      	ldr	r0, [r7, #20]
 80024f6:	f004 ffbb 	bl	8007470 <USB_WritePacket>

    ep->xfer_buff  += len;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	691a      	ldr	r2, [r3, #16]
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	441a      	add	r2, r3
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	6a1a      	ldr	r2, [r3, #32]
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	441a      	add	r2, r3
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	015a      	lsls	r2, r3, #5
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	4413      	add	r3, r2
 800251a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800251e:	699b      	ldr	r3, [r3, #24]
 8002520:	b29b      	uxth	r3, r3
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	429a      	cmp	r2, r3
 8002526:	d809      	bhi.n	800253c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6a1a      	ldr	r2, [r3, #32]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002530:	429a      	cmp	r2, r3
 8002532:	d203      	bcs.n	800253c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	699b      	ldr	r3, [r3, #24]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d1be      	bne.n	80024ba <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	699a      	ldr	r2, [r3, #24]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	6a1b      	ldr	r3, [r3, #32]
 8002544:	429a      	cmp	r2, r3
 8002546:	d811      	bhi.n	800256c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	f003 030f 	and.w	r3, r3, #15
 800254e:	2201      	movs	r2, #1
 8002550:	fa02 f303 	lsl.w	r3, r2, r3
 8002554:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800255c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	43db      	mvns	r3, r3
 8002562:	6939      	ldr	r1, [r7, #16]
 8002564:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002568:	4013      	ands	r3, r2
 800256a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3720      	adds	r7, #32
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
	...

08002578 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b088      	sub	sp, #32
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	333c      	adds	r3, #60	; 0x3c
 8002590:	3304      	adds	r3, #4
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	015a      	lsls	r2, r3, #5
 800259a:	69bb      	ldr	r3, [r7, #24]
 800259c:	4413      	add	r3, r2
 800259e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d17b      	bne.n	80026a6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	f003 0308 	and.w	r3, r3, #8
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d015      	beq.n	80025e4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	4a61      	ldr	r2, [pc, #388]	; (8002740 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	f240 80b9 	bls.w	8002734 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	f000 80b3 	beq.w	8002734 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	015a      	lsls	r2, r3, #5
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	4413      	add	r3, r2
 80025d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025da:	461a      	mov	r2, r3
 80025dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025e0:	6093      	str	r3, [r2, #8]
 80025e2:	e0a7      	b.n	8002734 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	f003 0320 	and.w	r3, r3, #32
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d009      	beq.n	8002602 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	015a      	lsls	r2, r3, #5
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	4413      	add	r3, r2
 80025f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025fa:	461a      	mov	r2, r3
 80025fc:	2320      	movs	r3, #32
 80025fe:	6093      	str	r3, [r2, #8]
 8002600:	e098      	b.n	8002734 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002608:	2b00      	cmp	r3, #0
 800260a:	f040 8093 	bne.w	8002734 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	4a4b      	ldr	r2, [pc, #300]	; (8002740 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d90f      	bls.n	8002636 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800261c:	2b00      	cmp	r3, #0
 800261e:	d00a      	beq.n	8002636 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	015a      	lsls	r2, r3, #5
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	4413      	add	r3, r2
 8002628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800262c:	461a      	mov	r2, r3
 800262e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002632:	6093      	str	r3, [r2, #8]
 8002634:	e07e      	b.n	8002734 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002636:	683a      	ldr	r2, [r7, #0]
 8002638:	4613      	mov	r3, r2
 800263a:	00db      	lsls	r3, r3, #3
 800263c:	4413      	add	r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	4413      	add	r3, r2
 8002648:	3304      	adds	r3, #4
 800264a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	69da      	ldr	r2, [r3, #28]
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	0159      	lsls	r1, r3, #5
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	440b      	add	r3, r1
 8002658:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002662:	1ad2      	subs	r2, r2, r3
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d114      	bne.n	8002698 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	699b      	ldr	r3, [r3, #24]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d109      	bne.n	800268a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6818      	ldr	r0, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002680:	461a      	mov	r2, r3
 8002682:	2101      	movs	r1, #1
 8002684:	f005 f98c 	bl	80079a0 <USB_EP0_OutStart>
 8002688:	e006      	b.n	8002698 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	691a      	ldr	r2, [r3, #16]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6a1b      	ldr	r3, [r3, #32]
 8002692:	441a      	add	r2, r3
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	b2db      	uxtb	r3, r3
 800269c:	4619      	mov	r1, r3
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f007 fd1c 	bl	800a0dc <HAL_PCD_DataOutStageCallback>
 80026a4:	e046      	b.n	8002734 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	4a26      	ldr	r2, [pc, #152]	; (8002744 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d124      	bne.n	80026f8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d00a      	beq.n	80026ce <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	015a      	lsls	r2, r3, #5
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	4413      	add	r3, r2
 80026c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026c4:	461a      	mov	r2, r3
 80026c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026ca:	6093      	str	r3, [r2, #8]
 80026cc:	e032      	b.n	8002734 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	f003 0320 	and.w	r3, r3, #32
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d008      	beq.n	80026ea <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	015a      	lsls	r2, r3, #5
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	4413      	add	r3, r2
 80026e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026e4:	461a      	mov	r2, r3
 80026e6:	2320      	movs	r3, #32
 80026e8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	4619      	mov	r1, r3
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f007 fcf3 	bl	800a0dc <HAL_PCD_DataOutStageCallback>
 80026f6:	e01d      	b.n	8002734 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d114      	bne.n	8002728 <PCD_EP_OutXfrComplete_int+0x1b0>
 80026fe:	6879      	ldr	r1, [r7, #4]
 8002700:	683a      	ldr	r2, [r7, #0]
 8002702:	4613      	mov	r3, r2
 8002704:	00db      	lsls	r3, r3, #3
 8002706:	4413      	add	r3, r2
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	440b      	add	r3, r1
 800270c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d108      	bne.n	8002728 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6818      	ldr	r0, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002720:	461a      	mov	r2, r3
 8002722:	2100      	movs	r1, #0
 8002724:	f005 f93c 	bl	80079a0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	b2db      	uxtb	r3, r3
 800272c:	4619      	mov	r1, r3
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f007 fcd4 	bl	800a0dc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002734:	2300      	movs	r3, #0
}
 8002736:	4618      	mov	r0, r3
 8002738:	3720      	adds	r7, #32
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	4f54300a 	.word	0x4f54300a
 8002744:	4f54310a 	.word	0x4f54310a

08002748 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b086      	sub	sp, #24
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	333c      	adds	r3, #60	; 0x3c
 8002760:	3304      	adds	r3, #4
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	015a      	lsls	r2, r3, #5
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	4413      	add	r3, r2
 800276e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	4a15      	ldr	r2, [pc, #84]	; (80027d0 <PCD_EP_OutSetupPacket_int+0x88>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d90e      	bls.n	800279c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002784:	2b00      	cmp	r3, #0
 8002786:	d009      	beq.n	800279c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	015a      	lsls	r2, r3, #5
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	4413      	add	r3, r2
 8002790:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002794:	461a      	mov	r2, r3
 8002796:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800279a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f007 fc8b 	bl	800a0b8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	4a0a      	ldr	r2, [pc, #40]	; (80027d0 <PCD_EP_OutSetupPacket_int+0x88>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d90c      	bls.n	80027c4 <PCD_EP_OutSetupPacket_int+0x7c>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	691b      	ldr	r3, [r3, #16]
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d108      	bne.n	80027c4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6818      	ldr	r0, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80027bc:	461a      	mov	r2, r3
 80027be:	2101      	movs	r1, #1
 80027c0:	f005 f8ee 	bl	80079a0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80027c4:	2300      	movs	r3, #0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3718      	adds	r7, #24
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	4f54300a 	.word	0x4f54300a

080027d4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b085      	sub	sp, #20
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	460b      	mov	r3, r1
 80027de:	70fb      	strb	r3, [r7, #3]
 80027e0:	4613      	mov	r3, r2
 80027e2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ea:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80027ec:	78fb      	ldrb	r3, [r7, #3]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d107      	bne.n	8002802 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80027f2:	883b      	ldrh	r3, [r7, #0]
 80027f4:	0419      	lsls	r1, r3, #16
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	68ba      	ldr	r2, [r7, #8]
 80027fc:	430a      	orrs	r2, r1
 80027fe:	629a      	str	r2, [r3, #40]	; 0x28
 8002800:	e028      	b.n	8002854 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002808:	0c1b      	lsrs	r3, r3, #16
 800280a:	68ba      	ldr	r2, [r7, #8]
 800280c:	4413      	add	r3, r2
 800280e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002810:	2300      	movs	r3, #0
 8002812:	73fb      	strb	r3, [r7, #15]
 8002814:	e00d      	b.n	8002832 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	7bfb      	ldrb	r3, [r7, #15]
 800281c:	3340      	adds	r3, #64	; 0x40
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	4413      	add	r3, r2
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	0c1b      	lsrs	r3, r3, #16
 8002826:	68ba      	ldr	r2, [r7, #8]
 8002828:	4413      	add	r3, r2
 800282a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800282c:	7bfb      	ldrb	r3, [r7, #15]
 800282e:	3301      	adds	r3, #1
 8002830:	73fb      	strb	r3, [r7, #15]
 8002832:	7bfa      	ldrb	r2, [r7, #15]
 8002834:	78fb      	ldrb	r3, [r7, #3]
 8002836:	3b01      	subs	r3, #1
 8002838:	429a      	cmp	r2, r3
 800283a:	d3ec      	bcc.n	8002816 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800283c:	883b      	ldrh	r3, [r7, #0]
 800283e:	0418      	lsls	r0, r3, #16
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6819      	ldr	r1, [r3, #0]
 8002844:	78fb      	ldrb	r3, [r7, #3]
 8002846:	3b01      	subs	r3, #1
 8002848:	68ba      	ldr	r2, [r7, #8]
 800284a:	4302      	orrs	r2, r0
 800284c:	3340      	adds	r3, #64	; 0x40
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	440b      	add	r3, r1
 8002852:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002854:	2300      	movs	r3, #0
}
 8002856:	4618      	mov	r0, r3
 8002858:	3714      	adds	r7, #20
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr

08002862 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002862:	b480      	push	{r7}
 8002864:	b083      	sub	sp, #12
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
 800286a:	460b      	mov	r3, r1
 800286c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	887a      	ldrh	r2, [r7, #2]
 8002874:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002876:	2300      	movs	r3, #0
}
 8002878:	4618      	mov	r0, r3
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002884:	b480      	push	{r7}
 8002886:	b085      	sub	sp, #20
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2201      	movs	r2, #1
 8002896:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	699b      	ldr	r3, [r3, #24]
 80028a6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80028b2:	4b05      	ldr	r3, [pc, #20]	; (80028c8 <HAL_PCDEx_ActivateLPM+0x44>)
 80028b4:	4313      	orrs	r3, r2
 80028b6:	68fa      	ldr	r2, [r7, #12]
 80028b8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80028ba:	2300      	movs	r3, #0
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3714      	adds	r7, #20
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr
 80028c8:	10000003 	.word	0x10000003

080028cc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	460b      	mov	r3, r1
 80028d6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80028d8:	bf00      	nop
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80028ec:	4b29      	ldr	r3, [pc, #164]	; (8002994 <HAL_PWREx_ConfigSupply+0xb0>)
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	f003 0307 	and.w	r3, r3, #7
 80028f4:	2b06      	cmp	r3, #6
 80028f6:	d00a      	beq.n	800290e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80028f8:	4b26      	ldr	r3, [pc, #152]	; (8002994 <HAL_PWREx_ConfigSupply+0xb0>)
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	429a      	cmp	r2, r3
 8002904:	d001      	beq.n	800290a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e040      	b.n	800298c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800290a:	2300      	movs	r3, #0
 800290c:	e03e      	b.n	800298c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800290e:	4b21      	ldr	r3, [pc, #132]	; (8002994 <HAL_PWREx_ConfigSupply+0xb0>)
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002916:	491f      	ldr	r1, [pc, #124]	; (8002994 <HAL_PWREx_ConfigSupply+0xb0>)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4313      	orrs	r3, r2
 800291c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800291e:	f7fe f9e1 	bl	8000ce4 <HAL_GetTick>
 8002922:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002924:	e009      	b.n	800293a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002926:	f7fe f9dd 	bl	8000ce4 <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002934:	d901      	bls.n	800293a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e028      	b.n	800298c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800293a:	4b16      	ldr	r3, [pc, #88]	; (8002994 <HAL_PWREx_ConfigSupply+0xb0>)
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002942:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002946:	d1ee      	bne.n	8002926 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2b1e      	cmp	r3, #30
 800294c:	d008      	beq.n	8002960 <HAL_PWREx_ConfigSupply+0x7c>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2b2e      	cmp	r3, #46	; 0x2e
 8002952:	d005      	beq.n	8002960 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2b1d      	cmp	r3, #29
 8002958:	d002      	beq.n	8002960 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2b2d      	cmp	r3, #45	; 0x2d
 800295e:	d114      	bne.n	800298a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002960:	f7fe f9c0 	bl	8000ce4 <HAL_GetTick>
 8002964:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002966:	e009      	b.n	800297c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002968:	f7fe f9bc 	bl	8000ce4 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002976:	d901      	bls.n	800297c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e007      	b.n	800298c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800297c:	4b05      	ldr	r3, [pc, #20]	; (8002994 <HAL_PWREx_ConfigSupply+0xb0>)
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002984:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002988:	d1ee      	bne.n	8002968 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800298a:	2300      	movs	r3, #0
}
 800298c:	4618      	mov	r0, r3
 800298e:	3710      	adds	r7, #16
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	58024800 	.word	0x58024800

08002998 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800299c:	4b05      	ldr	r3, [pc, #20]	; (80029b4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	4a04      	ldr	r2, [pc, #16]	; (80029b4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80029a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029a6:	60d3      	str	r3, [r2, #12]
}
 80029a8:	bf00      	nop
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	58024800 	.word	0x58024800

080029b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b08c      	sub	sp, #48	; 0x30
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d102      	bne.n	80029cc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	f000 bc1d 	b.w	8003206 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0301 	and.w	r3, r3, #1
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	f000 8087 	beq.w	8002ae8 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029da:	4b99      	ldr	r3, [pc, #612]	; (8002c40 <HAL_RCC_OscConfig+0x288>)
 80029dc:	691b      	ldr	r3, [r3, #16]
 80029de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80029e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80029e4:	4b96      	ldr	r3, [pc, #600]	; (8002c40 <HAL_RCC_OscConfig+0x288>)
 80029e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80029ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ec:	2b10      	cmp	r3, #16
 80029ee:	d007      	beq.n	8002a00 <HAL_RCC_OscConfig+0x48>
 80029f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029f2:	2b18      	cmp	r3, #24
 80029f4:	d110      	bne.n	8002a18 <HAL_RCC_OscConfig+0x60>
 80029f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029f8:	f003 0303 	and.w	r3, r3, #3
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d10b      	bne.n	8002a18 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a00:	4b8f      	ldr	r3, [pc, #572]	; (8002c40 <HAL_RCC_OscConfig+0x288>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d06c      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x12e>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d168      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e3f6      	b.n	8003206 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a20:	d106      	bne.n	8002a30 <HAL_RCC_OscConfig+0x78>
 8002a22:	4b87      	ldr	r3, [pc, #540]	; (8002c40 <HAL_RCC_OscConfig+0x288>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a86      	ldr	r2, [pc, #536]	; (8002c40 <HAL_RCC_OscConfig+0x288>)
 8002a28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a2c:	6013      	str	r3, [r2, #0]
 8002a2e:	e02e      	b.n	8002a8e <HAL_RCC_OscConfig+0xd6>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d10c      	bne.n	8002a52 <HAL_RCC_OscConfig+0x9a>
 8002a38:	4b81      	ldr	r3, [pc, #516]	; (8002c40 <HAL_RCC_OscConfig+0x288>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a80      	ldr	r2, [pc, #512]	; (8002c40 <HAL_RCC_OscConfig+0x288>)
 8002a3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a42:	6013      	str	r3, [r2, #0]
 8002a44:	4b7e      	ldr	r3, [pc, #504]	; (8002c40 <HAL_RCC_OscConfig+0x288>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a7d      	ldr	r2, [pc, #500]	; (8002c40 <HAL_RCC_OscConfig+0x288>)
 8002a4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a4e:	6013      	str	r3, [r2, #0]
 8002a50:	e01d      	b.n	8002a8e <HAL_RCC_OscConfig+0xd6>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a5a:	d10c      	bne.n	8002a76 <HAL_RCC_OscConfig+0xbe>
 8002a5c:	4b78      	ldr	r3, [pc, #480]	; (8002c40 <HAL_RCC_OscConfig+0x288>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a77      	ldr	r2, [pc, #476]	; (8002c40 <HAL_RCC_OscConfig+0x288>)
 8002a62:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a66:	6013      	str	r3, [r2, #0]
 8002a68:	4b75      	ldr	r3, [pc, #468]	; (8002c40 <HAL_RCC_OscConfig+0x288>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a74      	ldr	r2, [pc, #464]	; (8002c40 <HAL_RCC_OscConfig+0x288>)
 8002a6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a72:	6013      	str	r3, [r2, #0]
 8002a74:	e00b      	b.n	8002a8e <HAL_RCC_OscConfig+0xd6>
 8002a76:	4b72      	ldr	r3, [pc, #456]	; (8002c40 <HAL_RCC_OscConfig+0x288>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a71      	ldr	r2, [pc, #452]	; (8002c40 <HAL_RCC_OscConfig+0x288>)
 8002a7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a80:	6013      	str	r3, [r2, #0]
 8002a82:	4b6f      	ldr	r3, [pc, #444]	; (8002c40 <HAL_RCC_OscConfig+0x288>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a6e      	ldr	r2, [pc, #440]	; (8002c40 <HAL_RCC_OscConfig+0x288>)
 8002a88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a8c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d013      	beq.n	8002abe <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a96:	f7fe f925 	bl	8000ce4 <HAL_GetTick>
 8002a9a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a9c:	e008      	b.n	8002ab0 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a9e:	f7fe f921 	bl	8000ce4 <HAL_GetTick>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	2b64      	cmp	r3, #100	; 0x64
 8002aaa:	d901      	bls.n	8002ab0 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002aac:	2303      	movs	r3, #3
 8002aae:	e3aa      	b.n	8003206 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ab0:	4b63      	ldr	r3, [pc, #396]	; (8002c40 <HAL_RCC_OscConfig+0x288>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d0f0      	beq.n	8002a9e <HAL_RCC_OscConfig+0xe6>
 8002abc:	e014      	b.n	8002ae8 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002abe:	f7fe f911 	bl	8000ce4 <HAL_GetTick>
 8002ac2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002ac4:	e008      	b.n	8002ad8 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ac6:	f7fe f90d 	bl	8000ce4 <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	2b64      	cmp	r3, #100	; 0x64
 8002ad2:	d901      	bls.n	8002ad8 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e396      	b.n	8003206 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002ad8:	4b59      	ldr	r3, [pc, #356]	; (8002c40 <HAL_RCC_OscConfig+0x288>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d1f0      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x10e>
 8002ae4:	e000      	b.n	8002ae8 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ae6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0302 	and.w	r3, r3, #2
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	f000 80cb 	beq.w	8002c8c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002af6:	4b52      	ldr	r3, [pc, #328]	; (8002c40 <HAL_RCC_OscConfig+0x288>)
 8002af8:	691b      	ldr	r3, [r3, #16]
 8002afa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002afe:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002b00:	4b4f      	ldr	r3, [pc, #316]	; (8002c40 <HAL_RCC_OscConfig+0x288>)
 8002b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b04:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002b06:	6a3b      	ldr	r3, [r7, #32]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d007      	beq.n	8002b1c <HAL_RCC_OscConfig+0x164>
 8002b0c:	6a3b      	ldr	r3, [r7, #32]
 8002b0e:	2b18      	cmp	r3, #24
 8002b10:	d156      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x208>
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	f003 0303 	and.w	r3, r3, #3
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d151      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b1c:	4b48      	ldr	r3, [pc, #288]	; (8002c40 <HAL_RCC_OscConfig+0x288>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0304 	and.w	r3, r3, #4
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d005      	beq.n	8002b34 <HAL_RCC_OscConfig+0x17c>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d101      	bne.n	8002b34 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e368      	b.n	8003206 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002b34:	4b42      	ldr	r3, [pc, #264]	; (8002c40 <HAL_RCC_OscConfig+0x288>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f023 0219 	bic.w	r2, r3, #25
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	493f      	ldr	r1, [pc, #252]	; (8002c40 <HAL_RCC_OscConfig+0x288>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b46:	f7fe f8cd 	bl	8000ce4 <HAL_GetTick>
 8002b4a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b4c:	e008      	b.n	8002b60 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b4e:	f7fe f8c9 	bl	8000ce4 <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d901      	bls.n	8002b60 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e352      	b.n	8003206 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b60:	4b37      	ldr	r3, [pc, #220]	; (8002c40 <HAL_RCC_OscConfig+0x288>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0304 	and.w	r3, r3, #4
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d0f0      	beq.n	8002b4e <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b6c:	f7fe f8ea 	bl	8000d44 <HAL_GetREVID>
 8002b70:	4603      	mov	r3, r0
 8002b72:	f241 0203 	movw	r2, #4099	; 0x1003
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d817      	bhi.n	8002baa <HAL_RCC_OscConfig+0x1f2>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	2b40      	cmp	r3, #64	; 0x40
 8002b80:	d108      	bne.n	8002b94 <HAL_RCC_OscConfig+0x1dc>
 8002b82:	4b2f      	ldr	r3, [pc, #188]	; (8002c40 <HAL_RCC_OscConfig+0x288>)
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002b8a:	4a2d      	ldr	r2, [pc, #180]	; (8002c40 <HAL_RCC_OscConfig+0x288>)
 8002b8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b90:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b92:	e07b      	b.n	8002c8c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b94:	4b2a      	ldr	r3, [pc, #168]	; (8002c40 <HAL_RCC_OscConfig+0x288>)
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	691b      	ldr	r3, [r3, #16]
 8002ba0:	031b      	lsls	r3, r3, #12
 8002ba2:	4927      	ldr	r1, [pc, #156]	; (8002c40 <HAL_RCC_OscConfig+0x288>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ba8:	e070      	b.n	8002c8c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002baa:	4b25      	ldr	r3, [pc, #148]	; (8002c40 <HAL_RCC_OscConfig+0x288>)
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	061b      	lsls	r3, r3, #24
 8002bb8:	4921      	ldr	r1, [pc, #132]	; (8002c40 <HAL_RCC_OscConfig+0x288>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bbe:	e065      	b.n	8002c8c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d048      	beq.n	8002c5a <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002bc8:	4b1d      	ldr	r3, [pc, #116]	; (8002c40 <HAL_RCC_OscConfig+0x288>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f023 0219 	bic.w	r2, r3, #25
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	491a      	ldr	r1, [pc, #104]	; (8002c40 <HAL_RCC_OscConfig+0x288>)
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bda:	f7fe f883 	bl	8000ce4 <HAL_GetTick>
 8002bde:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002be0:	e008      	b.n	8002bf4 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002be2:	f7fe f87f 	bl	8000ce4 <HAL_GetTick>
 8002be6:	4602      	mov	r2, r0
 8002be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d901      	bls.n	8002bf4 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	e308      	b.n	8003206 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002bf4:	4b12      	ldr	r3, [pc, #72]	; (8002c40 <HAL_RCC_OscConfig+0x288>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0304 	and.w	r3, r3, #4
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d0f0      	beq.n	8002be2 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c00:	f7fe f8a0 	bl	8000d44 <HAL_GetREVID>
 8002c04:	4603      	mov	r3, r0
 8002c06:	f241 0203 	movw	r2, #4099	; 0x1003
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d81a      	bhi.n	8002c44 <HAL_RCC_OscConfig+0x28c>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	691b      	ldr	r3, [r3, #16]
 8002c12:	2b40      	cmp	r3, #64	; 0x40
 8002c14:	d108      	bne.n	8002c28 <HAL_RCC_OscConfig+0x270>
 8002c16:	4b0a      	ldr	r3, [pc, #40]	; (8002c40 <HAL_RCC_OscConfig+0x288>)
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002c1e:	4a08      	ldr	r2, [pc, #32]	; (8002c40 <HAL_RCC_OscConfig+0x288>)
 8002c20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c24:	6053      	str	r3, [r2, #4]
 8002c26:	e031      	b.n	8002c8c <HAL_RCC_OscConfig+0x2d4>
 8002c28:	4b05      	ldr	r3, [pc, #20]	; (8002c40 <HAL_RCC_OscConfig+0x288>)
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	691b      	ldr	r3, [r3, #16]
 8002c34:	031b      	lsls	r3, r3, #12
 8002c36:	4902      	ldr	r1, [pc, #8]	; (8002c40 <HAL_RCC_OscConfig+0x288>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	604b      	str	r3, [r1, #4]
 8002c3c:	e026      	b.n	8002c8c <HAL_RCC_OscConfig+0x2d4>
 8002c3e:	bf00      	nop
 8002c40:	58024400 	.word	0x58024400
 8002c44:	4b9a      	ldr	r3, [pc, #616]	; (8002eb0 <HAL_RCC_OscConfig+0x4f8>)
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	691b      	ldr	r3, [r3, #16]
 8002c50:	061b      	lsls	r3, r3, #24
 8002c52:	4997      	ldr	r1, [pc, #604]	; (8002eb0 <HAL_RCC_OscConfig+0x4f8>)
 8002c54:	4313      	orrs	r3, r2
 8002c56:	604b      	str	r3, [r1, #4]
 8002c58:	e018      	b.n	8002c8c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c5a:	4b95      	ldr	r3, [pc, #596]	; (8002eb0 <HAL_RCC_OscConfig+0x4f8>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a94      	ldr	r2, [pc, #592]	; (8002eb0 <HAL_RCC_OscConfig+0x4f8>)
 8002c60:	f023 0301 	bic.w	r3, r3, #1
 8002c64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c66:	f7fe f83d 	bl	8000ce4 <HAL_GetTick>
 8002c6a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002c6c:	e008      	b.n	8002c80 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c6e:	f7fe f839 	bl	8000ce4 <HAL_GetTick>
 8002c72:	4602      	mov	r2, r0
 8002c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d901      	bls.n	8002c80 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e2c2      	b.n	8003206 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002c80:	4b8b      	ldr	r3, [pc, #556]	; (8002eb0 <HAL_RCC_OscConfig+0x4f8>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0304 	and.w	r3, r3, #4
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d1f0      	bne.n	8002c6e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0310 	and.w	r3, r3, #16
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	f000 80a9 	beq.w	8002dec <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c9a:	4b85      	ldr	r3, [pc, #532]	; (8002eb0 <HAL_RCC_OscConfig+0x4f8>)
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ca2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002ca4:	4b82      	ldr	r3, [pc, #520]	; (8002eb0 <HAL_RCC_OscConfig+0x4f8>)
 8002ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	2b08      	cmp	r3, #8
 8002cae:	d007      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x308>
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	2b18      	cmp	r3, #24
 8002cb4:	d13a      	bne.n	8002d2c <HAL_RCC_OscConfig+0x374>
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	f003 0303 	and.w	r3, r3, #3
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d135      	bne.n	8002d2c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002cc0:	4b7b      	ldr	r3, [pc, #492]	; (8002eb0 <HAL_RCC_OscConfig+0x4f8>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d005      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x320>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	69db      	ldr	r3, [r3, #28]
 8002cd0:	2b80      	cmp	r3, #128	; 0x80
 8002cd2:	d001      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e296      	b.n	8003206 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002cd8:	f7fe f834 	bl	8000d44 <HAL_GetREVID>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	f241 0203 	movw	r2, #4099	; 0x1003
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d817      	bhi.n	8002d16 <HAL_RCC_OscConfig+0x35e>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a1b      	ldr	r3, [r3, #32]
 8002cea:	2b20      	cmp	r3, #32
 8002cec:	d108      	bne.n	8002d00 <HAL_RCC_OscConfig+0x348>
 8002cee:	4b70      	ldr	r3, [pc, #448]	; (8002eb0 <HAL_RCC_OscConfig+0x4f8>)
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002cf6:	4a6e      	ldr	r2, [pc, #440]	; (8002eb0 <HAL_RCC_OscConfig+0x4f8>)
 8002cf8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002cfc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002cfe:	e075      	b.n	8002dec <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002d00:	4b6b      	ldr	r3, [pc, #428]	; (8002eb0 <HAL_RCC_OscConfig+0x4f8>)
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6a1b      	ldr	r3, [r3, #32]
 8002d0c:	069b      	lsls	r3, r3, #26
 8002d0e:	4968      	ldr	r1, [pc, #416]	; (8002eb0 <HAL_RCC_OscConfig+0x4f8>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002d14:	e06a      	b.n	8002dec <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002d16:	4b66      	ldr	r3, [pc, #408]	; (8002eb0 <HAL_RCC_OscConfig+0x4f8>)
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a1b      	ldr	r3, [r3, #32]
 8002d22:	061b      	lsls	r3, r3, #24
 8002d24:	4962      	ldr	r1, [pc, #392]	; (8002eb0 <HAL_RCC_OscConfig+0x4f8>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002d2a:	e05f      	b.n	8002dec <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	69db      	ldr	r3, [r3, #28]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d042      	beq.n	8002dba <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002d34:	4b5e      	ldr	r3, [pc, #376]	; (8002eb0 <HAL_RCC_OscConfig+0x4f8>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a5d      	ldr	r2, [pc, #372]	; (8002eb0 <HAL_RCC_OscConfig+0x4f8>)
 8002d3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d40:	f7fd ffd0 	bl	8000ce4 <HAL_GetTick>
 8002d44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002d46:	e008      	b.n	8002d5a <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002d48:	f7fd ffcc 	bl	8000ce4 <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d901      	bls.n	8002d5a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e255      	b.n	8003206 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002d5a:	4b55      	ldr	r3, [pc, #340]	; (8002eb0 <HAL_RCC_OscConfig+0x4f8>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d0f0      	beq.n	8002d48 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002d66:	f7fd ffed 	bl	8000d44 <HAL_GetREVID>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	f241 0203 	movw	r2, #4099	; 0x1003
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d817      	bhi.n	8002da4 <HAL_RCC_OscConfig+0x3ec>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a1b      	ldr	r3, [r3, #32]
 8002d78:	2b20      	cmp	r3, #32
 8002d7a:	d108      	bne.n	8002d8e <HAL_RCC_OscConfig+0x3d6>
 8002d7c:	4b4c      	ldr	r3, [pc, #304]	; (8002eb0 <HAL_RCC_OscConfig+0x4f8>)
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002d84:	4a4a      	ldr	r2, [pc, #296]	; (8002eb0 <HAL_RCC_OscConfig+0x4f8>)
 8002d86:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002d8a:	6053      	str	r3, [r2, #4]
 8002d8c:	e02e      	b.n	8002dec <HAL_RCC_OscConfig+0x434>
 8002d8e:	4b48      	ldr	r3, [pc, #288]	; (8002eb0 <HAL_RCC_OscConfig+0x4f8>)
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a1b      	ldr	r3, [r3, #32]
 8002d9a:	069b      	lsls	r3, r3, #26
 8002d9c:	4944      	ldr	r1, [pc, #272]	; (8002eb0 <HAL_RCC_OscConfig+0x4f8>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	604b      	str	r3, [r1, #4]
 8002da2:	e023      	b.n	8002dec <HAL_RCC_OscConfig+0x434>
 8002da4:	4b42      	ldr	r3, [pc, #264]	; (8002eb0 <HAL_RCC_OscConfig+0x4f8>)
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a1b      	ldr	r3, [r3, #32]
 8002db0:	061b      	lsls	r3, r3, #24
 8002db2:	493f      	ldr	r1, [pc, #252]	; (8002eb0 <HAL_RCC_OscConfig+0x4f8>)
 8002db4:	4313      	orrs	r3, r2
 8002db6:	60cb      	str	r3, [r1, #12]
 8002db8:	e018      	b.n	8002dec <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002dba:	4b3d      	ldr	r3, [pc, #244]	; (8002eb0 <HAL_RCC_OscConfig+0x4f8>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a3c      	ldr	r2, [pc, #240]	; (8002eb0 <HAL_RCC_OscConfig+0x4f8>)
 8002dc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002dc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc6:	f7fd ff8d 	bl	8000ce4 <HAL_GetTick>
 8002dca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002dcc:	e008      	b.n	8002de0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002dce:	f7fd ff89 	bl	8000ce4 <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d901      	bls.n	8002de0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	e212      	b.n	8003206 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002de0:	4b33      	ldr	r3, [pc, #204]	; (8002eb0 <HAL_RCC_OscConfig+0x4f8>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d1f0      	bne.n	8002dce <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0308 	and.w	r3, r3, #8
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d036      	beq.n	8002e66 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	695b      	ldr	r3, [r3, #20]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d019      	beq.n	8002e34 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e00:	4b2b      	ldr	r3, [pc, #172]	; (8002eb0 <HAL_RCC_OscConfig+0x4f8>)
 8002e02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e04:	4a2a      	ldr	r2, [pc, #168]	; (8002eb0 <HAL_RCC_OscConfig+0x4f8>)
 8002e06:	f043 0301 	orr.w	r3, r3, #1
 8002e0a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e0c:	f7fd ff6a 	bl	8000ce4 <HAL_GetTick>
 8002e10:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002e12:	e008      	b.n	8002e26 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e14:	f7fd ff66 	bl	8000ce4 <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d901      	bls.n	8002e26 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e1ef      	b.n	8003206 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002e26:	4b22      	ldr	r3, [pc, #136]	; (8002eb0 <HAL_RCC_OscConfig+0x4f8>)
 8002e28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e2a:	f003 0302 	and.w	r3, r3, #2
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d0f0      	beq.n	8002e14 <HAL_RCC_OscConfig+0x45c>
 8002e32:	e018      	b.n	8002e66 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e34:	4b1e      	ldr	r3, [pc, #120]	; (8002eb0 <HAL_RCC_OscConfig+0x4f8>)
 8002e36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e38:	4a1d      	ldr	r2, [pc, #116]	; (8002eb0 <HAL_RCC_OscConfig+0x4f8>)
 8002e3a:	f023 0301 	bic.w	r3, r3, #1
 8002e3e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e40:	f7fd ff50 	bl	8000ce4 <HAL_GetTick>
 8002e44:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002e46:	e008      	b.n	8002e5a <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e48:	f7fd ff4c 	bl	8000ce4 <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d901      	bls.n	8002e5a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e1d5      	b.n	8003206 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002e5a:	4b15      	ldr	r3, [pc, #84]	; (8002eb0 <HAL_RCC_OscConfig+0x4f8>)
 8002e5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e5e:	f003 0302 	and.w	r3, r3, #2
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d1f0      	bne.n	8002e48 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0320 	and.w	r3, r3, #32
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d039      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	699b      	ldr	r3, [r3, #24]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d01c      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002e7a:	4b0d      	ldr	r3, [pc, #52]	; (8002eb0 <HAL_RCC_OscConfig+0x4f8>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a0c      	ldr	r2, [pc, #48]	; (8002eb0 <HAL_RCC_OscConfig+0x4f8>)
 8002e80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e84:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002e86:	f7fd ff2d 	bl	8000ce4 <HAL_GetTick>
 8002e8a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002e8c:	e008      	b.n	8002ea0 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002e8e:	f7fd ff29 	bl	8000ce4 <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d901      	bls.n	8002ea0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	e1b2      	b.n	8003206 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002ea0:	4b03      	ldr	r3, [pc, #12]	; (8002eb0 <HAL_RCC_OscConfig+0x4f8>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d0f0      	beq.n	8002e8e <HAL_RCC_OscConfig+0x4d6>
 8002eac:	e01b      	b.n	8002ee6 <HAL_RCC_OscConfig+0x52e>
 8002eae:	bf00      	nop
 8002eb0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002eb4:	4b9b      	ldr	r3, [pc, #620]	; (8003124 <HAL_RCC_OscConfig+0x76c>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a9a      	ldr	r2, [pc, #616]	; (8003124 <HAL_RCC_OscConfig+0x76c>)
 8002eba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ebe:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002ec0:	f7fd ff10 	bl	8000ce4 <HAL_GetTick>
 8002ec4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002ec6:	e008      	b.n	8002eda <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002ec8:	f7fd ff0c 	bl	8000ce4 <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d901      	bls.n	8002eda <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e195      	b.n	8003206 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002eda:	4b92      	ldr	r3, [pc, #584]	; (8003124 <HAL_RCC_OscConfig+0x76c>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d1f0      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0304 	and.w	r3, r3, #4
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	f000 8081 	beq.w	8002ff6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002ef4:	4b8c      	ldr	r3, [pc, #560]	; (8003128 <HAL_RCC_OscConfig+0x770>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a8b      	ldr	r2, [pc, #556]	; (8003128 <HAL_RCC_OscConfig+0x770>)
 8002efa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002efe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f00:	f7fd fef0 	bl	8000ce4 <HAL_GetTick>
 8002f04:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f06:	e008      	b.n	8002f1a <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002f08:	f7fd feec 	bl	8000ce4 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b64      	cmp	r3, #100	; 0x64
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e175      	b.n	8003206 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f1a:	4b83      	ldr	r3, [pc, #524]	; (8003128 <HAL_RCC_OscConfig+0x770>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d0f0      	beq.n	8002f08 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d106      	bne.n	8002f3c <HAL_RCC_OscConfig+0x584>
 8002f2e:	4b7d      	ldr	r3, [pc, #500]	; (8003124 <HAL_RCC_OscConfig+0x76c>)
 8002f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f32:	4a7c      	ldr	r2, [pc, #496]	; (8003124 <HAL_RCC_OscConfig+0x76c>)
 8002f34:	f043 0301 	orr.w	r3, r3, #1
 8002f38:	6713      	str	r3, [r2, #112]	; 0x70
 8002f3a:	e02d      	b.n	8002f98 <HAL_RCC_OscConfig+0x5e0>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d10c      	bne.n	8002f5e <HAL_RCC_OscConfig+0x5a6>
 8002f44:	4b77      	ldr	r3, [pc, #476]	; (8003124 <HAL_RCC_OscConfig+0x76c>)
 8002f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f48:	4a76      	ldr	r2, [pc, #472]	; (8003124 <HAL_RCC_OscConfig+0x76c>)
 8002f4a:	f023 0301 	bic.w	r3, r3, #1
 8002f4e:	6713      	str	r3, [r2, #112]	; 0x70
 8002f50:	4b74      	ldr	r3, [pc, #464]	; (8003124 <HAL_RCC_OscConfig+0x76c>)
 8002f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f54:	4a73      	ldr	r2, [pc, #460]	; (8003124 <HAL_RCC_OscConfig+0x76c>)
 8002f56:	f023 0304 	bic.w	r3, r3, #4
 8002f5a:	6713      	str	r3, [r2, #112]	; 0x70
 8002f5c:	e01c      	b.n	8002f98 <HAL_RCC_OscConfig+0x5e0>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	2b05      	cmp	r3, #5
 8002f64:	d10c      	bne.n	8002f80 <HAL_RCC_OscConfig+0x5c8>
 8002f66:	4b6f      	ldr	r3, [pc, #444]	; (8003124 <HAL_RCC_OscConfig+0x76c>)
 8002f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f6a:	4a6e      	ldr	r2, [pc, #440]	; (8003124 <HAL_RCC_OscConfig+0x76c>)
 8002f6c:	f043 0304 	orr.w	r3, r3, #4
 8002f70:	6713      	str	r3, [r2, #112]	; 0x70
 8002f72:	4b6c      	ldr	r3, [pc, #432]	; (8003124 <HAL_RCC_OscConfig+0x76c>)
 8002f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f76:	4a6b      	ldr	r2, [pc, #428]	; (8003124 <HAL_RCC_OscConfig+0x76c>)
 8002f78:	f043 0301 	orr.w	r3, r3, #1
 8002f7c:	6713      	str	r3, [r2, #112]	; 0x70
 8002f7e:	e00b      	b.n	8002f98 <HAL_RCC_OscConfig+0x5e0>
 8002f80:	4b68      	ldr	r3, [pc, #416]	; (8003124 <HAL_RCC_OscConfig+0x76c>)
 8002f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f84:	4a67      	ldr	r2, [pc, #412]	; (8003124 <HAL_RCC_OscConfig+0x76c>)
 8002f86:	f023 0301 	bic.w	r3, r3, #1
 8002f8a:	6713      	str	r3, [r2, #112]	; 0x70
 8002f8c:	4b65      	ldr	r3, [pc, #404]	; (8003124 <HAL_RCC_OscConfig+0x76c>)
 8002f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f90:	4a64      	ldr	r2, [pc, #400]	; (8003124 <HAL_RCC_OscConfig+0x76c>)
 8002f92:	f023 0304 	bic.w	r3, r3, #4
 8002f96:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d015      	beq.n	8002fcc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fa0:	f7fd fea0 	bl	8000ce4 <HAL_GetTick>
 8002fa4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002fa6:	e00a      	b.n	8002fbe <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fa8:	f7fd fe9c 	bl	8000ce4 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d901      	bls.n	8002fbe <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e123      	b.n	8003206 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002fbe:	4b59      	ldr	r3, [pc, #356]	; (8003124 <HAL_RCC_OscConfig+0x76c>)
 8002fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc2:	f003 0302 	and.w	r3, r3, #2
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d0ee      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x5f0>
 8002fca:	e014      	b.n	8002ff6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fcc:	f7fd fe8a 	bl	8000ce4 <HAL_GetTick>
 8002fd0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002fd2:	e00a      	b.n	8002fea <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fd4:	f7fd fe86 	bl	8000ce4 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d901      	bls.n	8002fea <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e10d      	b.n	8003206 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002fea:	4b4e      	ldr	r3, [pc, #312]	; (8003124 <HAL_RCC_OscConfig+0x76c>)
 8002fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fee:	f003 0302 	and.w	r3, r3, #2
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d1ee      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	f000 8102 	beq.w	8003204 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003000:	4b48      	ldr	r3, [pc, #288]	; (8003124 <HAL_RCC_OscConfig+0x76c>)
 8003002:	691b      	ldr	r3, [r3, #16]
 8003004:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003008:	2b18      	cmp	r3, #24
 800300a:	f000 80bd 	beq.w	8003188 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003012:	2b02      	cmp	r3, #2
 8003014:	f040 809e 	bne.w	8003154 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003018:	4b42      	ldr	r3, [pc, #264]	; (8003124 <HAL_RCC_OscConfig+0x76c>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a41      	ldr	r2, [pc, #260]	; (8003124 <HAL_RCC_OscConfig+0x76c>)
 800301e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003022:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003024:	f7fd fe5e 	bl	8000ce4 <HAL_GetTick>
 8003028:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800302a:	e008      	b.n	800303e <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800302c:	f7fd fe5a 	bl	8000ce4 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b02      	cmp	r3, #2
 8003038:	d901      	bls.n	800303e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e0e3      	b.n	8003206 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800303e:	4b39      	ldr	r3, [pc, #228]	; (8003124 <HAL_RCC_OscConfig+0x76c>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d1f0      	bne.n	800302c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800304a:	4b36      	ldr	r3, [pc, #216]	; (8003124 <HAL_RCC_OscConfig+0x76c>)
 800304c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800304e:	4b37      	ldr	r3, [pc, #220]	; (800312c <HAL_RCC_OscConfig+0x774>)
 8003050:	4013      	ands	r3, r2
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800305a:	0112      	lsls	r2, r2, #4
 800305c:	430a      	orrs	r2, r1
 800305e:	4931      	ldr	r1, [pc, #196]	; (8003124 <HAL_RCC_OscConfig+0x76c>)
 8003060:	4313      	orrs	r3, r2
 8003062:	628b      	str	r3, [r1, #40]	; 0x28
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003068:	3b01      	subs	r3, #1
 800306a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003072:	3b01      	subs	r3, #1
 8003074:	025b      	lsls	r3, r3, #9
 8003076:	b29b      	uxth	r3, r3
 8003078:	431a      	orrs	r2, r3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800307e:	3b01      	subs	r3, #1
 8003080:	041b      	lsls	r3, r3, #16
 8003082:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003086:	431a      	orrs	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800308c:	3b01      	subs	r3, #1
 800308e:	061b      	lsls	r3, r3, #24
 8003090:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003094:	4923      	ldr	r1, [pc, #140]	; (8003124 <HAL_RCC_OscConfig+0x76c>)
 8003096:	4313      	orrs	r3, r2
 8003098:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800309a:	4b22      	ldr	r3, [pc, #136]	; (8003124 <HAL_RCC_OscConfig+0x76c>)
 800309c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800309e:	4a21      	ldr	r2, [pc, #132]	; (8003124 <HAL_RCC_OscConfig+0x76c>)
 80030a0:	f023 0301 	bic.w	r3, r3, #1
 80030a4:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80030a6:	4b1f      	ldr	r3, [pc, #124]	; (8003124 <HAL_RCC_OscConfig+0x76c>)
 80030a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030aa:	4b21      	ldr	r3, [pc, #132]	; (8003130 <HAL_RCC_OscConfig+0x778>)
 80030ac:	4013      	ands	r3, r2
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80030b2:	00d2      	lsls	r2, r2, #3
 80030b4:	491b      	ldr	r1, [pc, #108]	; (8003124 <HAL_RCC_OscConfig+0x76c>)
 80030b6:	4313      	orrs	r3, r2
 80030b8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80030ba:	4b1a      	ldr	r3, [pc, #104]	; (8003124 <HAL_RCC_OscConfig+0x76c>)
 80030bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030be:	f023 020c 	bic.w	r2, r3, #12
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c6:	4917      	ldr	r1, [pc, #92]	; (8003124 <HAL_RCC_OscConfig+0x76c>)
 80030c8:	4313      	orrs	r3, r2
 80030ca:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80030cc:	4b15      	ldr	r3, [pc, #84]	; (8003124 <HAL_RCC_OscConfig+0x76c>)
 80030ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d0:	f023 0202 	bic.w	r2, r3, #2
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030d8:	4912      	ldr	r1, [pc, #72]	; (8003124 <HAL_RCC_OscConfig+0x76c>)
 80030da:	4313      	orrs	r3, r2
 80030dc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80030de:	4b11      	ldr	r3, [pc, #68]	; (8003124 <HAL_RCC_OscConfig+0x76c>)
 80030e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e2:	4a10      	ldr	r2, [pc, #64]	; (8003124 <HAL_RCC_OscConfig+0x76c>)
 80030e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030e8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030ea:	4b0e      	ldr	r3, [pc, #56]	; (8003124 <HAL_RCC_OscConfig+0x76c>)
 80030ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ee:	4a0d      	ldr	r2, [pc, #52]	; (8003124 <HAL_RCC_OscConfig+0x76c>)
 80030f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030f4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80030f6:	4b0b      	ldr	r3, [pc, #44]	; (8003124 <HAL_RCC_OscConfig+0x76c>)
 80030f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030fa:	4a0a      	ldr	r2, [pc, #40]	; (8003124 <HAL_RCC_OscConfig+0x76c>)
 80030fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003100:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003102:	4b08      	ldr	r3, [pc, #32]	; (8003124 <HAL_RCC_OscConfig+0x76c>)
 8003104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003106:	4a07      	ldr	r2, [pc, #28]	; (8003124 <HAL_RCC_OscConfig+0x76c>)
 8003108:	f043 0301 	orr.w	r3, r3, #1
 800310c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800310e:	4b05      	ldr	r3, [pc, #20]	; (8003124 <HAL_RCC_OscConfig+0x76c>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a04      	ldr	r2, [pc, #16]	; (8003124 <HAL_RCC_OscConfig+0x76c>)
 8003114:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003118:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800311a:	f7fd fde3 	bl	8000ce4 <HAL_GetTick>
 800311e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003120:	e011      	b.n	8003146 <HAL_RCC_OscConfig+0x78e>
 8003122:	bf00      	nop
 8003124:	58024400 	.word	0x58024400
 8003128:	58024800 	.word	0x58024800
 800312c:	fffffc0c 	.word	0xfffffc0c
 8003130:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003134:	f7fd fdd6 	bl	8000ce4 <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	2b02      	cmp	r3, #2
 8003140:	d901      	bls.n	8003146 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e05f      	b.n	8003206 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003146:	4b32      	ldr	r3, [pc, #200]	; (8003210 <HAL_RCC_OscConfig+0x858>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d0f0      	beq.n	8003134 <HAL_RCC_OscConfig+0x77c>
 8003152:	e057      	b.n	8003204 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003154:	4b2e      	ldr	r3, [pc, #184]	; (8003210 <HAL_RCC_OscConfig+0x858>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a2d      	ldr	r2, [pc, #180]	; (8003210 <HAL_RCC_OscConfig+0x858>)
 800315a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800315e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003160:	f7fd fdc0 	bl	8000ce4 <HAL_GetTick>
 8003164:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003166:	e008      	b.n	800317a <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003168:	f7fd fdbc 	bl	8000ce4 <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	2b02      	cmp	r3, #2
 8003174:	d901      	bls.n	800317a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e045      	b.n	8003206 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800317a:	4b25      	ldr	r3, [pc, #148]	; (8003210 <HAL_RCC_OscConfig+0x858>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d1f0      	bne.n	8003168 <HAL_RCC_OscConfig+0x7b0>
 8003186:	e03d      	b.n	8003204 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003188:	4b21      	ldr	r3, [pc, #132]	; (8003210 <HAL_RCC_OscConfig+0x858>)
 800318a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800318c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800318e:	4b20      	ldr	r3, [pc, #128]	; (8003210 <HAL_RCC_OscConfig+0x858>)
 8003190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003192:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003198:	2b01      	cmp	r3, #1
 800319a:	d031      	beq.n	8003200 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	f003 0203 	and.w	r2, r3, #3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d12a      	bne.n	8003200 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	091b      	lsrs	r3, r3, #4
 80031ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d122      	bne.n	8003200 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d11a      	bne.n	8003200 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	0a5b      	lsrs	r3, r3, #9
 80031ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031d6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80031d8:	429a      	cmp	r2, r3
 80031da:	d111      	bne.n	8003200 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	0c1b      	lsrs	r3, r3, #16
 80031e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d108      	bne.n	8003200 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	0e1b      	lsrs	r3, r3, #24
 80031f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031fa:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d001      	beq.n	8003204 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e000      	b.n	8003206 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	3730      	adds	r7, #48	; 0x30
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	58024400 	.word	0x58024400

08003214 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b086      	sub	sp, #24
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d101      	bne.n	8003228 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e19c      	b.n	8003562 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003228:	4b8a      	ldr	r3, [pc, #552]	; (8003454 <HAL_RCC_ClockConfig+0x240>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 030f 	and.w	r3, r3, #15
 8003230:	683a      	ldr	r2, [r7, #0]
 8003232:	429a      	cmp	r2, r3
 8003234:	d910      	bls.n	8003258 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003236:	4b87      	ldr	r3, [pc, #540]	; (8003454 <HAL_RCC_ClockConfig+0x240>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f023 020f 	bic.w	r2, r3, #15
 800323e:	4985      	ldr	r1, [pc, #532]	; (8003454 <HAL_RCC_ClockConfig+0x240>)
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	4313      	orrs	r3, r2
 8003244:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003246:	4b83      	ldr	r3, [pc, #524]	; (8003454 <HAL_RCC_ClockConfig+0x240>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 030f 	and.w	r3, r3, #15
 800324e:	683a      	ldr	r2, [r7, #0]
 8003250:	429a      	cmp	r2, r3
 8003252:	d001      	beq.n	8003258 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e184      	b.n	8003562 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0304 	and.w	r3, r3, #4
 8003260:	2b00      	cmp	r3, #0
 8003262:	d010      	beq.n	8003286 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	691a      	ldr	r2, [r3, #16]
 8003268:	4b7b      	ldr	r3, [pc, #492]	; (8003458 <HAL_RCC_ClockConfig+0x244>)
 800326a:	699b      	ldr	r3, [r3, #24]
 800326c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003270:	429a      	cmp	r2, r3
 8003272:	d908      	bls.n	8003286 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003274:	4b78      	ldr	r3, [pc, #480]	; (8003458 <HAL_RCC_ClockConfig+0x244>)
 8003276:	699b      	ldr	r3, [r3, #24]
 8003278:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	691b      	ldr	r3, [r3, #16]
 8003280:	4975      	ldr	r1, [pc, #468]	; (8003458 <HAL_RCC_ClockConfig+0x244>)
 8003282:	4313      	orrs	r3, r2
 8003284:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0308 	and.w	r3, r3, #8
 800328e:	2b00      	cmp	r3, #0
 8003290:	d010      	beq.n	80032b4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	695a      	ldr	r2, [r3, #20]
 8003296:	4b70      	ldr	r3, [pc, #448]	; (8003458 <HAL_RCC_ClockConfig+0x244>)
 8003298:	69db      	ldr	r3, [r3, #28]
 800329a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800329e:	429a      	cmp	r2, r3
 80032a0:	d908      	bls.n	80032b4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80032a2:	4b6d      	ldr	r3, [pc, #436]	; (8003458 <HAL_RCC_ClockConfig+0x244>)
 80032a4:	69db      	ldr	r3, [r3, #28]
 80032a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	695b      	ldr	r3, [r3, #20]
 80032ae:	496a      	ldr	r1, [pc, #424]	; (8003458 <HAL_RCC_ClockConfig+0x244>)
 80032b0:	4313      	orrs	r3, r2
 80032b2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0310 	and.w	r3, r3, #16
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d010      	beq.n	80032e2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	699a      	ldr	r2, [r3, #24]
 80032c4:	4b64      	ldr	r3, [pc, #400]	; (8003458 <HAL_RCC_ClockConfig+0x244>)
 80032c6:	69db      	ldr	r3, [r3, #28]
 80032c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d908      	bls.n	80032e2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80032d0:	4b61      	ldr	r3, [pc, #388]	; (8003458 <HAL_RCC_ClockConfig+0x244>)
 80032d2:	69db      	ldr	r3, [r3, #28]
 80032d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	699b      	ldr	r3, [r3, #24]
 80032dc:	495e      	ldr	r1, [pc, #376]	; (8003458 <HAL_RCC_ClockConfig+0x244>)
 80032de:	4313      	orrs	r3, r2
 80032e0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0320 	and.w	r3, r3, #32
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d010      	beq.n	8003310 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	69da      	ldr	r2, [r3, #28]
 80032f2:	4b59      	ldr	r3, [pc, #356]	; (8003458 <HAL_RCC_ClockConfig+0x244>)
 80032f4:	6a1b      	ldr	r3, [r3, #32]
 80032f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d908      	bls.n	8003310 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80032fe:	4b56      	ldr	r3, [pc, #344]	; (8003458 <HAL_RCC_ClockConfig+0x244>)
 8003300:	6a1b      	ldr	r3, [r3, #32]
 8003302:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	69db      	ldr	r3, [r3, #28]
 800330a:	4953      	ldr	r1, [pc, #332]	; (8003458 <HAL_RCC_ClockConfig+0x244>)
 800330c:	4313      	orrs	r3, r2
 800330e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0302 	and.w	r3, r3, #2
 8003318:	2b00      	cmp	r3, #0
 800331a:	d010      	beq.n	800333e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	68da      	ldr	r2, [r3, #12]
 8003320:	4b4d      	ldr	r3, [pc, #308]	; (8003458 <HAL_RCC_ClockConfig+0x244>)
 8003322:	699b      	ldr	r3, [r3, #24]
 8003324:	f003 030f 	and.w	r3, r3, #15
 8003328:	429a      	cmp	r2, r3
 800332a:	d908      	bls.n	800333e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800332c:	4b4a      	ldr	r3, [pc, #296]	; (8003458 <HAL_RCC_ClockConfig+0x244>)
 800332e:	699b      	ldr	r3, [r3, #24]
 8003330:	f023 020f 	bic.w	r2, r3, #15
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	4947      	ldr	r1, [pc, #284]	; (8003458 <HAL_RCC_ClockConfig+0x244>)
 800333a:	4313      	orrs	r3, r2
 800333c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0301 	and.w	r3, r3, #1
 8003346:	2b00      	cmp	r3, #0
 8003348:	d055      	beq.n	80033f6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800334a:	4b43      	ldr	r3, [pc, #268]	; (8003458 <HAL_RCC_ClockConfig+0x244>)
 800334c:	699b      	ldr	r3, [r3, #24]
 800334e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	4940      	ldr	r1, [pc, #256]	; (8003458 <HAL_RCC_ClockConfig+0x244>)
 8003358:	4313      	orrs	r3, r2
 800335a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	2b02      	cmp	r3, #2
 8003362:	d107      	bne.n	8003374 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003364:	4b3c      	ldr	r3, [pc, #240]	; (8003458 <HAL_RCC_ClockConfig+0x244>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d121      	bne.n	80033b4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e0f6      	b.n	8003562 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	2b03      	cmp	r3, #3
 800337a:	d107      	bne.n	800338c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800337c:	4b36      	ldr	r3, [pc, #216]	; (8003458 <HAL_RCC_ClockConfig+0x244>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d115      	bne.n	80033b4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e0ea      	b.n	8003562 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	2b01      	cmp	r3, #1
 8003392:	d107      	bne.n	80033a4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003394:	4b30      	ldr	r3, [pc, #192]	; (8003458 <HAL_RCC_ClockConfig+0x244>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800339c:	2b00      	cmp	r3, #0
 800339e:	d109      	bne.n	80033b4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e0de      	b.n	8003562 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033a4:	4b2c      	ldr	r3, [pc, #176]	; (8003458 <HAL_RCC_ClockConfig+0x244>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0304 	and.w	r3, r3, #4
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d101      	bne.n	80033b4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e0d6      	b.n	8003562 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80033b4:	4b28      	ldr	r3, [pc, #160]	; (8003458 <HAL_RCC_ClockConfig+0x244>)
 80033b6:	691b      	ldr	r3, [r3, #16]
 80033b8:	f023 0207 	bic.w	r2, r3, #7
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	4925      	ldr	r1, [pc, #148]	; (8003458 <HAL_RCC_ClockConfig+0x244>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033c6:	f7fd fc8d 	bl	8000ce4 <HAL_GetTick>
 80033ca:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033cc:	e00a      	b.n	80033e4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033ce:	f7fd fc89 	bl	8000ce4 <HAL_GetTick>
 80033d2:	4602      	mov	r2, r0
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80033dc:	4293      	cmp	r3, r2
 80033de:	d901      	bls.n	80033e4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80033e0:	2303      	movs	r3, #3
 80033e2:	e0be      	b.n	8003562 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033e4:	4b1c      	ldr	r3, [pc, #112]	; (8003458 <HAL_RCC_ClockConfig+0x244>)
 80033e6:	691b      	ldr	r3, [r3, #16]
 80033e8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	00db      	lsls	r3, r3, #3
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d1eb      	bne.n	80033ce <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0302 	and.w	r3, r3, #2
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d010      	beq.n	8003424 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	68da      	ldr	r2, [r3, #12]
 8003406:	4b14      	ldr	r3, [pc, #80]	; (8003458 <HAL_RCC_ClockConfig+0x244>)
 8003408:	699b      	ldr	r3, [r3, #24]
 800340a:	f003 030f 	and.w	r3, r3, #15
 800340e:	429a      	cmp	r2, r3
 8003410:	d208      	bcs.n	8003424 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003412:	4b11      	ldr	r3, [pc, #68]	; (8003458 <HAL_RCC_ClockConfig+0x244>)
 8003414:	699b      	ldr	r3, [r3, #24]
 8003416:	f023 020f 	bic.w	r2, r3, #15
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	490e      	ldr	r1, [pc, #56]	; (8003458 <HAL_RCC_ClockConfig+0x244>)
 8003420:	4313      	orrs	r3, r2
 8003422:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003424:	4b0b      	ldr	r3, [pc, #44]	; (8003454 <HAL_RCC_ClockConfig+0x240>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 030f 	and.w	r3, r3, #15
 800342c:	683a      	ldr	r2, [r7, #0]
 800342e:	429a      	cmp	r2, r3
 8003430:	d214      	bcs.n	800345c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003432:	4b08      	ldr	r3, [pc, #32]	; (8003454 <HAL_RCC_ClockConfig+0x240>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f023 020f 	bic.w	r2, r3, #15
 800343a:	4906      	ldr	r1, [pc, #24]	; (8003454 <HAL_RCC_ClockConfig+0x240>)
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	4313      	orrs	r3, r2
 8003440:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003442:	4b04      	ldr	r3, [pc, #16]	; (8003454 <HAL_RCC_ClockConfig+0x240>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 030f 	and.w	r3, r3, #15
 800344a:	683a      	ldr	r2, [r7, #0]
 800344c:	429a      	cmp	r2, r3
 800344e:	d005      	beq.n	800345c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e086      	b.n	8003562 <HAL_RCC_ClockConfig+0x34e>
 8003454:	52002000 	.word	0x52002000
 8003458:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0304 	and.w	r3, r3, #4
 8003464:	2b00      	cmp	r3, #0
 8003466:	d010      	beq.n	800348a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	691a      	ldr	r2, [r3, #16]
 800346c:	4b3f      	ldr	r3, [pc, #252]	; (800356c <HAL_RCC_ClockConfig+0x358>)
 800346e:	699b      	ldr	r3, [r3, #24]
 8003470:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003474:	429a      	cmp	r2, r3
 8003476:	d208      	bcs.n	800348a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003478:	4b3c      	ldr	r3, [pc, #240]	; (800356c <HAL_RCC_ClockConfig+0x358>)
 800347a:	699b      	ldr	r3, [r3, #24]
 800347c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	691b      	ldr	r3, [r3, #16]
 8003484:	4939      	ldr	r1, [pc, #228]	; (800356c <HAL_RCC_ClockConfig+0x358>)
 8003486:	4313      	orrs	r3, r2
 8003488:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0308 	and.w	r3, r3, #8
 8003492:	2b00      	cmp	r3, #0
 8003494:	d010      	beq.n	80034b8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	695a      	ldr	r2, [r3, #20]
 800349a:	4b34      	ldr	r3, [pc, #208]	; (800356c <HAL_RCC_ClockConfig+0x358>)
 800349c:	69db      	ldr	r3, [r3, #28]
 800349e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d208      	bcs.n	80034b8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80034a6:	4b31      	ldr	r3, [pc, #196]	; (800356c <HAL_RCC_ClockConfig+0x358>)
 80034a8:	69db      	ldr	r3, [r3, #28]
 80034aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	695b      	ldr	r3, [r3, #20]
 80034b2:	492e      	ldr	r1, [pc, #184]	; (800356c <HAL_RCC_ClockConfig+0x358>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0310 	and.w	r3, r3, #16
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d010      	beq.n	80034e6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	699a      	ldr	r2, [r3, #24]
 80034c8:	4b28      	ldr	r3, [pc, #160]	; (800356c <HAL_RCC_ClockConfig+0x358>)
 80034ca:	69db      	ldr	r3, [r3, #28]
 80034cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d208      	bcs.n	80034e6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80034d4:	4b25      	ldr	r3, [pc, #148]	; (800356c <HAL_RCC_ClockConfig+0x358>)
 80034d6:	69db      	ldr	r3, [r3, #28]
 80034d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	699b      	ldr	r3, [r3, #24]
 80034e0:	4922      	ldr	r1, [pc, #136]	; (800356c <HAL_RCC_ClockConfig+0x358>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0320 	and.w	r3, r3, #32
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d010      	beq.n	8003514 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	69da      	ldr	r2, [r3, #28]
 80034f6:	4b1d      	ldr	r3, [pc, #116]	; (800356c <HAL_RCC_ClockConfig+0x358>)
 80034f8:	6a1b      	ldr	r3, [r3, #32]
 80034fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80034fe:	429a      	cmp	r2, r3
 8003500:	d208      	bcs.n	8003514 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003502:	4b1a      	ldr	r3, [pc, #104]	; (800356c <HAL_RCC_ClockConfig+0x358>)
 8003504:	6a1b      	ldr	r3, [r3, #32]
 8003506:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	69db      	ldr	r3, [r3, #28]
 800350e:	4917      	ldr	r1, [pc, #92]	; (800356c <HAL_RCC_ClockConfig+0x358>)
 8003510:	4313      	orrs	r3, r2
 8003512:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003514:	f000 f89e 	bl	8003654 <HAL_RCC_GetSysClockFreq>
 8003518:	4602      	mov	r2, r0
 800351a:	4b14      	ldr	r3, [pc, #80]	; (800356c <HAL_RCC_ClockConfig+0x358>)
 800351c:	699b      	ldr	r3, [r3, #24]
 800351e:	0a1b      	lsrs	r3, r3, #8
 8003520:	f003 030f 	and.w	r3, r3, #15
 8003524:	4912      	ldr	r1, [pc, #72]	; (8003570 <HAL_RCC_ClockConfig+0x35c>)
 8003526:	5ccb      	ldrb	r3, [r1, r3]
 8003528:	f003 031f 	and.w	r3, r3, #31
 800352c:	fa22 f303 	lsr.w	r3, r2, r3
 8003530:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003532:	4b0e      	ldr	r3, [pc, #56]	; (800356c <HAL_RCC_ClockConfig+0x358>)
 8003534:	699b      	ldr	r3, [r3, #24]
 8003536:	f003 030f 	and.w	r3, r3, #15
 800353a:	4a0d      	ldr	r2, [pc, #52]	; (8003570 <HAL_RCC_ClockConfig+0x35c>)
 800353c:	5cd3      	ldrb	r3, [r2, r3]
 800353e:	f003 031f 	and.w	r3, r3, #31
 8003542:	693a      	ldr	r2, [r7, #16]
 8003544:	fa22 f303 	lsr.w	r3, r2, r3
 8003548:	4a0a      	ldr	r2, [pc, #40]	; (8003574 <HAL_RCC_ClockConfig+0x360>)
 800354a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800354c:	4a0a      	ldr	r2, [pc, #40]	; (8003578 <HAL_RCC_ClockConfig+0x364>)
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003552:	4b0a      	ldr	r3, [pc, #40]	; (800357c <HAL_RCC_ClockConfig+0x368>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4618      	mov	r0, r3
 8003558:	f7fd fb7a 	bl	8000c50 <HAL_InitTick>
 800355c:	4603      	mov	r3, r0
 800355e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003560:	7bfb      	ldrb	r3, [r7, #15]
}
 8003562:	4618      	mov	r0, r3
 8003564:	3718      	adds	r7, #24
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	58024400 	.word	0x58024400
 8003570:	0800a70c 	.word	0x0800a70c
 8003574:	24000004 	.word	0x24000004
 8003578:	24000000 	.word	0x24000000
 800357c:	24000008 	.word	0x24000008

08003580 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b08c      	sub	sp, #48	; 0x30
 8003584:	af00      	add	r7, sp, #0
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d12a      	bne.n	80035e8 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8003592:	4b2d      	ldr	r3, [pc, #180]	; (8003648 <HAL_RCC_MCOConfig+0xc8>)
 8003594:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003598:	4a2b      	ldr	r2, [pc, #172]	; (8003648 <HAL_RCC_MCOConfig+0xc8>)
 800359a:	f043 0301 	orr.w	r3, r3, #1
 800359e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80035a2:	4b29      	ldr	r3, [pc, #164]	; (8003648 <HAL_RCC_MCOConfig+0xc8>)
 80035a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035a8:	f003 0301 	and.w	r3, r3, #1
 80035ac:	61bb      	str	r3, [r7, #24]
 80035ae:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80035b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035b6:	2302      	movs	r3, #2
 80035b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035ba:	2303      	movs	r3, #3
 80035bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035be:	2300      	movs	r3, #0
 80035c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80035c2:	2300      	movs	r3, #0
 80035c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80035c6:	f107 031c 	add.w	r3, r7, #28
 80035ca:	4619      	mov	r1, r3
 80035cc:	481f      	ldr	r0, [pc, #124]	; (800364c <HAL_RCC_MCOConfig+0xcc>)
 80035ce:	f7fd fcd5 	bl	8000f7c <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80035d2:	4b1d      	ldr	r3, [pc, #116]	; (8003648 <HAL_RCC_MCOConfig+0xc8>)
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 80035da:	68b9      	ldr	r1, [r7, #8]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	430b      	orrs	r3, r1
 80035e0:	4919      	ldr	r1, [pc, #100]	; (8003648 <HAL_RCC_MCOConfig+0xc8>)
 80035e2:	4313      	orrs	r3, r2
 80035e4:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 80035e6:	e02a      	b.n	800363e <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 80035e8:	4b17      	ldr	r3, [pc, #92]	; (8003648 <HAL_RCC_MCOConfig+0xc8>)
 80035ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035ee:	4a16      	ldr	r2, [pc, #88]	; (8003648 <HAL_RCC_MCOConfig+0xc8>)
 80035f0:	f043 0304 	orr.w	r3, r3, #4
 80035f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80035f8:	4b13      	ldr	r3, [pc, #76]	; (8003648 <HAL_RCC_MCOConfig+0xc8>)
 80035fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035fe:	f003 0304 	and.w	r3, r3, #4
 8003602:	617b      	str	r3, [r7, #20]
 8003604:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8003606:	f44f 7300 	mov.w	r3, #512	; 0x200
 800360a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800360c:	2302      	movs	r3, #2
 800360e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003610:	2303      	movs	r3, #3
 8003612:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003614:	2300      	movs	r3, #0
 8003616:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003618:	2300      	movs	r3, #0
 800361a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800361c:	f107 031c 	add.w	r3, r7, #28
 8003620:	4619      	mov	r1, r3
 8003622:	480b      	ldr	r0, [pc, #44]	; (8003650 <HAL_RCC_MCOConfig+0xd0>)
 8003624:	f7fd fcaa 	bl	8000f7c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8003628:	4b07      	ldr	r3, [pc, #28]	; (8003648 <HAL_RCC_MCOConfig+0xc8>)
 800362a:	691b      	ldr	r3, [r3, #16]
 800362c:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	01d9      	lsls	r1, r3, #7
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	430b      	orrs	r3, r1
 8003638:	4903      	ldr	r1, [pc, #12]	; (8003648 <HAL_RCC_MCOConfig+0xc8>)
 800363a:	4313      	orrs	r3, r2
 800363c:	610b      	str	r3, [r1, #16]
}
 800363e:	bf00      	nop
 8003640:	3730      	adds	r7, #48	; 0x30
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	58024400 	.word	0x58024400
 800364c:	58020000 	.word	0x58020000
 8003650:	58020800 	.word	0x58020800

08003654 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003654:	b480      	push	{r7}
 8003656:	b089      	sub	sp, #36	; 0x24
 8003658:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800365a:	4bb3      	ldr	r3, [pc, #716]	; (8003928 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800365c:	691b      	ldr	r3, [r3, #16]
 800365e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003662:	2b18      	cmp	r3, #24
 8003664:	f200 8155 	bhi.w	8003912 <HAL_RCC_GetSysClockFreq+0x2be>
 8003668:	a201      	add	r2, pc, #4	; (adr r2, 8003670 <HAL_RCC_GetSysClockFreq+0x1c>)
 800366a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800366e:	bf00      	nop
 8003670:	080036d5 	.word	0x080036d5
 8003674:	08003913 	.word	0x08003913
 8003678:	08003913 	.word	0x08003913
 800367c:	08003913 	.word	0x08003913
 8003680:	08003913 	.word	0x08003913
 8003684:	08003913 	.word	0x08003913
 8003688:	08003913 	.word	0x08003913
 800368c:	08003913 	.word	0x08003913
 8003690:	080036fb 	.word	0x080036fb
 8003694:	08003913 	.word	0x08003913
 8003698:	08003913 	.word	0x08003913
 800369c:	08003913 	.word	0x08003913
 80036a0:	08003913 	.word	0x08003913
 80036a4:	08003913 	.word	0x08003913
 80036a8:	08003913 	.word	0x08003913
 80036ac:	08003913 	.word	0x08003913
 80036b0:	08003701 	.word	0x08003701
 80036b4:	08003913 	.word	0x08003913
 80036b8:	08003913 	.word	0x08003913
 80036bc:	08003913 	.word	0x08003913
 80036c0:	08003913 	.word	0x08003913
 80036c4:	08003913 	.word	0x08003913
 80036c8:	08003913 	.word	0x08003913
 80036cc:	08003913 	.word	0x08003913
 80036d0:	08003707 	.word	0x08003707
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80036d4:	4b94      	ldr	r3, [pc, #592]	; (8003928 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0320 	and.w	r3, r3, #32
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d009      	beq.n	80036f4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80036e0:	4b91      	ldr	r3, [pc, #580]	; (8003928 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	08db      	lsrs	r3, r3, #3
 80036e6:	f003 0303 	and.w	r3, r3, #3
 80036ea:	4a90      	ldr	r2, [pc, #576]	; (800392c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80036ec:	fa22 f303 	lsr.w	r3, r2, r3
 80036f0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80036f2:	e111      	b.n	8003918 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80036f4:	4b8d      	ldr	r3, [pc, #564]	; (800392c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80036f6:	61bb      	str	r3, [r7, #24]
    break;
 80036f8:	e10e      	b.n	8003918 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80036fa:	4b8d      	ldr	r3, [pc, #564]	; (8003930 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80036fc:	61bb      	str	r3, [r7, #24]
    break;
 80036fe:	e10b      	b.n	8003918 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003700:	4b8c      	ldr	r3, [pc, #560]	; (8003934 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003702:	61bb      	str	r3, [r7, #24]
    break;
 8003704:	e108      	b.n	8003918 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003706:	4b88      	ldr	r3, [pc, #544]	; (8003928 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800370a:	f003 0303 	and.w	r3, r3, #3
 800370e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003710:	4b85      	ldr	r3, [pc, #532]	; (8003928 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003714:	091b      	lsrs	r3, r3, #4
 8003716:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800371a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800371c:	4b82      	ldr	r3, [pc, #520]	; (8003928 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800371e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003720:	f003 0301 	and.w	r3, r3, #1
 8003724:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003726:	4b80      	ldr	r3, [pc, #512]	; (8003928 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800372a:	08db      	lsrs	r3, r3, #3
 800372c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003730:	68fa      	ldr	r2, [r7, #12]
 8003732:	fb02 f303 	mul.w	r3, r2, r3
 8003736:	ee07 3a90 	vmov	s15, r3
 800373a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800373e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	2b00      	cmp	r3, #0
 8003746:	f000 80e1 	beq.w	800390c <HAL_RCC_GetSysClockFreq+0x2b8>
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	2b02      	cmp	r3, #2
 800374e:	f000 8083 	beq.w	8003858 <HAL_RCC_GetSysClockFreq+0x204>
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	2b02      	cmp	r3, #2
 8003756:	f200 80a1 	bhi.w	800389c <HAL_RCC_GetSysClockFreq+0x248>
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d003      	beq.n	8003768 <HAL_RCC_GetSysClockFreq+0x114>
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	2b01      	cmp	r3, #1
 8003764:	d056      	beq.n	8003814 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003766:	e099      	b.n	800389c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003768:	4b6f      	ldr	r3, [pc, #444]	; (8003928 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0320 	and.w	r3, r3, #32
 8003770:	2b00      	cmp	r3, #0
 8003772:	d02d      	beq.n	80037d0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003774:	4b6c      	ldr	r3, [pc, #432]	; (8003928 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	08db      	lsrs	r3, r3, #3
 800377a:	f003 0303 	and.w	r3, r3, #3
 800377e:	4a6b      	ldr	r2, [pc, #428]	; (800392c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003780:	fa22 f303 	lsr.w	r3, r2, r3
 8003784:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	ee07 3a90 	vmov	s15, r3
 800378c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	ee07 3a90 	vmov	s15, r3
 8003796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800379a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800379e:	4b62      	ldr	r3, [pc, #392]	; (8003928 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037a6:	ee07 3a90 	vmov	s15, r3
 80037aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80037b2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003938 <HAL_RCC_GetSysClockFreq+0x2e4>
 80037b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037ca:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80037ce:	e087      	b.n	80038e0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	ee07 3a90 	vmov	s15, r3
 80037d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037da:	eddf 6a58 	vldr	s13, [pc, #352]	; 800393c <HAL_RCC_GetSysClockFreq+0x2e8>
 80037de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037e2:	4b51      	ldr	r3, [pc, #324]	; (8003928 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037ea:	ee07 3a90 	vmov	s15, r3
 80037ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80037f6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003938 <HAL_RCC_GetSysClockFreq+0x2e4>
 80037fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003802:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003806:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800380a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800380e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003812:	e065      	b.n	80038e0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	ee07 3a90 	vmov	s15, r3
 800381a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800381e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003940 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003822:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003826:	4b40      	ldr	r3, [pc, #256]	; (8003928 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800382e:	ee07 3a90 	vmov	s15, r3
 8003832:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003836:	ed97 6a02 	vldr	s12, [r7, #8]
 800383a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003938 <HAL_RCC_GetSysClockFreq+0x2e4>
 800383e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003842:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003846:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800384a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800384e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003852:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003856:	e043      	b.n	80038e0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	ee07 3a90 	vmov	s15, r3
 800385e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003862:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003944 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003866:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800386a:	4b2f      	ldr	r3, [pc, #188]	; (8003928 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800386c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003872:	ee07 3a90 	vmov	s15, r3
 8003876:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800387a:	ed97 6a02 	vldr	s12, [r7, #8]
 800387e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003938 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003882:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003886:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800388a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800388e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003892:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003896:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800389a:	e021      	b.n	80038e0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	ee07 3a90 	vmov	s15, r3
 80038a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038a6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003940 <HAL_RCC_GetSysClockFreq+0x2ec>
 80038aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038ae:	4b1e      	ldr	r3, [pc, #120]	; (8003928 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038b6:	ee07 3a90 	vmov	s15, r3
 80038ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038be:	ed97 6a02 	vldr	s12, [r7, #8]
 80038c2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003938 <HAL_RCC_GetSysClockFreq+0x2e4>
 80038c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80038de:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80038e0:	4b11      	ldr	r3, [pc, #68]	; (8003928 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e4:	0a5b      	lsrs	r3, r3, #9
 80038e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038ea:	3301      	adds	r3, #1
 80038ec:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	ee07 3a90 	vmov	s15, r3
 80038f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80038f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80038fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003900:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003904:	ee17 3a90 	vmov	r3, s15
 8003908:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800390a:	e005      	b.n	8003918 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800390c:	2300      	movs	r3, #0
 800390e:	61bb      	str	r3, [r7, #24]
    break;
 8003910:	e002      	b.n	8003918 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003912:	4b07      	ldr	r3, [pc, #28]	; (8003930 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003914:	61bb      	str	r3, [r7, #24]
    break;
 8003916:	bf00      	nop
  }

  return sysclockfreq;
 8003918:	69bb      	ldr	r3, [r7, #24]
}
 800391a:	4618      	mov	r0, r3
 800391c:	3724      	adds	r7, #36	; 0x24
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr
 8003926:	bf00      	nop
 8003928:	58024400 	.word	0x58024400
 800392c:	03d09000 	.word	0x03d09000
 8003930:	003d0900 	.word	0x003d0900
 8003934:	017d7840 	.word	0x017d7840
 8003938:	46000000 	.word	0x46000000
 800393c:	4c742400 	.word	0x4c742400
 8003940:	4a742400 	.word	0x4a742400
 8003944:	4bbebc20 	.word	0x4bbebc20

08003948 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b082      	sub	sp, #8
 800394c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800394e:	f7ff fe81 	bl	8003654 <HAL_RCC_GetSysClockFreq>
 8003952:	4602      	mov	r2, r0
 8003954:	4b10      	ldr	r3, [pc, #64]	; (8003998 <HAL_RCC_GetHCLKFreq+0x50>)
 8003956:	699b      	ldr	r3, [r3, #24]
 8003958:	0a1b      	lsrs	r3, r3, #8
 800395a:	f003 030f 	and.w	r3, r3, #15
 800395e:	490f      	ldr	r1, [pc, #60]	; (800399c <HAL_RCC_GetHCLKFreq+0x54>)
 8003960:	5ccb      	ldrb	r3, [r1, r3]
 8003962:	f003 031f 	and.w	r3, r3, #31
 8003966:	fa22 f303 	lsr.w	r3, r2, r3
 800396a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800396c:	4b0a      	ldr	r3, [pc, #40]	; (8003998 <HAL_RCC_GetHCLKFreq+0x50>)
 800396e:	699b      	ldr	r3, [r3, #24]
 8003970:	f003 030f 	and.w	r3, r3, #15
 8003974:	4a09      	ldr	r2, [pc, #36]	; (800399c <HAL_RCC_GetHCLKFreq+0x54>)
 8003976:	5cd3      	ldrb	r3, [r2, r3]
 8003978:	f003 031f 	and.w	r3, r3, #31
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	fa22 f303 	lsr.w	r3, r2, r3
 8003982:	4a07      	ldr	r2, [pc, #28]	; (80039a0 <HAL_RCC_GetHCLKFreq+0x58>)
 8003984:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003986:	4a07      	ldr	r2, [pc, #28]	; (80039a4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800398c:	4b04      	ldr	r3, [pc, #16]	; (80039a0 <HAL_RCC_GetHCLKFreq+0x58>)
 800398e:	681b      	ldr	r3, [r3, #0]
}
 8003990:	4618      	mov	r0, r3
 8003992:	3708      	adds	r7, #8
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}
 8003998:	58024400 	.word	0x58024400
 800399c:	0800a70c 	.word	0x0800a70c
 80039a0:	24000004 	.word	0x24000004
 80039a4:	24000000 	.word	0x24000000

080039a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80039ac:	f7ff ffcc 	bl	8003948 <HAL_RCC_GetHCLKFreq>
 80039b0:	4602      	mov	r2, r0
 80039b2:	4b06      	ldr	r3, [pc, #24]	; (80039cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80039b4:	69db      	ldr	r3, [r3, #28]
 80039b6:	091b      	lsrs	r3, r3, #4
 80039b8:	f003 0307 	and.w	r3, r3, #7
 80039bc:	4904      	ldr	r1, [pc, #16]	; (80039d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80039be:	5ccb      	ldrb	r3, [r1, r3]
 80039c0:	f003 031f 	and.w	r3, r3, #31
 80039c4:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	58024400 	.word	0x58024400
 80039d0:	0800a70c 	.word	0x0800a70c

080039d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80039d8:	f7ff ffb6 	bl	8003948 <HAL_RCC_GetHCLKFreq>
 80039dc:	4602      	mov	r2, r0
 80039de:	4b06      	ldr	r3, [pc, #24]	; (80039f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039e0:	69db      	ldr	r3, [r3, #28]
 80039e2:	0a1b      	lsrs	r3, r3, #8
 80039e4:	f003 0307 	and.w	r3, r3, #7
 80039e8:	4904      	ldr	r1, [pc, #16]	; (80039fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80039ea:	5ccb      	ldrb	r3, [r1, r3]
 80039ec:	f003 031f 	and.w	r3, r3, #31
 80039f0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	58024400 	.word	0x58024400
 80039fc:	0800a70c 	.word	0x0800a70c

08003a00 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b086      	sub	sp, #24
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003a08:	2300      	movs	r3, #0
 8003a0a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d03f      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a20:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003a24:	d02a      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003a26:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003a2a:	d824      	bhi.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003a2c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a30:	d018      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003a32:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a36:	d81e      	bhi.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d003      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003a3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a40:	d007      	beq.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003a42:	e018      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a44:	4ba3      	ldr	r3, [pc, #652]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a48:	4aa2      	ldr	r2, [pc, #648]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003a4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a4e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003a50:	e015      	b.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	3304      	adds	r3, #4
 8003a56:	2102      	movs	r1, #2
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f001 f9fd 	bl	8004e58 <RCCEx_PLL2_Config>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003a62:	e00c      	b.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	3324      	adds	r3, #36	; 0x24
 8003a68:	2102      	movs	r1, #2
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f001 faa6 	bl	8004fbc <RCCEx_PLL3_Config>
 8003a70:	4603      	mov	r3, r0
 8003a72:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003a74:	e003      	b.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	75fb      	strb	r3, [r7, #23]
      break;
 8003a7a:	e000      	b.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003a7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a7e:	7dfb      	ldrb	r3, [r7, #23]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d109      	bne.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003a84:	4b93      	ldr	r3, [pc, #588]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003a86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a88:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a90:	4990      	ldr	r1, [pc, #576]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003a92:	4313      	orrs	r3, r2
 8003a94:	650b      	str	r3, [r1, #80]	; 0x50
 8003a96:	e001      	b.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a98:	7dfb      	ldrb	r3, [r7, #23]
 8003a9a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d03d      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aac:	2b04      	cmp	r3, #4
 8003aae:	d826      	bhi.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003ab0:	a201      	add	r2, pc, #4	; (adr r2, 8003ab8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ab6:	bf00      	nop
 8003ab8:	08003acd 	.word	0x08003acd
 8003abc:	08003adb 	.word	0x08003adb
 8003ac0:	08003aed 	.word	0x08003aed
 8003ac4:	08003b05 	.word	0x08003b05
 8003ac8:	08003b05 	.word	0x08003b05
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003acc:	4b81      	ldr	r3, [pc, #516]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad0:	4a80      	ldr	r2, [pc, #512]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003ad2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ad6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003ad8:	e015      	b.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	3304      	adds	r3, #4
 8003ade:	2100      	movs	r1, #0
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f001 f9b9 	bl	8004e58 <RCCEx_PLL2_Config>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003aea:	e00c      	b.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	3324      	adds	r3, #36	; 0x24
 8003af0:	2100      	movs	r1, #0
 8003af2:	4618      	mov	r0, r3
 8003af4:	f001 fa62 	bl	8004fbc <RCCEx_PLL3_Config>
 8003af8:	4603      	mov	r3, r0
 8003afa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003afc:	e003      	b.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	75fb      	strb	r3, [r7, #23]
      break;
 8003b02:	e000      	b.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003b04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b06:	7dfb      	ldrb	r3, [r7, #23]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d109      	bne.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b0c:	4b71      	ldr	r3, [pc, #452]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003b0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b10:	f023 0207 	bic.w	r2, r3, #7
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b18:	496e      	ldr	r1, [pc, #440]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	650b      	str	r3, [r1, #80]	; 0x50
 8003b1e:	e001      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b20:	7dfb      	ldrb	r3, [r7, #23]
 8003b22:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d042      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b38:	d02b      	beq.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003b3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b3e:	d825      	bhi.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003b40:	2bc0      	cmp	r3, #192	; 0xc0
 8003b42:	d028      	beq.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003b44:	2bc0      	cmp	r3, #192	; 0xc0
 8003b46:	d821      	bhi.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003b48:	2b80      	cmp	r3, #128	; 0x80
 8003b4a:	d016      	beq.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003b4c:	2b80      	cmp	r3, #128	; 0x80
 8003b4e:	d81d      	bhi.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d002      	beq.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003b54:	2b40      	cmp	r3, #64	; 0x40
 8003b56:	d007      	beq.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003b58:	e018      	b.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b5a:	4b5e      	ldr	r3, [pc, #376]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b5e:	4a5d      	ldr	r2, [pc, #372]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003b60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b64:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003b66:	e017      	b.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	3304      	adds	r3, #4
 8003b6c:	2100      	movs	r1, #0
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f001 f972 	bl	8004e58 <RCCEx_PLL2_Config>
 8003b74:	4603      	mov	r3, r0
 8003b76:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003b78:	e00e      	b.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	3324      	adds	r3, #36	; 0x24
 8003b7e:	2100      	movs	r1, #0
 8003b80:	4618      	mov	r0, r3
 8003b82:	f001 fa1b 	bl	8004fbc <RCCEx_PLL3_Config>
 8003b86:	4603      	mov	r3, r0
 8003b88:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003b8a:	e005      	b.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	75fb      	strb	r3, [r7, #23]
      break;
 8003b90:	e002      	b.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003b92:	bf00      	nop
 8003b94:	e000      	b.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003b96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b98:	7dfb      	ldrb	r3, [r7, #23]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d109      	bne.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003b9e:	4b4d      	ldr	r3, [pc, #308]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003ba0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ba2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003baa:	494a      	ldr	r1, [pc, #296]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003bac:	4313      	orrs	r3, r2
 8003bae:	650b      	str	r3, [r1, #80]	; 0x50
 8003bb0:	e001      	b.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bb2:	7dfb      	ldrb	r3, [r7, #23]
 8003bb4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d049      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003bc8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003bcc:	d030      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003bce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003bd2:	d82a      	bhi.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003bd4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003bd8:	d02c      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8003bda:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003bde:	d824      	bhi.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003be0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003be4:	d018      	beq.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8003be6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bea:	d81e      	bhi.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d003      	beq.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003bf0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003bf4:	d007      	beq.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003bf6:	e018      	b.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bf8:	4b36      	ldr	r3, [pc, #216]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bfc:	4a35      	ldr	r2, [pc, #212]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003bfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c02:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003c04:	e017      	b.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	3304      	adds	r3, #4
 8003c0a:	2100      	movs	r1, #0
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f001 f923 	bl	8004e58 <RCCEx_PLL2_Config>
 8003c12:	4603      	mov	r3, r0
 8003c14:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003c16:	e00e      	b.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	3324      	adds	r3, #36	; 0x24
 8003c1c:	2100      	movs	r1, #0
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f001 f9cc 	bl	8004fbc <RCCEx_PLL3_Config>
 8003c24:	4603      	mov	r3, r0
 8003c26:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003c28:	e005      	b.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	75fb      	strb	r3, [r7, #23]
      break;
 8003c2e:	e002      	b.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003c30:	bf00      	nop
 8003c32:	e000      	b.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003c34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c36:	7dfb      	ldrb	r3, [r7, #23]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d10a      	bne.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003c3c:	4b25      	ldr	r3, [pc, #148]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c40:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003c4a:	4922      	ldr	r1, [pc, #136]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	658b      	str	r3, [r1, #88]	; 0x58
 8003c50:	e001      	b.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c52:	7dfb      	ldrb	r3, [r7, #23]
 8003c54:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d04b      	beq.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003c68:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c6c:	d030      	beq.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8003c6e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c72:	d82a      	bhi.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003c74:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003c78:	d02e      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8003c7a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003c7e:	d824      	bhi.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003c80:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c84:	d018      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8003c86:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c8a:	d81e      	bhi.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d003      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003c90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c94:	d007      	beq.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003c96:	e018      	b.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c98:	4b0e      	ldr	r3, [pc, #56]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c9c:	4a0d      	ldr	r2, [pc, #52]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003c9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ca2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003ca4:	e019      	b.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	3304      	adds	r3, #4
 8003caa:	2100      	movs	r1, #0
 8003cac:	4618      	mov	r0, r3
 8003cae:	f001 f8d3 	bl	8004e58 <RCCEx_PLL2_Config>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003cb6:	e010      	b.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	3324      	adds	r3, #36	; 0x24
 8003cbc:	2100      	movs	r1, #0
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f001 f97c 	bl	8004fbc <RCCEx_PLL3_Config>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003cc8:	e007      	b.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	75fb      	strb	r3, [r7, #23]
      break;
 8003cce:	e004      	b.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8003cd0:	bf00      	nop
 8003cd2:	e002      	b.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8003cd4:	58024400 	.word	0x58024400
      break;
 8003cd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cda:	7dfb      	ldrb	r3, [r7, #23]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d10a      	bne.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003ce0:	4b99      	ldr	r3, [pc, #612]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ce4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003cee:	4996      	ldr	r1, [pc, #600]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	658b      	str	r3, [r1, #88]	; 0x58
 8003cf4:	e001      	b.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cf6:	7dfb      	ldrb	r3, [r7, #23]
 8003cf8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d032      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d0a:	2b30      	cmp	r3, #48	; 0x30
 8003d0c:	d01c      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8003d0e:	2b30      	cmp	r3, #48	; 0x30
 8003d10:	d817      	bhi.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8003d12:	2b20      	cmp	r3, #32
 8003d14:	d00c      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8003d16:	2b20      	cmp	r3, #32
 8003d18:	d813      	bhi.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d016      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8003d1e:	2b10      	cmp	r3, #16
 8003d20:	d10f      	bne.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d22:	4b89      	ldr	r3, [pc, #548]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d26:	4a88      	ldr	r2, [pc, #544]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003d28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d2c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003d2e:	e00e      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	3304      	adds	r3, #4
 8003d34:	2102      	movs	r1, #2
 8003d36:	4618      	mov	r0, r3
 8003d38:	f001 f88e 	bl	8004e58 <RCCEx_PLL2_Config>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003d40:	e005      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	75fb      	strb	r3, [r7, #23]
      break;
 8003d46:	e002      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003d48:	bf00      	nop
 8003d4a:	e000      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003d4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d4e:	7dfb      	ldrb	r3, [r7, #23]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d109      	bne.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003d54:	4b7c      	ldr	r3, [pc, #496]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003d56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d58:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d60:	4979      	ldr	r1, [pc, #484]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003d62:	4313      	orrs	r3, r2
 8003d64:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003d66:	e001      	b.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d68:	7dfb      	ldrb	r3, [r7, #23]
 8003d6a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d047      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d80:	d030      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003d82:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d86:	d82a      	bhi.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003d88:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003d8c:	d02c      	beq.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003d8e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003d92:	d824      	bhi.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003d94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d98:	d018      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003d9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d9e:	d81e      	bhi.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d003      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8003da4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003da8:	d007      	beq.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8003daa:	e018      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dac:	4b66      	ldr	r3, [pc, #408]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db0:	4a65      	ldr	r2, [pc, #404]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003db2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003db6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003db8:	e017      	b.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	3304      	adds	r3, #4
 8003dbe:	2100      	movs	r1, #0
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f001 f849 	bl	8004e58 <RCCEx_PLL2_Config>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003dca:	e00e      	b.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	3324      	adds	r3, #36	; 0x24
 8003dd0:	2100      	movs	r1, #0
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f001 f8f2 	bl	8004fbc <RCCEx_PLL3_Config>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003ddc:	e005      	b.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	75fb      	strb	r3, [r7, #23]
      break;
 8003de2:	e002      	b.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8003de4:	bf00      	nop
 8003de6:	e000      	b.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8003de8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dea:	7dfb      	ldrb	r3, [r7, #23]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d109      	bne.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003df0:	4b55      	ldr	r3, [pc, #340]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003df2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003df4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dfc:	4952      	ldr	r1, [pc, #328]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	650b      	str	r3, [r1, #80]	; 0x50
 8003e02:	e001      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e04:	7dfb      	ldrb	r3, [r7, #23]
 8003e06:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d049      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e1c:	d02e      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003e1e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e22:	d828      	bhi.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003e24:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003e28:	d02a      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8003e2a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003e2e:	d822      	bhi.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003e30:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003e34:	d026      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8003e36:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003e3a:	d81c      	bhi.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003e3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e40:	d010      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8003e42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e46:	d816      	bhi.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d01d      	beq.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8003e4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e50:	d111      	bne.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	3304      	adds	r3, #4
 8003e56:	2101      	movs	r1, #1
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f000 fffd 	bl	8004e58 <RCCEx_PLL2_Config>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003e62:	e012      	b.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	3324      	adds	r3, #36	; 0x24
 8003e68:	2101      	movs	r1, #1
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f001 f8a6 	bl	8004fbc <RCCEx_PLL3_Config>
 8003e70:	4603      	mov	r3, r0
 8003e72:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003e74:	e009      	b.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	75fb      	strb	r3, [r7, #23]
      break;
 8003e7a:	e006      	b.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003e7c:	bf00      	nop
 8003e7e:	e004      	b.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003e80:	bf00      	nop
 8003e82:	e002      	b.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003e84:	bf00      	nop
 8003e86:	e000      	b.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003e88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e8a:	7dfb      	ldrb	r3, [r7, #23]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d109      	bne.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003e90:	4b2d      	ldr	r3, [pc, #180]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003e92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e94:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e9c:	492a      	ldr	r1, [pc, #168]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	650b      	str	r3, [r1, #80]	; 0x50
 8003ea2:	e001      	b.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ea4:	7dfb      	ldrb	r3, [r7, #23]
 8003ea6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d04d      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003eba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ebe:	d02e      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8003ec0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ec4:	d828      	bhi.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003ec6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eca:	d02a      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8003ecc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ed0:	d822      	bhi.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003ed2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003ed6:	d026      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8003ed8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003edc:	d81c      	bhi.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003ede:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ee2:	d010      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8003ee4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ee8:	d816      	bhi.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d01d      	beq.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8003eee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ef2:	d111      	bne.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	3304      	adds	r3, #4
 8003ef8:	2101      	movs	r1, #1
 8003efa:	4618      	mov	r0, r3
 8003efc:	f000 ffac 	bl	8004e58 <RCCEx_PLL2_Config>
 8003f00:	4603      	mov	r3, r0
 8003f02:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003f04:	e012      	b.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	3324      	adds	r3, #36	; 0x24
 8003f0a:	2101      	movs	r1, #1
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f001 f855 	bl	8004fbc <RCCEx_PLL3_Config>
 8003f12:	4603      	mov	r3, r0
 8003f14:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003f16:	e009      	b.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	75fb      	strb	r3, [r7, #23]
      break;
 8003f1c:	e006      	b.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003f1e:	bf00      	nop
 8003f20:	e004      	b.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003f22:	bf00      	nop
 8003f24:	e002      	b.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003f26:	bf00      	nop
 8003f28:	e000      	b.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003f2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f2c:	7dfb      	ldrb	r3, [r7, #23]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d10c      	bne.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003f32:	4b05      	ldr	r3, [pc, #20]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f36:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f40:	4901      	ldr	r1, [pc, #4]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	658b      	str	r3, [r1, #88]	; 0x58
 8003f46:	e003      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8003f48:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f4c:	7dfb      	ldrb	r3, [r7, #23]
 8003f4e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d022      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    switch(PeriphClkInit->DsiClockSelection)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d00e      	beq.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8003f64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f68:	d108      	bne.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {

    case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	3304      	adds	r3, #4
 8003f6e:	2101      	movs	r1, #1
 8003f70:	4618      	mov	r0, r3
 8003f72:	f000 ff71 	bl	8004e58 <RCCEx_PLL2_Config>
 8003f76:	4603      	mov	r3, r0
 8003f78:	75fb      	strb	r3, [r7, #23]

      /* DSI clock source configuration done later after clock selection check */
      break;
 8003f7a:	e003      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x584>
      /* PHY is used as clock source for DSI*/
      /* DSI clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	75fb      	strb	r3, [r7, #23]
      break;
 8003f80:	e000      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x584>
      break;
 8003f82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f84:	7dfb      	ldrb	r3, [r7, #23]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d109      	bne.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x59e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8003f8a:	4b82      	ldr	r3, [pc, #520]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 8003f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f8e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f96:	497f      	ldr	r1, [pc, #508]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003f9c:	e001      	b.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f9e:	7dfb      	ldrb	r3, [r7, #23]
 8003fa0:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d02f      	beq.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x60e>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003fb6:	d00e      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
 8003fb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003fbc:	d814      	bhi.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d015      	beq.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x5ee>
 8003fc2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003fc6:	d10f      	bne.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fc8:	4b72      	ldr	r3, [pc, #456]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 8003fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fcc:	4a71      	ldr	r2, [pc, #452]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 8003fce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fd2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003fd4:	e00c      	b.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	3304      	adds	r3, #4
 8003fda:	2101      	movs	r1, #1
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f000 ff3b 	bl	8004e58 <RCCEx_PLL2_Config>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003fe6:	e003      	b.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	75fb      	strb	r3, [r7, #23]
      break;
 8003fec:	e000      	b.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      break;
 8003fee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ff0:	7dfb      	ldrb	r3, [r7, #23]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d109      	bne.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x60a>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003ff6:	4b67      	ldr	r3, [pc, #412]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 8003ff8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ffa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004002:	4964      	ldr	r1, [pc, #400]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 8004004:	4313      	orrs	r3, r2
 8004006:	650b      	str	r3, [r1, #80]	; 0x50
 8004008:	e001      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x60e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800400a:	7dfb      	ldrb	r3, [r7, #23]
 800400c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d031      	beq.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x67e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800401e:	2b03      	cmp	r3, #3
 8004020:	d81a      	bhi.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x658>
 8004022:	a201      	add	r2, pc, #4	; (adr r2, 8004028 <HAL_RCCEx_PeriphCLKConfig+0x628>)
 8004024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004028:	0800405f 	.word	0x0800405f
 800402c:	08004039 	.word	0x08004039
 8004030:	08004047 	.word	0x08004047
 8004034:	0800405f 	.word	0x0800405f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004038:	4b56      	ldr	r3, [pc, #344]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 800403a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800403c:	4a55      	ldr	r2, [pc, #340]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 800403e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004042:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004044:	e00c      	b.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x660>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	3304      	adds	r3, #4
 800404a:	2102      	movs	r1, #2
 800404c:	4618      	mov	r0, r3
 800404e:	f000 ff03 	bl	8004e58 <RCCEx_PLL2_Config>
 8004052:	4603      	mov	r3, r0
 8004054:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004056:	e003      	b.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x660>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	75fb      	strb	r3, [r7, #23]
      break;
 800405c:	e000      	b.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x660>
      break;
 800405e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004060:	7dfb      	ldrb	r3, [r7, #23]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d109      	bne.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x67a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004066:	4b4b      	ldr	r3, [pc, #300]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 8004068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800406a:	f023 0203 	bic.w	r2, r3, #3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004072:	4948      	ldr	r1, [pc, #288]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 8004074:	4313      	orrs	r3, r2
 8004076:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004078:	e001      	b.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800407a:	7dfb      	ldrb	r3, [r7, #23]
 800407c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004086:	2b00      	cmp	r3, #0
 8004088:	f000 808c 	beq.w	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x7a4>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800408c:	4b42      	ldr	r3, [pc, #264]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a41      	ldr	r2, [pc, #260]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 8004092:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004096:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004098:	f7fc fe24 	bl	8000ce4 <HAL_GetTick>
 800409c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800409e:	e009      	b.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x6b4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040a0:	f7fc fe20 	bl	8000ce4 <HAL_GetTick>
 80040a4:	4602      	mov	r2, r0
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	2b64      	cmp	r3, #100	; 0x64
 80040ac:	d902      	bls.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x6b4>
      {
        ret = HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	75fb      	strb	r3, [r7, #23]
        break;
 80040b2:	e005      	b.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80040b4:	4b38      	ldr	r3, [pc, #224]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x798>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d0ef      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
      }
    }

    if(ret == HAL_OK)
 80040c0:	7dfb      	ldrb	r3, [r7, #23]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d16c      	bne.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x7a0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80040c6:	4b33      	ldr	r3, [pc, #204]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 80040c8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80040d0:	4053      	eors	r3, r2
 80040d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d013      	beq.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x702>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040da:	4b2e      	ldr	r3, [pc, #184]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 80040dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040e2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80040e4:	4b2b      	ldr	r3, [pc, #172]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 80040e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040e8:	4a2a      	ldr	r2, [pc, #168]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 80040ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040ee:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80040f0:	4b28      	ldr	r3, [pc, #160]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 80040f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f4:	4a27      	ldr	r2, [pc, #156]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 80040f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040fa:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80040fc:	4a25      	ldr	r2, [pc, #148]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004108:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800410c:	d115      	bne.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x73a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800410e:	f7fc fde9 	bl	8000ce4 <HAL_GetTick>
 8004112:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004114:	e00b      	b.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x72e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004116:	f7fc fde5 	bl	8000ce4 <HAL_GetTick>
 800411a:	4602      	mov	r2, r0
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	f241 3288 	movw	r2, #5000	; 0x1388
 8004124:	4293      	cmp	r3, r2
 8004126:	d902      	bls.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x72e>
          {
            ret = HAL_TIMEOUT;
 8004128:	2303      	movs	r3, #3
 800412a:	75fb      	strb	r3, [r7, #23]
            break;
 800412c:	e005      	b.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x73a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800412e:	4b19      	ldr	r3, [pc, #100]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 8004130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004132:	f003 0302 	and.w	r3, r3, #2
 8004136:	2b00      	cmp	r3, #0
 8004138:	d0ed      	beq.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x716>
          }
        }
      }

      if(ret == HAL_OK)
 800413a:	7dfb      	ldrb	r3, [r7, #23]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d126      	bne.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x78e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004146:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800414a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800414e:	d10d      	bne.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x76c>
 8004150:	4b10      	ldr	r3, [pc, #64]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 8004152:	691b      	ldr	r3, [r3, #16]
 8004154:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800415e:	0919      	lsrs	r1, r3, #4
 8004160:	4b0e      	ldr	r3, [pc, #56]	; (800419c <HAL_RCCEx_PeriphCLKConfig+0x79c>)
 8004162:	400b      	ands	r3, r1
 8004164:	490b      	ldr	r1, [pc, #44]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 8004166:	4313      	orrs	r3, r2
 8004168:	610b      	str	r3, [r1, #16]
 800416a:	e005      	b.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x778>
 800416c:	4b09      	ldr	r3, [pc, #36]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 800416e:	691b      	ldr	r3, [r3, #16]
 8004170:	4a08      	ldr	r2, [pc, #32]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 8004172:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004176:	6113      	str	r3, [r2, #16]
 8004178:	4b06      	ldr	r3, [pc, #24]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 800417a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004182:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004186:	4903      	ldr	r1, [pc, #12]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x794>)
 8004188:	4313      	orrs	r3, r2
 800418a:	670b      	str	r3, [r1, #112]	; 0x70
 800418c:	e00a      	b.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x7a4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800418e:	7dfb      	ldrb	r3, [r7, #23]
 8004190:	75bb      	strb	r3, [r7, #22]
 8004192:	e007      	b.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x7a4>
 8004194:	58024400 	.word	0x58024400
 8004198:	58024800 	.word	0x58024800
 800419c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041a0:	7dfb      	ldrb	r3, [r7, #23]
 80041a2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0301 	and.w	r3, r3, #1
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d07e      	beq.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x8ae>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041b4:	2b28      	cmp	r3, #40	; 0x28
 80041b6:	d867      	bhi.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x888>
 80041b8:	a201      	add	r2, pc, #4	; (adr r2, 80041c0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80041ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041be:	bf00      	nop
 80041c0:	0800428f 	.word	0x0800428f
 80041c4:	08004289 	.word	0x08004289
 80041c8:	08004289 	.word	0x08004289
 80041cc:	08004289 	.word	0x08004289
 80041d0:	08004289 	.word	0x08004289
 80041d4:	08004289 	.word	0x08004289
 80041d8:	08004289 	.word	0x08004289
 80041dc:	08004289 	.word	0x08004289
 80041e0:	08004265 	.word	0x08004265
 80041e4:	08004289 	.word	0x08004289
 80041e8:	08004289 	.word	0x08004289
 80041ec:	08004289 	.word	0x08004289
 80041f0:	08004289 	.word	0x08004289
 80041f4:	08004289 	.word	0x08004289
 80041f8:	08004289 	.word	0x08004289
 80041fc:	08004289 	.word	0x08004289
 8004200:	08004277 	.word	0x08004277
 8004204:	08004289 	.word	0x08004289
 8004208:	08004289 	.word	0x08004289
 800420c:	08004289 	.word	0x08004289
 8004210:	08004289 	.word	0x08004289
 8004214:	08004289 	.word	0x08004289
 8004218:	08004289 	.word	0x08004289
 800421c:	08004289 	.word	0x08004289
 8004220:	0800428f 	.word	0x0800428f
 8004224:	08004289 	.word	0x08004289
 8004228:	08004289 	.word	0x08004289
 800422c:	08004289 	.word	0x08004289
 8004230:	08004289 	.word	0x08004289
 8004234:	08004289 	.word	0x08004289
 8004238:	08004289 	.word	0x08004289
 800423c:	08004289 	.word	0x08004289
 8004240:	0800428f 	.word	0x0800428f
 8004244:	08004289 	.word	0x08004289
 8004248:	08004289 	.word	0x08004289
 800424c:	08004289 	.word	0x08004289
 8004250:	08004289 	.word	0x08004289
 8004254:	08004289 	.word	0x08004289
 8004258:	08004289 	.word	0x08004289
 800425c:	08004289 	.word	0x08004289
 8004260:	0800428f 	.word	0x0800428f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	3304      	adds	r3, #4
 8004268:	2101      	movs	r1, #1
 800426a:	4618      	mov	r0, r3
 800426c:	f000 fdf4 	bl	8004e58 <RCCEx_PLL2_Config>
 8004270:	4603      	mov	r3, r0
 8004272:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004274:	e00c      	b.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x890>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	3324      	adds	r3, #36	; 0x24
 800427a:	2101      	movs	r1, #1
 800427c:	4618      	mov	r0, r3
 800427e:	f000 fe9d 	bl	8004fbc <RCCEx_PLL3_Config>
 8004282:	4603      	mov	r3, r0
 8004284:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004286:	e003      	b.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x890>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	75fb      	strb	r3, [r7, #23]
      break;
 800428c:	e000      	b.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x890>
      break;
 800428e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004290:	7dfb      	ldrb	r3, [r7, #23]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d109      	bne.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x8aa>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004296:	4b96      	ldr	r3, [pc, #600]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 8004298:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800429a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042a2:	4993      	ldr	r1, [pc, #588]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 80042a4:	4313      	orrs	r3, r2
 80042a6:	654b      	str	r3, [r1, #84]	; 0x54
 80042a8:	e001      	b.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x8ae>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042aa:	7dfb      	ldrb	r3, [r7, #23]
 80042ac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 0302 	and.w	r3, r3, #2
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d037      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x92a>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042be:	2b05      	cmp	r3, #5
 80042c0:	d820      	bhi.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x904>
 80042c2:	a201      	add	r2, pc, #4	; (adr r2, 80042c8 <HAL_RCCEx_PeriphCLKConfig+0x8c8>)
 80042c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042c8:	0800430b 	.word	0x0800430b
 80042cc:	080042e1 	.word	0x080042e1
 80042d0:	080042f3 	.word	0x080042f3
 80042d4:	0800430b 	.word	0x0800430b
 80042d8:	0800430b 	.word	0x0800430b
 80042dc:	0800430b 	.word	0x0800430b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	3304      	adds	r3, #4
 80042e4:	2101      	movs	r1, #1
 80042e6:	4618      	mov	r0, r3
 80042e8:	f000 fdb6 	bl	8004e58 <RCCEx_PLL2_Config>
 80042ec:	4603      	mov	r3, r0
 80042ee:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80042f0:	e00c      	b.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x90c>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	3324      	adds	r3, #36	; 0x24
 80042f6:	2101      	movs	r1, #1
 80042f8:	4618      	mov	r0, r3
 80042fa:	f000 fe5f 	bl	8004fbc <RCCEx_PLL3_Config>
 80042fe:	4603      	mov	r3, r0
 8004300:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004302:	e003      	b.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x90c>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	75fb      	strb	r3, [r7, #23]
      break;
 8004308:	e000      	b.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x90c>
      break;
 800430a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800430c:	7dfb      	ldrb	r3, [r7, #23]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d109      	bne.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x926>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004312:	4b77      	ldr	r3, [pc, #476]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 8004314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004316:	f023 0207 	bic.w	r2, r3, #7
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800431e:	4974      	ldr	r1, [pc, #464]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 8004320:	4313      	orrs	r3, r2
 8004322:	654b      	str	r3, [r1, #84]	; 0x54
 8004324:	e001      	b.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x92a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004326:	7dfb      	ldrb	r3, [r7, #23]
 8004328:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0304 	and.w	r3, r3, #4
 8004332:	2b00      	cmp	r3, #0
 8004334:	d03a      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x9ac>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800433c:	2b05      	cmp	r3, #5
 800433e:	d821      	bhi.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8004340:	a201      	add	r2, pc, #4	; (adr r2, 8004348 <HAL_RCCEx_PeriphCLKConfig+0x948>)
 8004342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004346:	bf00      	nop
 8004348:	0800438b 	.word	0x0800438b
 800434c:	08004361 	.word	0x08004361
 8004350:	08004373 	.word	0x08004373
 8004354:	0800438b 	.word	0x0800438b
 8004358:	0800438b 	.word	0x0800438b
 800435c:	0800438b 	.word	0x0800438b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	3304      	adds	r3, #4
 8004364:	2101      	movs	r1, #1
 8004366:	4618      	mov	r0, r3
 8004368:	f000 fd76 	bl	8004e58 <RCCEx_PLL2_Config>
 800436c:	4603      	mov	r3, r0
 800436e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004370:	e00c      	b.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x98c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	3324      	adds	r3, #36	; 0x24
 8004376:	2101      	movs	r1, #1
 8004378:	4618      	mov	r0, r3
 800437a:	f000 fe1f 	bl	8004fbc <RCCEx_PLL3_Config>
 800437e:	4603      	mov	r3, r0
 8004380:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004382:	e003      	b.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x98c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	75fb      	strb	r3, [r7, #23]
      break;
 8004388:	e000      	b.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x98c>
      break;
 800438a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800438c:	7dfb      	ldrb	r3, [r7, #23]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d10a      	bne.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004392:	4b57      	ldr	r3, [pc, #348]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 8004394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004396:	f023 0207 	bic.w	r2, r3, #7
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043a0:	4953      	ldr	r1, [pc, #332]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 80043a2:	4313      	orrs	r3, r2
 80043a4:	658b      	str	r3, [r1, #88]	; 0x58
 80043a6:	e001      	b.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x9ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043a8:	7dfb      	ldrb	r3, [r7, #23]
 80043aa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 0320 	and.w	r3, r3, #32
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d04b      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0xa50>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80043c2:	d02e      	beq.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0xa22>
 80043c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80043c8:	d828      	bhi.n	800441c <HAL_RCCEx_PeriphCLKConfig+0xa1c>
 80043ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043ce:	d02a      	beq.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0xa26>
 80043d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043d4:	d822      	bhi.n	800441c <HAL_RCCEx_PeriphCLKConfig+0xa1c>
 80043d6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80043da:	d026      	beq.n	800442a <HAL_RCCEx_PeriphCLKConfig+0xa2a>
 80043dc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80043e0:	d81c      	bhi.n	800441c <HAL_RCCEx_PeriphCLKConfig+0xa1c>
 80043e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043e6:	d010      	beq.n	800440a <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 80043e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043ec:	d816      	bhi.n	800441c <HAL_RCCEx_PeriphCLKConfig+0xa1c>
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d01d      	beq.n	800442e <HAL_RCCEx_PeriphCLKConfig+0xa2e>
 80043f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043f6:	d111      	bne.n	800441c <HAL_RCCEx_PeriphCLKConfig+0xa1c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	3304      	adds	r3, #4
 80043fc:	2100      	movs	r1, #0
 80043fe:	4618      	mov	r0, r3
 8004400:	f000 fd2a 	bl	8004e58 <RCCEx_PLL2_Config>
 8004404:	4603      	mov	r3, r0
 8004406:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004408:	e012      	b.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0xa30>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	3324      	adds	r3, #36	; 0x24
 800440e:	2102      	movs	r1, #2
 8004410:	4618      	mov	r0, r3
 8004412:	f000 fdd3 	bl	8004fbc <RCCEx_PLL3_Config>
 8004416:	4603      	mov	r3, r0
 8004418:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800441a:	e009      	b.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0xa30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	75fb      	strb	r3, [r7, #23]
      break;
 8004420:	e006      	b.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0xa30>
      break;
 8004422:	bf00      	nop
 8004424:	e004      	b.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0xa30>
      break;
 8004426:	bf00      	nop
 8004428:	e002      	b.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0xa30>
      break;
 800442a:	bf00      	nop
 800442c:	e000      	b.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0xa30>
      break;
 800442e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004430:	7dfb      	ldrb	r3, [r7, #23]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d10a      	bne.n	800444c <HAL_RCCEx_PeriphCLKConfig+0xa4c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004436:	4b2e      	ldr	r3, [pc, #184]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 8004438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800443a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004444:	492a      	ldr	r1, [pc, #168]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 8004446:	4313      	orrs	r3, r2
 8004448:	654b      	str	r3, [r1, #84]	; 0x54
 800444a:	e001      	b.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800444c:	7dfb      	ldrb	r3, [r7, #23]
 800444e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004458:	2b00      	cmp	r3, #0
 800445a:	d04d      	beq.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004462:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004466:	d02e      	beq.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0xac6>
 8004468:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800446c:	d828      	bhi.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0xac0>
 800446e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004472:	d02a      	beq.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0xaca>
 8004474:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004478:	d822      	bhi.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0xac0>
 800447a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800447e:	d026      	beq.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0xace>
 8004480:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004484:	d81c      	bhi.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0xac0>
 8004486:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800448a:	d010      	beq.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0xaae>
 800448c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004490:	d816      	bhi.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0xac0>
 8004492:	2b00      	cmp	r3, #0
 8004494:	d01d      	beq.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0xad2>
 8004496:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800449a:	d111      	bne.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0xac0>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	3304      	adds	r3, #4
 80044a0:	2100      	movs	r1, #0
 80044a2:	4618      	mov	r0, r3
 80044a4:	f000 fcd8 	bl	8004e58 <RCCEx_PLL2_Config>
 80044a8:	4603      	mov	r3, r0
 80044aa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80044ac:	e012      	b.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0xad4>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	3324      	adds	r3, #36	; 0x24
 80044b2:	2102      	movs	r1, #2
 80044b4:	4618      	mov	r0, r3
 80044b6:	f000 fd81 	bl	8004fbc <RCCEx_PLL3_Config>
 80044ba:	4603      	mov	r3, r0
 80044bc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80044be:	e009      	b.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0xad4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	75fb      	strb	r3, [r7, #23]
      break;
 80044c4:	e006      	b.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0xad4>
      break;
 80044c6:	bf00      	nop
 80044c8:	e004      	b.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0xad4>
      break;
 80044ca:	bf00      	nop
 80044cc:	e002      	b.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0xad4>
      break;
 80044ce:	bf00      	nop
 80044d0:	e000      	b.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0xad4>
      break;
 80044d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044d4:	7dfb      	ldrb	r3, [r7, #23]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d10c      	bne.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80044da:	4b05      	ldr	r3, [pc, #20]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 80044dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044de:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80044e8:	4901      	ldr	r1, [pc, #4]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0xaf0>)
 80044ea:	4313      	orrs	r3, r2
 80044ec:	658b      	str	r3, [r1, #88]	; 0x58
 80044ee:	e003      	b.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
 80044f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044f4:	7dfb      	ldrb	r3, [r7, #23]
 80044f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004500:	2b00      	cmp	r3, #0
 8004502:	d04b      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800450a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800450e:	d02e      	beq.n	800456e <HAL_RCCEx_PeriphCLKConfig+0xb6e>
 8004510:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004514:	d828      	bhi.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8004516:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800451a:	d02a      	beq.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0xb72>
 800451c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004520:	d822      	bhi.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8004522:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004526:	d026      	beq.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0xb76>
 8004528:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800452c:	d81c      	bhi.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 800452e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004532:	d010      	beq.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0xb56>
 8004534:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004538:	d816      	bhi.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 800453a:	2b00      	cmp	r3, #0
 800453c:	d01d      	beq.n	800457a <HAL_RCCEx_PeriphCLKConfig+0xb7a>
 800453e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004542:	d111      	bne.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0xb68>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	3304      	adds	r3, #4
 8004548:	2100      	movs	r1, #0
 800454a:	4618      	mov	r0, r3
 800454c:	f000 fc84 	bl	8004e58 <RCCEx_PLL2_Config>
 8004550:	4603      	mov	r3, r0
 8004552:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004554:	e012      	b.n	800457c <HAL_RCCEx_PeriphCLKConfig+0xb7c>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	3324      	adds	r3, #36	; 0x24
 800455a:	2102      	movs	r1, #2
 800455c:	4618      	mov	r0, r3
 800455e:	f000 fd2d 	bl	8004fbc <RCCEx_PLL3_Config>
 8004562:	4603      	mov	r3, r0
 8004564:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004566:	e009      	b.n	800457c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	75fb      	strb	r3, [r7, #23]
      break;
 800456c:	e006      	b.n	800457c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 800456e:	bf00      	nop
 8004570:	e004      	b.n	800457c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8004572:	bf00      	nop
 8004574:	e002      	b.n	800457c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8004576:	bf00      	nop
 8004578:	e000      	b.n	800457c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 800457a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800457c:	7dfb      	ldrb	r3, [r7, #23]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d10a      	bne.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0xb98>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004582:	4b9e      	ldr	r3, [pc, #632]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8004584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004586:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004590:	499a      	ldr	r1, [pc, #616]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8004592:	4313      	orrs	r3, r2
 8004594:	658b      	str	r3, [r1, #88]	; 0x58
 8004596:	e001      	b.n	800459c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004598:	7dfb      	ldrb	r3, [r7, #23]
 800459a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 0308 	and.w	r3, r3, #8
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d01a      	beq.n	80045de <HAL_RCCEx_PeriphCLKConfig+0xbde>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045b2:	d10a      	bne.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0xbca>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	3324      	adds	r3, #36	; 0x24
 80045b8:	2102      	movs	r1, #2
 80045ba:	4618      	mov	r0, r3
 80045bc:	f000 fcfe 	bl	8004fbc <RCCEx_PLL3_Config>
 80045c0:	4603      	mov	r3, r0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d001      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0xbca>
        {
          status = HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80045ca:	4b8c      	ldr	r3, [pc, #560]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 80045cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ce:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045d8:	4988      	ldr	r1, [pc, #544]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 80045da:	4313      	orrs	r3, r2
 80045dc:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 0310 	and.w	r3, r3, #16
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d01a      	beq.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0xc20>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045f4:	d10a      	bne.n	800460c <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	3324      	adds	r3, #36	; 0x24
 80045fa:	2102      	movs	r1, #2
 80045fc:	4618      	mov	r0, r3
 80045fe:	f000 fcdd 	bl	8004fbc <RCCEx_PLL3_Config>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d001      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0xc0c>
      {
        status = HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800460c:	4b7b      	ldr	r3, [pc, #492]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 800460e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004610:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800461a:	4978      	ldr	r1, [pc, #480]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 800461c:	4313      	orrs	r3, r2
 800461e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004628:	2b00      	cmp	r3, #0
 800462a:	d034      	beq.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0xc96>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004632:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004636:	d01d      	beq.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8004638:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800463c:	d817      	bhi.n	800466e <HAL_RCCEx_PeriphCLKConfig+0xc6e>
 800463e:	2b00      	cmp	r3, #0
 8004640:	d003      	beq.n	800464a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
 8004642:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004646:	d009      	beq.n	800465c <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 8004648:	e011      	b.n	800466e <HAL_RCCEx_PeriphCLKConfig+0xc6e>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	3304      	adds	r3, #4
 800464e:	2100      	movs	r1, #0
 8004650:	4618      	mov	r0, r3
 8004652:	f000 fc01 	bl	8004e58 <RCCEx_PLL2_Config>
 8004656:	4603      	mov	r3, r0
 8004658:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800465a:	e00c      	b.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0xc76>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	3324      	adds	r3, #36	; 0x24
 8004660:	2102      	movs	r1, #2
 8004662:	4618      	mov	r0, r3
 8004664:	f000 fcaa 	bl	8004fbc <RCCEx_PLL3_Config>
 8004668:	4603      	mov	r3, r0
 800466a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800466c:	e003      	b.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0xc76>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	75fb      	strb	r3, [r7, #23]
      break;
 8004672:	e000      	b.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0xc76>
      break;
 8004674:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004676:	7dfb      	ldrb	r3, [r7, #23]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d10a      	bne.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800467c:	4b5f      	ldr	r3, [pc, #380]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 800467e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004680:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800468a:	495c      	ldr	r1, [pc, #368]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 800468c:	4313      	orrs	r3, r2
 800468e:	658b      	str	r3, [r1, #88]	; 0x58
 8004690:	e001      	b.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004692:	7dfb      	ldrb	r3, [r7, #23]
 8004694:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d033      	beq.n	800470a <HAL_RCCEx_PeriphCLKConfig+0xd0a>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046a8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80046ac:	d01c      	beq.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80046ae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80046b2:	d816      	bhi.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0xce2>
 80046b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046b8:	d003      	beq.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 80046ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046be:	d007      	beq.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0xcd0>
 80046c0:	e00f      	b.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0xce2>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046c2:	4b4e      	ldr	r3, [pc, #312]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 80046c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c6:	4a4d      	ldr	r2, [pc, #308]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 80046c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046cc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80046ce:	e00c      	b.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0xcea>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	3324      	adds	r3, #36	; 0x24
 80046d4:	2101      	movs	r1, #1
 80046d6:	4618      	mov	r0, r3
 80046d8:	f000 fc70 	bl	8004fbc <RCCEx_PLL3_Config>
 80046dc:	4603      	mov	r3, r0
 80046de:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80046e0:	e003      	b.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0xcea>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	75fb      	strb	r3, [r7, #23]
      break;
 80046e6:	e000      	b.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0xcea>
      break;
 80046e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046ea:	7dfb      	ldrb	r3, [r7, #23]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d10a      	bne.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0xd06>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80046f0:	4b42      	ldr	r3, [pc, #264]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 80046f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046fe:	493f      	ldr	r1, [pc, #252]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8004700:	4313      	orrs	r3, r2
 8004702:	654b      	str	r3, [r1, #84]	; 0x54
 8004704:	e001      	b.n	800470a <HAL_RCCEx_PeriphCLKConfig+0xd0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004706:	7dfb      	ldrb	r3, [r7, #23]
 8004708:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004712:	2b00      	cmp	r3, #0
 8004714:	d029      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0xd6a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800471a:	2b00      	cmp	r3, #0
 800471c:	d003      	beq.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0xd26>
 800471e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004722:	d007      	beq.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0xd34>
 8004724:	e00f      	b.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0xd46>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004726:	4b35      	ldr	r3, [pc, #212]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8004728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800472a:	4a34      	ldr	r2, [pc, #208]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 800472c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004730:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004732:	e00b      	b.n	800474c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	3304      	adds	r3, #4
 8004738:	2102      	movs	r1, #2
 800473a:	4618      	mov	r0, r3
 800473c:	f000 fb8c 	bl	8004e58 <RCCEx_PLL2_Config>
 8004740:	4603      	mov	r3, r0
 8004742:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004744:	e002      	b.n	800474c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

    default:
      ret = HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	75fb      	strb	r3, [r7, #23]
      break;
 800474a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800474c:	7dfb      	ldrb	r3, [r7, #23]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d109      	bne.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0xd66>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004752:	4b2a      	ldr	r3, [pc, #168]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8004754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004756:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800475e:	4927      	ldr	r1, [pc, #156]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 8004760:	4313      	orrs	r3, r2
 8004762:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004764:	e001      	b.n	800476a <HAL_RCCEx_PeriphCLKConfig+0xd6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004766:	7dfb      	ldrb	r3, [r7, #23]
 8004768:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d00a      	beq.n	800478c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	3324      	adds	r3, #36	; 0x24
 800477a:	2102      	movs	r1, #2
 800477c:	4618      	mov	r0, r3
 800477e:	f000 fc1d 	bl	8004fbc <RCCEx_PLL3_Config>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d001      	beq.n	800478c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
    {
      status=HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004794:	2b00      	cmp	r3, #0
 8004796:	d035      	beq.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0xe04>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800479e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047a2:	d017      	beq.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0xdd4>
 80047a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047a8:	d811      	bhi.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0xdce>
 80047aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047ae:	d013      	beq.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>
 80047b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047b4:	d80b      	bhi.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0xdce>
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d010      	beq.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0xddc>
 80047ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047be:	d106      	bne.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0xdce>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047c0:	4b0e      	ldr	r3, [pc, #56]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 80047c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c4:	4a0d      	ldr	r2, [pc, #52]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 80047c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80047cc:	e007      	b.n	80047de <HAL_RCCEx_PeriphCLKConfig+0xdde>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	75fb      	strb	r3, [r7, #23]
      break;
 80047d2:	e004      	b.n	80047de <HAL_RCCEx_PeriphCLKConfig+0xdde>
      break;
 80047d4:	bf00      	nop
 80047d6:	e002      	b.n	80047de <HAL_RCCEx_PeriphCLKConfig+0xdde>
      break;
 80047d8:	bf00      	nop
 80047da:	e000      	b.n	80047de <HAL_RCCEx_PeriphCLKConfig+0xdde>
      break;
 80047dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047de:	7dfb      	ldrb	r3, [r7, #23]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d10d      	bne.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0xe00>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80047e4:	4b05      	ldr	r3, [pc, #20]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 80047e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047f2:	4902      	ldr	r1, [pc, #8]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0xdfc>)
 80047f4:	4313      	orrs	r3, r2
 80047f6:	654b      	str	r3, [r1, #84]	; 0x54
 80047f8:	e004      	b.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0xe04>
 80047fa:	bf00      	nop
 80047fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004800:	7dfb      	ldrb	r3, [r7, #23]
 8004802:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800480c:	2b00      	cmp	r3, #0
 800480e:	d008      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0xe22>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004810:	4b31      	ldr	r3, [pc, #196]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 8004812:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004814:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800481c:	492e      	ldr	r1, [pc, #184]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 800481e:	4313      	orrs	r3, r2
 8004820:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d009      	beq.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0xe42>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800482e:	4b2a      	ldr	r3, [pc, #168]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 8004830:	691b      	ldr	r3, [r3, #16]
 8004832:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800483c:	4926      	ldr	r1, [pc, #152]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 800483e:	4313      	orrs	r3, r2
 8004840:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800484a:	2b00      	cmp	r3, #0
 800484c:	d008      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0xe60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800484e:	4b22      	ldr	r3, [pc, #136]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 8004850:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004852:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800485a:	491f      	ldr	r1, [pc, #124]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 800485c:	4313      	orrs	r3, r2
 800485e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004868:	2b00      	cmp	r3, #0
 800486a:	d00d      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0xe88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800486c:	4b1a      	ldr	r3, [pc, #104]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 800486e:	691b      	ldr	r3, [r3, #16]
 8004870:	4a19      	ldr	r2, [pc, #100]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 8004872:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004876:	6113      	str	r3, [r2, #16]
 8004878:	4b17      	ldr	r3, [pc, #92]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 800487a:	691a      	ldr	r2, [r3, #16]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004882:	4915      	ldr	r1, [pc, #84]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 8004884:	4313      	orrs	r3, r2
 8004886:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2b00      	cmp	r3, #0
 800488e:	da08      	bge.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004890:	4b11      	ldr	r3, [pc, #68]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 8004892:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004894:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800489c:	490e      	ldr	r1, [pc, #56]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 800489e:	4313      	orrs	r3, r2
 80048a0:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d009      	beq.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0xec2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80048ae:	4b0a      	ldr	r3, [pc, #40]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 80048b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048b2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048bc:	4906      	ldr	r1, [pc, #24]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0xed8>)
 80048be:	4313      	orrs	r3, r2
 80048c0:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80048c2:	7dbb      	ldrb	r3, [r7, #22]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d101      	bne.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    return HAL_OK;
 80048c8:	2300      	movs	r3, #0
 80048ca:	e000      	b.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0xece>
  }
  return HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3718      	adds	r7, #24
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	bf00      	nop
 80048d8:	58024400 	.word	0x58024400

080048dc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80048e0:	f7ff f832 	bl	8003948 <HAL_RCC_GetHCLKFreq>
 80048e4:	4602      	mov	r2, r0
 80048e6:	4b06      	ldr	r3, [pc, #24]	; (8004900 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80048e8:	6a1b      	ldr	r3, [r3, #32]
 80048ea:	091b      	lsrs	r3, r3, #4
 80048ec:	f003 0307 	and.w	r3, r3, #7
 80048f0:	4904      	ldr	r1, [pc, #16]	; (8004904 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80048f2:	5ccb      	ldrb	r3, [r1, r3]
 80048f4:	f003 031f 	and.w	r3, r3, #31
 80048f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	bd80      	pop	{r7, pc}
 8004900:	58024400 	.word	0x58024400
 8004904:	0800a70c 	.word	0x0800a70c

08004908 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004908:	b480      	push	{r7}
 800490a:	b089      	sub	sp, #36	; 0x24
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004910:	4ba1      	ldr	r3, [pc, #644]	; (8004b98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004914:	f003 0303 	and.w	r3, r3, #3
 8004918:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800491a:	4b9f      	ldr	r3, [pc, #636]	; (8004b98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800491c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800491e:	0b1b      	lsrs	r3, r3, #12
 8004920:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004924:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004926:	4b9c      	ldr	r3, [pc, #624]	; (8004b98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800492a:	091b      	lsrs	r3, r3, #4
 800492c:	f003 0301 	and.w	r3, r3, #1
 8004930:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004932:	4b99      	ldr	r3, [pc, #612]	; (8004b98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004936:	08db      	lsrs	r3, r3, #3
 8004938:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800493c:	693a      	ldr	r2, [r7, #16]
 800493e:	fb02 f303 	mul.w	r3, r2, r3
 8004942:	ee07 3a90 	vmov	s15, r3
 8004946:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800494a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	2b00      	cmp	r3, #0
 8004952:	f000 8111 	beq.w	8004b78 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004956:	69bb      	ldr	r3, [r7, #24]
 8004958:	2b02      	cmp	r3, #2
 800495a:	f000 8083 	beq.w	8004a64 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800495e:	69bb      	ldr	r3, [r7, #24]
 8004960:	2b02      	cmp	r3, #2
 8004962:	f200 80a1 	bhi.w	8004aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004966:	69bb      	ldr	r3, [r7, #24]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d003      	beq.n	8004974 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	2b01      	cmp	r3, #1
 8004970:	d056      	beq.n	8004a20 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004972:	e099      	b.n	8004aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004974:	4b88      	ldr	r3, [pc, #544]	; (8004b98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0320 	and.w	r3, r3, #32
 800497c:	2b00      	cmp	r3, #0
 800497e:	d02d      	beq.n	80049dc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004980:	4b85      	ldr	r3, [pc, #532]	; (8004b98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	08db      	lsrs	r3, r3, #3
 8004986:	f003 0303 	and.w	r3, r3, #3
 800498a:	4a84      	ldr	r2, [pc, #528]	; (8004b9c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800498c:	fa22 f303 	lsr.w	r3, r2, r3
 8004990:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	ee07 3a90 	vmov	s15, r3
 8004998:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	ee07 3a90 	vmov	s15, r3
 80049a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049aa:	4b7b      	ldr	r3, [pc, #492]	; (8004b98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049b2:	ee07 3a90 	vmov	s15, r3
 80049b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80049be:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80049c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049d6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80049da:	e087      	b.n	8004aec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	ee07 3a90 	vmov	s15, r3
 80049e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049e6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004ba4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80049ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049ee:	4b6a      	ldr	r3, [pc, #424]	; (8004b98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049f6:	ee07 3a90 	vmov	s15, r3
 80049fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a02:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a1a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004a1e:	e065      	b.n	8004aec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	ee07 3a90 	vmov	s15, r3
 8004a26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a2a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004a2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a32:	4b59      	ldr	r3, [pc, #356]	; (8004b98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a3a:	ee07 3a90 	vmov	s15, r3
 8004a3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a42:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a46:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a5e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004a62:	e043      	b.n	8004aec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	ee07 3a90 	vmov	s15, r3
 8004a6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a6e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004bac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004a72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a76:	4b48      	ldr	r3, [pc, #288]	; (8004b98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a7e:	ee07 3a90 	vmov	s15, r3
 8004a82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a86:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a8a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aa2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004aa6:	e021      	b.n	8004aec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	ee07 3a90 	vmov	s15, r3
 8004aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ab2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004ab6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004aba:	4b37      	ldr	r3, [pc, #220]	; (8004b98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004abe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ac2:	ee07 3a90 	vmov	s15, r3
 8004ac6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004aca:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ace:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004ad2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ad6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ada:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ade:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ae6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004aea:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004aec:	4b2a      	ldr	r3, [pc, #168]	; (8004b98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af0:	0a5b      	lsrs	r3, r3, #9
 8004af2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004af6:	ee07 3a90 	vmov	s15, r3
 8004afa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004afe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b06:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b12:	ee17 2a90 	vmov	r2, s15
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004b1a:	4b1f      	ldr	r3, [pc, #124]	; (8004b98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b1e:	0c1b      	lsrs	r3, r3, #16
 8004b20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b24:	ee07 3a90 	vmov	s15, r3
 8004b28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b2c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b30:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b34:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b40:	ee17 2a90 	vmov	r2, s15
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004b48:	4b13      	ldr	r3, [pc, #76]	; (8004b98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b4c:	0e1b      	lsrs	r3, r3, #24
 8004b4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b52:	ee07 3a90 	vmov	s15, r3
 8004b56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b62:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b6e:	ee17 2a90 	vmov	r2, s15
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004b76:	e008      	b.n	8004b8a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	609a      	str	r2, [r3, #8]
}
 8004b8a:	bf00      	nop
 8004b8c:	3724      	adds	r7, #36	; 0x24
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr
 8004b96:	bf00      	nop
 8004b98:	58024400 	.word	0x58024400
 8004b9c:	03d09000 	.word	0x03d09000
 8004ba0:	46000000 	.word	0x46000000
 8004ba4:	4c742400 	.word	0x4c742400
 8004ba8:	4a742400 	.word	0x4a742400
 8004bac:	4bbebc20 	.word	0x4bbebc20

08004bb0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b089      	sub	sp, #36	; 0x24
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004bb8:	4ba1      	ldr	r3, [pc, #644]	; (8004e40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bbc:	f003 0303 	and.w	r3, r3, #3
 8004bc0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004bc2:	4b9f      	ldr	r3, [pc, #636]	; (8004e40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bc6:	0d1b      	lsrs	r3, r3, #20
 8004bc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004bcc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004bce:	4b9c      	ldr	r3, [pc, #624]	; (8004e40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd2:	0a1b      	lsrs	r3, r3, #8
 8004bd4:	f003 0301 	and.w	r3, r3, #1
 8004bd8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004bda:	4b99      	ldr	r3, [pc, #612]	; (8004e40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bde:	08db      	lsrs	r3, r3, #3
 8004be0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004be4:	693a      	ldr	r2, [r7, #16]
 8004be6:	fb02 f303 	mul.w	r3, r2, r3
 8004bea:	ee07 3a90 	vmov	s15, r3
 8004bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bf2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	f000 8111 	beq.w	8004e20 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004bfe:	69bb      	ldr	r3, [r7, #24]
 8004c00:	2b02      	cmp	r3, #2
 8004c02:	f000 8083 	beq.w	8004d0c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	2b02      	cmp	r3, #2
 8004c0a:	f200 80a1 	bhi.w	8004d50 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004c0e:	69bb      	ldr	r3, [r7, #24]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d003      	beq.n	8004c1c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004c14:	69bb      	ldr	r3, [r7, #24]
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d056      	beq.n	8004cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004c1a:	e099      	b.n	8004d50 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c1c:	4b88      	ldr	r3, [pc, #544]	; (8004e40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 0320 	and.w	r3, r3, #32
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d02d      	beq.n	8004c84 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004c28:	4b85      	ldr	r3, [pc, #532]	; (8004e40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	08db      	lsrs	r3, r3, #3
 8004c2e:	f003 0303 	and.w	r3, r3, #3
 8004c32:	4a84      	ldr	r2, [pc, #528]	; (8004e44 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004c34:	fa22 f303 	lsr.w	r3, r2, r3
 8004c38:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	ee07 3a90 	vmov	s15, r3
 8004c40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	ee07 3a90 	vmov	s15, r3
 8004c4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c52:	4b7b      	ldr	r3, [pc, #492]	; (8004e40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c5a:	ee07 3a90 	vmov	s15, r3
 8004c5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c62:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c66:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004e48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c7e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004c82:	e087      	b.n	8004d94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	ee07 3a90 	vmov	s15, r3
 8004c8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c8e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004e4c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004c92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c96:	4b6a      	ldr	r3, [pc, #424]	; (8004e40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c9e:	ee07 3a90 	vmov	s15, r3
 8004ca2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ca6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004caa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004e48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004cae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004cba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cc2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004cc6:	e065      	b.n	8004d94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	ee07 3a90 	vmov	s15, r3
 8004cce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cd2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004e50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004cd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cda:	4b59      	ldr	r3, [pc, #356]	; (8004e40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ce2:	ee07 3a90 	vmov	s15, r3
 8004ce6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cea:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cee:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004e48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004cf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004cfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d06:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004d0a:	e043      	b.n	8004d94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	ee07 3a90 	vmov	s15, r3
 8004d12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d16:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004e54 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004d1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d1e:	4b48      	ldr	r3, [pc, #288]	; (8004e40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d26:	ee07 3a90 	vmov	s15, r3
 8004d2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d32:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004e48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d4a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004d4e:	e021      	b.n	8004d94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	ee07 3a90 	vmov	s15, r3
 8004d56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d5a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004e50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004d5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d62:	4b37      	ldr	r3, [pc, #220]	; (8004e40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d6a:	ee07 3a90 	vmov	s15, r3
 8004d6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d72:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d76:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004e48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d8e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004d92:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004d94:	4b2a      	ldr	r3, [pc, #168]	; (8004e40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d98:	0a5b      	lsrs	r3, r3, #9
 8004d9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d9e:	ee07 3a90 	vmov	s15, r3
 8004da2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004da6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004daa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004dae:	edd7 6a07 	vldr	s13, [r7, #28]
 8004db2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004db6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004dba:	ee17 2a90 	vmov	r2, s15
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004dc2:	4b1f      	ldr	r3, [pc, #124]	; (8004e40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc6:	0c1b      	lsrs	r3, r3, #16
 8004dc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004dcc:	ee07 3a90 	vmov	s15, r3
 8004dd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dd4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004dd8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ddc:	edd7 6a07 	vldr	s13, [r7, #28]
 8004de0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004de4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004de8:	ee17 2a90 	vmov	r2, s15
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004df0:	4b13      	ldr	r3, [pc, #76]	; (8004e40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df4:	0e1b      	lsrs	r3, r3, #24
 8004df6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004dfa:	ee07 3a90 	vmov	s15, r3
 8004dfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004e06:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e16:	ee17 2a90 	vmov	r2, s15
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004e1e:	e008      	b.n	8004e32 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	609a      	str	r2, [r3, #8]
}
 8004e32:	bf00      	nop
 8004e34:	3724      	adds	r7, #36	; 0x24
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr
 8004e3e:	bf00      	nop
 8004e40:	58024400 	.word	0x58024400
 8004e44:	03d09000 	.word	0x03d09000
 8004e48:	46000000 	.word	0x46000000
 8004e4c:	4c742400 	.word	0x4c742400
 8004e50:	4a742400 	.word	0x4a742400
 8004e54:	4bbebc20 	.word	0x4bbebc20

08004e58 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b084      	sub	sp, #16
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e62:	2300      	movs	r3, #0
 8004e64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004e66:	4b53      	ldr	r3, [pc, #332]	; (8004fb4 <RCCEx_PLL2_Config+0x15c>)
 8004e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e6a:	f003 0303 	and.w	r3, r3, #3
 8004e6e:	2b03      	cmp	r3, #3
 8004e70:	d101      	bne.n	8004e76 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e099      	b.n	8004faa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004e76:	4b4f      	ldr	r3, [pc, #316]	; (8004fb4 <RCCEx_PLL2_Config+0x15c>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a4e      	ldr	r2, [pc, #312]	; (8004fb4 <RCCEx_PLL2_Config+0x15c>)
 8004e7c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004e80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e82:	f7fb ff2f 	bl	8000ce4 <HAL_GetTick>
 8004e86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004e88:	e008      	b.n	8004e9c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004e8a:	f7fb ff2b 	bl	8000ce4 <HAL_GetTick>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	1ad3      	subs	r3, r2, r3
 8004e94:	2b02      	cmp	r3, #2
 8004e96:	d901      	bls.n	8004e9c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	e086      	b.n	8004faa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004e9c:	4b45      	ldr	r3, [pc, #276]	; (8004fb4 <RCCEx_PLL2_Config+0x15c>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d1f0      	bne.n	8004e8a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004ea8:	4b42      	ldr	r3, [pc, #264]	; (8004fb4 <RCCEx_PLL2_Config+0x15c>)
 8004eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eac:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	031b      	lsls	r3, r3, #12
 8004eb6:	493f      	ldr	r1, [pc, #252]	; (8004fb4 <RCCEx_PLL2_Config+0x15c>)
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	628b      	str	r3, [r1, #40]	; 0x28
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	3b01      	subs	r3, #1
 8004ec2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	3b01      	subs	r3, #1
 8004ecc:	025b      	lsls	r3, r3, #9
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	431a      	orrs	r2, r3
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	68db      	ldr	r3, [r3, #12]
 8004ed6:	3b01      	subs	r3, #1
 8004ed8:	041b      	lsls	r3, r3, #16
 8004eda:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004ede:	431a      	orrs	r2, r3
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	691b      	ldr	r3, [r3, #16]
 8004ee4:	3b01      	subs	r3, #1
 8004ee6:	061b      	lsls	r3, r3, #24
 8004ee8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004eec:	4931      	ldr	r1, [pc, #196]	; (8004fb4 <RCCEx_PLL2_Config+0x15c>)
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004ef2:	4b30      	ldr	r3, [pc, #192]	; (8004fb4 <RCCEx_PLL2_Config+0x15c>)
 8004ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	695b      	ldr	r3, [r3, #20]
 8004efe:	492d      	ldr	r1, [pc, #180]	; (8004fb4 <RCCEx_PLL2_Config+0x15c>)
 8004f00:	4313      	orrs	r3, r2
 8004f02:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004f04:	4b2b      	ldr	r3, [pc, #172]	; (8004fb4 <RCCEx_PLL2_Config+0x15c>)
 8004f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f08:	f023 0220 	bic.w	r2, r3, #32
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	699b      	ldr	r3, [r3, #24]
 8004f10:	4928      	ldr	r1, [pc, #160]	; (8004fb4 <RCCEx_PLL2_Config+0x15c>)
 8004f12:	4313      	orrs	r3, r2
 8004f14:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004f16:	4b27      	ldr	r3, [pc, #156]	; (8004fb4 <RCCEx_PLL2_Config+0x15c>)
 8004f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f1a:	4a26      	ldr	r2, [pc, #152]	; (8004fb4 <RCCEx_PLL2_Config+0x15c>)
 8004f1c:	f023 0310 	bic.w	r3, r3, #16
 8004f20:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004f22:	4b24      	ldr	r3, [pc, #144]	; (8004fb4 <RCCEx_PLL2_Config+0x15c>)
 8004f24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f26:	4b24      	ldr	r3, [pc, #144]	; (8004fb8 <RCCEx_PLL2_Config+0x160>)
 8004f28:	4013      	ands	r3, r2
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	69d2      	ldr	r2, [r2, #28]
 8004f2e:	00d2      	lsls	r2, r2, #3
 8004f30:	4920      	ldr	r1, [pc, #128]	; (8004fb4 <RCCEx_PLL2_Config+0x15c>)
 8004f32:	4313      	orrs	r3, r2
 8004f34:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004f36:	4b1f      	ldr	r3, [pc, #124]	; (8004fb4 <RCCEx_PLL2_Config+0x15c>)
 8004f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f3a:	4a1e      	ldr	r2, [pc, #120]	; (8004fb4 <RCCEx_PLL2_Config+0x15c>)
 8004f3c:	f043 0310 	orr.w	r3, r3, #16
 8004f40:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d106      	bne.n	8004f56 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004f48:	4b1a      	ldr	r3, [pc, #104]	; (8004fb4 <RCCEx_PLL2_Config+0x15c>)
 8004f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f4c:	4a19      	ldr	r2, [pc, #100]	; (8004fb4 <RCCEx_PLL2_Config+0x15c>)
 8004f4e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f52:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004f54:	e00f      	b.n	8004f76 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d106      	bne.n	8004f6a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004f5c:	4b15      	ldr	r3, [pc, #84]	; (8004fb4 <RCCEx_PLL2_Config+0x15c>)
 8004f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f60:	4a14      	ldr	r2, [pc, #80]	; (8004fb4 <RCCEx_PLL2_Config+0x15c>)
 8004f62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f66:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004f68:	e005      	b.n	8004f76 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004f6a:	4b12      	ldr	r3, [pc, #72]	; (8004fb4 <RCCEx_PLL2_Config+0x15c>)
 8004f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f6e:	4a11      	ldr	r2, [pc, #68]	; (8004fb4 <RCCEx_PLL2_Config+0x15c>)
 8004f70:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004f74:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004f76:	4b0f      	ldr	r3, [pc, #60]	; (8004fb4 <RCCEx_PLL2_Config+0x15c>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a0e      	ldr	r2, [pc, #56]	; (8004fb4 <RCCEx_PLL2_Config+0x15c>)
 8004f7c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004f80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f82:	f7fb feaf 	bl	8000ce4 <HAL_GetTick>
 8004f86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004f88:	e008      	b.n	8004f9c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004f8a:	f7fb feab 	bl	8000ce4 <HAL_GetTick>
 8004f8e:	4602      	mov	r2, r0
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	1ad3      	subs	r3, r2, r3
 8004f94:	2b02      	cmp	r3, #2
 8004f96:	d901      	bls.n	8004f9c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004f98:	2303      	movs	r3, #3
 8004f9a:	e006      	b.n	8004faa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004f9c:	4b05      	ldr	r3, [pc, #20]	; (8004fb4 <RCCEx_PLL2_Config+0x15c>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d0f0      	beq.n	8004f8a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3710      	adds	r7, #16
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	58024400 	.word	0x58024400
 8004fb8:	ffff0007 	.word	0xffff0007

08004fbc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b084      	sub	sp, #16
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004fca:	4b53      	ldr	r3, [pc, #332]	; (8005118 <RCCEx_PLL3_Config+0x15c>)
 8004fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fce:	f003 0303 	and.w	r3, r3, #3
 8004fd2:	2b03      	cmp	r3, #3
 8004fd4:	d101      	bne.n	8004fda <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e099      	b.n	800510e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004fda:	4b4f      	ldr	r3, [pc, #316]	; (8005118 <RCCEx_PLL3_Config+0x15c>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a4e      	ldr	r2, [pc, #312]	; (8005118 <RCCEx_PLL3_Config+0x15c>)
 8004fe0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fe4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fe6:	f7fb fe7d 	bl	8000ce4 <HAL_GetTick>
 8004fea:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004fec:	e008      	b.n	8005000 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004fee:	f7fb fe79 	bl	8000ce4 <HAL_GetTick>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	1ad3      	subs	r3, r2, r3
 8004ff8:	2b02      	cmp	r3, #2
 8004ffa:	d901      	bls.n	8005000 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004ffc:	2303      	movs	r3, #3
 8004ffe:	e086      	b.n	800510e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005000:	4b45      	ldr	r3, [pc, #276]	; (8005118 <RCCEx_PLL3_Config+0x15c>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005008:	2b00      	cmp	r3, #0
 800500a:	d1f0      	bne.n	8004fee <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800500c:	4b42      	ldr	r3, [pc, #264]	; (8005118 <RCCEx_PLL3_Config+0x15c>)
 800500e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005010:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	051b      	lsls	r3, r3, #20
 800501a:	493f      	ldr	r1, [pc, #252]	; (8005118 <RCCEx_PLL3_Config+0x15c>)
 800501c:	4313      	orrs	r3, r2
 800501e:	628b      	str	r3, [r1, #40]	; 0x28
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	3b01      	subs	r3, #1
 8005026:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	3b01      	subs	r3, #1
 8005030:	025b      	lsls	r3, r3, #9
 8005032:	b29b      	uxth	r3, r3
 8005034:	431a      	orrs	r2, r3
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	68db      	ldr	r3, [r3, #12]
 800503a:	3b01      	subs	r3, #1
 800503c:	041b      	lsls	r3, r3, #16
 800503e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005042:	431a      	orrs	r2, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	691b      	ldr	r3, [r3, #16]
 8005048:	3b01      	subs	r3, #1
 800504a:	061b      	lsls	r3, r3, #24
 800504c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005050:	4931      	ldr	r1, [pc, #196]	; (8005118 <RCCEx_PLL3_Config+0x15c>)
 8005052:	4313      	orrs	r3, r2
 8005054:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005056:	4b30      	ldr	r3, [pc, #192]	; (8005118 <RCCEx_PLL3_Config+0x15c>)
 8005058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800505a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	695b      	ldr	r3, [r3, #20]
 8005062:	492d      	ldr	r1, [pc, #180]	; (8005118 <RCCEx_PLL3_Config+0x15c>)
 8005064:	4313      	orrs	r3, r2
 8005066:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005068:	4b2b      	ldr	r3, [pc, #172]	; (8005118 <RCCEx_PLL3_Config+0x15c>)
 800506a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800506c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	699b      	ldr	r3, [r3, #24]
 8005074:	4928      	ldr	r1, [pc, #160]	; (8005118 <RCCEx_PLL3_Config+0x15c>)
 8005076:	4313      	orrs	r3, r2
 8005078:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800507a:	4b27      	ldr	r3, [pc, #156]	; (8005118 <RCCEx_PLL3_Config+0x15c>)
 800507c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800507e:	4a26      	ldr	r2, [pc, #152]	; (8005118 <RCCEx_PLL3_Config+0x15c>)
 8005080:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005084:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005086:	4b24      	ldr	r3, [pc, #144]	; (8005118 <RCCEx_PLL3_Config+0x15c>)
 8005088:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800508a:	4b24      	ldr	r3, [pc, #144]	; (800511c <RCCEx_PLL3_Config+0x160>)
 800508c:	4013      	ands	r3, r2
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	69d2      	ldr	r2, [r2, #28]
 8005092:	00d2      	lsls	r2, r2, #3
 8005094:	4920      	ldr	r1, [pc, #128]	; (8005118 <RCCEx_PLL3_Config+0x15c>)
 8005096:	4313      	orrs	r3, r2
 8005098:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800509a:	4b1f      	ldr	r3, [pc, #124]	; (8005118 <RCCEx_PLL3_Config+0x15c>)
 800509c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800509e:	4a1e      	ldr	r2, [pc, #120]	; (8005118 <RCCEx_PLL3_Config+0x15c>)
 80050a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d106      	bne.n	80050ba <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80050ac:	4b1a      	ldr	r3, [pc, #104]	; (8005118 <RCCEx_PLL3_Config+0x15c>)
 80050ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b0:	4a19      	ldr	r2, [pc, #100]	; (8005118 <RCCEx_PLL3_Config+0x15c>)
 80050b2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80050b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80050b8:	e00f      	b.n	80050da <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d106      	bne.n	80050ce <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80050c0:	4b15      	ldr	r3, [pc, #84]	; (8005118 <RCCEx_PLL3_Config+0x15c>)
 80050c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c4:	4a14      	ldr	r2, [pc, #80]	; (8005118 <RCCEx_PLL3_Config+0x15c>)
 80050c6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80050ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 80050cc:	e005      	b.n	80050da <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80050ce:	4b12      	ldr	r3, [pc, #72]	; (8005118 <RCCEx_PLL3_Config+0x15c>)
 80050d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d2:	4a11      	ldr	r2, [pc, #68]	; (8005118 <RCCEx_PLL3_Config+0x15c>)
 80050d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050d8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80050da:	4b0f      	ldr	r3, [pc, #60]	; (8005118 <RCCEx_PLL3_Config+0x15c>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a0e      	ldr	r2, [pc, #56]	; (8005118 <RCCEx_PLL3_Config+0x15c>)
 80050e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050e6:	f7fb fdfd 	bl	8000ce4 <HAL_GetTick>
 80050ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80050ec:	e008      	b.n	8005100 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80050ee:	f7fb fdf9 	bl	8000ce4 <HAL_GetTick>
 80050f2:	4602      	mov	r2, r0
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	1ad3      	subs	r3, r2, r3
 80050f8:	2b02      	cmp	r3, #2
 80050fa:	d901      	bls.n	8005100 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80050fc:	2303      	movs	r3, #3
 80050fe:	e006      	b.n	800510e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005100:	4b05      	ldr	r3, [pc, #20]	; (8005118 <RCCEx_PLL3_Config+0x15c>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005108:	2b00      	cmp	r3, #0
 800510a:	d0f0      	beq.n	80050ee <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800510c:	7bfb      	ldrb	r3, [r7, #15]
}
 800510e:	4618      	mov	r0, r3
 8005110:	3710      	adds	r7, #16
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	58024400 	.word	0x58024400
 800511c:	ffff0007 	.word	0xffff0007

08005120 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b082      	sub	sp, #8
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d101      	bne.n	8005132 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e042      	b.n	80051b8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005138:	2b00      	cmp	r3, #0
 800513a:	d106      	bne.n	800514a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f7fb fc6f 	bl	8000a28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2224      	movs	r2, #36	; 0x24
 800514e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f022 0201 	bic.w	r2, r2, #1
 8005160:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f000 f82c 	bl	80051c0 <UART_SetConfig>
 8005168:	4603      	mov	r3, r0
 800516a:	2b01      	cmp	r3, #1
 800516c:	d101      	bne.n	8005172 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	e022      	b.n	80051b8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005176:	2b00      	cmp	r3, #0
 8005178:	d002      	beq.n	8005180 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 fd88 	bl	8005c90 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	685a      	ldr	r2, [r3, #4]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800518e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	689a      	ldr	r2, [r3, #8]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800519e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f042 0201 	orr.w	r2, r2, #1
 80051ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f000 fe0f 	bl	8005dd4 <UART_CheckIdleState>
 80051b6:	4603      	mov	r3, r0
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	3708      	adds	r7, #8
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}

080051c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051c4:	b092      	sub	sp, #72	; 0x48
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80051ca:	2300      	movs	r3, #0
 80051cc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	689a      	ldr	r2, [r3, #8]
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	691b      	ldr	r3, [r3, #16]
 80051d8:	431a      	orrs	r2, r3
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	695b      	ldr	r3, [r3, #20]
 80051de:	431a      	orrs	r2, r3
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	69db      	ldr	r3, [r3, #28]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	4bbe      	ldr	r3, [pc, #760]	; (80054e8 <UART_SetConfig+0x328>)
 80051f0:	4013      	ands	r3, r2
 80051f2:	697a      	ldr	r2, [r7, #20]
 80051f4:	6812      	ldr	r2, [r2, #0]
 80051f6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80051f8:	430b      	orrs	r3, r1
 80051fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	68da      	ldr	r2, [r3, #12]
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	430a      	orrs	r2, r1
 8005210:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	699b      	ldr	r3, [r3, #24]
 8005216:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4ab3      	ldr	r2, [pc, #716]	; (80054ec <UART_SetConfig+0x32c>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d004      	beq.n	800522c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	6a1b      	ldr	r3, [r3, #32]
 8005226:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005228:	4313      	orrs	r3, r2
 800522a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	689a      	ldr	r2, [r3, #8]
 8005232:	4baf      	ldr	r3, [pc, #700]	; (80054f0 <UART_SetConfig+0x330>)
 8005234:	4013      	ands	r3, r2
 8005236:	697a      	ldr	r2, [r7, #20]
 8005238:	6812      	ldr	r2, [r2, #0]
 800523a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800523c:	430b      	orrs	r3, r1
 800523e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005246:	f023 010f 	bic.w	r1, r3, #15
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	430a      	orrs	r2, r1
 8005254:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4aa6      	ldr	r2, [pc, #664]	; (80054f4 <UART_SetConfig+0x334>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d177      	bne.n	8005350 <UART_SetConfig+0x190>
 8005260:	4ba5      	ldr	r3, [pc, #660]	; (80054f8 <UART_SetConfig+0x338>)
 8005262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005264:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005268:	2b28      	cmp	r3, #40	; 0x28
 800526a:	d86d      	bhi.n	8005348 <UART_SetConfig+0x188>
 800526c:	a201      	add	r2, pc, #4	; (adr r2, 8005274 <UART_SetConfig+0xb4>)
 800526e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005272:	bf00      	nop
 8005274:	08005319 	.word	0x08005319
 8005278:	08005349 	.word	0x08005349
 800527c:	08005349 	.word	0x08005349
 8005280:	08005349 	.word	0x08005349
 8005284:	08005349 	.word	0x08005349
 8005288:	08005349 	.word	0x08005349
 800528c:	08005349 	.word	0x08005349
 8005290:	08005349 	.word	0x08005349
 8005294:	08005321 	.word	0x08005321
 8005298:	08005349 	.word	0x08005349
 800529c:	08005349 	.word	0x08005349
 80052a0:	08005349 	.word	0x08005349
 80052a4:	08005349 	.word	0x08005349
 80052a8:	08005349 	.word	0x08005349
 80052ac:	08005349 	.word	0x08005349
 80052b0:	08005349 	.word	0x08005349
 80052b4:	08005329 	.word	0x08005329
 80052b8:	08005349 	.word	0x08005349
 80052bc:	08005349 	.word	0x08005349
 80052c0:	08005349 	.word	0x08005349
 80052c4:	08005349 	.word	0x08005349
 80052c8:	08005349 	.word	0x08005349
 80052cc:	08005349 	.word	0x08005349
 80052d0:	08005349 	.word	0x08005349
 80052d4:	08005331 	.word	0x08005331
 80052d8:	08005349 	.word	0x08005349
 80052dc:	08005349 	.word	0x08005349
 80052e0:	08005349 	.word	0x08005349
 80052e4:	08005349 	.word	0x08005349
 80052e8:	08005349 	.word	0x08005349
 80052ec:	08005349 	.word	0x08005349
 80052f0:	08005349 	.word	0x08005349
 80052f4:	08005339 	.word	0x08005339
 80052f8:	08005349 	.word	0x08005349
 80052fc:	08005349 	.word	0x08005349
 8005300:	08005349 	.word	0x08005349
 8005304:	08005349 	.word	0x08005349
 8005308:	08005349 	.word	0x08005349
 800530c:	08005349 	.word	0x08005349
 8005310:	08005349 	.word	0x08005349
 8005314:	08005341 	.word	0x08005341
 8005318:	2301      	movs	r3, #1
 800531a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800531e:	e222      	b.n	8005766 <UART_SetConfig+0x5a6>
 8005320:	2304      	movs	r3, #4
 8005322:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005326:	e21e      	b.n	8005766 <UART_SetConfig+0x5a6>
 8005328:	2308      	movs	r3, #8
 800532a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800532e:	e21a      	b.n	8005766 <UART_SetConfig+0x5a6>
 8005330:	2310      	movs	r3, #16
 8005332:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005336:	e216      	b.n	8005766 <UART_SetConfig+0x5a6>
 8005338:	2320      	movs	r3, #32
 800533a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800533e:	e212      	b.n	8005766 <UART_SetConfig+0x5a6>
 8005340:	2340      	movs	r3, #64	; 0x40
 8005342:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005346:	e20e      	b.n	8005766 <UART_SetConfig+0x5a6>
 8005348:	2380      	movs	r3, #128	; 0x80
 800534a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800534e:	e20a      	b.n	8005766 <UART_SetConfig+0x5a6>
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a69      	ldr	r2, [pc, #420]	; (80054fc <UART_SetConfig+0x33c>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d130      	bne.n	80053bc <UART_SetConfig+0x1fc>
 800535a:	4b67      	ldr	r3, [pc, #412]	; (80054f8 <UART_SetConfig+0x338>)
 800535c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800535e:	f003 0307 	and.w	r3, r3, #7
 8005362:	2b05      	cmp	r3, #5
 8005364:	d826      	bhi.n	80053b4 <UART_SetConfig+0x1f4>
 8005366:	a201      	add	r2, pc, #4	; (adr r2, 800536c <UART_SetConfig+0x1ac>)
 8005368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800536c:	08005385 	.word	0x08005385
 8005370:	0800538d 	.word	0x0800538d
 8005374:	08005395 	.word	0x08005395
 8005378:	0800539d 	.word	0x0800539d
 800537c:	080053a5 	.word	0x080053a5
 8005380:	080053ad 	.word	0x080053ad
 8005384:	2300      	movs	r3, #0
 8005386:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800538a:	e1ec      	b.n	8005766 <UART_SetConfig+0x5a6>
 800538c:	2304      	movs	r3, #4
 800538e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005392:	e1e8      	b.n	8005766 <UART_SetConfig+0x5a6>
 8005394:	2308      	movs	r3, #8
 8005396:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800539a:	e1e4      	b.n	8005766 <UART_SetConfig+0x5a6>
 800539c:	2310      	movs	r3, #16
 800539e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053a2:	e1e0      	b.n	8005766 <UART_SetConfig+0x5a6>
 80053a4:	2320      	movs	r3, #32
 80053a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053aa:	e1dc      	b.n	8005766 <UART_SetConfig+0x5a6>
 80053ac:	2340      	movs	r3, #64	; 0x40
 80053ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053b2:	e1d8      	b.n	8005766 <UART_SetConfig+0x5a6>
 80053b4:	2380      	movs	r3, #128	; 0x80
 80053b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053ba:	e1d4      	b.n	8005766 <UART_SetConfig+0x5a6>
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a4f      	ldr	r2, [pc, #316]	; (8005500 <UART_SetConfig+0x340>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d130      	bne.n	8005428 <UART_SetConfig+0x268>
 80053c6:	4b4c      	ldr	r3, [pc, #304]	; (80054f8 <UART_SetConfig+0x338>)
 80053c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053ca:	f003 0307 	and.w	r3, r3, #7
 80053ce:	2b05      	cmp	r3, #5
 80053d0:	d826      	bhi.n	8005420 <UART_SetConfig+0x260>
 80053d2:	a201      	add	r2, pc, #4	; (adr r2, 80053d8 <UART_SetConfig+0x218>)
 80053d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053d8:	080053f1 	.word	0x080053f1
 80053dc:	080053f9 	.word	0x080053f9
 80053e0:	08005401 	.word	0x08005401
 80053e4:	08005409 	.word	0x08005409
 80053e8:	08005411 	.word	0x08005411
 80053ec:	08005419 	.word	0x08005419
 80053f0:	2300      	movs	r3, #0
 80053f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053f6:	e1b6      	b.n	8005766 <UART_SetConfig+0x5a6>
 80053f8:	2304      	movs	r3, #4
 80053fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053fe:	e1b2      	b.n	8005766 <UART_SetConfig+0x5a6>
 8005400:	2308      	movs	r3, #8
 8005402:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005406:	e1ae      	b.n	8005766 <UART_SetConfig+0x5a6>
 8005408:	2310      	movs	r3, #16
 800540a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800540e:	e1aa      	b.n	8005766 <UART_SetConfig+0x5a6>
 8005410:	2320      	movs	r3, #32
 8005412:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005416:	e1a6      	b.n	8005766 <UART_SetConfig+0x5a6>
 8005418:	2340      	movs	r3, #64	; 0x40
 800541a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800541e:	e1a2      	b.n	8005766 <UART_SetConfig+0x5a6>
 8005420:	2380      	movs	r3, #128	; 0x80
 8005422:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005426:	e19e      	b.n	8005766 <UART_SetConfig+0x5a6>
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a35      	ldr	r2, [pc, #212]	; (8005504 <UART_SetConfig+0x344>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d130      	bne.n	8005494 <UART_SetConfig+0x2d4>
 8005432:	4b31      	ldr	r3, [pc, #196]	; (80054f8 <UART_SetConfig+0x338>)
 8005434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005436:	f003 0307 	and.w	r3, r3, #7
 800543a:	2b05      	cmp	r3, #5
 800543c:	d826      	bhi.n	800548c <UART_SetConfig+0x2cc>
 800543e:	a201      	add	r2, pc, #4	; (adr r2, 8005444 <UART_SetConfig+0x284>)
 8005440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005444:	0800545d 	.word	0x0800545d
 8005448:	08005465 	.word	0x08005465
 800544c:	0800546d 	.word	0x0800546d
 8005450:	08005475 	.word	0x08005475
 8005454:	0800547d 	.word	0x0800547d
 8005458:	08005485 	.word	0x08005485
 800545c:	2300      	movs	r3, #0
 800545e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005462:	e180      	b.n	8005766 <UART_SetConfig+0x5a6>
 8005464:	2304      	movs	r3, #4
 8005466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800546a:	e17c      	b.n	8005766 <UART_SetConfig+0x5a6>
 800546c:	2308      	movs	r3, #8
 800546e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005472:	e178      	b.n	8005766 <UART_SetConfig+0x5a6>
 8005474:	2310      	movs	r3, #16
 8005476:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800547a:	e174      	b.n	8005766 <UART_SetConfig+0x5a6>
 800547c:	2320      	movs	r3, #32
 800547e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005482:	e170      	b.n	8005766 <UART_SetConfig+0x5a6>
 8005484:	2340      	movs	r3, #64	; 0x40
 8005486:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800548a:	e16c      	b.n	8005766 <UART_SetConfig+0x5a6>
 800548c:	2380      	movs	r3, #128	; 0x80
 800548e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005492:	e168      	b.n	8005766 <UART_SetConfig+0x5a6>
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a1b      	ldr	r2, [pc, #108]	; (8005508 <UART_SetConfig+0x348>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d142      	bne.n	8005524 <UART_SetConfig+0x364>
 800549e:	4b16      	ldr	r3, [pc, #88]	; (80054f8 <UART_SetConfig+0x338>)
 80054a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054a2:	f003 0307 	and.w	r3, r3, #7
 80054a6:	2b05      	cmp	r3, #5
 80054a8:	d838      	bhi.n	800551c <UART_SetConfig+0x35c>
 80054aa:	a201      	add	r2, pc, #4	; (adr r2, 80054b0 <UART_SetConfig+0x2f0>)
 80054ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054b0:	080054c9 	.word	0x080054c9
 80054b4:	080054d1 	.word	0x080054d1
 80054b8:	080054d9 	.word	0x080054d9
 80054bc:	080054e1 	.word	0x080054e1
 80054c0:	0800550d 	.word	0x0800550d
 80054c4:	08005515 	.word	0x08005515
 80054c8:	2300      	movs	r3, #0
 80054ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054ce:	e14a      	b.n	8005766 <UART_SetConfig+0x5a6>
 80054d0:	2304      	movs	r3, #4
 80054d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054d6:	e146      	b.n	8005766 <UART_SetConfig+0x5a6>
 80054d8:	2308      	movs	r3, #8
 80054da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054de:	e142      	b.n	8005766 <UART_SetConfig+0x5a6>
 80054e0:	2310      	movs	r3, #16
 80054e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054e6:	e13e      	b.n	8005766 <UART_SetConfig+0x5a6>
 80054e8:	cfff69f3 	.word	0xcfff69f3
 80054ec:	58000c00 	.word	0x58000c00
 80054f0:	11fff4ff 	.word	0x11fff4ff
 80054f4:	40011000 	.word	0x40011000
 80054f8:	58024400 	.word	0x58024400
 80054fc:	40004400 	.word	0x40004400
 8005500:	40004800 	.word	0x40004800
 8005504:	40004c00 	.word	0x40004c00
 8005508:	40005000 	.word	0x40005000
 800550c:	2320      	movs	r3, #32
 800550e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005512:	e128      	b.n	8005766 <UART_SetConfig+0x5a6>
 8005514:	2340      	movs	r3, #64	; 0x40
 8005516:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800551a:	e124      	b.n	8005766 <UART_SetConfig+0x5a6>
 800551c:	2380      	movs	r3, #128	; 0x80
 800551e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005522:	e120      	b.n	8005766 <UART_SetConfig+0x5a6>
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4acb      	ldr	r2, [pc, #812]	; (8005858 <UART_SetConfig+0x698>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d176      	bne.n	800561c <UART_SetConfig+0x45c>
 800552e:	4bcb      	ldr	r3, [pc, #812]	; (800585c <UART_SetConfig+0x69c>)
 8005530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005532:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005536:	2b28      	cmp	r3, #40	; 0x28
 8005538:	d86c      	bhi.n	8005614 <UART_SetConfig+0x454>
 800553a:	a201      	add	r2, pc, #4	; (adr r2, 8005540 <UART_SetConfig+0x380>)
 800553c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005540:	080055e5 	.word	0x080055e5
 8005544:	08005615 	.word	0x08005615
 8005548:	08005615 	.word	0x08005615
 800554c:	08005615 	.word	0x08005615
 8005550:	08005615 	.word	0x08005615
 8005554:	08005615 	.word	0x08005615
 8005558:	08005615 	.word	0x08005615
 800555c:	08005615 	.word	0x08005615
 8005560:	080055ed 	.word	0x080055ed
 8005564:	08005615 	.word	0x08005615
 8005568:	08005615 	.word	0x08005615
 800556c:	08005615 	.word	0x08005615
 8005570:	08005615 	.word	0x08005615
 8005574:	08005615 	.word	0x08005615
 8005578:	08005615 	.word	0x08005615
 800557c:	08005615 	.word	0x08005615
 8005580:	080055f5 	.word	0x080055f5
 8005584:	08005615 	.word	0x08005615
 8005588:	08005615 	.word	0x08005615
 800558c:	08005615 	.word	0x08005615
 8005590:	08005615 	.word	0x08005615
 8005594:	08005615 	.word	0x08005615
 8005598:	08005615 	.word	0x08005615
 800559c:	08005615 	.word	0x08005615
 80055a0:	080055fd 	.word	0x080055fd
 80055a4:	08005615 	.word	0x08005615
 80055a8:	08005615 	.word	0x08005615
 80055ac:	08005615 	.word	0x08005615
 80055b0:	08005615 	.word	0x08005615
 80055b4:	08005615 	.word	0x08005615
 80055b8:	08005615 	.word	0x08005615
 80055bc:	08005615 	.word	0x08005615
 80055c0:	08005605 	.word	0x08005605
 80055c4:	08005615 	.word	0x08005615
 80055c8:	08005615 	.word	0x08005615
 80055cc:	08005615 	.word	0x08005615
 80055d0:	08005615 	.word	0x08005615
 80055d4:	08005615 	.word	0x08005615
 80055d8:	08005615 	.word	0x08005615
 80055dc:	08005615 	.word	0x08005615
 80055e0:	0800560d 	.word	0x0800560d
 80055e4:	2301      	movs	r3, #1
 80055e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055ea:	e0bc      	b.n	8005766 <UART_SetConfig+0x5a6>
 80055ec:	2304      	movs	r3, #4
 80055ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055f2:	e0b8      	b.n	8005766 <UART_SetConfig+0x5a6>
 80055f4:	2308      	movs	r3, #8
 80055f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055fa:	e0b4      	b.n	8005766 <UART_SetConfig+0x5a6>
 80055fc:	2310      	movs	r3, #16
 80055fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005602:	e0b0      	b.n	8005766 <UART_SetConfig+0x5a6>
 8005604:	2320      	movs	r3, #32
 8005606:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800560a:	e0ac      	b.n	8005766 <UART_SetConfig+0x5a6>
 800560c:	2340      	movs	r3, #64	; 0x40
 800560e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005612:	e0a8      	b.n	8005766 <UART_SetConfig+0x5a6>
 8005614:	2380      	movs	r3, #128	; 0x80
 8005616:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800561a:	e0a4      	b.n	8005766 <UART_SetConfig+0x5a6>
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a8f      	ldr	r2, [pc, #572]	; (8005860 <UART_SetConfig+0x6a0>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d130      	bne.n	8005688 <UART_SetConfig+0x4c8>
 8005626:	4b8d      	ldr	r3, [pc, #564]	; (800585c <UART_SetConfig+0x69c>)
 8005628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800562a:	f003 0307 	and.w	r3, r3, #7
 800562e:	2b05      	cmp	r3, #5
 8005630:	d826      	bhi.n	8005680 <UART_SetConfig+0x4c0>
 8005632:	a201      	add	r2, pc, #4	; (adr r2, 8005638 <UART_SetConfig+0x478>)
 8005634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005638:	08005651 	.word	0x08005651
 800563c:	08005659 	.word	0x08005659
 8005640:	08005661 	.word	0x08005661
 8005644:	08005669 	.word	0x08005669
 8005648:	08005671 	.word	0x08005671
 800564c:	08005679 	.word	0x08005679
 8005650:	2300      	movs	r3, #0
 8005652:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005656:	e086      	b.n	8005766 <UART_SetConfig+0x5a6>
 8005658:	2304      	movs	r3, #4
 800565a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800565e:	e082      	b.n	8005766 <UART_SetConfig+0x5a6>
 8005660:	2308      	movs	r3, #8
 8005662:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005666:	e07e      	b.n	8005766 <UART_SetConfig+0x5a6>
 8005668:	2310      	movs	r3, #16
 800566a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800566e:	e07a      	b.n	8005766 <UART_SetConfig+0x5a6>
 8005670:	2320      	movs	r3, #32
 8005672:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005676:	e076      	b.n	8005766 <UART_SetConfig+0x5a6>
 8005678:	2340      	movs	r3, #64	; 0x40
 800567a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800567e:	e072      	b.n	8005766 <UART_SetConfig+0x5a6>
 8005680:	2380      	movs	r3, #128	; 0x80
 8005682:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005686:	e06e      	b.n	8005766 <UART_SetConfig+0x5a6>
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a75      	ldr	r2, [pc, #468]	; (8005864 <UART_SetConfig+0x6a4>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d130      	bne.n	80056f4 <UART_SetConfig+0x534>
 8005692:	4b72      	ldr	r3, [pc, #456]	; (800585c <UART_SetConfig+0x69c>)
 8005694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005696:	f003 0307 	and.w	r3, r3, #7
 800569a:	2b05      	cmp	r3, #5
 800569c:	d826      	bhi.n	80056ec <UART_SetConfig+0x52c>
 800569e:	a201      	add	r2, pc, #4	; (adr r2, 80056a4 <UART_SetConfig+0x4e4>)
 80056a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056a4:	080056bd 	.word	0x080056bd
 80056a8:	080056c5 	.word	0x080056c5
 80056ac:	080056cd 	.word	0x080056cd
 80056b0:	080056d5 	.word	0x080056d5
 80056b4:	080056dd 	.word	0x080056dd
 80056b8:	080056e5 	.word	0x080056e5
 80056bc:	2300      	movs	r3, #0
 80056be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056c2:	e050      	b.n	8005766 <UART_SetConfig+0x5a6>
 80056c4:	2304      	movs	r3, #4
 80056c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056ca:	e04c      	b.n	8005766 <UART_SetConfig+0x5a6>
 80056cc:	2308      	movs	r3, #8
 80056ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056d2:	e048      	b.n	8005766 <UART_SetConfig+0x5a6>
 80056d4:	2310      	movs	r3, #16
 80056d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056da:	e044      	b.n	8005766 <UART_SetConfig+0x5a6>
 80056dc:	2320      	movs	r3, #32
 80056de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056e2:	e040      	b.n	8005766 <UART_SetConfig+0x5a6>
 80056e4:	2340      	movs	r3, #64	; 0x40
 80056e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056ea:	e03c      	b.n	8005766 <UART_SetConfig+0x5a6>
 80056ec:	2380      	movs	r3, #128	; 0x80
 80056ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056f2:	e038      	b.n	8005766 <UART_SetConfig+0x5a6>
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a5b      	ldr	r2, [pc, #364]	; (8005868 <UART_SetConfig+0x6a8>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d130      	bne.n	8005760 <UART_SetConfig+0x5a0>
 80056fe:	4b57      	ldr	r3, [pc, #348]	; (800585c <UART_SetConfig+0x69c>)
 8005700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005702:	f003 0307 	and.w	r3, r3, #7
 8005706:	2b05      	cmp	r3, #5
 8005708:	d826      	bhi.n	8005758 <UART_SetConfig+0x598>
 800570a:	a201      	add	r2, pc, #4	; (adr r2, 8005710 <UART_SetConfig+0x550>)
 800570c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005710:	08005729 	.word	0x08005729
 8005714:	08005731 	.word	0x08005731
 8005718:	08005739 	.word	0x08005739
 800571c:	08005741 	.word	0x08005741
 8005720:	08005749 	.word	0x08005749
 8005724:	08005751 	.word	0x08005751
 8005728:	2302      	movs	r3, #2
 800572a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800572e:	e01a      	b.n	8005766 <UART_SetConfig+0x5a6>
 8005730:	2304      	movs	r3, #4
 8005732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005736:	e016      	b.n	8005766 <UART_SetConfig+0x5a6>
 8005738:	2308      	movs	r3, #8
 800573a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800573e:	e012      	b.n	8005766 <UART_SetConfig+0x5a6>
 8005740:	2310      	movs	r3, #16
 8005742:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005746:	e00e      	b.n	8005766 <UART_SetConfig+0x5a6>
 8005748:	2320      	movs	r3, #32
 800574a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800574e:	e00a      	b.n	8005766 <UART_SetConfig+0x5a6>
 8005750:	2340      	movs	r3, #64	; 0x40
 8005752:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005756:	e006      	b.n	8005766 <UART_SetConfig+0x5a6>
 8005758:	2380      	movs	r3, #128	; 0x80
 800575a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800575e:	e002      	b.n	8005766 <UART_SetConfig+0x5a6>
 8005760:	2380      	movs	r3, #128	; 0x80
 8005762:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a3f      	ldr	r2, [pc, #252]	; (8005868 <UART_SetConfig+0x6a8>)
 800576c:	4293      	cmp	r3, r2
 800576e:	f040 80f8 	bne.w	8005962 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005772:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005776:	2b20      	cmp	r3, #32
 8005778:	dc46      	bgt.n	8005808 <UART_SetConfig+0x648>
 800577a:	2b02      	cmp	r3, #2
 800577c:	f2c0 8082 	blt.w	8005884 <UART_SetConfig+0x6c4>
 8005780:	3b02      	subs	r3, #2
 8005782:	2b1e      	cmp	r3, #30
 8005784:	d87e      	bhi.n	8005884 <UART_SetConfig+0x6c4>
 8005786:	a201      	add	r2, pc, #4	; (adr r2, 800578c <UART_SetConfig+0x5cc>)
 8005788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800578c:	0800580f 	.word	0x0800580f
 8005790:	08005885 	.word	0x08005885
 8005794:	08005817 	.word	0x08005817
 8005798:	08005885 	.word	0x08005885
 800579c:	08005885 	.word	0x08005885
 80057a0:	08005885 	.word	0x08005885
 80057a4:	08005827 	.word	0x08005827
 80057a8:	08005885 	.word	0x08005885
 80057ac:	08005885 	.word	0x08005885
 80057b0:	08005885 	.word	0x08005885
 80057b4:	08005885 	.word	0x08005885
 80057b8:	08005885 	.word	0x08005885
 80057bc:	08005885 	.word	0x08005885
 80057c0:	08005885 	.word	0x08005885
 80057c4:	08005837 	.word	0x08005837
 80057c8:	08005885 	.word	0x08005885
 80057cc:	08005885 	.word	0x08005885
 80057d0:	08005885 	.word	0x08005885
 80057d4:	08005885 	.word	0x08005885
 80057d8:	08005885 	.word	0x08005885
 80057dc:	08005885 	.word	0x08005885
 80057e0:	08005885 	.word	0x08005885
 80057e4:	08005885 	.word	0x08005885
 80057e8:	08005885 	.word	0x08005885
 80057ec:	08005885 	.word	0x08005885
 80057f0:	08005885 	.word	0x08005885
 80057f4:	08005885 	.word	0x08005885
 80057f8:	08005885 	.word	0x08005885
 80057fc:	08005885 	.word	0x08005885
 8005800:	08005885 	.word	0x08005885
 8005804:	08005877 	.word	0x08005877
 8005808:	2b40      	cmp	r3, #64	; 0x40
 800580a:	d037      	beq.n	800587c <UART_SetConfig+0x6bc>
 800580c:	e03a      	b.n	8005884 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800580e:	f7ff f865 	bl	80048dc <HAL_RCCEx_GetD3PCLK1Freq>
 8005812:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005814:	e03c      	b.n	8005890 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005816:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800581a:	4618      	mov	r0, r3
 800581c:	f7ff f874 	bl	8004908 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005822:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005824:	e034      	b.n	8005890 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005826:	f107 0318 	add.w	r3, r7, #24
 800582a:	4618      	mov	r0, r3
 800582c:	f7ff f9c0 	bl	8004bb0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005830:	69fb      	ldr	r3, [r7, #28]
 8005832:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005834:	e02c      	b.n	8005890 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005836:	4b09      	ldr	r3, [pc, #36]	; (800585c <UART_SetConfig+0x69c>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f003 0320 	and.w	r3, r3, #32
 800583e:	2b00      	cmp	r3, #0
 8005840:	d016      	beq.n	8005870 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005842:	4b06      	ldr	r3, [pc, #24]	; (800585c <UART_SetConfig+0x69c>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	08db      	lsrs	r3, r3, #3
 8005848:	f003 0303 	and.w	r3, r3, #3
 800584c:	4a07      	ldr	r2, [pc, #28]	; (800586c <UART_SetConfig+0x6ac>)
 800584e:	fa22 f303 	lsr.w	r3, r2, r3
 8005852:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005854:	e01c      	b.n	8005890 <UART_SetConfig+0x6d0>
 8005856:	bf00      	nop
 8005858:	40011400 	.word	0x40011400
 800585c:	58024400 	.word	0x58024400
 8005860:	40007800 	.word	0x40007800
 8005864:	40007c00 	.word	0x40007c00
 8005868:	58000c00 	.word	0x58000c00
 800586c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005870:	4b9d      	ldr	r3, [pc, #628]	; (8005ae8 <UART_SetConfig+0x928>)
 8005872:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005874:	e00c      	b.n	8005890 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005876:	4b9d      	ldr	r3, [pc, #628]	; (8005aec <UART_SetConfig+0x92c>)
 8005878:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800587a:	e009      	b.n	8005890 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800587c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005880:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005882:	e005      	b.n	8005890 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005884:	2300      	movs	r3, #0
 8005886:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800588e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005890:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005892:	2b00      	cmp	r3, #0
 8005894:	f000 81de 	beq.w	8005c54 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589c:	4a94      	ldr	r2, [pc, #592]	; (8005af0 <UART_SetConfig+0x930>)
 800589e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80058a2:	461a      	mov	r2, r3
 80058a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80058aa:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	685a      	ldr	r2, [r3, #4]
 80058b0:	4613      	mov	r3, r2
 80058b2:	005b      	lsls	r3, r3, #1
 80058b4:	4413      	add	r3, r2
 80058b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d305      	bcc.n	80058c8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80058c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d903      	bls.n	80058d0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80058c8:	2301      	movs	r3, #1
 80058ca:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80058ce:	e1c1      	b.n	8005c54 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058d2:	2200      	movs	r2, #0
 80058d4:	60bb      	str	r3, [r7, #8]
 80058d6:	60fa      	str	r2, [r7, #12]
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058dc:	4a84      	ldr	r2, [pc, #528]	; (8005af0 <UART_SetConfig+0x930>)
 80058de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	2200      	movs	r2, #0
 80058e6:	603b      	str	r3, [r7, #0]
 80058e8:	607a      	str	r2, [r7, #4]
 80058ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058ee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80058f2:	f7fa fcf1 	bl	80002d8 <__aeabi_uldivmod>
 80058f6:	4602      	mov	r2, r0
 80058f8:	460b      	mov	r3, r1
 80058fa:	4610      	mov	r0, r2
 80058fc:	4619      	mov	r1, r3
 80058fe:	f04f 0200 	mov.w	r2, #0
 8005902:	f04f 0300 	mov.w	r3, #0
 8005906:	020b      	lsls	r3, r1, #8
 8005908:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800590c:	0202      	lsls	r2, r0, #8
 800590e:	6979      	ldr	r1, [r7, #20]
 8005910:	6849      	ldr	r1, [r1, #4]
 8005912:	0849      	lsrs	r1, r1, #1
 8005914:	2000      	movs	r0, #0
 8005916:	460c      	mov	r4, r1
 8005918:	4605      	mov	r5, r0
 800591a:	eb12 0804 	adds.w	r8, r2, r4
 800591e:	eb43 0905 	adc.w	r9, r3, r5
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	469a      	mov	sl, r3
 800592a:	4693      	mov	fp, r2
 800592c:	4652      	mov	r2, sl
 800592e:	465b      	mov	r3, fp
 8005930:	4640      	mov	r0, r8
 8005932:	4649      	mov	r1, r9
 8005934:	f7fa fcd0 	bl	80002d8 <__aeabi_uldivmod>
 8005938:	4602      	mov	r2, r0
 800593a:	460b      	mov	r3, r1
 800593c:	4613      	mov	r3, r2
 800593e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005942:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005946:	d308      	bcc.n	800595a <UART_SetConfig+0x79a>
 8005948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800594a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800594e:	d204      	bcs.n	800595a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005956:	60da      	str	r2, [r3, #12]
 8005958:	e17c      	b.n	8005c54 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005960:	e178      	b.n	8005c54 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	69db      	ldr	r3, [r3, #28]
 8005966:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800596a:	f040 80c5 	bne.w	8005af8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800596e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005972:	2b20      	cmp	r3, #32
 8005974:	dc48      	bgt.n	8005a08 <UART_SetConfig+0x848>
 8005976:	2b00      	cmp	r3, #0
 8005978:	db7b      	blt.n	8005a72 <UART_SetConfig+0x8b2>
 800597a:	2b20      	cmp	r3, #32
 800597c:	d879      	bhi.n	8005a72 <UART_SetConfig+0x8b2>
 800597e:	a201      	add	r2, pc, #4	; (adr r2, 8005984 <UART_SetConfig+0x7c4>)
 8005980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005984:	08005a0f 	.word	0x08005a0f
 8005988:	08005a17 	.word	0x08005a17
 800598c:	08005a73 	.word	0x08005a73
 8005990:	08005a73 	.word	0x08005a73
 8005994:	08005a1f 	.word	0x08005a1f
 8005998:	08005a73 	.word	0x08005a73
 800599c:	08005a73 	.word	0x08005a73
 80059a0:	08005a73 	.word	0x08005a73
 80059a4:	08005a2f 	.word	0x08005a2f
 80059a8:	08005a73 	.word	0x08005a73
 80059ac:	08005a73 	.word	0x08005a73
 80059b0:	08005a73 	.word	0x08005a73
 80059b4:	08005a73 	.word	0x08005a73
 80059b8:	08005a73 	.word	0x08005a73
 80059bc:	08005a73 	.word	0x08005a73
 80059c0:	08005a73 	.word	0x08005a73
 80059c4:	08005a3f 	.word	0x08005a3f
 80059c8:	08005a73 	.word	0x08005a73
 80059cc:	08005a73 	.word	0x08005a73
 80059d0:	08005a73 	.word	0x08005a73
 80059d4:	08005a73 	.word	0x08005a73
 80059d8:	08005a73 	.word	0x08005a73
 80059dc:	08005a73 	.word	0x08005a73
 80059e0:	08005a73 	.word	0x08005a73
 80059e4:	08005a73 	.word	0x08005a73
 80059e8:	08005a73 	.word	0x08005a73
 80059ec:	08005a73 	.word	0x08005a73
 80059f0:	08005a73 	.word	0x08005a73
 80059f4:	08005a73 	.word	0x08005a73
 80059f8:	08005a73 	.word	0x08005a73
 80059fc:	08005a73 	.word	0x08005a73
 8005a00:	08005a73 	.word	0x08005a73
 8005a04:	08005a65 	.word	0x08005a65
 8005a08:	2b40      	cmp	r3, #64	; 0x40
 8005a0a:	d02e      	beq.n	8005a6a <UART_SetConfig+0x8aa>
 8005a0c:	e031      	b.n	8005a72 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a0e:	f7fd ffcb 	bl	80039a8 <HAL_RCC_GetPCLK1Freq>
 8005a12:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005a14:	e033      	b.n	8005a7e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a16:	f7fd ffdd 	bl	80039d4 <HAL_RCC_GetPCLK2Freq>
 8005a1a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005a1c:	e02f      	b.n	8005a7e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a22:	4618      	mov	r0, r3
 8005a24:	f7fe ff70 	bl	8004908 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a2c:	e027      	b.n	8005a7e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a2e:	f107 0318 	add.w	r3, r7, #24
 8005a32:	4618      	mov	r0, r3
 8005a34:	f7ff f8bc 	bl	8004bb0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005a38:	69fb      	ldr	r3, [r7, #28]
 8005a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a3c:	e01f      	b.n	8005a7e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a3e:	4b2d      	ldr	r3, [pc, #180]	; (8005af4 <UART_SetConfig+0x934>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f003 0320 	and.w	r3, r3, #32
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d009      	beq.n	8005a5e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005a4a:	4b2a      	ldr	r3, [pc, #168]	; (8005af4 <UART_SetConfig+0x934>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	08db      	lsrs	r3, r3, #3
 8005a50:	f003 0303 	and.w	r3, r3, #3
 8005a54:	4a24      	ldr	r2, [pc, #144]	; (8005ae8 <UART_SetConfig+0x928>)
 8005a56:	fa22 f303 	lsr.w	r3, r2, r3
 8005a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005a5c:	e00f      	b.n	8005a7e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005a5e:	4b22      	ldr	r3, [pc, #136]	; (8005ae8 <UART_SetConfig+0x928>)
 8005a60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a62:	e00c      	b.n	8005a7e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005a64:	4b21      	ldr	r3, [pc, #132]	; (8005aec <UART_SetConfig+0x92c>)
 8005a66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a68:	e009      	b.n	8005a7e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a70:	e005      	b.n	8005a7e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005a72:	2300      	movs	r3, #0
 8005a74:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005a7c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005a7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	f000 80e7 	beq.w	8005c54 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8a:	4a19      	ldr	r2, [pc, #100]	; (8005af0 <UART_SetConfig+0x930>)
 8005a8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a90:	461a      	mov	r2, r3
 8005a92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a94:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a98:	005a      	lsls	r2, r3, #1
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	085b      	lsrs	r3, r3, #1
 8005aa0:	441a      	add	r2, r3
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aaa:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aae:	2b0f      	cmp	r3, #15
 8005ab0:	d916      	bls.n	8005ae0 <UART_SetConfig+0x920>
 8005ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ab4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ab8:	d212      	bcs.n	8005ae0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	f023 030f 	bic.w	r3, r3, #15
 8005ac2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ac6:	085b      	lsrs	r3, r3, #1
 8005ac8:	b29b      	uxth	r3, r3
 8005aca:	f003 0307 	and.w	r3, r3, #7
 8005ace:	b29a      	uxth	r2, r3
 8005ad0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005adc:	60da      	str	r2, [r3, #12]
 8005ade:	e0b9      	b.n	8005c54 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005ae6:	e0b5      	b.n	8005c54 <UART_SetConfig+0xa94>
 8005ae8:	03d09000 	.word	0x03d09000
 8005aec:	003d0900 	.word	0x003d0900
 8005af0:	0800a71c 	.word	0x0800a71c
 8005af4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005af8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005afc:	2b20      	cmp	r3, #32
 8005afe:	dc49      	bgt.n	8005b94 <UART_SetConfig+0x9d4>
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	db7c      	blt.n	8005bfe <UART_SetConfig+0xa3e>
 8005b04:	2b20      	cmp	r3, #32
 8005b06:	d87a      	bhi.n	8005bfe <UART_SetConfig+0xa3e>
 8005b08:	a201      	add	r2, pc, #4	; (adr r2, 8005b10 <UART_SetConfig+0x950>)
 8005b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b0e:	bf00      	nop
 8005b10:	08005b9b 	.word	0x08005b9b
 8005b14:	08005ba3 	.word	0x08005ba3
 8005b18:	08005bff 	.word	0x08005bff
 8005b1c:	08005bff 	.word	0x08005bff
 8005b20:	08005bab 	.word	0x08005bab
 8005b24:	08005bff 	.word	0x08005bff
 8005b28:	08005bff 	.word	0x08005bff
 8005b2c:	08005bff 	.word	0x08005bff
 8005b30:	08005bbb 	.word	0x08005bbb
 8005b34:	08005bff 	.word	0x08005bff
 8005b38:	08005bff 	.word	0x08005bff
 8005b3c:	08005bff 	.word	0x08005bff
 8005b40:	08005bff 	.word	0x08005bff
 8005b44:	08005bff 	.word	0x08005bff
 8005b48:	08005bff 	.word	0x08005bff
 8005b4c:	08005bff 	.word	0x08005bff
 8005b50:	08005bcb 	.word	0x08005bcb
 8005b54:	08005bff 	.word	0x08005bff
 8005b58:	08005bff 	.word	0x08005bff
 8005b5c:	08005bff 	.word	0x08005bff
 8005b60:	08005bff 	.word	0x08005bff
 8005b64:	08005bff 	.word	0x08005bff
 8005b68:	08005bff 	.word	0x08005bff
 8005b6c:	08005bff 	.word	0x08005bff
 8005b70:	08005bff 	.word	0x08005bff
 8005b74:	08005bff 	.word	0x08005bff
 8005b78:	08005bff 	.word	0x08005bff
 8005b7c:	08005bff 	.word	0x08005bff
 8005b80:	08005bff 	.word	0x08005bff
 8005b84:	08005bff 	.word	0x08005bff
 8005b88:	08005bff 	.word	0x08005bff
 8005b8c:	08005bff 	.word	0x08005bff
 8005b90:	08005bf1 	.word	0x08005bf1
 8005b94:	2b40      	cmp	r3, #64	; 0x40
 8005b96:	d02e      	beq.n	8005bf6 <UART_SetConfig+0xa36>
 8005b98:	e031      	b.n	8005bfe <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b9a:	f7fd ff05 	bl	80039a8 <HAL_RCC_GetPCLK1Freq>
 8005b9e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005ba0:	e033      	b.n	8005c0a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ba2:	f7fd ff17 	bl	80039d4 <HAL_RCC_GetPCLK2Freq>
 8005ba6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005ba8:	e02f      	b.n	8005c0a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005baa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f7fe feaa 	bl	8004908 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005bb8:	e027      	b.n	8005c0a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005bba:	f107 0318 	add.w	r3, r7, #24
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f7fe fff6 	bl	8004bb0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005bc4:	69fb      	ldr	r3, [r7, #28]
 8005bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005bc8:	e01f      	b.n	8005c0a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005bca:	4b2d      	ldr	r3, [pc, #180]	; (8005c80 <UART_SetConfig+0xac0>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f003 0320 	and.w	r3, r3, #32
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d009      	beq.n	8005bea <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005bd6:	4b2a      	ldr	r3, [pc, #168]	; (8005c80 <UART_SetConfig+0xac0>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	08db      	lsrs	r3, r3, #3
 8005bdc:	f003 0303 	and.w	r3, r3, #3
 8005be0:	4a28      	ldr	r2, [pc, #160]	; (8005c84 <UART_SetConfig+0xac4>)
 8005be2:	fa22 f303 	lsr.w	r3, r2, r3
 8005be6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005be8:	e00f      	b.n	8005c0a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005bea:	4b26      	ldr	r3, [pc, #152]	; (8005c84 <UART_SetConfig+0xac4>)
 8005bec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005bee:	e00c      	b.n	8005c0a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005bf0:	4b25      	ldr	r3, [pc, #148]	; (8005c88 <UART_SetConfig+0xac8>)
 8005bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005bf4:	e009      	b.n	8005c0a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005bfc:	e005      	b.n	8005c0a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005c08:	bf00      	nop
    }

    if (pclk != 0U)
 8005c0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d021      	beq.n	8005c54 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c14:	4a1d      	ldr	r2, [pc, #116]	; (8005c8c <UART_SetConfig+0xacc>)
 8005c16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c1e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	085b      	lsrs	r3, r3, #1
 8005c28:	441a      	add	r2, r3
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c32:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c36:	2b0f      	cmp	r3, #15
 8005c38:	d909      	bls.n	8005c4e <UART_SetConfig+0xa8e>
 8005c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c40:	d205      	bcs.n	8005c4e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c44:	b29a      	uxth	r2, r3
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	60da      	str	r2, [r3, #12]
 8005c4c:	e002      	b.n	8005c54 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	2201      	movs	r2, #1
 8005c58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	2200      	movs	r2, #0
 8005c68:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005c70:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3748      	adds	r7, #72	; 0x48
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c7e:	bf00      	nop
 8005c80:	58024400 	.word	0x58024400
 8005c84:	03d09000 	.word	0x03d09000
 8005c88:	003d0900 	.word	0x003d0900
 8005c8c:	0800a71c 	.word	0x0800a71c

08005c90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b083      	sub	sp, #12
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c9c:	f003 0301 	and.w	r3, r3, #1
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d00a      	beq.n	8005cba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	430a      	orrs	r2, r1
 8005cb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cbe:	f003 0302 	and.w	r3, r3, #2
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d00a      	beq.n	8005cdc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	430a      	orrs	r2, r1
 8005cda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ce0:	f003 0304 	and.w	r3, r3, #4
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d00a      	beq.n	8005cfe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	430a      	orrs	r2, r1
 8005cfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d02:	f003 0308 	and.w	r3, r3, #8
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d00a      	beq.n	8005d20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	430a      	orrs	r2, r1
 8005d1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d24:	f003 0310 	and.w	r3, r3, #16
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d00a      	beq.n	8005d42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	430a      	orrs	r2, r1
 8005d40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d46:	f003 0320 	and.w	r3, r3, #32
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d00a      	beq.n	8005d64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	430a      	orrs	r2, r1
 8005d62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d01a      	beq.n	8005da6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	430a      	orrs	r2, r1
 8005d84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d8e:	d10a      	bne.n	8005da6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	430a      	orrs	r2, r1
 8005da4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005daa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d00a      	beq.n	8005dc8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	430a      	orrs	r2, r1
 8005dc6:	605a      	str	r2, [r3, #4]
  }
}
 8005dc8:	bf00      	nop
 8005dca:	370c      	adds	r7, #12
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr

08005dd4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b086      	sub	sp, #24
 8005dd8:	af02      	add	r7, sp, #8
 8005dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2200      	movs	r2, #0
 8005de0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005de4:	f7fa ff7e 	bl	8000ce4 <HAL_GetTick>
 8005de8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f003 0308 	and.w	r3, r3, #8
 8005df4:	2b08      	cmp	r3, #8
 8005df6:	d10e      	bne.n	8005e16 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005df8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005dfc:	9300      	str	r3, [sp, #0]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2200      	movs	r2, #0
 8005e02:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f000 f82f 	bl	8005e6a <UART_WaitOnFlagUntilTimeout>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d001      	beq.n	8005e16 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e12:	2303      	movs	r3, #3
 8005e14:	e025      	b.n	8005e62 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f003 0304 	and.w	r3, r3, #4
 8005e20:	2b04      	cmp	r3, #4
 8005e22:	d10e      	bne.n	8005e42 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e28:	9300      	str	r3, [sp, #0]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f000 f819 	bl	8005e6a <UART_WaitOnFlagUntilTimeout>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d001      	beq.n	8005e42 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e3e:	2303      	movs	r3, #3
 8005e40:	e00f      	b.n	8005e62 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2220      	movs	r2, #32
 8005e46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2220      	movs	r2, #32
 8005e4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2200      	movs	r2, #0
 8005e56:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005e60:	2300      	movs	r3, #0
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3710      	adds	r7, #16
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}

08005e6a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e6a:	b580      	push	{r7, lr}
 8005e6c:	b09c      	sub	sp, #112	; 0x70
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	60f8      	str	r0, [r7, #12]
 8005e72:	60b9      	str	r1, [r7, #8]
 8005e74:	603b      	str	r3, [r7, #0]
 8005e76:	4613      	mov	r3, r2
 8005e78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e7a:	e0a9      	b.n	8005fd0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e82:	f000 80a5 	beq.w	8005fd0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e86:	f7fa ff2d 	bl	8000ce4 <HAL_GetTick>
 8005e8a:	4602      	mov	r2, r0
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	1ad3      	subs	r3, r2, r3
 8005e90:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d302      	bcc.n	8005e9c <UART_WaitOnFlagUntilTimeout+0x32>
 8005e96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d140      	bne.n	8005f1e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ea4:	e853 3f00 	ldrex	r3, [r3]
 8005ea8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005eaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005eac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005eb0:	667b      	str	r3, [r7, #100]	; 0x64
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005eba:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ebc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ebe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005ec0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005ec2:	e841 2300 	strex	r3, r2, [r1]
 8005ec6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005ec8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d1e6      	bne.n	8005e9c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	3308      	adds	r3, #8
 8005ed4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ed6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ed8:	e853 3f00 	ldrex	r3, [r3]
 8005edc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ee0:	f023 0301 	bic.w	r3, r3, #1
 8005ee4:	663b      	str	r3, [r7, #96]	; 0x60
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	3308      	adds	r3, #8
 8005eec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005eee:	64ba      	str	r2, [r7, #72]	; 0x48
 8005ef0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ef2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005ef4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ef6:	e841 2300 	strex	r3, r2, [r1]
 8005efa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005efc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d1e5      	bne.n	8005ece <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2220      	movs	r2, #32
 8005f06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2220      	movs	r2, #32
 8005f0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2200      	movs	r2, #0
 8005f16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005f1a:	2303      	movs	r3, #3
 8005f1c:	e069      	b.n	8005ff2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f003 0304 	and.w	r3, r3, #4
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d051      	beq.n	8005fd0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	69db      	ldr	r3, [r3, #28]
 8005f32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f3a:	d149      	bne.n	8005fd0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f44:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f4e:	e853 3f00 	ldrex	r3, [r3]
 8005f52:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f56:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005f5a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	461a      	mov	r2, r3
 8005f62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f64:	637b      	str	r3, [r7, #52]	; 0x34
 8005f66:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f68:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005f6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f6c:	e841 2300 	strex	r3, r2, [r1]
 8005f70:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d1e6      	bne.n	8005f46 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	3308      	adds	r3, #8
 8005f7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	e853 3f00 	ldrex	r3, [r3]
 8005f86:	613b      	str	r3, [r7, #16]
   return(result);
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	f023 0301 	bic.w	r3, r3, #1
 8005f8e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	3308      	adds	r3, #8
 8005f96:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005f98:	623a      	str	r2, [r7, #32]
 8005f9a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f9c:	69f9      	ldr	r1, [r7, #28]
 8005f9e:	6a3a      	ldr	r2, [r7, #32]
 8005fa0:	e841 2300 	strex	r3, r2, [r1]
 8005fa4:	61bb      	str	r3, [r7, #24]
   return(result);
 8005fa6:	69bb      	ldr	r3, [r7, #24]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d1e5      	bne.n	8005f78 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2220      	movs	r2, #32
 8005fb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2220      	movs	r2, #32
 8005fb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2220      	movs	r2, #32
 8005fc0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005fcc:	2303      	movs	r3, #3
 8005fce:	e010      	b.n	8005ff2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	69da      	ldr	r2, [r3, #28]
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	4013      	ands	r3, r2
 8005fda:	68ba      	ldr	r2, [r7, #8]
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	bf0c      	ite	eq
 8005fe0:	2301      	moveq	r3, #1
 8005fe2:	2300      	movne	r3, #0
 8005fe4:	b2db      	uxtb	r3, r3
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	79fb      	ldrb	r3, [r7, #7]
 8005fea:	429a      	cmp	r2, r3
 8005fec:	f43f af46 	beq.w	8005e7c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ff0:	2300      	movs	r3, #0
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3770      	adds	r7, #112	; 0x70
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}

08005ffa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005ffa:	b480      	push	{r7}
 8005ffc:	b085      	sub	sp, #20
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006008:	2b01      	cmp	r3, #1
 800600a:	d101      	bne.n	8006010 <HAL_UARTEx_DisableFifoMode+0x16>
 800600c:	2302      	movs	r3, #2
 800600e:	e027      	b.n	8006060 <HAL_UARTEx_DisableFifoMode+0x66>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2201      	movs	r2, #1
 8006014:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2224      	movs	r2, #36	; 0x24
 800601c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f022 0201 	bic.w	r2, r2, #1
 8006036:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800603e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2200      	movs	r2, #0
 8006044:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	68fa      	ldr	r2, [r7, #12]
 800604c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2220      	movs	r2, #32
 8006052:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2200      	movs	r2, #0
 800605a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800605e:	2300      	movs	r3, #0
}
 8006060:	4618      	mov	r0, r3
 8006062:	3714      	adds	r7, #20
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr

0800606c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b084      	sub	sp, #16
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800607c:	2b01      	cmp	r3, #1
 800607e:	d101      	bne.n	8006084 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006080:	2302      	movs	r3, #2
 8006082:	e02d      	b.n	80060e0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2201      	movs	r2, #1
 8006088:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2224      	movs	r2, #36	; 0x24
 8006090:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	681a      	ldr	r2, [r3, #0]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f022 0201 	bic.w	r2, r2, #1
 80060aa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	683a      	ldr	r2, [r7, #0]
 80060bc:	430a      	orrs	r2, r1
 80060be:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f000 f84f 	bl	8006164 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	68fa      	ldr	r2, [r7, #12]
 80060cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2220      	movs	r2, #32
 80060d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2200      	movs	r2, #0
 80060da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80060de:	2300      	movs	r3, #0
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3710      	adds	r7, #16
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}

080060e8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b084      	sub	sp, #16
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
 80060f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80060f8:	2b01      	cmp	r3, #1
 80060fa:	d101      	bne.n	8006100 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80060fc:	2302      	movs	r3, #2
 80060fe:	e02d      	b.n	800615c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2201      	movs	r2, #1
 8006104:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2224      	movs	r2, #36	; 0x24
 800610c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	681a      	ldr	r2, [r3, #0]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f022 0201 	bic.w	r2, r2, #1
 8006126:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	683a      	ldr	r2, [r7, #0]
 8006138:	430a      	orrs	r2, r1
 800613a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f000 f811 	bl	8006164 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	68fa      	ldr	r2, [r7, #12]
 8006148:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2220      	movs	r2, #32
 800614e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2200      	movs	r2, #0
 8006156:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800615a:	2300      	movs	r3, #0
}
 800615c:	4618      	mov	r0, r3
 800615e:	3710      	adds	r7, #16
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}

08006164 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006164:	b480      	push	{r7}
 8006166:	b085      	sub	sp, #20
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006170:	2b00      	cmp	r3, #0
 8006172:	d108      	bne.n	8006186 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2201      	movs	r2, #1
 8006178:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2201      	movs	r2, #1
 8006180:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006184:	e031      	b.n	80061ea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006186:	2310      	movs	r3, #16
 8006188:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800618a:	2310      	movs	r3, #16
 800618c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	689b      	ldr	r3, [r3, #8]
 8006194:	0e5b      	lsrs	r3, r3, #25
 8006196:	b2db      	uxtb	r3, r3
 8006198:	f003 0307 	and.w	r3, r3, #7
 800619c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	0f5b      	lsrs	r3, r3, #29
 80061a6:	b2db      	uxtb	r3, r3
 80061a8:	f003 0307 	and.w	r3, r3, #7
 80061ac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80061ae:	7bbb      	ldrb	r3, [r7, #14]
 80061b0:	7b3a      	ldrb	r2, [r7, #12]
 80061b2:	4911      	ldr	r1, [pc, #68]	; (80061f8 <UARTEx_SetNbDataToProcess+0x94>)
 80061b4:	5c8a      	ldrb	r2, [r1, r2]
 80061b6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80061ba:	7b3a      	ldrb	r2, [r7, #12]
 80061bc:	490f      	ldr	r1, [pc, #60]	; (80061fc <UARTEx_SetNbDataToProcess+0x98>)
 80061be:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80061c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80061c4:	b29a      	uxth	r2, r3
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80061cc:	7bfb      	ldrb	r3, [r7, #15]
 80061ce:	7b7a      	ldrb	r2, [r7, #13]
 80061d0:	4909      	ldr	r1, [pc, #36]	; (80061f8 <UARTEx_SetNbDataToProcess+0x94>)
 80061d2:	5c8a      	ldrb	r2, [r1, r2]
 80061d4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80061d8:	7b7a      	ldrb	r2, [r7, #13]
 80061da:	4908      	ldr	r1, [pc, #32]	; (80061fc <UARTEx_SetNbDataToProcess+0x98>)
 80061dc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80061de:	fb93 f3f2 	sdiv	r3, r3, r2
 80061e2:	b29a      	uxth	r2, r3
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80061ea:	bf00      	nop
 80061ec:	3714      	adds	r7, #20
 80061ee:	46bd      	mov	sp, r7
 80061f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f4:	4770      	bx	lr
 80061f6:	bf00      	nop
 80061f8:	0800a734 	.word	0x0800a734
 80061fc:	0800a73c 	.word	0x0800a73c

08006200 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006200:	b084      	sub	sp, #16
 8006202:	b580      	push	{r7, lr}
 8006204:	b084      	sub	sp, #16
 8006206:	af00      	add	r7, sp, #0
 8006208:	6078      	str	r0, [r7, #4]
 800620a:	f107 001c 	add.w	r0, r7, #28
 800620e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006214:	2b01      	cmp	r3, #1
 8006216:	d120      	bne.n	800625a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800621c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	68da      	ldr	r2, [r3, #12]
 8006228:	4b2a      	ldr	r3, [pc, #168]	; (80062d4 <USB_CoreInit+0xd4>)
 800622a:	4013      	ands	r3, r2
 800622c:	687a      	ldr	r2, [r7, #4]
 800622e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	68db      	ldr	r3, [r3, #12]
 8006234:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800623c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800623e:	2b01      	cmp	r3, #1
 8006240:	d105      	bne.n	800624e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	68db      	ldr	r3, [r3, #12]
 8006246:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f001 fc04 	bl	8007a5c <USB_CoreReset>
 8006254:	4603      	mov	r3, r0
 8006256:	73fb      	strb	r3, [r7, #15]
 8006258:	e01a      	b.n	8006290 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	68db      	ldr	r3, [r3, #12]
 800625e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f001 fbf8 	bl	8007a5c <USB_CoreReset>
 800626c:	4603      	mov	r3, r0
 800626e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006270:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006272:	2b00      	cmp	r3, #0
 8006274:	d106      	bne.n	8006284 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800627a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	639a      	str	r2, [r3, #56]	; 0x38
 8006282:	e005      	b.n	8006290 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006288:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006292:	2b01      	cmp	r3, #1
 8006294:	d116      	bne.n	80062c4 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800629a:	b29a      	uxth	r2, r3
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80062a4:	4b0c      	ldr	r3, [pc, #48]	; (80062d8 <USB_CoreInit+0xd8>)
 80062a6:	4313      	orrs	r3, r2
 80062a8:	687a      	ldr	r2, [r7, #4]
 80062aa:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	f043 0206 	orr.w	r2, r3, #6
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	f043 0220 	orr.w	r2, r3, #32
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80062c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3710      	adds	r7, #16
 80062ca:	46bd      	mov	sp, r7
 80062cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80062d0:	b004      	add	sp, #16
 80062d2:	4770      	bx	lr
 80062d4:	ffbdffbf 	.word	0xffbdffbf
 80062d8:	03ee0000 	.word	0x03ee0000

080062dc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80062dc:	b480      	push	{r7}
 80062de:	b087      	sub	sp, #28
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	60f8      	str	r0, [r7, #12]
 80062e4:	60b9      	str	r1, [r7, #8]
 80062e6:	4613      	mov	r3, r2
 80062e8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80062ea:	79fb      	ldrb	r3, [r7, #7]
 80062ec:	2b02      	cmp	r3, #2
 80062ee:	d165      	bne.n	80063bc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	4a41      	ldr	r2, [pc, #260]	; (80063f8 <USB_SetTurnaroundTime+0x11c>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d906      	bls.n	8006306 <USB_SetTurnaroundTime+0x2a>
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	4a40      	ldr	r2, [pc, #256]	; (80063fc <USB_SetTurnaroundTime+0x120>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d202      	bcs.n	8006306 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006300:	230f      	movs	r3, #15
 8006302:	617b      	str	r3, [r7, #20]
 8006304:	e062      	b.n	80063cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	4a3c      	ldr	r2, [pc, #240]	; (80063fc <USB_SetTurnaroundTime+0x120>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d306      	bcc.n	800631c <USB_SetTurnaroundTime+0x40>
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	4a3b      	ldr	r2, [pc, #236]	; (8006400 <USB_SetTurnaroundTime+0x124>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d202      	bcs.n	800631c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006316:	230e      	movs	r3, #14
 8006318:	617b      	str	r3, [r7, #20]
 800631a:	e057      	b.n	80063cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	4a38      	ldr	r2, [pc, #224]	; (8006400 <USB_SetTurnaroundTime+0x124>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d306      	bcc.n	8006332 <USB_SetTurnaroundTime+0x56>
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	4a37      	ldr	r2, [pc, #220]	; (8006404 <USB_SetTurnaroundTime+0x128>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d202      	bcs.n	8006332 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800632c:	230d      	movs	r3, #13
 800632e:	617b      	str	r3, [r7, #20]
 8006330:	e04c      	b.n	80063cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	4a33      	ldr	r2, [pc, #204]	; (8006404 <USB_SetTurnaroundTime+0x128>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d306      	bcc.n	8006348 <USB_SetTurnaroundTime+0x6c>
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	4a32      	ldr	r2, [pc, #200]	; (8006408 <USB_SetTurnaroundTime+0x12c>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d802      	bhi.n	8006348 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006342:	230c      	movs	r3, #12
 8006344:	617b      	str	r3, [r7, #20]
 8006346:	e041      	b.n	80063cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	4a2f      	ldr	r2, [pc, #188]	; (8006408 <USB_SetTurnaroundTime+0x12c>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d906      	bls.n	800635e <USB_SetTurnaroundTime+0x82>
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	4a2e      	ldr	r2, [pc, #184]	; (800640c <USB_SetTurnaroundTime+0x130>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d802      	bhi.n	800635e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006358:	230b      	movs	r3, #11
 800635a:	617b      	str	r3, [r7, #20]
 800635c:	e036      	b.n	80063cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	4a2a      	ldr	r2, [pc, #168]	; (800640c <USB_SetTurnaroundTime+0x130>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d906      	bls.n	8006374 <USB_SetTurnaroundTime+0x98>
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	4a29      	ldr	r2, [pc, #164]	; (8006410 <USB_SetTurnaroundTime+0x134>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d802      	bhi.n	8006374 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800636e:	230a      	movs	r3, #10
 8006370:	617b      	str	r3, [r7, #20]
 8006372:	e02b      	b.n	80063cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	4a26      	ldr	r2, [pc, #152]	; (8006410 <USB_SetTurnaroundTime+0x134>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d906      	bls.n	800638a <USB_SetTurnaroundTime+0xae>
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	4a25      	ldr	r2, [pc, #148]	; (8006414 <USB_SetTurnaroundTime+0x138>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d202      	bcs.n	800638a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006384:	2309      	movs	r3, #9
 8006386:	617b      	str	r3, [r7, #20]
 8006388:	e020      	b.n	80063cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	4a21      	ldr	r2, [pc, #132]	; (8006414 <USB_SetTurnaroundTime+0x138>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d306      	bcc.n	80063a0 <USB_SetTurnaroundTime+0xc4>
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	4a20      	ldr	r2, [pc, #128]	; (8006418 <USB_SetTurnaroundTime+0x13c>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d802      	bhi.n	80063a0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800639a:	2308      	movs	r3, #8
 800639c:	617b      	str	r3, [r7, #20]
 800639e:	e015      	b.n	80063cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	4a1d      	ldr	r2, [pc, #116]	; (8006418 <USB_SetTurnaroundTime+0x13c>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d906      	bls.n	80063b6 <USB_SetTurnaroundTime+0xda>
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	4a1c      	ldr	r2, [pc, #112]	; (800641c <USB_SetTurnaroundTime+0x140>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d202      	bcs.n	80063b6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80063b0:	2307      	movs	r3, #7
 80063b2:	617b      	str	r3, [r7, #20]
 80063b4:	e00a      	b.n	80063cc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80063b6:	2306      	movs	r3, #6
 80063b8:	617b      	str	r3, [r7, #20]
 80063ba:	e007      	b.n	80063cc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80063bc:	79fb      	ldrb	r3, [r7, #7]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d102      	bne.n	80063c8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80063c2:	2309      	movs	r3, #9
 80063c4:	617b      	str	r3, [r7, #20]
 80063c6:	e001      	b.n	80063cc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80063c8:	2309      	movs	r3, #9
 80063ca:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	68db      	ldr	r3, [r3, #12]
 80063d0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	68da      	ldr	r2, [r3, #12]
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	029b      	lsls	r3, r3, #10
 80063e0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80063e4:	431a      	orrs	r2, r3
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80063ea:	2300      	movs	r3, #0
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	371c      	adds	r7, #28
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr
 80063f8:	00d8acbf 	.word	0x00d8acbf
 80063fc:	00e4e1c0 	.word	0x00e4e1c0
 8006400:	00f42400 	.word	0x00f42400
 8006404:	01067380 	.word	0x01067380
 8006408:	011a499f 	.word	0x011a499f
 800640c:	01312cff 	.word	0x01312cff
 8006410:	014ca43f 	.word	0x014ca43f
 8006414:	016e3600 	.word	0x016e3600
 8006418:	01a6ab1f 	.word	0x01a6ab1f
 800641c:	01e84800 	.word	0x01e84800

08006420 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006420:	b480      	push	{r7}
 8006422:	b083      	sub	sp, #12
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	f043 0201 	orr.w	r2, r3, #1
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006434:	2300      	movs	r3, #0
}
 8006436:	4618      	mov	r0, r3
 8006438:	370c      	adds	r7, #12
 800643a:	46bd      	mov	sp, r7
 800643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006440:	4770      	bx	lr

08006442 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006442:	b480      	push	{r7}
 8006444:	b083      	sub	sp, #12
 8006446:	af00      	add	r7, sp, #0
 8006448:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	689b      	ldr	r3, [r3, #8]
 800644e:	f023 0201 	bic.w	r2, r3, #1
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006456:	2300      	movs	r3, #0
}
 8006458:	4618      	mov	r0, r3
 800645a:	370c      	adds	r7, #12
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr

08006464 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b084      	sub	sp, #16
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	460b      	mov	r3, r1
 800646e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006470:	2300      	movs	r3, #0
 8006472:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	68db      	ldr	r3, [r3, #12]
 8006478:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006480:	78fb      	ldrb	r3, [r7, #3]
 8006482:	2b01      	cmp	r3, #1
 8006484:	d115      	bne.n	80064b2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	68db      	ldr	r3, [r3, #12]
 800648a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006492:	2001      	movs	r0, #1
 8006494:	f7fa fc32 	bl	8000cfc <HAL_Delay>
      ms++;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	3301      	adds	r3, #1
 800649c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f001 fa4b 	bl	800793a <USB_GetMode>
 80064a4:	4603      	mov	r3, r0
 80064a6:	2b01      	cmp	r3, #1
 80064a8:	d01e      	beq.n	80064e8 <USB_SetCurrentMode+0x84>
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2b31      	cmp	r3, #49	; 0x31
 80064ae:	d9f0      	bls.n	8006492 <USB_SetCurrentMode+0x2e>
 80064b0:	e01a      	b.n	80064e8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80064b2:	78fb      	ldrb	r3, [r7, #3]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d115      	bne.n	80064e4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	68db      	ldr	r3, [r3, #12]
 80064bc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80064c4:	2001      	movs	r0, #1
 80064c6:	f7fa fc19 	bl	8000cfc <HAL_Delay>
      ms++;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	3301      	adds	r3, #1
 80064ce:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f001 fa32 	bl	800793a <USB_GetMode>
 80064d6:	4603      	mov	r3, r0
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d005      	beq.n	80064e8 <USB_SetCurrentMode+0x84>
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2b31      	cmp	r3, #49	; 0x31
 80064e0:	d9f0      	bls.n	80064c4 <USB_SetCurrentMode+0x60>
 80064e2:	e001      	b.n	80064e8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80064e4:	2301      	movs	r3, #1
 80064e6:	e005      	b.n	80064f4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2b32      	cmp	r3, #50	; 0x32
 80064ec:	d101      	bne.n	80064f2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80064ee:	2301      	movs	r3, #1
 80064f0:	e000      	b.n	80064f4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80064f2:	2300      	movs	r3, #0
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3710      	adds	r7, #16
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}

080064fc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80064fc:	b084      	sub	sp, #16
 80064fe:	b580      	push	{r7, lr}
 8006500:	b086      	sub	sp, #24
 8006502:	af00      	add	r7, sp, #0
 8006504:	6078      	str	r0, [r7, #4]
 8006506:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800650a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800650e:	2300      	movs	r3, #0
 8006510:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006516:	2300      	movs	r3, #0
 8006518:	613b      	str	r3, [r7, #16]
 800651a:	e009      	b.n	8006530 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800651c:	687a      	ldr	r2, [r7, #4]
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	3340      	adds	r3, #64	; 0x40
 8006522:	009b      	lsls	r3, r3, #2
 8006524:	4413      	add	r3, r2
 8006526:	2200      	movs	r2, #0
 8006528:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	3301      	adds	r3, #1
 800652e:	613b      	str	r3, [r7, #16]
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	2b0e      	cmp	r3, #14
 8006534:	d9f2      	bls.n	800651c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006536:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006538:	2b00      	cmp	r3, #0
 800653a:	d11c      	bne.n	8006576 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	68fa      	ldr	r2, [r7, #12]
 8006546:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800654a:	f043 0302 	orr.w	r3, r3, #2
 800654e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006554:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	601a      	str	r2, [r3, #0]
 8006574:	e005      	b.n	8006582 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800657a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006588:	461a      	mov	r2, r3
 800658a:	2300      	movs	r3, #0
 800658c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006594:	4619      	mov	r1, r3
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800659c:	461a      	mov	r2, r3
 800659e:	680b      	ldr	r3, [r1, #0]
 80065a0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80065a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065a4:	2b01      	cmp	r3, #1
 80065a6:	d10c      	bne.n	80065c2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80065a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d104      	bne.n	80065b8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80065ae:	2100      	movs	r1, #0
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f000 f965 	bl	8006880 <USB_SetDevSpeed>
 80065b6:	e008      	b.n	80065ca <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80065b8:	2101      	movs	r1, #1
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f000 f960 	bl	8006880 <USB_SetDevSpeed>
 80065c0:	e003      	b.n	80065ca <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80065c2:	2103      	movs	r1, #3
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f000 f95b 	bl	8006880 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80065ca:	2110      	movs	r1, #16
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f000 f8f3 	bl	80067b8 <USB_FlushTxFifo>
 80065d2:	4603      	mov	r3, r0
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d001      	beq.n	80065dc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80065d8:	2301      	movs	r3, #1
 80065da:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f000 f91f 	bl	8006820 <USB_FlushRxFifo>
 80065e2:	4603      	mov	r3, r0
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d001      	beq.n	80065ec <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80065e8:	2301      	movs	r3, #1
 80065ea:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065f2:	461a      	mov	r2, r3
 80065f4:	2300      	movs	r3, #0
 80065f6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065fe:	461a      	mov	r2, r3
 8006600:	2300      	movs	r3, #0
 8006602:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800660a:	461a      	mov	r2, r3
 800660c:	2300      	movs	r3, #0
 800660e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006610:	2300      	movs	r3, #0
 8006612:	613b      	str	r3, [r7, #16]
 8006614:	e043      	b.n	800669e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	015a      	lsls	r2, r3, #5
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	4413      	add	r3, r2
 800661e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006628:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800662c:	d118      	bne.n	8006660 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d10a      	bne.n	800664a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	015a      	lsls	r2, r3, #5
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	4413      	add	r3, r2
 800663c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006640:	461a      	mov	r2, r3
 8006642:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006646:	6013      	str	r3, [r2, #0]
 8006648:	e013      	b.n	8006672 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	015a      	lsls	r2, r3, #5
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	4413      	add	r3, r2
 8006652:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006656:	461a      	mov	r2, r3
 8006658:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800665c:	6013      	str	r3, [r2, #0]
 800665e:	e008      	b.n	8006672 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	015a      	lsls	r2, r3, #5
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	4413      	add	r3, r2
 8006668:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800666c:	461a      	mov	r2, r3
 800666e:	2300      	movs	r3, #0
 8006670:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	015a      	lsls	r2, r3, #5
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	4413      	add	r3, r2
 800667a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800667e:	461a      	mov	r2, r3
 8006680:	2300      	movs	r3, #0
 8006682:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	015a      	lsls	r2, r3, #5
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	4413      	add	r3, r2
 800668c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006690:	461a      	mov	r2, r3
 8006692:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006696:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	3301      	adds	r3, #1
 800669c:	613b      	str	r3, [r7, #16]
 800669e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a0:	693a      	ldr	r2, [r7, #16]
 80066a2:	429a      	cmp	r2, r3
 80066a4:	d3b7      	bcc.n	8006616 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80066a6:	2300      	movs	r3, #0
 80066a8:	613b      	str	r3, [r7, #16]
 80066aa:	e043      	b.n	8006734 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	015a      	lsls	r2, r3, #5
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	4413      	add	r3, r2
 80066b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066c2:	d118      	bne.n	80066f6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d10a      	bne.n	80066e0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	015a      	lsls	r2, r3, #5
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	4413      	add	r3, r2
 80066d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066d6:	461a      	mov	r2, r3
 80066d8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80066dc:	6013      	str	r3, [r2, #0]
 80066de:	e013      	b.n	8006708 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	015a      	lsls	r2, r3, #5
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	4413      	add	r3, r2
 80066e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066ec:	461a      	mov	r2, r3
 80066ee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80066f2:	6013      	str	r3, [r2, #0]
 80066f4:	e008      	b.n	8006708 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	015a      	lsls	r2, r3, #5
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	4413      	add	r3, r2
 80066fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006702:	461a      	mov	r2, r3
 8006704:	2300      	movs	r3, #0
 8006706:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	015a      	lsls	r2, r3, #5
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	4413      	add	r3, r2
 8006710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006714:	461a      	mov	r2, r3
 8006716:	2300      	movs	r3, #0
 8006718:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	015a      	lsls	r2, r3, #5
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	4413      	add	r3, r2
 8006722:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006726:	461a      	mov	r2, r3
 8006728:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800672c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	3301      	adds	r3, #1
 8006732:	613b      	str	r3, [r7, #16]
 8006734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006736:	693a      	ldr	r2, [r7, #16]
 8006738:	429a      	cmp	r2, r3
 800673a:	d3b7      	bcc.n	80066ac <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006742:	691b      	ldr	r3, [r3, #16]
 8006744:	68fa      	ldr	r2, [r7, #12]
 8006746:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800674a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800674e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2200      	movs	r2, #0
 8006754:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800675c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800675e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006760:	2b00      	cmp	r3, #0
 8006762:	d105      	bne.n	8006770 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	699b      	ldr	r3, [r3, #24]
 8006768:	f043 0210 	orr.w	r2, r3, #16
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	699a      	ldr	r2, [r3, #24]
 8006774:	4b0e      	ldr	r3, [pc, #56]	; (80067b0 <USB_DevInit+0x2b4>)
 8006776:	4313      	orrs	r3, r2
 8006778:	687a      	ldr	r2, [r7, #4]
 800677a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800677c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800677e:	2b00      	cmp	r3, #0
 8006780:	d005      	beq.n	800678e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	699b      	ldr	r3, [r3, #24]
 8006786:	f043 0208 	orr.w	r2, r3, #8
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800678e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006790:	2b01      	cmp	r3, #1
 8006792:	d105      	bne.n	80067a0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	699a      	ldr	r2, [r3, #24]
 8006798:	4b06      	ldr	r3, [pc, #24]	; (80067b4 <USB_DevInit+0x2b8>)
 800679a:	4313      	orrs	r3, r2
 800679c:	687a      	ldr	r2, [r7, #4]
 800679e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80067a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3718      	adds	r7, #24
 80067a6:	46bd      	mov	sp, r7
 80067a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80067ac:	b004      	add	sp, #16
 80067ae:	4770      	bx	lr
 80067b0:	803c3800 	.word	0x803c3800
 80067b4:	40000004 	.word	0x40000004

080067b8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b085      	sub	sp, #20
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
 80067c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80067c2:	2300      	movs	r3, #0
 80067c4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	3301      	adds	r3, #1
 80067ca:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	4a13      	ldr	r2, [pc, #76]	; (800681c <USB_FlushTxFifo+0x64>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d901      	bls.n	80067d8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80067d4:	2303      	movs	r3, #3
 80067d6:	e01b      	b.n	8006810 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	691b      	ldr	r3, [r3, #16]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	daf2      	bge.n	80067c6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80067e0:	2300      	movs	r3, #0
 80067e2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	019b      	lsls	r3, r3, #6
 80067e8:	f043 0220 	orr.w	r2, r3, #32
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	3301      	adds	r3, #1
 80067f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	4a08      	ldr	r2, [pc, #32]	; (800681c <USB_FlushTxFifo+0x64>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d901      	bls.n	8006802 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80067fe:	2303      	movs	r3, #3
 8006800:	e006      	b.n	8006810 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	691b      	ldr	r3, [r3, #16]
 8006806:	f003 0320 	and.w	r3, r3, #32
 800680a:	2b20      	cmp	r3, #32
 800680c:	d0f0      	beq.n	80067f0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800680e:	2300      	movs	r3, #0
}
 8006810:	4618      	mov	r0, r3
 8006812:	3714      	adds	r7, #20
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr
 800681c:	00030d40 	.word	0x00030d40

08006820 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006820:	b480      	push	{r7}
 8006822:	b085      	sub	sp, #20
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006828:	2300      	movs	r3, #0
 800682a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	3301      	adds	r3, #1
 8006830:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	4a11      	ldr	r2, [pc, #68]	; (800687c <USB_FlushRxFifo+0x5c>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d901      	bls.n	800683e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800683a:	2303      	movs	r3, #3
 800683c:	e018      	b.n	8006870 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	691b      	ldr	r3, [r3, #16]
 8006842:	2b00      	cmp	r3, #0
 8006844:	daf2      	bge.n	800682c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006846:	2300      	movs	r3, #0
 8006848:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2210      	movs	r2, #16
 800684e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	3301      	adds	r3, #1
 8006854:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	4a08      	ldr	r2, [pc, #32]	; (800687c <USB_FlushRxFifo+0x5c>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d901      	bls.n	8006862 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800685e:	2303      	movs	r3, #3
 8006860:	e006      	b.n	8006870 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	691b      	ldr	r3, [r3, #16]
 8006866:	f003 0310 	and.w	r3, r3, #16
 800686a:	2b10      	cmp	r3, #16
 800686c:	d0f0      	beq.n	8006850 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800686e:	2300      	movs	r3, #0
}
 8006870:	4618      	mov	r0, r3
 8006872:	3714      	adds	r7, #20
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr
 800687c:	00030d40 	.word	0x00030d40

08006880 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006880:	b480      	push	{r7}
 8006882:	b085      	sub	sp, #20
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
 8006888:	460b      	mov	r3, r1
 800688a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006896:	681a      	ldr	r2, [r3, #0]
 8006898:	78fb      	ldrb	r3, [r7, #3]
 800689a:	68f9      	ldr	r1, [r7, #12]
 800689c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068a0:	4313      	orrs	r3, r2
 80068a2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80068a4:	2300      	movs	r3, #0
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3714      	adds	r7, #20
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr

080068b2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80068b2:	b480      	push	{r7}
 80068b4:	b087      	sub	sp, #28
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068c4:	689b      	ldr	r3, [r3, #8]
 80068c6:	f003 0306 	and.w	r3, r3, #6
 80068ca:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d102      	bne.n	80068d8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80068d2:	2300      	movs	r3, #0
 80068d4:	75fb      	strb	r3, [r7, #23]
 80068d6:	e00a      	b.n	80068ee <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2b02      	cmp	r3, #2
 80068dc:	d002      	beq.n	80068e4 <USB_GetDevSpeed+0x32>
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2b06      	cmp	r3, #6
 80068e2:	d102      	bne.n	80068ea <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80068e4:	2302      	movs	r3, #2
 80068e6:	75fb      	strb	r3, [r7, #23]
 80068e8:	e001      	b.n	80068ee <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80068ea:	230f      	movs	r3, #15
 80068ec:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80068ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	371c      	adds	r7, #28
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr

080068fc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b085      	sub	sp, #20
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	781b      	ldrb	r3, [r3, #0]
 800690e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	785b      	ldrb	r3, [r3, #1]
 8006914:	2b01      	cmp	r3, #1
 8006916:	d139      	bne.n	800698c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800691e:	69da      	ldr	r2, [r3, #28]
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	f003 030f 	and.w	r3, r3, #15
 8006928:	2101      	movs	r1, #1
 800692a:	fa01 f303 	lsl.w	r3, r1, r3
 800692e:	b29b      	uxth	r3, r3
 8006930:	68f9      	ldr	r1, [r7, #12]
 8006932:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006936:	4313      	orrs	r3, r2
 8006938:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	015a      	lsls	r2, r3, #5
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	4413      	add	r3, r2
 8006942:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800694c:	2b00      	cmp	r3, #0
 800694e:	d153      	bne.n	80069f8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	015a      	lsls	r2, r3, #5
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	4413      	add	r3, r2
 8006958:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	68db      	ldr	r3, [r3, #12]
 8006962:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	791b      	ldrb	r3, [r3, #4]
 800696a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800696c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	059b      	lsls	r3, r3, #22
 8006972:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006974:	431a      	orrs	r2, r3
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	0159      	lsls	r1, r3, #5
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	440b      	add	r3, r1
 800697e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006982:	4619      	mov	r1, r3
 8006984:	4b20      	ldr	r3, [pc, #128]	; (8006a08 <USB_ActivateEndpoint+0x10c>)
 8006986:	4313      	orrs	r3, r2
 8006988:	600b      	str	r3, [r1, #0]
 800698a:	e035      	b.n	80069f8 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006992:	69da      	ldr	r2, [r3, #28]
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	781b      	ldrb	r3, [r3, #0]
 8006998:	f003 030f 	and.w	r3, r3, #15
 800699c:	2101      	movs	r1, #1
 800699e:	fa01 f303 	lsl.w	r3, r1, r3
 80069a2:	041b      	lsls	r3, r3, #16
 80069a4:	68f9      	ldr	r1, [r7, #12]
 80069a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80069aa:	4313      	orrs	r3, r2
 80069ac:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	015a      	lsls	r2, r3, #5
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	4413      	add	r3, r2
 80069b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d119      	bne.n	80069f8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	015a      	lsls	r2, r3, #5
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	4413      	add	r3, r2
 80069cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069d0:	681a      	ldr	r2, [r3, #0]
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	68db      	ldr	r3, [r3, #12]
 80069d6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	791b      	ldrb	r3, [r3, #4]
 80069de:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80069e0:	430b      	orrs	r3, r1
 80069e2:	431a      	orrs	r2, r3
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	0159      	lsls	r1, r3, #5
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	440b      	add	r3, r1
 80069ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069f0:	4619      	mov	r1, r3
 80069f2:	4b05      	ldr	r3, [pc, #20]	; (8006a08 <USB_ActivateEndpoint+0x10c>)
 80069f4:	4313      	orrs	r3, r2
 80069f6:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80069f8:	2300      	movs	r3, #0
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3714      	adds	r7, #20
 80069fe:	46bd      	mov	sp, r7
 8006a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a04:	4770      	bx	lr
 8006a06:	bf00      	nop
 8006a08:	10008000 	.word	0x10008000

08006a0c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b085      	sub	sp, #20
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	781b      	ldrb	r3, [r3, #0]
 8006a1e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	785b      	ldrb	r3, [r3, #1]
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d161      	bne.n	8006aec <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	015a      	lsls	r2, r3, #5
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	4413      	add	r3, r2
 8006a30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a3e:	d11f      	bne.n	8006a80 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	015a      	lsls	r2, r3, #5
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	4413      	add	r3, r2
 8006a48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	68ba      	ldr	r2, [r7, #8]
 8006a50:	0151      	lsls	r1, r2, #5
 8006a52:	68fa      	ldr	r2, [r7, #12]
 8006a54:	440a      	add	r2, r1
 8006a56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a5a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006a5e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	015a      	lsls	r2, r3, #5
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	4413      	add	r3, r2
 8006a68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	68ba      	ldr	r2, [r7, #8]
 8006a70:	0151      	lsls	r1, r2, #5
 8006a72:	68fa      	ldr	r2, [r7, #12]
 8006a74:	440a      	add	r2, r1
 8006a76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a7a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a7e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	781b      	ldrb	r3, [r3, #0]
 8006a8c:	f003 030f 	and.w	r3, r3, #15
 8006a90:	2101      	movs	r1, #1
 8006a92:	fa01 f303 	lsl.w	r3, r1, r3
 8006a96:	b29b      	uxth	r3, r3
 8006a98:	43db      	mvns	r3, r3
 8006a9a:	68f9      	ldr	r1, [r7, #12]
 8006a9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006aa0:	4013      	ands	r3, r2
 8006aa2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006aaa:	69da      	ldr	r2, [r3, #28]
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	f003 030f 	and.w	r3, r3, #15
 8006ab4:	2101      	movs	r1, #1
 8006ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	43db      	mvns	r3, r3
 8006abe:	68f9      	ldr	r1, [r7, #12]
 8006ac0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ac4:	4013      	ands	r3, r2
 8006ac6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	015a      	lsls	r2, r3, #5
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	4413      	add	r3, r2
 8006ad0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ad4:	681a      	ldr	r2, [r3, #0]
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	0159      	lsls	r1, r3, #5
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	440b      	add	r3, r1
 8006ade:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ae2:	4619      	mov	r1, r3
 8006ae4:	4b35      	ldr	r3, [pc, #212]	; (8006bbc <USB_DeactivateEndpoint+0x1b0>)
 8006ae6:	4013      	ands	r3, r2
 8006ae8:	600b      	str	r3, [r1, #0]
 8006aea:	e060      	b.n	8006bae <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	015a      	lsls	r2, r3, #5
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	4413      	add	r3, r2
 8006af4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006afe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b02:	d11f      	bne.n	8006b44 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	015a      	lsls	r2, r3, #5
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	4413      	add	r3, r2
 8006b0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	68ba      	ldr	r2, [r7, #8]
 8006b14:	0151      	lsls	r1, r2, #5
 8006b16:	68fa      	ldr	r2, [r7, #12]
 8006b18:	440a      	add	r2, r1
 8006b1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b1e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006b22:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	015a      	lsls	r2, r3, #5
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	4413      	add	r3, r2
 8006b2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	68ba      	ldr	r2, [r7, #8]
 8006b34:	0151      	lsls	r1, r2, #5
 8006b36:	68fa      	ldr	r2, [r7, #12]
 8006b38:	440a      	add	r2, r1
 8006b3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b3e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b42:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	781b      	ldrb	r3, [r3, #0]
 8006b50:	f003 030f 	and.w	r3, r3, #15
 8006b54:	2101      	movs	r1, #1
 8006b56:	fa01 f303 	lsl.w	r3, r1, r3
 8006b5a:	041b      	lsls	r3, r3, #16
 8006b5c:	43db      	mvns	r3, r3
 8006b5e:	68f9      	ldr	r1, [r7, #12]
 8006b60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b64:	4013      	ands	r3, r2
 8006b66:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b6e:	69da      	ldr	r2, [r3, #28]
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	781b      	ldrb	r3, [r3, #0]
 8006b74:	f003 030f 	and.w	r3, r3, #15
 8006b78:	2101      	movs	r1, #1
 8006b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8006b7e:	041b      	lsls	r3, r3, #16
 8006b80:	43db      	mvns	r3, r3
 8006b82:	68f9      	ldr	r1, [r7, #12]
 8006b84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b88:	4013      	ands	r3, r2
 8006b8a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	015a      	lsls	r2, r3, #5
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	4413      	add	r3, r2
 8006b94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	0159      	lsls	r1, r3, #5
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	440b      	add	r3, r1
 8006ba2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ba6:	4619      	mov	r1, r3
 8006ba8:	4b05      	ldr	r3, [pc, #20]	; (8006bc0 <USB_DeactivateEndpoint+0x1b4>)
 8006baa:	4013      	ands	r3, r2
 8006bac:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006bae:	2300      	movs	r3, #0
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3714      	adds	r7, #20
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr
 8006bbc:	ec337800 	.word	0xec337800
 8006bc0:	eff37800 	.word	0xeff37800

08006bc4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b08a      	sub	sp, #40	; 0x28
 8006bc8:	af02      	add	r7, sp, #8
 8006bca:	60f8      	str	r0, [r7, #12]
 8006bcc:	60b9      	str	r1, [r7, #8]
 8006bce:	4613      	mov	r3, r2
 8006bd0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	781b      	ldrb	r3, [r3, #0]
 8006bda:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	785b      	ldrb	r3, [r3, #1]
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	f040 8163 	bne.w	8006eac <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	699b      	ldr	r3, [r3, #24]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d132      	bne.n	8006c54 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006bee:	69bb      	ldr	r3, [r7, #24]
 8006bf0:	015a      	lsls	r2, r3, #5
 8006bf2:	69fb      	ldr	r3, [r7, #28]
 8006bf4:	4413      	add	r3, r2
 8006bf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bfa:	691a      	ldr	r2, [r3, #16]
 8006bfc:	69bb      	ldr	r3, [r7, #24]
 8006bfe:	0159      	lsls	r1, r3, #5
 8006c00:	69fb      	ldr	r3, [r7, #28]
 8006c02:	440b      	add	r3, r1
 8006c04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c08:	4619      	mov	r1, r3
 8006c0a:	4ba5      	ldr	r3, [pc, #660]	; (8006ea0 <USB_EPStartXfer+0x2dc>)
 8006c0c:	4013      	ands	r3, r2
 8006c0e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006c10:	69bb      	ldr	r3, [r7, #24]
 8006c12:	015a      	lsls	r2, r3, #5
 8006c14:	69fb      	ldr	r3, [r7, #28]
 8006c16:	4413      	add	r3, r2
 8006c18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c1c:	691b      	ldr	r3, [r3, #16]
 8006c1e:	69ba      	ldr	r2, [r7, #24]
 8006c20:	0151      	lsls	r1, r2, #5
 8006c22:	69fa      	ldr	r2, [r7, #28]
 8006c24:	440a      	add	r2, r1
 8006c26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c2a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006c2e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006c30:	69bb      	ldr	r3, [r7, #24]
 8006c32:	015a      	lsls	r2, r3, #5
 8006c34:	69fb      	ldr	r3, [r7, #28]
 8006c36:	4413      	add	r3, r2
 8006c38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c3c:	691a      	ldr	r2, [r3, #16]
 8006c3e:	69bb      	ldr	r3, [r7, #24]
 8006c40:	0159      	lsls	r1, r3, #5
 8006c42:	69fb      	ldr	r3, [r7, #28]
 8006c44:	440b      	add	r3, r1
 8006c46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c4a:	4619      	mov	r1, r3
 8006c4c:	4b95      	ldr	r3, [pc, #596]	; (8006ea4 <USB_EPStartXfer+0x2e0>)
 8006c4e:	4013      	ands	r3, r2
 8006c50:	610b      	str	r3, [r1, #16]
 8006c52:	e074      	b.n	8006d3e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006c54:	69bb      	ldr	r3, [r7, #24]
 8006c56:	015a      	lsls	r2, r3, #5
 8006c58:	69fb      	ldr	r3, [r7, #28]
 8006c5a:	4413      	add	r3, r2
 8006c5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c60:	691a      	ldr	r2, [r3, #16]
 8006c62:	69bb      	ldr	r3, [r7, #24]
 8006c64:	0159      	lsls	r1, r3, #5
 8006c66:	69fb      	ldr	r3, [r7, #28]
 8006c68:	440b      	add	r3, r1
 8006c6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c6e:	4619      	mov	r1, r3
 8006c70:	4b8c      	ldr	r3, [pc, #560]	; (8006ea4 <USB_EPStartXfer+0x2e0>)
 8006c72:	4013      	ands	r3, r2
 8006c74:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006c76:	69bb      	ldr	r3, [r7, #24]
 8006c78:	015a      	lsls	r2, r3, #5
 8006c7a:	69fb      	ldr	r3, [r7, #28]
 8006c7c:	4413      	add	r3, r2
 8006c7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c82:	691a      	ldr	r2, [r3, #16]
 8006c84:	69bb      	ldr	r3, [r7, #24]
 8006c86:	0159      	lsls	r1, r3, #5
 8006c88:	69fb      	ldr	r3, [r7, #28]
 8006c8a:	440b      	add	r3, r1
 8006c8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c90:	4619      	mov	r1, r3
 8006c92:	4b83      	ldr	r3, [pc, #524]	; (8006ea0 <USB_EPStartXfer+0x2dc>)
 8006c94:	4013      	ands	r3, r2
 8006c96:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006c98:	69bb      	ldr	r3, [r7, #24]
 8006c9a:	015a      	lsls	r2, r3, #5
 8006c9c:	69fb      	ldr	r3, [r7, #28]
 8006c9e:	4413      	add	r3, r2
 8006ca0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ca4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	6999      	ldr	r1, [r3, #24]
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	68db      	ldr	r3, [r3, #12]
 8006cae:	440b      	add	r3, r1
 8006cb0:	1e59      	subs	r1, r3, #1
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	68db      	ldr	r3, [r3, #12]
 8006cb6:	fbb1 f3f3 	udiv	r3, r1, r3
 8006cba:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006cbc:	4b7a      	ldr	r3, [pc, #488]	; (8006ea8 <USB_EPStartXfer+0x2e4>)
 8006cbe:	400b      	ands	r3, r1
 8006cc0:	69b9      	ldr	r1, [r7, #24]
 8006cc2:	0148      	lsls	r0, r1, #5
 8006cc4:	69f9      	ldr	r1, [r7, #28]
 8006cc6:	4401      	add	r1, r0
 8006cc8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006cd0:	69bb      	ldr	r3, [r7, #24]
 8006cd2:	015a      	lsls	r2, r3, #5
 8006cd4:	69fb      	ldr	r3, [r7, #28]
 8006cd6:	4413      	add	r3, r2
 8006cd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cdc:	691a      	ldr	r2, [r3, #16]
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	699b      	ldr	r3, [r3, #24]
 8006ce2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ce6:	69b9      	ldr	r1, [r7, #24]
 8006ce8:	0148      	lsls	r0, r1, #5
 8006cea:	69f9      	ldr	r1, [r7, #28]
 8006cec:	4401      	add	r1, r0
 8006cee:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	791b      	ldrb	r3, [r3, #4]
 8006cfa:	2b01      	cmp	r3, #1
 8006cfc:	d11f      	bne.n	8006d3e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006cfe:	69bb      	ldr	r3, [r7, #24]
 8006d00:	015a      	lsls	r2, r3, #5
 8006d02:	69fb      	ldr	r3, [r7, #28]
 8006d04:	4413      	add	r3, r2
 8006d06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d0a:	691b      	ldr	r3, [r3, #16]
 8006d0c:	69ba      	ldr	r2, [r7, #24]
 8006d0e:	0151      	lsls	r1, r2, #5
 8006d10:	69fa      	ldr	r2, [r7, #28]
 8006d12:	440a      	add	r2, r1
 8006d14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d18:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006d1c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006d1e:	69bb      	ldr	r3, [r7, #24]
 8006d20:	015a      	lsls	r2, r3, #5
 8006d22:	69fb      	ldr	r3, [r7, #28]
 8006d24:	4413      	add	r3, r2
 8006d26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d2a:	691b      	ldr	r3, [r3, #16]
 8006d2c:	69ba      	ldr	r2, [r7, #24]
 8006d2e:	0151      	lsls	r1, r2, #5
 8006d30:	69fa      	ldr	r2, [r7, #28]
 8006d32:	440a      	add	r2, r1
 8006d34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d38:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006d3c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006d3e:	79fb      	ldrb	r3, [r7, #7]
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	d14b      	bne.n	8006ddc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	695b      	ldr	r3, [r3, #20]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d009      	beq.n	8006d60 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006d4c:	69bb      	ldr	r3, [r7, #24]
 8006d4e:	015a      	lsls	r2, r3, #5
 8006d50:	69fb      	ldr	r3, [r7, #28]
 8006d52:	4413      	add	r3, r2
 8006d54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d58:	461a      	mov	r2, r3
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	695b      	ldr	r3, [r3, #20]
 8006d5e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	791b      	ldrb	r3, [r3, #4]
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d128      	bne.n	8006dba <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006d68:	69fb      	ldr	r3, [r7, #28]
 8006d6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d110      	bne.n	8006d9a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006d78:	69bb      	ldr	r3, [r7, #24]
 8006d7a:	015a      	lsls	r2, r3, #5
 8006d7c:	69fb      	ldr	r3, [r7, #28]
 8006d7e:	4413      	add	r3, r2
 8006d80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	69ba      	ldr	r2, [r7, #24]
 8006d88:	0151      	lsls	r1, r2, #5
 8006d8a:	69fa      	ldr	r2, [r7, #28]
 8006d8c:	440a      	add	r2, r1
 8006d8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d92:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006d96:	6013      	str	r3, [r2, #0]
 8006d98:	e00f      	b.n	8006dba <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006d9a:	69bb      	ldr	r3, [r7, #24]
 8006d9c:	015a      	lsls	r2, r3, #5
 8006d9e:	69fb      	ldr	r3, [r7, #28]
 8006da0:	4413      	add	r3, r2
 8006da2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	69ba      	ldr	r2, [r7, #24]
 8006daa:	0151      	lsls	r1, r2, #5
 8006dac:	69fa      	ldr	r2, [r7, #28]
 8006dae:	440a      	add	r2, r1
 8006db0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006db4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006db8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006dba:	69bb      	ldr	r3, [r7, #24]
 8006dbc:	015a      	lsls	r2, r3, #5
 8006dbe:	69fb      	ldr	r3, [r7, #28]
 8006dc0:	4413      	add	r3, r2
 8006dc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	69ba      	ldr	r2, [r7, #24]
 8006dca:	0151      	lsls	r1, r2, #5
 8006dcc:	69fa      	ldr	r2, [r7, #28]
 8006dce:	440a      	add	r2, r1
 8006dd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dd4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006dd8:	6013      	str	r3, [r2, #0]
 8006dda:	e137      	b.n	800704c <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006ddc:	69bb      	ldr	r3, [r7, #24]
 8006dde:	015a      	lsls	r2, r3, #5
 8006de0:	69fb      	ldr	r3, [r7, #28]
 8006de2:	4413      	add	r3, r2
 8006de4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	69ba      	ldr	r2, [r7, #24]
 8006dec:	0151      	lsls	r1, r2, #5
 8006dee:	69fa      	ldr	r2, [r7, #28]
 8006df0:	440a      	add	r2, r1
 8006df2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006df6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006dfa:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	791b      	ldrb	r3, [r3, #4]
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	d015      	beq.n	8006e30 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	699b      	ldr	r3, [r3, #24]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	f000 811f 	beq.w	800704c <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006e0e:	69fb      	ldr	r3, [r7, #28]
 8006e10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	781b      	ldrb	r3, [r3, #0]
 8006e1a:	f003 030f 	and.w	r3, r3, #15
 8006e1e:	2101      	movs	r1, #1
 8006e20:	fa01 f303 	lsl.w	r3, r1, r3
 8006e24:	69f9      	ldr	r1, [r7, #28]
 8006e26:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	634b      	str	r3, [r1, #52]	; 0x34
 8006e2e:	e10d      	b.n	800704c <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006e30:	69fb      	ldr	r3, [r7, #28]
 8006e32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e36:	689b      	ldr	r3, [r3, #8]
 8006e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d110      	bne.n	8006e62 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006e40:	69bb      	ldr	r3, [r7, #24]
 8006e42:	015a      	lsls	r2, r3, #5
 8006e44:	69fb      	ldr	r3, [r7, #28]
 8006e46:	4413      	add	r3, r2
 8006e48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	69ba      	ldr	r2, [r7, #24]
 8006e50:	0151      	lsls	r1, r2, #5
 8006e52:	69fa      	ldr	r2, [r7, #28]
 8006e54:	440a      	add	r2, r1
 8006e56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e5a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006e5e:	6013      	str	r3, [r2, #0]
 8006e60:	e00f      	b.n	8006e82 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006e62:	69bb      	ldr	r3, [r7, #24]
 8006e64:	015a      	lsls	r2, r3, #5
 8006e66:	69fb      	ldr	r3, [r7, #28]
 8006e68:	4413      	add	r3, r2
 8006e6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	69ba      	ldr	r2, [r7, #24]
 8006e72:	0151      	lsls	r1, r2, #5
 8006e74:	69fa      	ldr	r2, [r7, #28]
 8006e76:	440a      	add	r2, r1
 8006e78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e80:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	6919      	ldr	r1, [r3, #16]
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	781a      	ldrb	r2, [r3, #0]
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	699b      	ldr	r3, [r3, #24]
 8006e8e:	b298      	uxth	r0, r3
 8006e90:	79fb      	ldrb	r3, [r7, #7]
 8006e92:	9300      	str	r3, [sp, #0]
 8006e94:	4603      	mov	r3, r0
 8006e96:	68f8      	ldr	r0, [r7, #12]
 8006e98:	f000 faea 	bl	8007470 <USB_WritePacket>
 8006e9c:	e0d6      	b.n	800704c <USB_EPStartXfer+0x488>
 8006e9e:	bf00      	nop
 8006ea0:	e007ffff 	.word	0xe007ffff
 8006ea4:	fff80000 	.word	0xfff80000
 8006ea8:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006eac:	69bb      	ldr	r3, [r7, #24]
 8006eae:	015a      	lsls	r2, r3, #5
 8006eb0:	69fb      	ldr	r3, [r7, #28]
 8006eb2:	4413      	add	r3, r2
 8006eb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eb8:	691a      	ldr	r2, [r3, #16]
 8006eba:	69bb      	ldr	r3, [r7, #24]
 8006ebc:	0159      	lsls	r1, r3, #5
 8006ebe:	69fb      	ldr	r3, [r7, #28]
 8006ec0:	440b      	add	r3, r1
 8006ec2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ec6:	4619      	mov	r1, r3
 8006ec8:	4b63      	ldr	r3, [pc, #396]	; (8007058 <USB_EPStartXfer+0x494>)
 8006eca:	4013      	ands	r3, r2
 8006ecc:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006ece:	69bb      	ldr	r3, [r7, #24]
 8006ed0:	015a      	lsls	r2, r3, #5
 8006ed2:	69fb      	ldr	r3, [r7, #28]
 8006ed4:	4413      	add	r3, r2
 8006ed6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eda:	691a      	ldr	r2, [r3, #16]
 8006edc:	69bb      	ldr	r3, [r7, #24]
 8006ede:	0159      	lsls	r1, r3, #5
 8006ee0:	69fb      	ldr	r3, [r7, #28]
 8006ee2:	440b      	add	r3, r1
 8006ee4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ee8:	4619      	mov	r1, r3
 8006eea:	4b5c      	ldr	r3, [pc, #368]	; (800705c <USB_EPStartXfer+0x498>)
 8006eec:	4013      	ands	r3, r2
 8006eee:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	699b      	ldr	r3, [r3, #24]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d123      	bne.n	8006f40 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006ef8:	69bb      	ldr	r3, [r7, #24]
 8006efa:	015a      	lsls	r2, r3, #5
 8006efc:	69fb      	ldr	r3, [r7, #28]
 8006efe:	4413      	add	r3, r2
 8006f00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f04:	691a      	ldr	r2, [r3, #16]
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	68db      	ldr	r3, [r3, #12]
 8006f0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f0e:	69b9      	ldr	r1, [r7, #24]
 8006f10:	0148      	lsls	r0, r1, #5
 8006f12:	69f9      	ldr	r1, [r7, #28]
 8006f14:	4401      	add	r1, r0
 8006f16:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006f1e:	69bb      	ldr	r3, [r7, #24]
 8006f20:	015a      	lsls	r2, r3, #5
 8006f22:	69fb      	ldr	r3, [r7, #28]
 8006f24:	4413      	add	r3, r2
 8006f26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f2a:	691b      	ldr	r3, [r3, #16]
 8006f2c:	69ba      	ldr	r2, [r7, #24]
 8006f2e:	0151      	lsls	r1, r2, #5
 8006f30:	69fa      	ldr	r2, [r7, #28]
 8006f32:	440a      	add	r2, r1
 8006f34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f38:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006f3c:	6113      	str	r3, [r2, #16]
 8006f3e:	e037      	b.n	8006fb0 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	699a      	ldr	r2, [r3, #24]
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	68db      	ldr	r3, [r3, #12]
 8006f48:	4413      	add	r3, r2
 8006f4a:	1e5a      	subs	r2, r3, #1
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	68db      	ldr	r3, [r3, #12]
 8006f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f54:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	68db      	ldr	r3, [r3, #12]
 8006f5a:	8afa      	ldrh	r2, [r7, #22]
 8006f5c:	fb03 f202 	mul.w	r2, r3, r2
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006f64:	69bb      	ldr	r3, [r7, #24]
 8006f66:	015a      	lsls	r2, r3, #5
 8006f68:	69fb      	ldr	r3, [r7, #28]
 8006f6a:	4413      	add	r3, r2
 8006f6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f70:	691a      	ldr	r2, [r3, #16]
 8006f72:	8afb      	ldrh	r3, [r7, #22]
 8006f74:	04d9      	lsls	r1, r3, #19
 8006f76:	4b3a      	ldr	r3, [pc, #232]	; (8007060 <USB_EPStartXfer+0x49c>)
 8006f78:	400b      	ands	r3, r1
 8006f7a:	69b9      	ldr	r1, [r7, #24]
 8006f7c:	0148      	lsls	r0, r1, #5
 8006f7e:	69f9      	ldr	r1, [r7, #28]
 8006f80:	4401      	add	r1, r0
 8006f82:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006f86:	4313      	orrs	r3, r2
 8006f88:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006f8a:	69bb      	ldr	r3, [r7, #24]
 8006f8c:	015a      	lsls	r2, r3, #5
 8006f8e:	69fb      	ldr	r3, [r7, #28]
 8006f90:	4413      	add	r3, r2
 8006f92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f96:	691a      	ldr	r2, [r3, #16]
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	69db      	ldr	r3, [r3, #28]
 8006f9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006fa0:	69b9      	ldr	r1, [r7, #24]
 8006fa2:	0148      	lsls	r0, r1, #5
 8006fa4:	69f9      	ldr	r1, [r7, #28]
 8006fa6:	4401      	add	r1, r0
 8006fa8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006fac:	4313      	orrs	r3, r2
 8006fae:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006fb0:	79fb      	ldrb	r3, [r7, #7]
 8006fb2:	2b01      	cmp	r3, #1
 8006fb4:	d10d      	bne.n	8006fd2 <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	691b      	ldr	r3, [r3, #16]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d009      	beq.n	8006fd2 <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	6919      	ldr	r1, [r3, #16]
 8006fc2:	69bb      	ldr	r3, [r7, #24]
 8006fc4:	015a      	lsls	r2, r3, #5
 8006fc6:	69fb      	ldr	r3, [r7, #28]
 8006fc8:	4413      	add	r3, r2
 8006fca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fce:	460a      	mov	r2, r1
 8006fd0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	791b      	ldrb	r3, [r3, #4]
 8006fd6:	2b01      	cmp	r3, #1
 8006fd8:	d128      	bne.n	800702c <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006fda:	69fb      	ldr	r3, [r7, #28]
 8006fdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fe0:	689b      	ldr	r3, [r3, #8]
 8006fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d110      	bne.n	800700c <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006fea:	69bb      	ldr	r3, [r7, #24]
 8006fec:	015a      	lsls	r2, r3, #5
 8006fee:	69fb      	ldr	r3, [r7, #28]
 8006ff0:	4413      	add	r3, r2
 8006ff2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	69ba      	ldr	r2, [r7, #24]
 8006ffa:	0151      	lsls	r1, r2, #5
 8006ffc:	69fa      	ldr	r2, [r7, #28]
 8006ffe:	440a      	add	r2, r1
 8007000:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007004:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007008:	6013      	str	r3, [r2, #0]
 800700a:	e00f      	b.n	800702c <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800700c:	69bb      	ldr	r3, [r7, #24]
 800700e:	015a      	lsls	r2, r3, #5
 8007010:	69fb      	ldr	r3, [r7, #28]
 8007012:	4413      	add	r3, r2
 8007014:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	69ba      	ldr	r2, [r7, #24]
 800701c:	0151      	lsls	r1, r2, #5
 800701e:	69fa      	ldr	r2, [r7, #28]
 8007020:	440a      	add	r2, r1
 8007022:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007026:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800702a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800702c:	69bb      	ldr	r3, [r7, #24]
 800702e:	015a      	lsls	r2, r3, #5
 8007030:	69fb      	ldr	r3, [r7, #28]
 8007032:	4413      	add	r3, r2
 8007034:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	69ba      	ldr	r2, [r7, #24]
 800703c:	0151      	lsls	r1, r2, #5
 800703e:	69fa      	ldr	r2, [r7, #28]
 8007040:	440a      	add	r2, r1
 8007042:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007046:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800704a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800704c:	2300      	movs	r3, #0
}
 800704e:	4618      	mov	r0, r3
 8007050:	3720      	adds	r7, #32
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}
 8007056:	bf00      	nop
 8007058:	fff80000 	.word	0xfff80000
 800705c:	e007ffff 	.word	0xe007ffff
 8007060:	1ff80000 	.word	0x1ff80000

08007064 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007064:	b480      	push	{r7}
 8007066:	b087      	sub	sp, #28
 8007068:	af00      	add	r7, sp, #0
 800706a:	60f8      	str	r0, [r7, #12]
 800706c:	60b9      	str	r1, [r7, #8]
 800706e:	4613      	mov	r3, r2
 8007070:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	781b      	ldrb	r3, [r3, #0]
 800707a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	785b      	ldrb	r3, [r3, #1]
 8007080:	2b01      	cmp	r3, #1
 8007082:	f040 80ce 	bne.w	8007222 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	699b      	ldr	r3, [r3, #24]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d132      	bne.n	80070f4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	015a      	lsls	r2, r3, #5
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	4413      	add	r3, r2
 8007096:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800709a:	691a      	ldr	r2, [r3, #16]
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	0159      	lsls	r1, r3, #5
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	440b      	add	r3, r1
 80070a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070a8:	4619      	mov	r1, r3
 80070aa:	4b9a      	ldr	r3, [pc, #616]	; (8007314 <USB_EP0StartXfer+0x2b0>)
 80070ac:	4013      	ands	r3, r2
 80070ae:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	015a      	lsls	r2, r3, #5
 80070b4:	697b      	ldr	r3, [r7, #20]
 80070b6:	4413      	add	r3, r2
 80070b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070bc:	691b      	ldr	r3, [r3, #16]
 80070be:	693a      	ldr	r2, [r7, #16]
 80070c0:	0151      	lsls	r1, r2, #5
 80070c2:	697a      	ldr	r2, [r7, #20]
 80070c4:	440a      	add	r2, r1
 80070c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80070ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	015a      	lsls	r2, r3, #5
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	4413      	add	r3, r2
 80070d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070dc:	691a      	ldr	r2, [r3, #16]
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	0159      	lsls	r1, r3, #5
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	440b      	add	r3, r1
 80070e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070ea:	4619      	mov	r1, r3
 80070ec:	4b8a      	ldr	r3, [pc, #552]	; (8007318 <USB_EP0StartXfer+0x2b4>)
 80070ee:	4013      	ands	r3, r2
 80070f0:	610b      	str	r3, [r1, #16]
 80070f2:	e04e      	b.n	8007192 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	015a      	lsls	r2, r3, #5
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	4413      	add	r3, r2
 80070fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007100:	691a      	ldr	r2, [r3, #16]
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	0159      	lsls	r1, r3, #5
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	440b      	add	r3, r1
 800710a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800710e:	4619      	mov	r1, r3
 8007110:	4b81      	ldr	r3, [pc, #516]	; (8007318 <USB_EP0StartXfer+0x2b4>)
 8007112:	4013      	ands	r3, r2
 8007114:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	015a      	lsls	r2, r3, #5
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	4413      	add	r3, r2
 800711e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007122:	691a      	ldr	r2, [r3, #16]
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	0159      	lsls	r1, r3, #5
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	440b      	add	r3, r1
 800712c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007130:	4619      	mov	r1, r3
 8007132:	4b78      	ldr	r3, [pc, #480]	; (8007314 <USB_EP0StartXfer+0x2b0>)
 8007134:	4013      	ands	r3, r2
 8007136:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	699a      	ldr	r2, [r3, #24]
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	68db      	ldr	r3, [r3, #12]
 8007140:	429a      	cmp	r2, r3
 8007142:	d903      	bls.n	800714c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	68da      	ldr	r2, [r3, #12]
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	015a      	lsls	r2, r3, #5
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	4413      	add	r3, r2
 8007154:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007158:	691b      	ldr	r3, [r3, #16]
 800715a:	693a      	ldr	r2, [r7, #16]
 800715c:	0151      	lsls	r1, r2, #5
 800715e:	697a      	ldr	r2, [r7, #20]
 8007160:	440a      	add	r2, r1
 8007162:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007166:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800716a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	015a      	lsls	r2, r3, #5
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	4413      	add	r3, r2
 8007174:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007178:	691a      	ldr	r2, [r3, #16]
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	699b      	ldr	r3, [r3, #24]
 800717e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007182:	6939      	ldr	r1, [r7, #16]
 8007184:	0148      	lsls	r0, r1, #5
 8007186:	6979      	ldr	r1, [r7, #20]
 8007188:	4401      	add	r1, r0
 800718a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800718e:	4313      	orrs	r3, r2
 8007190:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007192:	79fb      	ldrb	r3, [r7, #7]
 8007194:	2b01      	cmp	r3, #1
 8007196:	d11e      	bne.n	80071d6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	695b      	ldr	r3, [r3, #20]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d009      	beq.n	80071b4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	015a      	lsls	r2, r3, #5
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	4413      	add	r3, r2
 80071a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071ac:	461a      	mov	r2, r3
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	695b      	ldr	r3, [r3, #20]
 80071b2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	015a      	lsls	r2, r3, #5
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	4413      	add	r3, r2
 80071bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	693a      	ldr	r2, [r7, #16]
 80071c4:	0151      	lsls	r1, r2, #5
 80071c6:	697a      	ldr	r2, [r7, #20]
 80071c8:	440a      	add	r2, r1
 80071ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071ce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80071d2:	6013      	str	r3, [r2, #0]
 80071d4:	e097      	b.n	8007306 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	015a      	lsls	r2, r3, #5
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	4413      	add	r3, r2
 80071de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	693a      	ldr	r2, [r7, #16]
 80071e6:	0151      	lsls	r1, r2, #5
 80071e8:	697a      	ldr	r2, [r7, #20]
 80071ea:	440a      	add	r2, r1
 80071ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071f0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80071f4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	699b      	ldr	r3, [r3, #24]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	f000 8083 	beq.w	8007306 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007206:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	781b      	ldrb	r3, [r3, #0]
 800720c:	f003 030f 	and.w	r3, r3, #15
 8007210:	2101      	movs	r1, #1
 8007212:	fa01 f303 	lsl.w	r3, r1, r3
 8007216:	6979      	ldr	r1, [r7, #20]
 8007218:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800721c:	4313      	orrs	r3, r2
 800721e:	634b      	str	r3, [r1, #52]	; 0x34
 8007220:	e071      	b.n	8007306 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	015a      	lsls	r2, r3, #5
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	4413      	add	r3, r2
 800722a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800722e:	691a      	ldr	r2, [r3, #16]
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	0159      	lsls	r1, r3, #5
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	440b      	add	r3, r1
 8007238:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800723c:	4619      	mov	r1, r3
 800723e:	4b36      	ldr	r3, [pc, #216]	; (8007318 <USB_EP0StartXfer+0x2b4>)
 8007240:	4013      	ands	r3, r2
 8007242:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007244:	693b      	ldr	r3, [r7, #16]
 8007246:	015a      	lsls	r2, r3, #5
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	4413      	add	r3, r2
 800724c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007250:	691a      	ldr	r2, [r3, #16]
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	0159      	lsls	r1, r3, #5
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	440b      	add	r3, r1
 800725a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800725e:	4619      	mov	r1, r3
 8007260:	4b2c      	ldr	r3, [pc, #176]	; (8007314 <USB_EP0StartXfer+0x2b0>)
 8007262:	4013      	ands	r3, r2
 8007264:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	699b      	ldr	r3, [r3, #24]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d003      	beq.n	8007276 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	68da      	ldr	r2, [r3, #12]
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	68da      	ldr	r2, [r3, #12]
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	015a      	lsls	r2, r3, #5
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	4413      	add	r3, r2
 8007286:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800728a:	691b      	ldr	r3, [r3, #16]
 800728c:	693a      	ldr	r2, [r7, #16]
 800728e:	0151      	lsls	r1, r2, #5
 8007290:	697a      	ldr	r2, [r7, #20]
 8007292:	440a      	add	r2, r1
 8007294:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007298:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800729c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	015a      	lsls	r2, r3, #5
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	4413      	add	r3, r2
 80072a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072aa:	691a      	ldr	r2, [r3, #16]
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	69db      	ldr	r3, [r3, #28]
 80072b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072b4:	6939      	ldr	r1, [r7, #16]
 80072b6:	0148      	lsls	r0, r1, #5
 80072b8:	6979      	ldr	r1, [r7, #20]
 80072ba:	4401      	add	r1, r0
 80072bc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80072c0:	4313      	orrs	r3, r2
 80072c2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80072c4:	79fb      	ldrb	r3, [r7, #7]
 80072c6:	2b01      	cmp	r3, #1
 80072c8:	d10d      	bne.n	80072e6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	691b      	ldr	r3, [r3, #16]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d009      	beq.n	80072e6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	6919      	ldr	r1, [r3, #16]
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	015a      	lsls	r2, r3, #5
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	4413      	add	r3, r2
 80072de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072e2:	460a      	mov	r2, r1
 80072e4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	015a      	lsls	r2, r3, #5
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	4413      	add	r3, r2
 80072ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	693a      	ldr	r2, [r7, #16]
 80072f6:	0151      	lsls	r1, r2, #5
 80072f8:	697a      	ldr	r2, [r7, #20]
 80072fa:	440a      	add	r2, r1
 80072fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007300:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007304:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007306:	2300      	movs	r3, #0
}
 8007308:	4618      	mov	r0, r3
 800730a:	371c      	adds	r7, #28
 800730c:	46bd      	mov	sp, r7
 800730e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007312:	4770      	bx	lr
 8007314:	e007ffff 	.word	0xe007ffff
 8007318:	fff80000 	.word	0xfff80000

0800731c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800731c:	b480      	push	{r7}
 800731e:	b087      	sub	sp, #28
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
 8007324:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007326:	2300      	movs	r3, #0
 8007328:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800732a:	2300      	movs	r3, #0
 800732c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	785b      	ldrb	r3, [r3, #1]
 8007336:	2b01      	cmp	r3, #1
 8007338:	d14a      	bne.n	80073d0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	781b      	ldrb	r3, [r3, #0]
 800733e:	015a      	lsls	r2, r3, #5
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	4413      	add	r3, r2
 8007344:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800734e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007352:	f040 8086 	bne.w	8007462 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	781b      	ldrb	r3, [r3, #0]
 800735a:	015a      	lsls	r2, r3, #5
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	4413      	add	r3, r2
 8007360:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	683a      	ldr	r2, [r7, #0]
 8007368:	7812      	ldrb	r2, [r2, #0]
 800736a:	0151      	lsls	r1, r2, #5
 800736c:	693a      	ldr	r2, [r7, #16]
 800736e:	440a      	add	r2, r1
 8007370:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007374:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007378:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	781b      	ldrb	r3, [r3, #0]
 800737e:	015a      	lsls	r2, r3, #5
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	4413      	add	r3, r2
 8007384:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	683a      	ldr	r2, [r7, #0]
 800738c:	7812      	ldrb	r2, [r2, #0]
 800738e:	0151      	lsls	r1, r2, #5
 8007390:	693a      	ldr	r2, [r7, #16]
 8007392:	440a      	add	r2, r1
 8007394:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007398:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800739c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	3301      	adds	r3, #1
 80073a2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f242 7210 	movw	r2, #10000	; 0x2710
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d902      	bls.n	80073b4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80073ae:	2301      	movs	r3, #1
 80073b0:	75fb      	strb	r3, [r7, #23]
          break;
 80073b2:	e056      	b.n	8007462 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	781b      	ldrb	r3, [r3, #0]
 80073b8:	015a      	lsls	r2, r3, #5
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	4413      	add	r3, r2
 80073be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80073c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80073cc:	d0e7      	beq.n	800739e <USB_EPStopXfer+0x82>
 80073ce:	e048      	b.n	8007462 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	781b      	ldrb	r3, [r3, #0]
 80073d4:	015a      	lsls	r2, r3, #5
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	4413      	add	r3, r2
 80073da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80073e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80073e8:	d13b      	bne.n	8007462 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	781b      	ldrb	r3, [r3, #0]
 80073ee:	015a      	lsls	r2, r3, #5
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	4413      	add	r3, r2
 80073f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	683a      	ldr	r2, [r7, #0]
 80073fc:	7812      	ldrb	r2, [r2, #0]
 80073fe:	0151      	lsls	r1, r2, #5
 8007400:	693a      	ldr	r2, [r7, #16]
 8007402:	440a      	add	r2, r1
 8007404:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007408:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800740c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	781b      	ldrb	r3, [r3, #0]
 8007412:	015a      	lsls	r2, r3, #5
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	4413      	add	r3, r2
 8007418:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	683a      	ldr	r2, [r7, #0]
 8007420:	7812      	ldrb	r2, [r2, #0]
 8007422:	0151      	lsls	r1, r2, #5
 8007424:	693a      	ldr	r2, [r7, #16]
 8007426:	440a      	add	r2, r1
 8007428:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800742c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007430:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	3301      	adds	r3, #1
 8007436:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	f242 7210 	movw	r2, #10000	; 0x2710
 800743e:	4293      	cmp	r3, r2
 8007440:	d902      	bls.n	8007448 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007442:	2301      	movs	r3, #1
 8007444:	75fb      	strb	r3, [r7, #23]
          break;
 8007446:	e00c      	b.n	8007462 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	781b      	ldrb	r3, [r3, #0]
 800744c:	015a      	lsls	r2, r3, #5
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	4413      	add	r3, r2
 8007452:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800745c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007460:	d0e7      	beq.n	8007432 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007462:	7dfb      	ldrb	r3, [r7, #23]
}
 8007464:	4618      	mov	r0, r3
 8007466:	371c      	adds	r7, #28
 8007468:	46bd      	mov	sp, r7
 800746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746e:	4770      	bx	lr

08007470 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007470:	b480      	push	{r7}
 8007472:	b089      	sub	sp, #36	; 0x24
 8007474:	af00      	add	r7, sp, #0
 8007476:	60f8      	str	r0, [r7, #12]
 8007478:	60b9      	str	r1, [r7, #8]
 800747a:	4611      	mov	r1, r2
 800747c:	461a      	mov	r2, r3
 800747e:	460b      	mov	r3, r1
 8007480:	71fb      	strb	r3, [r7, #7]
 8007482:	4613      	mov	r3, r2
 8007484:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800748e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007492:	2b00      	cmp	r3, #0
 8007494:	d123      	bne.n	80074de <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007496:	88bb      	ldrh	r3, [r7, #4]
 8007498:	3303      	adds	r3, #3
 800749a:	089b      	lsrs	r3, r3, #2
 800749c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800749e:	2300      	movs	r3, #0
 80074a0:	61bb      	str	r3, [r7, #24]
 80074a2:	e018      	b.n	80074d6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80074a4:	79fb      	ldrb	r3, [r7, #7]
 80074a6:	031a      	lsls	r2, r3, #12
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	4413      	add	r3, r2
 80074ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074b0:	461a      	mov	r2, r3
 80074b2:	69fb      	ldr	r3, [r7, #28]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80074b8:	69fb      	ldr	r3, [r7, #28]
 80074ba:	3301      	adds	r3, #1
 80074bc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80074be:	69fb      	ldr	r3, [r7, #28]
 80074c0:	3301      	adds	r3, #1
 80074c2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80074c4:	69fb      	ldr	r3, [r7, #28]
 80074c6:	3301      	adds	r3, #1
 80074c8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80074ca:	69fb      	ldr	r3, [r7, #28]
 80074cc:	3301      	adds	r3, #1
 80074ce:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80074d0:	69bb      	ldr	r3, [r7, #24]
 80074d2:	3301      	adds	r3, #1
 80074d4:	61bb      	str	r3, [r7, #24]
 80074d6:	69ba      	ldr	r2, [r7, #24]
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	429a      	cmp	r2, r3
 80074dc:	d3e2      	bcc.n	80074a4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80074de:	2300      	movs	r3, #0
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3724      	adds	r7, #36	; 0x24
 80074e4:	46bd      	mov	sp, r7
 80074e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ea:	4770      	bx	lr

080074ec <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80074ec:	b480      	push	{r7}
 80074ee:	b08b      	sub	sp, #44	; 0x2c
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	60f8      	str	r0, [r7, #12]
 80074f4:	60b9      	str	r1, [r7, #8]
 80074f6:	4613      	mov	r3, r2
 80074f8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007502:	88fb      	ldrh	r3, [r7, #6]
 8007504:	089b      	lsrs	r3, r3, #2
 8007506:	b29b      	uxth	r3, r3
 8007508:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800750a:	88fb      	ldrh	r3, [r7, #6]
 800750c:	f003 0303 	and.w	r3, r3, #3
 8007510:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007512:	2300      	movs	r3, #0
 8007514:	623b      	str	r3, [r7, #32]
 8007516:	e014      	b.n	8007542 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007518:	69bb      	ldr	r3, [r7, #24]
 800751a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800751e:	681a      	ldr	r2, [r3, #0]
 8007520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007522:	601a      	str	r2, [r3, #0]
    pDest++;
 8007524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007526:	3301      	adds	r3, #1
 8007528:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800752a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800752c:	3301      	adds	r3, #1
 800752e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007532:	3301      	adds	r3, #1
 8007534:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007538:	3301      	adds	r3, #1
 800753a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800753c:	6a3b      	ldr	r3, [r7, #32]
 800753e:	3301      	adds	r3, #1
 8007540:	623b      	str	r3, [r7, #32]
 8007542:	6a3a      	ldr	r2, [r7, #32]
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	429a      	cmp	r2, r3
 8007548:	d3e6      	bcc.n	8007518 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800754a:	8bfb      	ldrh	r3, [r7, #30]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d01e      	beq.n	800758e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007550:	2300      	movs	r3, #0
 8007552:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007554:	69bb      	ldr	r3, [r7, #24]
 8007556:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800755a:	461a      	mov	r2, r3
 800755c:	f107 0310 	add.w	r3, r7, #16
 8007560:	6812      	ldr	r2, [r2, #0]
 8007562:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007564:	693a      	ldr	r2, [r7, #16]
 8007566:	6a3b      	ldr	r3, [r7, #32]
 8007568:	b2db      	uxtb	r3, r3
 800756a:	00db      	lsls	r3, r3, #3
 800756c:	fa22 f303 	lsr.w	r3, r2, r3
 8007570:	b2da      	uxtb	r2, r3
 8007572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007574:	701a      	strb	r2, [r3, #0]
      i++;
 8007576:	6a3b      	ldr	r3, [r7, #32]
 8007578:	3301      	adds	r3, #1
 800757a:	623b      	str	r3, [r7, #32]
      pDest++;
 800757c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800757e:	3301      	adds	r3, #1
 8007580:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007582:	8bfb      	ldrh	r3, [r7, #30]
 8007584:	3b01      	subs	r3, #1
 8007586:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007588:	8bfb      	ldrh	r3, [r7, #30]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d1ea      	bne.n	8007564 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800758e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007590:	4618      	mov	r0, r3
 8007592:	372c      	adds	r7, #44	; 0x2c
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr

0800759c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800759c:	b480      	push	{r7}
 800759e:	b085      	sub	sp, #20
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
 80075a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	781b      	ldrb	r3, [r3, #0]
 80075ae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	785b      	ldrb	r3, [r3, #1]
 80075b4:	2b01      	cmp	r3, #1
 80075b6:	d12c      	bne.n	8007612 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	015a      	lsls	r2, r3, #5
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	4413      	add	r3, r2
 80075c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	db12      	blt.n	80075f0 <USB_EPSetStall+0x54>
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d00f      	beq.n	80075f0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	015a      	lsls	r2, r3, #5
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	4413      	add	r3, r2
 80075d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	68ba      	ldr	r2, [r7, #8]
 80075e0:	0151      	lsls	r1, r2, #5
 80075e2:	68fa      	ldr	r2, [r7, #12]
 80075e4:	440a      	add	r2, r1
 80075e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075ea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80075ee:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	015a      	lsls	r2, r3, #5
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	4413      	add	r3, r2
 80075f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	68ba      	ldr	r2, [r7, #8]
 8007600:	0151      	lsls	r1, r2, #5
 8007602:	68fa      	ldr	r2, [r7, #12]
 8007604:	440a      	add	r2, r1
 8007606:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800760a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800760e:	6013      	str	r3, [r2, #0]
 8007610:	e02b      	b.n	800766a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	015a      	lsls	r2, r3, #5
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	4413      	add	r3, r2
 800761a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	2b00      	cmp	r3, #0
 8007622:	db12      	blt.n	800764a <USB_EPSetStall+0xae>
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d00f      	beq.n	800764a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	015a      	lsls	r2, r3, #5
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	4413      	add	r3, r2
 8007632:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	68ba      	ldr	r2, [r7, #8]
 800763a:	0151      	lsls	r1, r2, #5
 800763c:	68fa      	ldr	r2, [r7, #12]
 800763e:	440a      	add	r2, r1
 8007640:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007644:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007648:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	015a      	lsls	r2, r3, #5
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	4413      	add	r3, r2
 8007652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	68ba      	ldr	r2, [r7, #8]
 800765a:	0151      	lsls	r1, r2, #5
 800765c:	68fa      	ldr	r2, [r7, #12]
 800765e:	440a      	add	r2, r1
 8007660:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007664:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007668:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800766a:	2300      	movs	r3, #0
}
 800766c:	4618      	mov	r0, r3
 800766e:	3714      	adds	r7, #20
 8007670:	46bd      	mov	sp, r7
 8007672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007676:	4770      	bx	lr

08007678 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007678:	b480      	push	{r7}
 800767a:	b085      	sub	sp, #20
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
 8007680:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	781b      	ldrb	r3, [r3, #0]
 800768a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	785b      	ldrb	r3, [r3, #1]
 8007690:	2b01      	cmp	r3, #1
 8007692:	d128      	bne.n	80076e6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	015a      	lsls	r2, r3, #5
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	4413      	add	r3, r2
 800769c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	68ba      	ldr	r2, [r7, #8]
 80076a4:	0151      	lsls	r1, r2, #5
 80076a6:	68fa      	ldr	r2, [r7, #12]
 80076a8:	440a      	add	r2, r1
 80076aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80076b2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	791b      	ldrb	r3, [r3, #4]
 80076b8:	2b03      	cmp	r3, #3
 80076ba:	d003      	beq.n	80076c4 <USB_EPClearStall+0x4c>
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	791b      	ldrb	r3, [r3, #4]
 80076c0:	2b02      	cmp	r3, #2
 80076c2:	d138      	bne.n	8007736 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	015a      	lsls	r2, r3, #5
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	4413      	add	r3, r2
 80076cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	68ba      	ldr	r2, [r7, #8]
 80076d4:	0151      	lsls	r1, r2, #5
 80076d6:	68fa      	ldr	r2, [r7, #12]
 80076d8:	440a      	add	r2, r1
 80076da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076e2:	6013      	str	r3, [r2, #0]
 80076e4:	e027      	b.n	8007736 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	015a      	lsls	r2, r3, #5
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	4413      	add	r3, r2
 80076ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	68ba      	ldr	r2, [r7, #8]
 80076f6:	0151      	lsls	r1, r2, #5
 80076f8:	68fa      	ldr	r2, [r7, #12]
 80076fa:	440a      	add	r2, r1
 80076fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007700:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007704:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	791b      	ldrb	r3, [r3, #4]
 800770a:	2b03      	cmp	r3, #3
 800770c:	d003      	beq.n	8007716 <USB_EPClearStall+0x9e>
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	791b      	ldrb	r3, [r3, #4]
 8007712:	2b02      	cmp	r3, #2
 8007714:	d10f      	bne.n	8007736 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	015a      	lsls	r2, r3, #5
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	4413      	add	r3, r2
 800771e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	68ba      	ldr	r2, [r7, #8]
 8007726:	0151      	lsls	r1, r2, #5
 8007728:	68fa      	ldr	r2, [r7, #12]
 800772a:	440a      	add	r2, r1
 800772c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007730:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007734:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007736:	2300      	movs	r3, #0
}
 8007738:	4618      	mov	r0, r3
 800773a:	3714      	adds	r7, #20
 800773c:	46bd      	mov	sp, r7
 800773e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007742:	4770      	bx	lr

08007744 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007744:	b480      	push	{r7}
 8007746:	b085      	sub	sp, #20
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
 800774c:	460b      	mov	r3, r1
 800774e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	68fa      	ldr	r2, [r7, #12]
 800775e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007762:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007766:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800776e:	681a      	ldr	r2, [r3, #0]
 8007770:	78fb      	ldrb	r3, [r7, #3]
 8007772:	011b      	lsls	r3, r3, #4
 8007774:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007778:	68f9      	ldr	r1, [r7, #12]
 800777a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800777e:	4313      	orrs	r3, r2
 8007780:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007782:	2300      	movs	r3, #0
}
 8007784:	4618      	mov	r0, r3
 8007786:	3714      	adds	r7, #20
 8007788:	46bd      	mov	sp, r7
 800778a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778e:	4770      	bx	lr

08007790 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007790:	b480      	push	{r7}
 8007792:	b085      	sub	sp, #20
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	68fa      	ldr	r2, [r7, #12]
 80077a6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80077aa:	f023 0303 	bic.w	r3, r3, #3
 80077ae:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	68fa      	ldr	r2, [r7, #12]
 80077ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80077be:	f023 0302 	bic.w	r3, r3, #2
 80077c2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80077c4:	2300      	movs	r3, #0
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3714      	adds	r7, #20
 80077ca:	46bd      	mov	sp, r7
 80077cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d0:	4770      	bx	lr

080077d2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80077d2:	b480      	push	{r7}
 80077d4:	b085      	sub	sp, #20
 80077d6:	af00      	add	r7, sp, #0
 80077d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	68fa      	ldr	r2, [r7, #12]
 80077e8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80077ec:	f023 0303 	bic.w	r3, r3, #3
 80077f0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077f8:	685b      	ldr	r3, [r3, #4]
 80077fa:	68fa      	ldr	r2, [r7, #12]
 80077fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007800:	f043 0302 	orr.w	r3, r3, #2
 8007804:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007806:	2300      	movs	r3, #0
}
 8007808:	4618      	mov	r0, r3
 800780a:	3714      	adds	r7, #20
 800780c:	46bd      	mov	sp, r7
 800780e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007812:	4770      	bx	lr

08007814 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007814:	b480      	push	{r7}
 8007816:	b085      	sub	sp, #20
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	695b      	ldr	r3, [r3, #20]
 8007820:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	699b      	ldr	r3, [r3, #24]
 8007826:	68fa      	ldr	r2, [r7, #12]
 8007828:	4013      	ands	r3, r2
 800782a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800782c:	68fb      	ldr	r3, [r7, #12]
}
 800782e:	4618      	mov	r0, r3
 8007830:	3714      	adds	r7, #20
 8007832:	46bd      	mov	sp, r7
 8007834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007838:	4770      	bx	lr

0800783a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800783a:	b480      	push	{r7}
 800783c:	b085      	sub	sp, #20
 800783e:	af00      	add	r7, sp, #0
 8007840:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800784c:	699b      	ldr	r3, [r3, #24]
 800784e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007856:	69db      	ldr	r3, [r3, #28]
 8007858:	68ba      	ldr	r2, [r7, #8]
 800785a:	4013      	ands	r3, r2
 800785c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	0c1b      	lsrs	r3, r3, #16
}
 8007862:	4618      	mov	r0, r3
 8007864:	3714      	adds	r7, #20
 8007866:	46bd      	mov	sp, r7
 8007868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786c:	4770      	bx	lr

0800786e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800786e:	b480      	push	{r7}
 8007870:	b085      	sub	sp, #20
 8007872:	af00      	add	r7, sp, #0
 8007874:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007880:	699b      	ldr	r3, [r3, #24]
 8007882:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800788a:	69db      	ldr	r3, [r3, #28]
 800788c:	68ba      	ldr	r2, [r7, #8]
 800788e:	4013      	ands	r3, r2
 8007890:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	b29b      	uxth	r3, r3
}
 8007896:	4618      	mov	r0, r3
 8007898:	3714      	adds	r7, #20
 800789a:	46bd      	mov	sp, r7
 800789c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a0:	4770      	bx	lr

080078a2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80078a2:	b480      	push	{r7}
 80078a4:	b085      	sub	sp, #20
 80078a6:	af00      	add	r7, sp, #0
 80078a8:	6078      	str	r0, [r7, #4]
 80078aa:	460b      	mov	r3, r1
 80078ac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80078b2:	78fb      	ldrb	r3, [r7, #3]
 80078b4:	015a      	lsls	r2, r3, #5
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	4413      	add	r3, r2
 80078ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078be:	689b      	ldr	r3, [r3, #8]
 80078c0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078c8:	695b      	ldr	r3, [r3, #20]
 80078ca:	68ba      	ldr	r2, [r7, #8]
 80078cc:	4013      	ands	r3, r2
 80078ce:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80078d0:	68bb      	ldr	r3, [r7, #8]
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3714      	adds	r7, #20
 80078d6:	46bd      	mov	sp, r7
 80078d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078dc:	4770      	bx	lr

080078de <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80078de:	b480      	push	{r7}
 80078e0:	b087      	sub	sp, #28
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	6078      	str	r0, [r7, #4]
 80078e6:	460b      	mov	r3, r1
 80078e8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078f4:	691b      	ldr	r3, [r3, #16]
 80078f6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007900:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007902:	78fb      	ldrb	r3, [r7, #3]
 8007904:	f003 030f 	and.w	r3, r3, #15
 8007908:	68fa      	ldr	r2, [r7, #12]
 800790a:	fa22 f303 	lsr.w	r3, r2, r3
 800790e:	01db      	lsls	r3, r3, #7
 8007910:	b2db      	uxtb	r3, r3
 8007912:	693a      	ldr	r2, [r7, #16]
 8007914:	4313      	orrs	r3, r2
 8007916:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007918:	78fb      	ldrb	r3, [r7, #3]
 800791a:	015a      	lsls	r2, r3, #5
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	4413      	add	r3, r2
 8007920:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007924:	689b      	ldr	r3, [r3, #8]
 8007926:	693a      	ldr	r2, [r7, #16]
 8007928:	4013      	ands	r3, r2
 800792a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800792c:	68bb      	ldr	r3, [r7, #8]
}
 800792e:	4618      	mov	r0, r3
 8007930:	371c      	adds	r7, #28
 8007932:	46bd      	mov	sp, r7
 8007934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007938:	4770      	bx	lr

0800793a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800793a:	b480      	push	{r7}
 800793c:	b083      	sub	sp, #12
 800793e:	af00      	add	r7, sp, #0
 8007940:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	695b      	ldr	r3, [r3, #20]
 8007946:	f003 0301 	and.w	r3, r3, #1
}
 800794a:	4618      	mov	r0, r3
 800794c:	370c      	adds	r7, #12
 800794e:	46bd      	mov	sp, r7
 8007950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007954:	4770      	bx	lr
	...

08007958 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007958:	b480      	push	{r7}
 800795a:	b085      	sub	sp, #20
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800796a:	681a      	ldr	r2, [r3, #0]
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007972:	4619      	mov	r1, r3
 8007974:	4b09      	ldr	r3, [pc, #36]	; (800799c <USB_ActivateSetup+0x44>)
 8007976:	4013      	ands	r3, r2
 8007978:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007980:	685b      	ldr	r3, [r3, #4]
 8007982:	68fa      	ldr	r2, [r7, #12]
 8007984:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007988:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800798c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800798e:	2300      	movs	r3, #0
}
 8007990:	4618      	mov	r0, r3
 8007992:	3714      	adds	r7, #20
 8007994:	46bd      	mov	sp, r7
 8007996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799a:	4770      	bx	lr
 800799c:	fffff800 	.word	0xfffff800

080079a0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80079a0:	b480      	push	{r7}
 80079a2:	b087      	sub	sp, #28
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	60f8      	str	r0, [r7, #12]
 80079a8:	460b      	mov	r3, r1
 80079aa:	607a      	str	r2, [r7, #4]
 80079ac:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	333c      	adds	r3, #60	; 0x3c
 80079b6:	3304      	adds	r3, #4
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	4a26      	ldr	r2, [pc, #152]	; (8007a58 <USB_EP0_OutStart+0xb8>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d90a      	bls.n	80079da <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80079d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80079d4:	d101      	bne.n	80079da <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80079d6:	2300      	movs	r3, #0
 80079d8:	e037      	b.n	8007a4a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079e0:	461a      	mov	r2, r3
 80079e2:	2300      	movs	r3, #0
 80079e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079ec:	691b      	ldr	r3, [r3, #16]
 80079ee:	697a      	ldr	r2, [r7, #20]
 80079f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80079f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a00:	691b      	ldr	r3, [r3, #16]
 8007a02:	697a      	ldr	r2, [r7, #20]
 8007a04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a08:	f043 0318 	orr.w	r3, r3, #24
 8007a0c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a14:	691b      	ldr	r3, [r3, #16]
 8007a16:	697a      	ldr	r2, [r7, #20]
 8007a18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a1c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007a20:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007a22:	7afb      	ldrb	r3, [r7, #11]
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	d10f      	bne.n	8007a48 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a2e:	461a      	mov	r2, r3
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	697a      	ldr	r2, [r7, #20]
 8007a3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a42:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007a46:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007a48:	2300      	movs	r3, #0
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	371c      	adds	r7, #28
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a54:	4770      	bx	lr
 8007a56:	bf00      	nop
 8007a58:	4f54300a 	.word	0x4f54300a

08007a5c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b085      	sub	sp, #20
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007a64:	2300      	movs	r3, #0
 8007a66:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	3301      	adds	r3, #1
 8007a6c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	4a13      	ldr	r2, [pc, #76]	; (8007ac0 <USB_CoreReset+0x64>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d901      	bls.n	8007a7a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007a76:	2303      	movs	r3, #3
 8007a78:	e01b      	b.n	8007ab2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	691b      	ldr	r3, [r3, #16]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	daf2      	bge.n	8007a68 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007a82:	2300      	movs	r3, #0
 8007a84:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	691b      	ldr	r3, [r3, #16]
 8007a8a:	f043 0201 	orr.w	r2, r3, #1
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	3301      	adds	r3, #1
 8007a96:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	4a09      	ldr	r2, [pc, #36]	; (8007ac0 <USB_CoreReset+0x64>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d901      	bls.n	8007aa4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007aa0:	2303      	movs	r3, #3
 8007aa2:	e006      	b.n	8007ab2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	691b      	ldr	r3, [r3, #16]
 8007aa8:	f003 0301 	and.w	r3, r3, #1
 8007aac:	2b01      	cmp	r3, #1
 8007aae:	d0f0      	beq.n	8007a92 <USB_CoreReset+0x36>

  return HAL_OK;
 8007ab0:	2300      	movs	r3, #0
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3714      	adds	r7, #20
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abc:	4770      	bx	lr
 8007abe:	bf00      	nop
 8007ac0:	00030d40 	.word	0x00030d40

08007ac4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b084      	sub	sp, #16
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
 8007acc:	460b      	mov	r3, r1
 8007ace:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007ad0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007ad4:	f002 fd72 	bl	800a5bc <USBD_static_malloc>
 8007ad8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d109      	bne.n	8007af4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	32b0      	adds	r2, #176	; 0xb0
 8007aea:	2100      	movs	r1, #0
 8007aec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007af0:	2302      	movs	r3, #2
 8007af2:	e0d4      	b.n	8007c9e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007af4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8007af8:	2100      	movs	r1, #0
 8007afa:	68f8      	ldr	r0, [r7, #12]
 8007afc:	f002 fdc6 	bl	800a68c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	32b0      	adds	r2, #176	; 0xb0
 8007b0a:	68f9      	ldr	r1, [r7, #12]
 8007b0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	32b0      	adds	r2, #176	; 0xb0
 8007b1a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	7c1b      	ldrb	r3, [r3, #16]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d138      	bne.n	8007b9e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007b2c:	4b5e      	ldr	r3, [pc, #376]	; (8007ca8 <USBD_CDC_Init+0x1e4>)
 8007b2e:	7819      	ldrb	r1, [r3, #0]
 8007b30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b34:	2202      	movs	r2, #2
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f002 fc1d 	bl	800a376 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007b3c:	4b5a      	ldr	r3, [pc, #360]	; (8007ca8 <USBD_CDC_Init+0x1e4>)
 8007b3e:	781b      	ldrb	r3, [r3, #0]
 8007b40:	f003 020f 	and.w	r2, r3, #15
 8007b44:	6879      	ldr	r1, [r7, #4]
 8007b46:	4613      	mov	r3, r2
 8007b48:	009b      	lsls	r3, r3, #2
 8007b4a:	4413      	add	r3, r2
 8007b4c:	009b      	lsls	r3, r3, #2
 8007b4e:	440b      	add	r3, r1
 8007b50:	3324      	adds	r3, #36	; 0x24
 8007b52:	2201      	movs	r2, #1
 8007b54:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007b56:	4b55      	ldr	r3, [pc, #340]	; (8007cac <USBD_CDC_Init+0x1e8>)
 8007b58:	7819      	ldrb	r1, [r3, #0]
 8007b5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b5e:	2202      	movs	r2, #2
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f002 fc08 	bl	800a376 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007b66:	4b51      	ldr	r3, [pc, #324]	; (8007cac <USBD_CDC_Init+0x1e8>)
 8007b68:	781b      	ldrb	r3, [r3, #0]
 8007b6a:	f003 020f 	and.w	r2, r3, #15
 8007b6e:	6879      	ldr	r1, [r7, #4]
 8007b70:	4613      	mov	r3, r2
 8007b72:	009b      	lsls	r3, r3, #2
 8007b74:	4413      	add	r3, r2
 8007b76:	009b      	lsls	r3, r3, #2
 8007b78:	440b      	add	r3, r1
 8007b7a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007b7e:	2201      	movs	r2, #1
 8007b80:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007b82:	4b4b      	ldr	r3, [pc, #300]	; (8007cb0 <USBD_CDC_Init+0x1ec>)
 8007b84:	781b      	ldrb	r3, [r3, #0]
 8007b86:	f003 020f 	and.w	r2, r3, #15
 8007b8a:	6879      	ldr	r1, [r7, #4]
 8007b8c:	4613      	mov	r3, r2
 8007b8e:	009b      	lsls	r3, r3, #2
 8007b90:	4413      	add	r3, r2
 8007b92:	009b      	lsls	r3, r3, #2
 8007b94:	440b      	add	r3, r1
 8007b96:	3326      	adds	r3, #38	; 0x26
 8007b98:	2210      	movs	r2, #16
 8007b9a:	801a      	strh	r2, [r3, #0]
 8007b9c:	e035      	b.n	8007c0a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007b9e:	4b42      	ldr	r3, [pc, #264]	; (8007ca8 <USBD_CDC_Init+0x1e4>)
 8007ba0:	7819      	ldrb	r1, [r3, #0]
 8007ba2:	2340      	movs	r3, #64	; 0x40
 8007ba4:	2202      	movs	r2, #2
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f002 fbe5 	bl	800a376 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007bac:	4b3e      	ldr	r3, [pc, #248]	; (8007ca8 <USBD_CDC_Init+0x1e4>)
 8007bae:	781b      	ldrb	r3, [r3, #0]
 8007bb0:	f003 020f 	and.w	r2, r3, #15
 8007bb4:	6879      	ldr	r1, [r7, #4]
 8007bb6:	4613      	mov	r3, r2
 8007bb8:	009b      	lsls	r3, r3, #2
 8007bba:	4413      	add	r3, r2
 8007bbc:	009b      	lsls	r3, r3, #2
 8007bbe:	440b      	add	r3, r1
 8007bc0:	3324      	adds	r3, #36	; 0x24
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007bc6:	4b39      	ldr	r3, [pc, #228]	; (8007cac <USBD_CDC_Init+0x1e8>)
 8007bc8:	7819      	ldrb	r1, [r3, #0]
 8007bca:	2340      	movs	r3, #64	; 0x40
 8007bcc:	2202      	movs	r2, #2
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f002 fbd1 	bl	800a376 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007bd4:	4b35      	ldr	r3, [pc, #212]	; (8007cac <USBD_CDC_Init+0x1e8>)
 8007bd6:	781b      	ldrb	r3, [r3, #0]
 8007bd8:	f003 020f 	and.w	r2, r3, #15
 8007bdc:	6879      	ldr	r1, [r7, #4]
 8007bde:	4613      	mov	r3, r2
 8007be0:	009b      	lsls	r3, r3, #2
 8007be2:	4413      	add	r3, r2
 8007be4:	009b      	lsls	r3, r3, #2
 8007be6:	440b      	add	r3, r1
 8007be8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007bec:	2201      	movs	r2, #1
 8007bee:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007bf0:	4b2f      	ldr	r3, [pc, #188]	; (8007cb0 <USBD_CDC_Init+0x1ec>)
 8007bf2:	781b      	ldrb	r3, [r3, #0]
 8007bf4:	f003 020f 	and.w	r2, r3, #15
 8007bf8:	6879      	ldr	r1, [r7, #4]
 8007bfa:	4613      	mov	r3, r2
 8007bfc:	009b      	lsls	r3, r3, #2
 8007bfe:	4413      	add	r3, r2
 8007c00:	009b      	lsls	r3, r3, #2
 8007c02:	440b      	add	r3, r1
 8007c04:	3326      	adds	r3, #38	; 0x26
 8007c06:	2210      	movs	r2, #16
 8007c08:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007c0a:	4b29      	ldr	r3, [pc, #164]	; (8007cb0 <USBD_CDC_Init+0x1ec>)
 8007c0c:	7819      	ldrb	r1, [r3, #0]
 8007c0e:	2308      	movs	r3, #8
 8007c10:	2203      	movs	r2, #3
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f002 fbaf 	bl	800a376 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007c18:	4b25      	ldr	r3, [pc, #148]	; (8007cb0 <USBD_CDC_Init+0x1ec>)
 8007c1a:	781b      	ldrb	r3, [r3, #0]
 8007c1c:	f003 020f 	and.w	r2, r3, #15
 8007c20:	6879      	ldr	r1, [r7, #4]
 8007c22:	4613      	mov	r3, r2
 8007c24:	009b      	lsls	r3, r3, #2
 8007c26:	4413      	add	r3, r2
 8007c28:	009b      	lsls	r3, r3, #2
 8007c2a:	440b      	add	r3, r1
 8007c2c:	3324      	adds	r3, #36	; 0x24
 8007c2e:	2201      	movs	r2, #1
 8007c30:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	2200      	movs	r2, #0
 8007c36:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007c40:	687a      	ldr	r2, [r7, #4]
 8007c42:	33b0      	adds	r3, #176	; 0xb0
 8007c44:	009b      	lsls	r3, r3, #2
 8007c46:	4413      	add	r3, r2
 8007c48:	685b      	ldr	r3, [r3, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	2200      	movs	r2, #0
 8007c52:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d101      	bne.n	8007c6c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007c68:	2302      	movs	r3, #2
 8007c6a:	e018      	b.n	8007c9e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	7c1b      	ldrb	r3, [r3, #16]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d10a      	bne.n	8007c8a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007c74:	4b0d      	ldr	r3, [pc, #52]	; (8007cac <USBD_CDC_Init+0x1e8>)
 8007c76:	7819      	ldrb	r1, [r3, #0]
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007c7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f002 fc66 	bl	800a554 <USBD_LL_PrepareReceive>
 8007c88:	e008      	b.n	8007c9c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007c8a:	4b08      	ldr	r3, [pc, #32]	; (8007cac <USBD_CDC_Init+0x1e8>)
 8007c8c:	7819      	ldrb	r1, [r3, #0]
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007c94:	2340      	movs	r3, #64	; 0x40
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f002 fc5c 	bl	800a554 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007c9c:	2300      	movs	r3, #0
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3710      	adds	r7, #16
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}
 8007ca6:	bf00      	nop
 8007ca8:	24000097 	.word	0x24000097
 8007cac:	24000098 	.word	0x24000098
 8007cb0:	24000099 	.word	0x24000099

08007cb4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b082      	sub	sp, #8
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
 8007cbc:	460b      	mov	r3, r1
 8007cbe:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007cc0:	4b3a      	ldr	r3, [pc, #232]	; (8007dac <USBD_CDC_DeInit+0xf8>)
 8007cc2:	781b      	ldrb	r3, [r3, #0]
 8007cc4:	4619      	mov	r1, r3
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f002 fb7b 	bl	800a3c2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007ccc:	4b37      	ldr	r3, [pc, #220]	; (8007dac <USBD_CDC_DeInit+0xf8>)
 8007cce:	781b      	ldrb	r3, [r3, #0]
 8007cd0:	f003 020f 	and.w	r2, r3, #15
 8007cd4:	6879      	ldr	r1, [r7, #4]
 8007cd6:	4613      	mov	r3, r2
 8007cd8:	009b      	lsls	r3, r3, #2
 8007cda:	4413      	add	r3, r2
 8007cdc:	009b      	lsls	r3, r3, #2
 8007cde:	440b      	add	r3, r1
 8007ce0:	3324      	adds	r3, #36	; 0x24
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007ce6:	4b32      	ldr	r3, [pc, #200]	; (8007db0 <USBD_CDC_DeInit+0xfc>)
 8007ce8:	781b      	ldrb	r3, [r3, #0]
 8007cea:	4619      	mov	r1, r3
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f002 fb68 	bl	800a3c2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007cf2:	4b2f      	ldr	r3, [pc, #188]	; (8007db0 <USBD_CDC_DeInit+0xfc>)
 8007cf4:	781b      	ldrb	r3, [r3, #0]
 8007cf6:	f003 020f 	and.w	r2, r3, #15
 8007cfa:	6879      	ldr	r1, [r7, #4]
 8007cfc:	4613      	mov	r3, r2
 8007cfe:	009b      	lsls	r3, r3, #2
 8007d00:	4413      	add	r3, r2
 8007d02:	009b      	lsls	r3, r3, #2
 8007d04:	440b      	add	r3, r1
 8007d06:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007d0e:	4b29      	ldr	r3, [pc, #164]	; (8007db4 <USBD_CDC_DeInit+0x100>)
 8007d10:	781b      	ldrb	r3, [r3, #0]
 8007d12:	4619      	mov	r1, r3
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f002 fb54 	bl	800a3c2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007d1a:	4b26      	ldr	r3, [pc, #152]	; (8007db4 <USBD_CDC_DeInit+0x100>)
 8007d1c:	781b      	ldrb	r3, [r3, #0]
 8007d1e:	f003 020f 	and.w	r2, r3, #15
 8007d22:	6879      	ldr	r1, [r7, #4]
 8007d24:	4613      	mov	r3, r2
 8007d26:	009b      	lsls	r3, r3, #2
 8007d28:	4413      	add	r3, r2
 8007d2a:	009b      	lsls	r3, r3, #2
 8007d2c:	440b      	add	r3, r1
 8007d2e:	3324      	adds	r3, #36	; 0x24
 8007d30:	2200      	movs	r2, #0
 8007d32:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007d34:	4b1f      	ldr	r3, [pc, #124]	; (8007db4 <USBD_CDC_DeInit+0x100>)
 8007d36:	781b      	ldrb	r3, [r3, #0]
 8007d38:	f003 020f 	and.w	r2, r3, #15
 8007d3c:	6879      	ldr	r1, [r7, #4]
 8007d3e:	4613      	mov	r3, r2
 8007d40:	009b      	lsls	r3, r3, #2
 8007d42:	4413      	add	r3, r2
 8007d44:	009b      	lsls	r3, r3, #2
 8007d46:	440b      	add	r3, r1
 8007d48:	3326      	adds	r3, #38	; 0x26
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	32b0      	adds	r2, #176	; 0xb0
 8007d58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d01f      	beq.n	8007da0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007d66:	687a      	ldr	r2, [r7, #4]
 8007d68:	33b0      	adds	r3, #176	; 0xb0
 8007d6a:	009b      	lsls	r3, r3, #2
 8007d6c:	4413      	add	r3, r2
 8007d6e:	685b      	ldr	r3, [r3, #4]
 8007d70:	685b      	ldr	r3, [r3, #4]
 8007d72:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	32b0      	adds	r2, #176	; 0xb0
 8007d7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d82:	4618      	mov	r0, r3
 8007d84:	f002 fc28 	bl	800a5d8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	32b0      	adds	r2, #176	; 0xb0
 8007d92:	2100      	movs	r1, #0
 8007d94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007da0:	2300      	movs	r3, #0
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3708      	adds	r7, #8
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}
 8007daa:	bf00      	nop
 8007dac:	24000097 	.word	0x24000097
 8007db0:	24000098 	.word	0x24000098
 8007db4:	24000099 	.word	0x24000099

08007db8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b086      	sub	sp, #24
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
 8007dc0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	32b0      	adds	r2, #176	; 0xb0
 8007dcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dd0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007dde:	693b      	ldr	r3, [r7, #16]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d101      	bne.n	8007de8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007de4:	2303      	movs	r3, #3
 8007de6:	e0bf      	b.n	8007f68 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	781b      	ldrb	r3, [r3, #0]
 8007dec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d050      	beq.n	8007e96 <USBD_CDC_Setup+0xde>
 8007df4:	2b20      	cmp	r3, #32
 8007df6:	f040 80af 	bne.w	8007f58 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	88db      	ldrh	r3, [r3, #6]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d03a      	beq.n	8007e78 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	781b      	ldrb	r3, [r3, #0]
 8007e06:	b25b      	sxtb	r3, r3
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	da1b      	bge.n	8007e44 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007e12:	687a      	ldr	r2, [r7, #4]
 8007e14:	33b0      	adds	r3, #176	; 0xb0
 8007e16:	009b      	lsls	r3, r3, #2
 8007e18:	4413      	add	r3, r2
 8007e1a:	685b      	ldr	r3, [r3, #4]
 8007e1c:	689b      	ldr	r3, [r3, #8]
 8007e1e:	683a      	ldr	r2, [r7, #0]
 8007e20:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007e22:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007e24:	683a      	ldr	r2, [r7, #0]
 8007e26:	88d2      	ldrh	r2, [r2, #6]
 8007e28:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	88db      	ldrh	r3, [r3, #6]
 8007e2e:	2b07      	cmp	r3, #7
 8007e30:	bf28      	it	cs
 8007e32:	2307      	movcs	r3, #7
 8007e34:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007e36:	693b      	ldr	r3, [r7, #16]
 8007e38:	89fa      	ldrh	r2, [r7, #14]
 8007e3a:	4619      	mov	r1, r3
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f001 fd89 	bl	8009954 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007e42:	e090      	b.n	8007f66 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	785a      	ldrb	r2, [r3, #1]
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	88db      	ldrh	r3, [r3, #6]
 8007e52:	2b3f      	cmp	r3, #63	; 0x3f
 8007e54:	d803      	bhi.n	8007e5e <USBD_CDC_Setup+0xa6>
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	88db      	ldrh	r3, [r3, #6]
 8007e5a:	b2da      	uxtb	r2, r3
 8007e5c:	e000      	b.n	8007e60 <USBD_CDC_Setup+0xa8>
 8007e5e:	2240      	movs	r2, #64	; 0x40
 8007e60:	693b      	ldr	r3, [r7, #16]
 8007e62:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007e66:	6939      	ldr	r1, [r7, #16]
 8007e68:	693b      	ldr	r3, [r7, #16]
 8007e6a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8007e6e:	461a      	mov	r2, r3
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f001 fd9b 	bl	80099ac <USBD_CtlPrepareRx>
      break;
 8007e76:	e076      	b.n	8007f66 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007e7e:	687a      	ldr	r2, [r7, #4]
 8007e80:	33b0      	adds	r3, #176	; 0xb0
 8007e82:	009b      	lsls	r3, r3, #2
 8007e84:	4413      	add	r3, r2
 8007e86:	685b      	ldr	r3, [r3, #4]
 8007e88:	689b      	ldr	r3, [r3, #8]
 8007e8a:	683a      	ldr	r2, [r7, #0]
 8007e8c:	7850      	ldrb	r0, [r2, #1]
 8007e8e:	2200      	movs	r2, #0
 8007e90:	6839      	ldr	r1, [r7, #0]
 8007e92:	4798      	blx	r3
      break;
 8007e94:	e067      	b.n	8007f66 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	785b      	ldrb	r3, [r3, #1]
 8007e9a:	2b0b      	cmp	r3, #11
 8007e9c:	d851      	bhi.n	8007f42 <USBD_CDC_Setup+0x18a>
 8007e9e:	a201      	add	r2, pc, #4	; (adr r2, 8007ea4 <USBD_CDC_Setup+0xec>)
 8007ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ea4:	08007ed5 	.word	0x08007ed5
 8007ea8:	08007f51 	.word	0x08007f51
 8007eac:	08007f43 	.word	0x08007f43
 8007eb0:	08007f43 	.word	0x08007f43
 8007eb4:	08007f43 	.word	0x08007f43
 8007eb8:	08007f43 	.word	0x08007f43
 8007ebc:	08007f43 	.word	0x08007f43
 8007ec0:	08007f43 	.word	0x08007f43
 8007ec4:	08007f43 	.word	0x08007f43
 8007ec8:	08007f43 	.word	0x08007f43
 8007ecc:	08007eff 	.word	0x08007eff
 8007ed0:	08007f29 	.word	0x08007f29
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007eda:	b2db      	uxtb	r3, r3
 8007edc:	2b03      	cmp	r3, #3
 8007ede:	d107      	bne.n	8007ef0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007ee0:	f107 030a 	add.w	r3, r7, #10
 8007ee4:	2202      	movs	r2, #2
 8007ee6:	4619      	mov	r1, r3
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f001 fd33 	bl	8009954 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007eee:	e032      	b.n	8007f56 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007ef0:	6839      	ldr	r1, [r7, #0]
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f001 fcbd 	bl	8009872 <USBD_CtlError>
            ret = USBD_FAIL;
 8007ef8:	2303      	movs	r3, #3
 8007efa:	75fb      	strb	r3, [r7, #23]
          break;
 8007efc:	e02b      	b.n	8007f56 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f04:	b2db      	uxtb	r3, r3
 8007f06:	2b03      	cmp	r3, #3
 8007f08:	d107      	bne.n	8007f1a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007f0a:	f107 030d 	add.w	r3, r7, #13
 8007f0e:	2201      	movs	r2, #1
 8007f10:	4619      	mov	r1, r3
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f001 fd1e 	bl	8009954 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007f18:	e01d      	b.n	8007f56 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007f1a:	6839      	ldr	r1, [r7, #0]
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f001 fca8 	bl	8009872 <USBD_CtlError>
            ret = USBD_FAIL;
 8007f22:	2303      	movs	r3, #3
 8007f24:	75fb      	strb	r3, [r7, #23]
          break;
 8007f26:	e016      	b.n	8007f56 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f2e:	b2db      	uxtb	r3, r3
 8007f30:	2b03      	cmp	r3, #3
 8007f32:	d00f      	beq.n	8007f54 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007f34:	6839      	ldr	r1, [r7, #0]
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f001 fc9b 	bl	8009872 <USBD_CtlError>
            ret = USBD_FAIL;
 8007f3c:	2303      	movs	r3, #3
 8007f3e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007f40:	e008      	b.n	8007f54 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007f42:	6839      	ldr	r1, [r7, #0]
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f001 fc94 	bl	8009872 <USBD_CtlError>
          ret = USBD_FAIL;
 8007f4a:	2303      	movs	r3, #3
 8007f4c:	75fb      	strb	r3, [r7, #23]
          break;
 8007f4e:	e002      	b.n	8007f56 <USBD_CDC_Setup+0x19e>
          break;
 8007f50:	bf00      	nop
 8007f52:	e008      	b.n	8007f66 <USBD_CDC_Setup+0x1ae>
          break;
 8007f54:	bf00      	nop
      }
      break;
 8007f56:	e006      	b.n	8007f66 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007f58:	6839      	ldr	r1, [r7, #0]
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f001 fc89 	bl	8009872 <USBD_CtlError>
      ret = USBD_FAIL;
 8007f60:	2303      	movs	r3, #3
 8007f62:	75fb      	strb	r3, [r7, #23]
      break;
 8007f64:	bf00      	nop
  }

  return (uint8_t)ret;
 8007f66:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	3718      	adds	r7, #24
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}

08007f70 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b084      	sub	sp, #16
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
 8007f78:	460b      	mov	r3, r1
 8007f7a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007f82:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	32b0      	adds	r2, #176	; 0xb0
 8007f8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d101      	bne.n	8007f9a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007f96:	2303      	movs	r3, #3
 8007f98:	e065      	b.n	8008066 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	32b0      	adds	r2, #176	; 0xb0
 8007fa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fa8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007faa:	78fb      	ldrb	r3, [r7, #3]
 8007fac:	f003 020f 	and.w	r2, r3, #15
 8007fb0:	6879      	ldr	r1, [r7, #4]
 8007fb2:	4613      	mov	r3, r2
 8007fb4:	009b      	lsls	r3, r3, #2
 8007fb6:	4413      	add	r3, r2
 8007fb8:	009b      	lsls	r3, r3, #2
 8007fba:	440b      	add	r3, r1
 8007fbc:	3318      	adds	r3, #24
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d02f      	beq.n	8008024 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007fc4:	78fb      	ldrb	r3, [r7, #3]
 8007fc6:	f003 020f 	and.w	r2, r3, #15
 8007fca:	6879      	ldr	r1, [r7, #4]
 8007fcc:	4613      	mov	r3, r2
 8007fce:	009b      	lsls	r3, r3, #2
 8007fd0:	4413      	add	r3, r2
 8007fd2:	009b      	lsls	r3, r3, #2
 8007fd4:	440b      	add	r3, r1
 8007fd6:	3318      	adds	r3, #24
 8007fd8:	681a      	ldr	r2, [r3, #0]
 8007fda:	78fb      	ldrb	r3, [r7, #3]
 8007fdc:	f003 010f 	and.w	r1, r3, #15
 8007fe0:	68f8      	ldr	r0, [r7, #12]
 8007fe2:	460b      	mov	r3, r1
 8007fe4:	00db      	lsls	r3, r3, #3
 8007fe6:	440b      	add	r3, r1
 8007fe8:	009b      	lsls	r3, r3, #2
 8007fea:	4403      	add	r3, r0
 8007fec:	3348      	adds	r3, #72	; 0x48
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	fbb2 f1f3 	udiv	r1, r2, r3
 8007ff4:	fb01 f303 	mul.w	r3, r1, r3
 8007ff8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d112      	bne.n	8008024 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007ffe:	78fb      	ldrb	r3, [r7, #3]
 8008000:	f003 020f 	and.w	r2, r3, #15
 8008004:	6879      	ldr	r1, [r7, #4]
 8008006:	4613      	mov	r3, r2
 8008008:	009b      	lsls	r3, r3, #2
 800800a:	4413      	add	r3, r2
 800800c:	009b      	lsls	r3, r3, #2
 800800e:	440b      	add	r3, r1
 8008010:	3318      	adds	r3, #24
 8008012:	2200      	movs	r2, #0
 8008014:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008016:	78f9      	ldrb	r1, [r7, #3]
 8008018:	2300      	movs	r3, #0
 800801a:	2200      	movs	r2, #0
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f002 fa78 	bl	800a512 <USBD_LL_Transmit>
 8008022:	e01f      	b.n	8008064 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	2200      	movs	r2, #0
 8008028:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008032:	687a      	ldr	r2, [r7, #4]
 8008034:	33b0      	adds	r3, #176	; 0xb0
 8008036:	009b      	lsls	r3, r3, #2
 8008038:	4413      	add	r3, r2
 800803a:	685b      	ldr	r3, [r3, #4]
 800803c:	691b      	ldr	r3, [r3, #16]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d010      	beq.n	8008064 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008048:	687a      	ldr	r2, [r7, #4]
 800804a:	33b0      	adds	r3, #176	; 0xb0
 800804c:	009b      	lsls	r3, r3, #2
 800804e:	4413      	add	r3, r2
 8008050:	685b      	ldr	r3, [r3, #4]
 8008052:	691b      	ldr	r3, [r3, #16]
 8008054:	68ba      	ldr	r2, [r7, #8]
 8008056:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800805a:	68ba      	ldr	r2, [r7, #8]
 800805c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008060:	78fa      	ldrb	r2, [r7, #3]
 8008062:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008064:	2300      	movs	r3, #0
}
 8008066:	4618      	mov	r0, r3
 8008068:	3710      	adds	r7, #16
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}

0800806e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800806e:	b580      	push	{r7, lr}
 8008070:	b084      	sub	sp, #16
 8008072:	af00      	add	r7, sp, #0
 8008074:	6078      	str	r0, [r7, #4]
 8008076:	460b      	mov	r3, r1
 8008078:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	32b0      	adds	r2, #176	; 0xb0
 8008084:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008088:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	32b0      	adds	r2, #176	; 0xb0
 8008094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d101      	bne.n	80080a0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800809c:	2303      	movs	r3, #3
 800809e:	e01a      	b.n	80080d6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80080a0:	78fb      	ldrb	r3, [r7, #3]
 80080a2:	4619      	mov	r1, r3
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f002 fa76 	bl	800a596 <USBD_LL_GetRxDataSize>
 80080aa:	4602      	mov	r2, r0
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80080b8:	687a      	ldr	r2, [r7, #4]
 80080ba:	33b0      	adds	r3, #176	; 0xb0
 80080bc:	009b      	lsls	r3, r3, #2
 80080be:	4413      	add	r3, r2
 80080c0:	685b      	ldr	r3, [r3, #4]
 80080c2:	68db      	ldr	r3, [r3, #12]
 80080c4:	68fa      	ldr	r2, [r7, #12]
 80080c6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80080ca:	68fa      	ldr	r2, [r7, #12]
 80080cc:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80080d0:	4611      	mov	r1, r2
 80080d2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80080d4:	2300      	movs	r3, #0
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3710      	adds	r7, #16
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}

080080de <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80080de:	b580      	push	{r7, lr}
 80080e0:	b084      	sub	sp, #16
 80080e2:	af00      	add	r7, sp, #0
 80080e4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	32b0      	adds	r2, #176	; 0xb0
 80080f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080f4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d101      	bne.n	8008100 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80080fc:	2303      	movs	r3, #3
 80080fe:	e025      	b.n	800814c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008106:	687a      	ldr	r2, [r7, #4]
 8008108:	33b0      	adds	r3, #176	; 0xb0
 800810a:	009b      	lsls	r3, r3, #2
 800810c:	4413      	add	r3, r2
 800810e:	685b      	ldr	r3, [r3, #4]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d01a      	beq.n	800814a <USBD_CDC_EP0_RxReady+0x6c>
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800811a:	2bff      	cmp	r3, #255	; 0xff
 800811c:	d015      	beq.n	800814a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008124:	687a      	ldr	r2, [r7, #4]
 8008126:	33b0      	adds	r3, #176	; 0xb0
 8008128:	009b      	lsls	r3, r3, #2
 800812a:	4413      	add	r3, r2
 800812c:	685b      	ldr	r3, [r3, #4]
 800812e:	689b      	ldr	r3, [r3, #8]
 8008130:	68fa      	ldr	r2, [r7, #12]
 8008132:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8008136:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008138:	68fa      	ldr	r2, [r7, #12]
 800813a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800813e:	b292      	uxth	r2, r2
 8008140:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	22ff      	movs	r2, #255	; 0xff
 8008146:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800814a:	2300      	movs	r3, #0
}
 800814c:	4618      	mov	r0, r3
 800814e:	3710      	adds	r7, #16
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}

08008154 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b086      	sub	sp, #24
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800815c:	2182      	movs	r1, #130	; 0x82
 800815e:	4818      	ldr	r0, [pc, #96]	; (80081c0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008160:	f000 fd4f 	bl	8008c02 <USBD_GetEpDesc>
 8008164:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008166:	2101      	movs	r1, #1
 8008168:	4815      	ldr	r0, [pc, #84]	; (80081c0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800816a:	f000 fd4a 	bl	8008c02 <USBD_GetEpDesc>
 800816e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008170:	2181      	movs	r1, #129	; 0x81
 8008172:	4813      	ldr	r0, [pc, #76]	; (80081c0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008174:	f000 fd45 	bl	8008c02 <USBD_GetEpDesc>
 8008178:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d002      	beq.n	8008186 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008180:	697b      	ldr	r3, [r7, #20]
 8008182:	2210      	movs	r2, #16
 8008184:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008186:	693b      	ldr	r3, [r7, #16]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d006      	beq.n	800819a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	2200      	movs	r2, #0
 8008190:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008194:	711a      	strb	r2, [r3, #4]
 8008196:	2200      	movs	r2, #0
 8008198:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d006      	beq.n	80081ae <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	2200      	movs	r2, #0
 80081a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80081a8:	711a      	strb	r2, [r3, #4]
 80081aa:	2200      	movs	r2, #0
 80081ac:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2243      	movs	r2, #67	; 0x43
 80081b2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80081b4:	4b02      	ldr	r3, [pc, #8]	; (80081c0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	3718      	adds	r7, #24
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}
 80081be:	bf00      	nop
 80081c0:	24000054 	.word	0x24000054

080081c4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b086      	sub	sp, #24
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80081cc:	2182      	movs	r1, #130	; 0x82
 80081ce:	4818      	ldr	r0, [pc, #96]	; (8008230 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80081d0:	f000 fd17 	bl	8008c02 <USBD_GetEpDesc>
 80081d4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80081d6:	2101      	movs	r1, #1
 80081d8:	4815      	ldr	r0, [pc, #84]	; (8008230 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80081da:	f000 fd12 	bl	8008c02 <USBD_GetEpDesc>
 80081de:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80081e0:	2181      	movs	r1, #129	; 0x81
 80081e2:	4813      	ldr	r0, [pc, #76]	; (8008230 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80081e4:	f000 fd0d 	bl	8008c02 <USBD_GetEpDesc>
 80081e8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d002      	beq.n	80081f6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	2210      	movs	r2, #16
 80081f4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80081f6:	693b      	ldr	r3, [r7, #16]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d006      	beq.n	800820a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80081fc:	693b      	ldr	r3, [r7, #16]
 80081fe:	2200      	movs	r2, #0
 8008200:	711a      	strb	r2, [r3, #4]
 8008202:	2200      	movs	r2, #0
 8008204:	f042 0202 	orr.w	r2, r2, #2
 8008208:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d006      	beq.n	800821e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	2200      	movs	r2, #0
 8008214:	711a      	strb	r2, [r3, #4]
 8008216:	2200      	movs	r2, #0
 8008218:	f042 0202 	orr.w	r2, r2, #2
 800821c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2243      	movs	r2, #67	; 0x43
 8008222:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008224:	4b02      	ldr	r3, [pc, #8]	; (8008230 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008226:	4618      	mov	r0, r3
 8008228:	3718      	adds	r7, #24
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}
 800822e:	bf00      	nop
 8008230:	24000054 	.word	0x24000054

08008234 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b086      	sub	sp, #24
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800823c:	2182      	movs	r1, #130	; 0x82
 800823e:	4818      	ldr	r0, [pc, #96]	; (80082a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008240:	f000 fcdf 	bl	8008c02 <USBD_GetEpDesc>
 8008244:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008246:	2101      	movs	r1, #1
 8008248:	4815      	ldr	r0, [pc, #84]	; (80082a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800824a:	f000 fcda 	bl	8008c02 <USBD_GetEpDesc>
 800824e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008250:	2181      	movs	r1, #129	; 0x81
 8008252:	4813      	ldr	r0, [pc, #76]	; (80082a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008254:	f000 fcd5 	bl	8008c02 <USBD_GetEpDesc>
 8008258:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d002      	beq.n	8008266 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008260:	697b      	ldr	r3, [r7, #20]
 8008262:	2210      	movs	r2, #16
 8008264:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008266:	693b      	ldr	r3, [r7, #16]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d006      	beq.n	800827a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800826c:	693b      	ldr	r3, [r7, #16]
 800826e:	2200      	movs	r2, #0
 8008270:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008274:	711a      	strb	r2, [r3, #4]
 8008276:	2200      	movs	r2, #0
 8008278:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d006      	beq.n	800828e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	2200      	movs	r2, #0
 8008284:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008288:	711a      	strb	r2, [r3, #4]
 800828a:	2200      	movs	r2, #0
 800828c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2243      	movs	r2, #67	; 0x43
 8008292:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008294:	4b02      	ldr	r3, [pc, #8]	; (80082a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008296:	4618      	mov	r0, r3
 8008298:	3718      	adds	r7, #24
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}
 800829e:	bf00      	nop
 80082a0:	24000054 	.word	0x24000054

080082a4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80082a4:	b480      	push	{r7}
 80082a6:	b083      	sub	sp, #12
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	220a      	movs	r2, #10
 80082b0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80082b2:	4b03      	ldr	r3, [pc, #12]	; (80082c0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	370c      	adds	r7, #12
 80082b8:	46bd      	mov	sp, r7
 80082ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082be:	4770      	bx	lr
 80082c0:	24000010 	.word	0x24000010

080082c4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80082c4:	b480      	push	{r7}
 80082c6:	b083      	sub	sp, #12
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
 80082cc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d101      	bne.n	80082d8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80082d4:	2303      	movs	r3, #3
 80082d6:	e009      	b.n	80082ec <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80082de:	687a      	ldr	r2, [r7, #4]
 80082e0:	33b0      	adds	r3, #176	; 0xb0
 80082e2:	009b      	lsls	r3, r3, #2
 80082e4:	4413      	add	r3, r2
 80082e6:	683a      	ldr	r2, [r7, #0]
 80082e8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80082ea:	2300      	movs	r3, #0
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	370c      	adds	r7, #12
 80082f0:	46bd      	mov	sp, r7
 80082f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f6:	4770      	bx	lr

080082f8 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80082f8:	b480      	push	{r7}
 80082fa:	b087      	sub	sp, #28
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	60f8      	str	r0, [r7, #12]
 8008300:	60b9      	str	r1, [r7, #8]
 8008302:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	32b0      	adds	r2, #176	; 0xb0
 800830e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008312:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8008314:	697b      	ldr	r3, [r7, #20]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d101      	bne.n	800831e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800831a:	2303      	movs	r3, #3
 800831c:	e008      	b.n	8008330 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800831e:	697b      	ldr	r3, [r7, #20]
 8008320:	68ba      	ldr	r2, [r7, #8]
 8008322:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008326:	697b      	ldr	r3, [r7, #20]
 8008328:	687a      	ldr	r2, [r7, #4]
 800832a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800832e:	2300      	movs	r3, #0
}
 8008330:	4618      	mov	r0, r3
 8008332:	371c      	adds	r7, #28
 8008334:	46bd      	mov	sp, r7
 8008336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833a:	4770      	bx	lr

0800833c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800833c:	b480      	push	{r7}
 800833e:	b085      	sub	sp, #20
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
 8008344:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	32b0      	adds	r2, #176	; 0xb0
 8008350:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008354:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d101      	bne.n	8008360 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800835c:	2303      	movs	r3, #3
 800835e:	e004      	b.n	800836a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	683a      	ldr	r2, [r7, #0]
 8008364:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008368:	2300      	movs	r3, #0
}
 800836a:	4618      	mov	r0, r3
 800836c:	3714      	adds	r7, #20
 800836e:	46bd      	mov	sp, r7
 8008370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008374:	4770      	bx	lr
	...

08008378 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b084      	sub	sp, #16
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	32b0      	adds	r2, #176	; 0xb0
 800838a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800838e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008390:	2301      	movs	r3, #1
 8008392:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	32b0      	adds	r2, #176	; 0xb0
 800839e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d101      	bne.n	80083aa <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80083a6:	2303      	movs	r3, #3
 80083a8:	e025      	b.n	80083f6 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d11f      	bne.n	80083f4 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	2201      	movs	r2, #1
 80083b8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80083bc:	4b10      	ldr	r3, [pc, #64]	; (8008400 <USBD_CDC_TransmitPacket+0x88>)
 80083be:	781b      	ldrb	r3, [r3, #0]
 80083c0:	f003 020f 	and.w	r2, r3, #15
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	4613      	mov	r3, r2
 80083ce:	009b      	lsls	r3, r3, #2
 80083d0:	4413      	add	r3, r2
 80083d2:	009b      	lsls	r3, r3, #2
 80083d4:	4403      	add	r3, r0
 80083d6:	3318      	adds	r3, #24
 80083d8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80083da:	4b09      	ldr	r3, [pc, #36]	; (8008400 <USBD_CDC_TransmitPacket+0x88>)
 80083dc:	7819      	ldrb	r1, [r3, #0]
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f002 f891 	bl	800a512 <USBD_LL_Transmit>

    ret = USBD_OK;
 80083f0:	2300      	movs	r3, #0
 80083f2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80083f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	3710      	adds	r7, #16
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}
 80083fe:	bf00      	nop
 8008400:	24000097 	.word	0x24000097

08008404 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b084      	sub	sp, #16
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	32b0      	adds	r2, #176	; 0xb0
 8008416:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800841a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	32b0      	adds	r2, #176	; 0xb0
 8008426:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d101      	bne.n	8008432 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800842e:	2303      	movs	r3, #3
 8008430:	e018      	b.n	8008464 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	7c1b      	ldrb	r3, [r3, #16]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d10a      	bne.n	8008450 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800843a:	4b0c      	ldr	r3, [pc, #48]	; (800846c <USBD_CDC_ReceivePacket+0x68>)
 800843c:	7819      	ldrb	r1, [r3, #0]
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008444:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f002 f883 	bl	800a554 <USBD_LL_PrepareReceive>
 800844e:	e008      	b.n	8008462 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008450:	4b06      	ldr	r3, [pc, #24]	; (800846c <USBD_CDC_ReceivePacket+0x68>)
 8008452:	7819      	ldrb	r1, [r3, #0]
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800845a:	2340      	movs	r3, #64	; 0x40
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f002 f879 	bl	800a554 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008462:	2300      	movs	r3, #0
}
 8008464:	4618      	mov	r0, r3
 8008466:	3710      	adds	r7, #16
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}
 800846c:	24000098 	.word	0x24000098

08008470 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b086      	sub	sp, #24
 8008474:	af00      	add	r7, sp, #0
 8008476:	60f8      	str	r0, [r7, #12]
 8008478:	60b9      	str	r1, [r7, #8]
 800847a:	4613      	mov	r3, r2
 800847c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d101      	bne.n	8008488 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008484:	2303      	movs	r3, #3
 8008486:	e01f      	b.n	80084c8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	2200      	movs	r2, #0
 800848c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	2200      	movs	r2, #0
 8008494:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	2200      	movs	r2, #0
 800849c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d003      	beq.n	80084ae <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	68ba      	ldr	r2, [r7, #8]
 80084aa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	2201      	movs	r2, #1
 80084b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	79fa      	ldrb	r2, [r7, #7]
 80084ba:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80084bc:	68f8      	ldr	r0, [r7, #12]
 80084be:	f001 feed 	bl	800a29c <USBD_LL_Init>
 80084c2:	4603      	mov	r3, r0
 80084c4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80084c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	3718      	adds	r7, #24
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}

080084d0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b084      	sub	sp, #16
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
 80084d8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80084da:	2300      	movs	r3, #0
 80084dc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d101      	bne.n	80084e8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80084e4:	2303      	movs	r3, #3
 80084e6:	e025      	b.n	8008534 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	683a      	ldr	r2, [r7, #0]
 80084ec:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	32ae      	adds	r2, #174	; 0xae
 80084fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008500:	2b00      	cmp	r3, #0
 8008502:	d00f      	beq.n	8008524 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	32ae      	adds	r2, #174	; 0xae
 800850e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008514:	f107 020e 	add.w	r2, r7, #14
 8008518:	4610      	mov	r0, r2
 800851a:	4798      	blx	r3
 800851c:	4602      	mov	r2, r0
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800852a:	1c5a      	adds	r2, r3, #1
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8008532:	2300      	movs	r3, #0
}
 8008534:	4618      	mov	r0, r3
 8008536:	3710      	adds	r7, #16
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}

0800853c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b082      	sub	sp, #8
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f001 fefb 	bl	800a340 <USBD_LL_Start>
 800854a:	4603      	mov	r3, r0
}
 800854c:	4618      	mov	r0, r3
 800854e:	3708      	adds	r7, #8
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}

08008554 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008554:	b480      	push	{r7}
 8008556:	b083      	sub	sp, #12
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800855c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800855e:	4618      	mov	r0, r3
 8008560:	370c      	adds	r7, #12
 8008562:	46bd      	mov	sp, r7
 8008564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008568:	4770      	bx	lr

0800856a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800856a:	b580      	push	{r7, lr}
 800856c:	b084      	sub	sp, #16
 800856e:	af00      	add	r7, sp, #0
 8008570:	6078      	str	r0, [r7, #4]
 8008572:	460b      	mov	r3, r1
 8008574:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008576:	2300      	movs	r3, #0
 8008578:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008580:	2b00      	cmp	r3, #0
 8008582:	d009      	beq.n	8008598 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	78fa      	ldrb	r2, [r7, #3]
 800858e:	4611      	mov	r1, r2
 8008590:	6878      	ldr	r0, [r7, #4]
 8008592:	4798      	blx	r3
 8008594:	4603      	mov	r3, r0
 8008596:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008598:	7bfb      	ldrb	r3, [r7, #15]
}
 800859a:	4618      	mov	r0, r3
 800859c:	3710      	adds	r7, #16
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}

080085a2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80085a2:	b580      	push	{r7, lr}
 80085a4:	b084      	sub	sp, #16
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	6078      	str	r0, [r7, #4]
 80085aa:	460b      	mov	r3, r1
 80085ac:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80085ae:	2300      	movs	r3, #0
 80085b0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085b8:	685b      	ldr	r3, [r3, #4]
 80085ba:	78fa      	ldrb	r2, [r7, #3]
 80085bc:	4611      	mov	r1, r2
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	4798      	blx	r3
 80085c2:	4603      	mov	r3, r0
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d001      	beq.n	80085cc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80085c8:	2303      	movs	r3, #3
 80085ca:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80085cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80085ce:	4618      	mov	r0, r3
 80085d0:	3710      	adds	r7, #16
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bd80      	pop	{r7, pc}

080085d6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80085d6:	b580      	push	{r7, lr}
 80085d8:	b084      	sub	sp, #16
 80085da:	af00      	add	r7, sp, #0
 80085dc:	6078      	str	r0, [r7, #4]
 80085de:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80085e6:	6839      	ldr	r1, [r7, #0]
 80085e8:	4618      	mov	r0, r3
 80085ea:	f001 f908 	bl	80097fe <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2201      	movs	r2, #1
 80085f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80085fc:	461a      	mov	r2, r3
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800860a:	f003 031f 	and.w	r3, r3, #31
 800860e:	2b02      	cmp	r3, #2
 8008610:	d01a      	beq.n	8008648 <USBD_LL_SetupStage+0x72>
 8008612:	2b02      	cmp	r3, #2
 8008614:	d822      	bhi.n	800865c <USBD_LL_SetupStage+0x86>
 8008616:	2b00      	cmp	r3, #0
 8008618:	d002      	beq.n	8008620 <USBD_LL_SetupStage+0x4a>
 800861a:	2b01      	cmp	r3, #1
 800861c:	d00a      	beq.n	8008634 <USBD_LL_SetupStage+0x5e>
 800861e:	e01d      	b.n	800865c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008626:	4619      	mov	r1, r3
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f000 fb5f 	bl	8008cec <USBD_StdDevReq>
 800862e:	4603      	mov	r3, r0
 8008630:	73fb      	strb	r3, [r7, #15]
      break;
 8008632:	e020      	b.n	8008676 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800863a:	4619      	mov	r1, r3
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f000 fbc7 	bl	8008dd0 <USBD_StdItfReq>
 8008642:	4603      	mov	r3, r0
 8008644:	73fb      	strb	r3, [r7, #15]
      break;
 8008646:	e016      	b.n	8008676 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800864e:	4619      	mov	r1, r3
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f000 fc29 	bl	8008ea8 <USBD_StdEPReq>
 8008656:	4603      	mov	r3, r0
 8008658:	73fb      	strb	r3, [r7, #15]
      break;
 800865a:	e00c      	b.n	8008676 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008662:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008666:	b2db      	uxtb	r3, r3
 8008668:	4619      	mov	r1, r3
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f001 fec8 	bl	800a400 <USBD_LL_StallEP>
 8008670:	4603      	mov	r3, r0
 8008672:	73fb      	strb	r3, [r7, #15]
      break;
 8008674:	bf00      	nop
  }

  return ret;
 8008676:	7bfb      	ldrb	r3, [r7, #15]
}
 8008678:	4618      	mov	r0, r3
 800867a:	3710      	adds	r7, #16
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}

08008680 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b086      	sub	sp, #24
 8008684:	af00      	add	r7, sp, #0
 8008686:	60f8      	str	r0, [r7, #12]
 8008688:	460b      	mov	r3, r1
 800868a:	607a      	str	r2, [r7, #4]
 800868c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800868e:	2300      	movs	r3, #0
 8008690:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008692:	7afb      	ldrb	r3, [r7, #11]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d16e      	bne.n	8008776 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800869e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80086a6:	2b03      	cmp	r3, #3
 80086a8:	f040 8098 	bne.w	80087dc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80086ac:	693b      	ldr	r3, [r7, #16]
 80086ae:	689a      	ldr	r2, [r3, #8]
 80086b0:	693b      	ldr	r3, [r7, #16]
 80086b2:	68db      	ldr	r3, [r3, #12]
 80086b4:	429a      	cmp	r2, r3
 80086b6:	d913      	bls.n	80086e0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80086b8:	693b      	ldr	r3, [r7, #16]
 80086ba:	689a      	ldr	r2, [r3, #8]
 80086bc:	693b      	ldr	r3, [r7, #16]
 80086be:	68db      	ldr	r3, [r3, #12]
 80086c0:	1ad2      	subs	r2, r2, r3
 80086c2:	693b      	ldr	r3, [r7, #16]
 80086c4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80086c6:	693b      	ldr	r3, [r7, #16]
 80086c8:	68da      	ldr	r2, [r3, #12]
 80086ca:	693b      	ldr	r3, [r7, #16]
 80086cc:	689b      	ldr	r3, [r3, #8]
 80086ce:	4293      	cmp	r3, r2
 80086d0:	bf28      	it	cs
 80086d2:	4613      	movcs	r3, r2
 80086d4:	461a      	mov	r2, r3
 80086d6:	6879      	ldr	r1, [r7, #4]
 80086d8:	68f8      	ldr	r0, [r7, #12]
 80086da:	f001 f984 	bl	80099e6 <USBD_CtlContinueRx>
 80086de:	e07d      	b.n	80087dc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80086e6:	f003 031f 	and.w	r3, r3, #31
 80086ea:	2b02      	cmp	r3, #2
 80086ec:	d014      	beq.n	8008718 <USBD_LL_DataOutStage+0x98>
 80086ee:	2b02      	cmp	r3, #2
 80086f0:	d81d      	bhi.n	800872e <USBD_LL_DataOutStage+0xae>
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d002      	beq.n	80086fc <USBD_LL_DataOutStage+0x7c>
 80086f6:	2b01      	cmp	r3, #1
 80086f8:	d003      	beq.n	8008702 <USBD_LL_DataOutStage+0x82>
 80086fa:	e018      	b.n	800872e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80086fc:	2300      	movs	r3, #0
 80086fe:	75bb      	strb	r3, [r7, #22]
            break;
 8008700:	e018      	b.n	8008734 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008708:	b2db      	uxtb	r3, r3
 800870a:	4619      	mov	r1, r3
 800870c:	68f8      	ldr	r0, [r7, #12]
 800870e:	f000 fa5e 	bl	8008bce <USBD_CoreFindIF>
 8008712:	4603      	mov	r3, r0
 8008714:	75bb      	strb	r3, [r7, #22]
            break;
 8008716:	e00d      	b.n	8008734 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800871e:	b2db      	uxtb	r3, r3
 8008720:	4619      	mov	r1, r3
 8008722:	68f8      	ldr	r0, [r7, #12]
 8008724:	f000 fa60 	bl	8008be8 <USBD_CoreFindEP>
 8008728:	4603      	mov	r3, r0
 800872a:	75bb      	strb	r3, [r7, #22]
            break;
 800872c:	e002      	b.n	8008734 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800872e:	2300      	movs	r3, #0
 8008730:	75bb      	strb	r3, [r7, #22]
            break;
 8008732:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008734:	7dbb      	ldrb	r3, [r7, #22]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d119      	bne.n	800876e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008740:	b2db      	uxtb	r3, r3
 8008742:	2b03      	cmp	r3, #3
 8008744:	d113      	bne.n	800876e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008746:	7dba      	ldrb	r2, [r7, #22]
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	32ae      	adds	r2, #174	; 0xae
 800874c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008750:	691b      	ldr	r3, [r3, #16]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d00b      	beq.n	800876e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008756:	7dba      	ldrb	r2, [r7, #22]
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800875e:	7dba      	ldrb	r2, [r7, #22]
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	32ae      	adds	r2, #174	; 0xae
 8008764:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008768:	691b      	ldr	r3, [r3, #16]
 800876a:	68f8      	ldr	r0, [r7, #12]
 800876c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800876e:	68f8      	ldr	r0, [r7, #12]
 8008770:	f001 f94a 	bl	8009a08 <USBD_CtlSendStatus>
 8008774:	e032      	b.n	80087dc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008776:	7afb      	ldrb	r3, [r7, #11]
 8008778:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800877c:	b2db      	uxtb	r3, r3
 800877e:	4619      	mov	r1, r3
 8008780:	68f8      	ldr	r0, [r7, #12]
 8008782:	f000 fa31 	bl	8008be8 <USBD_CoreFindEP>
 8008786:	4603      	mov	r3, r0
 8008788:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800878a:	7dbb      	ldrb	r3, [r7, #22]
 800878c:	2bff      	cmp	r3, #255	; 0xff
 800878e:	d025      	beq.n	80087dc <USBD_LL_DataOutStage+0x15c>
 8008790:	7dbb      	ldrb	r3, [r7, #22]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d122      	bne.n	80087dc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800879c:	b2db      	uxtb	r3, r3
 800879e:	2b03      	cmp	r3, #3
 80087a0:	d117      	bne.n	80087d2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80087a2:	7dba      	ldrb	r2, [r7, #22]
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	32ae      	adds	r2, #174	; 0xae
 80087a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087ac:	699b      	ldr	r3, [r3, #24]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d00f      	beq.n	80087d2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80087b2:	7dba      	ldrb	r2, [r7, #22]
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80087ba:	7dba      	ldrb	r2, [r7, #22]
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	32ae      	adds	r2, #174	; 0xae
 80087c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087c4:	699b      	ldr	r3, [r3, #24]
 80087c6:	7afa      	ldrb	r2, [r7, #11]
 80087c8:	4611      	mov	r1, r2
 80087ca:	68f8      	ldr	r0, [r7, #12]
 80087cc:	4798      	blx	r3
 80087ce:	4603      	mov	r3, r0
 80087d0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80087d2:	7dfb      	ldrb	r3, [r7, #23]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d001      	beq.n	80087dc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80087d8:	7dfb      	ldrb	r3, [r7, #23]
 80087da:	e000      	b.n	80087de <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80087dc:	2300      	movs	r3, #0
}
 80087de:	4618      	mov	r0, r3
 80087e0:	3718      	adds	r7, #24
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}

080087e6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80087e6:	b580      	push	{r7, lr}
 80087e8:	b086      	sub	sp, #24
 80087ea:	af00      	add	r7, sp, #0
 80087ec:	60f8      	str	r0, [r7, #12]
 80087ee:	460b      	mov	r3, r1
 80087f0:	607a      	str	r2, [r7, #4]
 80087f2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80087f4:	7afb      	ldrb	r3, [r7, #11]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d16f      	bne.n	80088da <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	3314      	adds	r3, #20
 80087fe:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008806:	2b02      	cmp	r3, #2
 8008808:	d15a      	bne.n	80088c0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800880a:	693b      	ldr	r3, [r7, #16]
 800880c:	689a      	ldr	r2, [r3, #8]
 800880e:	693b      	ldr	r3, [r7, #16]
 8008810:	68db      	ldr	r3, [r3, #12]
 8008812:	429a      	cmp	r2, r3
 8008814:	d914      	bls.n	8008840 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008816:	693b      	ldr	r3, [r7, #16]
 8008818:	689a      	ldr	r2, [r3, #8]
 800881a:	693b      	ldr	r3, [r7, #16]
 800881c:	68db      	ldr	r3, [r3, #12]
 800881e:	1ad2      	subs	r2, r2, r3
 8008820:	693b      	ldr	r3, [r7, #16]
 8008822:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008824:	693b      	ldr	r3, [r7, #16]
 8008826:	689b      	ldr	r3, [r3, #8]
 8008828:	461a      	mov	r2, r3
 800882a:	6879      	ldr	r1, [r7, #4]
 800882c:	68f8      	ldr	r0, [r7, #12]
 800882e:	f001 f8ac 	bl	800998a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008832:	2300      	movs	r3, #0
 8008834:	2200      	movs	r2, #0
 8008836:	2100      	movs	r1, #0
 8008838:	68f8      	ldr	r0, [r7, #12]
 800883a:	f001 fe8b 	bl	800a554 <USBD_LL_PrepareReceive>
 800883e:	e03f      	b.n	80088c0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008840:	693b      	ldr	r3, [r7, #16]
 8008842:	68da      	ldr	r2, [r3, #12]
 8008844:	693b      	ldr	r3, [r7, #16]
 8008846:	689b      	ldr	r3, [r3, #8]
 8008848:	429a      	cmp	r2, r3
 800884a:	d11c      	bne.n	8008886 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800884c:	693b      	ldr	r3, [r7, #16]
 800884e:	685a      	ldr	r2, [r3, #4]
 8008850:	693b      	ldr	r3, [r7, #16]
 8008852:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008854:	429a      	cmp	r2, r3
 8008856:	d316      	bcc.n	8008886 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008858:	693b      	ldr	r3, [r7, #16]
 800885a:	685a      	ldr	r2, [r3, #4]
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008862:	429a      	cmp	r2, r3
 8008864:	d20f      	bcs.n	8008886 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008866:	2200      	movs	r2, #0
 8008868:	2100      	movs	r1, #0
 800886a:	68f8      	ldr	r0, [r7, #12]
 800886c:	f001 f88d 	bl	800998a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	2200      	movs	r2, #0
 8008874:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008878:	2300      	movs	r3, #0
 800887a:	2200      	movs	r2, #0
 800887c:	2100      	movs	r1, #0
 800887e:	68f8      	ldr	r0, [r7, #12]
 8008880:	f001 fe68 	bl	800a554 <USBD_LL_PrepareReceive>
 8008884:	e01c      	b.n	80088c0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800888c:	b2db      	uxtb	r3, r3
 800888e:	2b03      	cmp	r3, #3
 8008890:	d10f      	bne.n	80088b2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008898:	68db      	ldr	r3, [r3, #12]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d009      	beq.n	80088b2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	2200      	movs	r2, #0
 80088a2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088ac:	68db      	ldr	r3, [r3, #12]
 80088ae:	68f8      	ldr	r0, [r7, #12]
 80088b0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80088b2:	2180      	movs	r1, #128	; 0x80
 80088b4:	68f8      	ldr	r0, [r7, #12]
 80088b6:	f001 fda3 	bl	800a400 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80088ba:	68f8      	ldr	r0, [r7, #12]
 80088bc:	f001 f8b7 	bl	8009a2e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d03a      	beq.n	8008940 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80088ca:	68f8      	ldr	r0, [r7, #12]
 80088cc:	f7ff fe42 	bl	8008554 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	2200      	movs	r2, #0
 80088d4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80088d8:	e032      	b.n	8008940 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80088da:	7afb      	ldrb	r3, [r7, #11]
 80088dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80088e0:	b2db      	uxtb	r3, r3
 80088e2:	4619      	mov	r1, r3
 80088e4:	68f8      	ldr	r0, [r7, #12]
 80088e6:	f000 f97f 	bl	8008be8 <USBD_CoreFindEP>
 80088ea:	4603      	mov	r3, r0
 80088ec:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80088ee:	7dfb      	ldrb	r3, [r7, #23]
 80088f0:	2bff      	cmp	r3, #255	; 0xff
 80088f2:	d025      	beq.n	8008940 <USBD_LL_DataInStage+0x15a>
 80088f4:	7dfb      	ldrb	r3, [r7, #23]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d122      	bne.n	8008940 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008900:	b2db      	uxtb	r3, r3
 8008902:	2b03      	cmp	r3, #3
 8008904:	d11c      	bne.n	8008940 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008906:	7dfa      	ldrb	r2, [r7, #23]
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	32ae      	adds	r2, #174	; 0xae
 800890c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008910:	695b      	ldr	r3, [r3, #20]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d014      	beq.n	8008940 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008916:	7dfa      	ldrb	r2, [r7, #23]
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800891e:	7dfa      	ldrb	r2, [r7, #23]
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	32ae      	adds	r2, #174	; 0xae
 8008924:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008928:	695b      	ldr	r3, [r3, #20]
 800892a:	7afa      	ldrb	r2, [r7, #11]
 800892c:	4611      	mov	r1, r2
 800892e:	68f8      	ldr	r0, [r7, #12]
 8008930:	4798      	blx	r3
 8008932:	4603      	mov	r3, r0
 8008934:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008936:	7dbb      	ldrb	r3, [r7, #22]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d001      	beq.n	8008940 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800893c:	7dbb      	ldrb	r3, [r7, #22]
 800893e:	e000      	b.n	8008942 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008940:	2300      	movs	r3, #0
}
 8008942:	4618      	mov	r0, r3
 8008944:	3718      	adds	r7, #24
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}

0800894a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800894a:	b580      	push	{r7, lr}
 800894c:	b084      	sub	sp, #16
 800894e:	af00      	add	r7, sp, #0
 8008950:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008952:	2300      	movs	r3, #0
 8008954:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2201      	movs	r2, #1
 800895a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2200      	movs	r2, #0
 8008962:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2200      	movs	r2, #0
 800896a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2200      	movs	r2, #0
 8008970:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2200      	movs	r2, #0
 8008978:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008982:	2b00      	cmp	r3, #0
 8008984:	d014      	beq.n	80089b0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800898c:	685b      	ldr	r3, [r3, #4]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d00e      	beq.n	80089b0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008998:	685b      	ldr	r3, [r3, #4]
 800899a:	687a      	ldr	r2, [r7, #4]
 800899c:	6852      	ldr	r2, [r2, #4]
 800899e:	b2d2      	uxtb	r2, r2
 80089a0:	4611      	mov	r1, r2
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	4798      	blx	r3
 80089a6:	4603      	mov	r3, r0
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d001      	beq.n	80089b0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80089ac:	2303      	movs	r3, #3
 80089ae:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80089b0:	2340      	movs	r3, #64	; 0x40
 80089b2:	2200      	movs	r2, #0
 80089b4:	2100      	movs	r1, #0
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f001 fcdd 	bl	800a376 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2201      	movs	r2, #1
 80089c0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2240      	movs	r2, #64	; 0x40
 80089c8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80089cc:	2340      	movs	r3, #64	; 0x40
 80089ce:	2200      	movs	r2, #0
 80089d0:	2180      	movs	r1, #128	; 0x80
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f001 fccf 	bl	800a376 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2201      	movs	r2, #1
 80089dc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2240      	movs	r2, #64	; 0x40
 80089e2:	621a      	str	r2, [r3, #32]

  return ret;
 80089e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3710      	adds	r7, #16
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}

080089ee <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80089ee:	b480      	push	{r7}
 80089f0:	b083      	sub	sp, #12
 80089f2:	af00      	add	r7, sp, #0
 80089f4:	6078      	str	r0, [r7, #4]
 80089f6:	460b      	mov	r3, r1
 80089f8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	78fa      	ldrb	r2, [r7, #3]
 80089fe:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008a00:	2300      	movs	r3, #0
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	370c      	adds	r7, #12
 8008a06:	46bd      	mov	sp, r7
 8008a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0c:	4770      	bx	lr

08008a0e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008a0e:	b480      	push	{r7}
 8008a10:	b083      	sub	sp, #12
 8008a12:	af00      	add	r7, sp, #0
 8008a14:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a1c:	b2da      	uxtb	r2, r3
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2204      	movs	r2, #4
 8008a28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008a2c:	2300      	movs	r3, #0
}
 8008a2e:	4618      	mov	r0, r3
 8008a30:	370c      	adds	r7, #12
 8008a32:	46bd      	mov	sp, r7
 8008a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a38:	4770      	bx	lr

08008a3a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008a3a:	b480      	push	{r7}
 8008a3c:	b083      	sub	sp, #12
 8008a3e:	af00      	add	r7, sp, #0
 8008a40:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a48:	b2db      	uxtb	r3, r3
 8008a4a:	2b04      	cmp	r3, #4
 8008a4c:	d106      	bne.n	8008a5c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008a54:	b2da      	uxtb	r2, r3
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008a5c:	2300      	movs	r3, #0
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	370c      	adds	r7, #12
 8008a62:	46bd      	mov	sp, r7
 8008a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a68:	4770      	bx	lr

08008a6a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008a6a:	b580      	push	{r7, lr}
 8008a6c:	b082      	sub	sp, #8
 8008a6e:	af00      	add	r7, sp, #0
 8008a70:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a78:	b2db      	uxtb	r3, r3
 8008a7a:	2b03      	cmp	r3, #3
 8008a7c:	d110      	bne.n	8008aa0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d00b      	beq.n	8008aa0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a8e:	69db      	ldr	r3, [r3, #28]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d005      	beq.n	8008aa0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a9a:	69db      	ldr	r3, [r3, #28]
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008aa0:	2300      	movs	r3, #0
}
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	3708      	adds	r7, #8
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	bd80      	pop	{r7, pc}

08008aaa <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008aaa:	b580      	push	{r7, lr}
 8008aac:	b082      	sub	sp, #8
 8008aae:	af00      	add	r7, sp, #0
 8008ab0:	6078      	str	r0, [r7, #4]
 8008ab2:	460b      	mov	r3, r1
 8008ab4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	32ae      	adds	r2, #174	; 0xae
 8008ac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d101      	bne.n	8008acc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008ac8:	2303      	movs	r3, #3
 8008aca:	e01c      	b.n	8008b06 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ad2:	b2db      	uxtb	r3, r3
 8008ad4:	2b03      	cmp	r3, #3
 8008ad6:	d115      	bne.n	8008b04 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	32ae      	adds	r2, #174	; 0xae
 8008ae2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ae6:	6a1b      	ldr	r3, [r3, #32]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d00b      	beq.n	8008b04 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	32ae      	adds	r2, #174	; 0xae
 8008af6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008afa:	6a1b      	ldr	r3, [r3, #32]
 8008afc:	78fa      	ldrb	r2, [r7, #3]
 8008afe:	4611      	mov	r1, r2
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008b04:	2300      	movs	r3, #0
}
 8008b06:	4618      	mov	r0, r3
 8008b08:	3708      	adds	r7, #8
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bd80      	pop	{r7, pc}

08008b0e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008b0e:	b580      	push	{r7, lr}
 8008b10:	b082      	sub	sp, #8
 8008b12:	af00      	add	r7, sp, #0
 8008b14:	6078      	str	r0, [r7, #4]
 8008b16:	460b      	mov	r3, r1
 8008b18:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	32ae      	adds	r2, #174	; 0xae
 8008b24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d101      	bne.n	8008b30 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008b2c:	2303      	movs	r3, #3
 8008b2e:	e01c      	b.n	8008b6a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b36:	b2db      	uxtb	r3, r3
 8008b38:	2b03      	cmp	r3, #3
 8008b3a:	d115      	bne.n	8008b68 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	32ae      	adds	r2, #174	; 0xae
 8008b46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d00b      	beq.n	8008b68 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	32ae      	adds	r2, #174	; 0xae
 8008b5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b60:	78fa      	ldrb	r2, [r7, #3]
 8008b62:	4611      	mov	r1, r2
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008b68:	2300      	movs	r3, #0
}
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	3708      	adds	r7, #8
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bd80      	pop	{r7, pc}

08008b72 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008b72:	b480      	push	{r7}
 8008b74:	b083      	sub	sp, #12
 8008b76:	af00      	add	r7, sp, #0
 8008b78:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008b7a:	2300      	movs	r3, #0
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	370c      	adds	r7, #12
 8008b80:	46bd      	mov	sp, r7
 8008b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b86:	4770      	bx	lr

08008b88 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b084      	sub	sp, #16
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008b90:	2300      	movs	r3, #0
 8008b92:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2201      	movs	r2, #1
 8008b98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d00e      	beq.n	8008bc4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bac:	685b      	ldr	r3, [r3, #4]
 8008bae:	687a      	ldr	r2, [r7, #4]
 8008bb0:	6852      	ldr	r2, [r2, #4]
 8008bb2:	b2d2      	uxtb	r2, r2
 8008bb4:	4611      	mov	r1, r2
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	4798      	blx	r3
 8008bba:	4603      	mov	r3, r0
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d001      	beq.n	8008bc4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008bc0:	2303      	movs	r3, #3
 8008bc2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	3710      	adds	r7, #16
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}

08008bce <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008bce:	b480      	push	{r7}
 8008bd0:	b083      	sub	sp, #12
 8008bd2:	af00      	add	r7, sp, #0
 8008bd4:	6078      	str	r0, [r7, #4]
 8008bd6:	460b      	mov	r3, r1
 8008bd8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008bda:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008bdc:	4618      	mov	r0, r3
 8008bde:	370c      	adds	r7, #12
 8008be0:	46bd      	mov	sp, r7
 8008be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be6:	4770      	bx	lr

08008be8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008be8:	b480      	push	{r7}
 8008bea:	b083      	sub	sp, #12
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
 8008bf0:	460b      	mov	r3, r1
 8008bf2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008bf4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	370c      	adds	r7, #12
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c00:	4770      	bx	lr

08008c02 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008c02:	b580      	push	{r7, lr}
 8008c04:	b086      	sub	sp, #24
 8008c06:	af00      	add	r7, sp, #0
 8008c08:	6078      	str	r0, [r7, #4]
 8008c0a:	460b      	mov	r3, r1
 8008c0c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008c16:	2300      	movs	r3, #0
 8008c18:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	885b      	ldrh	r3, [r3, #2]
 8008c1e:	b29a      	uxth	r2, r3
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	781b      	ldrb	r3, [r3, #0]
 8008c24:	b29b      	uxth	r3, r3
 8008c26:	429a      	cmp	r2, r3
 8008c28:	d920      	bls.n	8008c6c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	781b      	ldrb	r3, [r3, #0]
 8008c2e:	b29b      	uxth	r3, r3
 8008c30:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008c32:	e013      	b.n	8008c5c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008c34:	f107 030a 	add.w	r3, r7, #10
 8008c38:	4619      	mov	r1, r3
 8008c3a:	6978      	ldr	r0, [r7, #20]
 8008c3c:	f000 f81b 	bl	8008c76 <USBD_GetNextDesc>
 8008c40:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008c42:	697b      	ldr	r3, [r7, #20]
 8008c44:	785b      	ldrb	r3, [r3, #1]
 8008c46:	2b05      	cmp	r3, #5
 8008c48:	d108      	bne.n	8008c5c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008c4a:	697b      	ldr	r3, [r7, #20]
 8008c4c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	789b      	ldrb	r3, [r3, #2]
 8008c52:	78fa      	ldrb	r2, [r7, #3]
 8008c54:	429a      	cmp	r2, r3
 8008c56:	d008      	beq.n	8008c6a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008c58:	2300      	movs	r3, #0
 8008c5a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	885b      	ldrh	r3, [r3, #2]
 8008c60:	b29a      	uxth	r2, r3
 8008c62:	897b      	ldrh	r3, [r7, #10]
 8008c64:	429a      	cmp	r2, r3
 8008c66:	d8e5      	bhi.n	8008c34 <USBD_GetEpDesc+0x32>
 8008c68:	e000      	b.n	8008c6c <USBD_GetEpDesc+0x6a>
          break;
 8008c6a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008c6c:	693b      	ldr	r3, [r7, #16]
}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	3718      	adds	r7, #24
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}

08008c76 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008c76:	b480      	push	{r7}
 8008c78:	b085      	sub	sp, #20
 8008c7a:	af00      	add	r7, sp, #0
 8008c7c:	6078      	str	r0, [r7, #4]
 8008c7e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	881a      	ldrh	r2, [r3, #0]
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	781b      	ldrb	r3, [r3, #0]
 8008c8c:	b29b      	uxth	r3, r3
 8008c8e:	4413      	add	r3, r2
 8008c90:	b29a      	uxth	r2, r3
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	781b      	ldrb	r3, [r3, #0]
 8008c9a:	461a      	mov	r2, r3
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	4413      	add	r3, r2
 8008ca0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008ca2:	68fb      	ldr	r3, [r7, #12]
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	3714      	adds	r7, #20
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cae:	4770      	bx	lr

08008cb0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	b087      	sub	sp, #28
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008cbc:	697b      	ldr	r3, [r7, #20]
 8008cbe:	781b      	ldrb	r3, [r3, #0]
 8008cc0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008cc2:	697b      	ldr	r3, [r7, #20]
 8008cc4:	3301      	adds	r3, #1
 8008cc6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008cc8:	697b      	ldr	r3, [r7, #20]
 8008cca:	781b      	ldrb	r3, [r3, #0]
 8008ccc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008cce:	8a3b      	ldrh	r3, [r7, #16]
 8008cd0:	021b      	lsls	r3, r3, #8
 8008cd2:	b21a      	sxth	r2, r3
 8008cd4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008cd8:	4313      	orrs	r3, r2
 8008cda:	b21b      	sxth	r3, r3
 8008cdc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008cde:	89fb      	ldrh	r3, [r7, #14]
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	371c      	adds	r7, #28
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cea:	4770      	bx	lr

08008cec <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b084      	sub	sp, #16
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
 8008cf4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	781b      	ldrb	r3, [r3, #0]
 8008cfe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008d02:	2b40      	cmp	r3, #64	; 0x40
 8008d04:	d005      	beq.n	8008d12 <USBD_StdDevReq+0x26>
 8008d06:	2b40      	cmp	r3, #64	; 0x40
 8008d08:	d857      	bhi.n	8008dba <USBD_StdDevReq+0xce>
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d00f      	beq.n	8008d2e <USBD_StdDevReq+0x42>
 8008d0e:	2b20      	cmp	r3, #32
 8008d10:	d153      	bne.n	8008dba <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	32ae      	adds	r2, #174	; 0xae
 8008d1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d20:	689b      	ldr	r3, [r3, #8]
 8008d22:	6839      	ldr	r1, [r7, #0]
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	4798      	blx	r3
 8008d28:	4603      	mov	r3, r0
 8008d2a:	73fb      	strb	r3, [r7, #15]
      break;
 8008d2c:	e04a      	b.n	8008dc4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	785b      	ldrb	r3, [r3, #1]
 8008d32:	2b09      	cmp	r3, #9
 8008d34:	d83b      	bhi.n	8008dae <USBD_StdDevReq+0xc2>
 8008d36:	a201      	add	r2, pc, #4	; (adr r2, 8008d3c <USBD_StdDevReq+0x50>)
 8008d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d3c:	08008d91 	.word	0x08008d91
 8008d40:	08008da5 	.word	0x08008da5
 8008d44:	08008daf 	.word	0x08008daf
 8008d48:	08008d9b 	.word	0x08008d9b
 8008d4c:	08008daf 	.word	0x08008daf
 8008d50:	08008d6f 	.word	0x08008d6f
 8008d54:	08008d65 	.word	0x08008d65
 8008d58:	08008daf 	.word	0x08008daf
 8008d5c:	08008d87 	.word	0x08008d87
 8008d60:	08008d79 	.word	0x08008d79
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008d64:	6839      	ldr	r1, [r7, #0]
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f000 fa3c 	bl	80091e4 <USBD_GetDescriptor>
          break;
 8008d6c:	e024      	b.n	8008db8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008d6e:	6839      	ldr	r1, [r7, #0]
 8008d70:	6878      	ldr	r0, [r7, #4]
 8008d72:	f000 fba1 	bl	80094b8 <USBD_SetAddress>
          break;
 8008d76:	e01f      	b.n	8008db8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008d78:	6839      	ldr	r1, [r7, #0]
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f000 fbe0 	bl	8009540 <USBD_SetConfig>
 8008d80:	4603      	mov	r3, r0
 8008d82:	73fb      	strb	r3, [r7, #15]
          break;
 8008d84:	e018      	b.n	8008db8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008d86:	6839      	ldr	r1, [r7, #0]
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	f000 fc83 	bl	8009694 <USBD_GetConfig>
          break;
 8008d8e:	e013      	b.n	8008db8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008d90:	6839      	ldr	r1, [r7, #0]
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f000 fcb4 	bl	8009700 <USBD_GetStatus>
          break;
 8008d98:	e00e      	b.n	8008db8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008d9a:	6839      	ldr	r1, [r7, #0]
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	f000 fce3 	bl	8009768 <USBD_SetFeature>
          break;
 8008da2:	e009      	b.n	8008db8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008da4:	6839      	ldr	r1, [r7, #0]
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	f000 fd07 	bl	80097ba <USBD_ClrFeature>
          break;
 8008dac:	e004      	b.n	8008db8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008dae:	6839      	ldr	r1, [r7, #0]
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f000 fd5e 	bl	8009872 <USBD_CtlError>
          break;
 8008db6:	bf00      	nop
      }
      break;
 8008db8:	e004      	b.n	8008dc4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008dba:	6839      	ldr	r1, [r7, #0]
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f000 fd58 	bl	8009872 <USBD_CtlError>
      break;
 8008dc2:	bf00      	nop
  }

  return ret;
 8008dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	3710      	adds	r7, #16
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}
 8008dce:	bf00      	nop

08008dd0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b084      	sub	sp, #16
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
 8008dd8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	781b      	ldrb	r3, [r3, #0]
 8008de2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008de6:	2b40      	cmp	r3, #64	; 0x40
 8008de8:	d005      	beq.n	8008df6 <USBD_StdItfReq+0x26>
 8008dea:	2b40      	cmp	r3, #64	; 0x40
 8008dec:	d852      	bhi.n	8008e94 <USBD_StdItfReq+0xc4>
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d001      	beq.n	8008df6 <USBD_StdItfReq+0x26>
 8008df2:	2b20      	cmp	r3, #32
 8008df4:	d14e      	bne.n	8008e94 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dfc:	b2db      	uxtb	r3, r3
 8008dfe:	3b01      	subs	r3, #1
 8008e00:	2b02      	cmp	r3, #2
 8008e02:	d840      	bhi.n	8008e86 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	889b      	ldrh	r3, [r3, #4]
 8008e08:	b2db      	uxtb	r3, r3
 8008e0a:	2b01      	cmp	r3, #1
 8008e0c:	d836      	bhi.n	8008e7c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	889b      	ldrh	r3, [r3, #4]
 8008e12:	b2db      	uxtb	r3, r3
 8008e14:	4619      	mov	r1, r3
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f7ff fed9 	bl	8008bce <USBD_CoreFindIF>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008e20:	7bbb      	ldrb	r3, [r7, #14]
 8008e22:	2bff      	cmp	r3, #255	; 0xff
 8008e24:	d01d      	beq.n	8008e62 <USBD_StdItfReq+0x92>
 8008e26:	7bbb      	ldrb	r3, [r7, #14]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d11a      	bne.n	8008e62 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008e2c:	7bba      	ldrb	r2, [r7, #14]
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	32ae      	adds	r2, #174	; 0xae
 8008e32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e36:	689b      	ldr	r3, [r3, #8]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d00f      	beq.n	8008e5c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008e3c:	7bba      	ldrb	r2, [r7, #14]
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008e44:	7bba      	ldrb	r2, [r7, #14]
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	32ae      	adds	r2, #174	; 0xae
 8008e4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e4e:	689b      	ldr	r3, [r3, #8]
 8008e50:	6839      	ldr	r1, [r7, #0]
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	4798      	blx	r3
 8008e56:	4603      	mov	r3, r0
 8008e58:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008e5a:	e004      	b.n	8008e66 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008e5c:	2303      	movs	r3, #3
 8008e5e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008e60:	e001      	b.n	8008e66 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008e62:	2303      	movs	r3, #3
 8008e64:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	88db      	ldrh	r3, [r3, #6]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d110      	bne.n	8008e90 <USBD_StdItfReq+0xc0>
 8008e6e:	7bfb      	ldrb	r3, [r7, #15]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d10d      	bne.n	8008e90 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	f000 fdc7 	bl	8009a08 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008e7a:	e009      	b.n	8008e90 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008e7c:	6839      	ldr	r1, [r7, #0]
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f000 fcf7 	bl	8009872 <USBD_CtlError>
          break;
 8008e84:	e004      	b.n	8008e90 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008e86:	6839      	ldr	r1, [r7, #0]
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f000 fcf2 	bl	8009872 <USBD_CtlError>
          break;
 8008e8e:	e000      	b.n	8008e92 <USBD_StdItfReq+0xc2>
          break;
 8008e90:	bf00      	nop
      }
      break;
 8008e92:	e004      	b.n	8008e9e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008e94:	6839      	ldr	r1, [r7, #0]
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f000 fceb 	bl	8009872 <USBD_CtlError>
      break;
 8008e9c:	bf00      	nop
  }

  return ret;
 8008e9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	3710      	adds	r7, #16
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd80      	pop	{r7, pc}

08008ea8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b084      	sub	sp, #16
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
 8008eb0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	889b      	ldrh	r3, [r3, #4]
 8008eba:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	781b      	ldrb	r3, [r3, #0]
 8008ec0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008ec4:	2b40      	cmp	r3, #64	; 0x40
 8008ec6:	d007      	beq.n	8008ed8 <USBD_StdEPReq+0x30>
 8008ec8:	2b40      	cmp	r3, #64	; 0x40
 8008eca:	f200 817f 	bhi.w	80091cc <USBD_StdEPReq+0x324>
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d02a      	beq.n	8008f28 <USBD_StdEPReq+0x80>
 8008ed2:	2b20      	cmp	r3, #32
 8008ed4:	f040 817a 	bne.w	80091cc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008ed8:	7bbb      	ldrb	r3, [r7, #14]
 8008eda:	4619      	mov	r1, r3
 8008edc:	6878      	ldr	r0, [r7, #4]
 8008ede:	f7ff fe83 	bl	8008be8 <USBD_CoreFindEP>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008ee6:	7b7b      	ldrb	r3, [r7, #13]
 8008ee8:	2bff      	cmp	r3, #255	; 0xff
 8008eea:	f000 8174 	beq.w	80091d6 <USBD_StdEPReq+0x32e>
 8008eee:	7b7b      	ldrb	r3, [r7, #13]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	f040 8170 	bne.w	80091d6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008ef6:	7b7a      	ldrb	r2, [r7, #13]
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008efe:	7b7a      	ldrb	r2, [r7, #13]
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	32ae      	adds	r2, #174	; 0xae
 8008f04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f08:	689b      	ldr	r3, [r3, #8]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	f000 8163 	beq.w	80091d6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008f10:	7b7a      	ldrb	r2, [r7, #13]
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	32ae      	adds	r2, #174	; 0xae
 8008f16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f1a:	689b      	ldr	r3, [r3, #8]
 8008f1c:	6839      	ldr	r1, [r7, #0]
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	4798      	blx	r3
 8008f22:	4603      	mov	r3, r0
 8008f24:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008f26:	e156      	b.n	80091d6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	785b      	ldrb	r3, [r3, #1]
 8008f2c:	2b03      	cmp	r3, #3
 8008f2e:	d008      	beq.n	8008f42 <USBD_StdEPReq+0x9a>
 8008f30:	2b03      	cmp	r3, #3
 8008f32:	f300 8145 	bgt.w	80091c0 <USBD_StdEPReq+0x318>
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	f000 809b 	beq.w	8009072 <USBD_StdEPReq+0x1ca>
 8008f3c:	2b01      	cmp	r3, #1
 8008f3e:	d03c      	beq.n	8008fba <USBD_StdEPReq+0x112>
 8008f40:	e13e      	b.n	80091c0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f48:	b2db      	uxtb	r3, r3
 8008f4a:	2b02      	cmp	r3, #2
 8008f4c:	d002      	beq.n	8008f54 <USBD_StdEPReq+0xac>
 8008f4e:	2b03      	cmp	r3, #3
 8008f50:	d016      	beq.n	8008f80 <USBD_StdEPReq+0xd8>
 8008f52:	e02c      	b.n	8008fae <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008f54:	7bbb      	ldrb	r3, [r7, #14]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d00d      	beq.n	8008f76 <USBD_StdEPReq+0xce>
 8008f5a:	7bbb      	ldrb	r3, [r7, #14]
 8008f5c:	2b80      	cmp	r3, #128	; 0x80
 8008f5e:	d00a      	beq.n	8008f76 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008f60:	7bbb      	ldrb	r3, [r7, #14]
 8008f62:	4619      	mov	r1, r3
 8008f64:	6878      	ldr	r0, [r7, #4]
 8008f66:	f001 fa4b 	bl	800a400 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008f6a:	2180      	movs	r1, #128	; 0x80
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f001 fa47 	bl	800a400 <USBD_LL_StallEP>
 8008f72:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008f74:	e020      	b.n	8008fb8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008f76:	6839      	ldr	r1, [r7, #0]
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f000 fc7a 	bl	8009872 <USBD_CtlError>
              break;
 8008f7e:	e01b      	b.n	8008fb8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	885b      	ldrh	r3, [r3, #2]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d10e      	bne.n	8008fa6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008f88:	7bbb      	ldrb	r3, [r7, #14]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d00b      	beq.n	8008fa6 <USBD_StdEPReq+0xfe>
 8008f8e:	7bbb      	ldrb	r3, [r7, #14]
 8008f90:	2b80      	cmp	r3, #128	; 0x80
 8008f92:	d008      	beq.n	8008fa6 <USBD_StdEPReq+0xfe>
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	88db      	ldrh	r3, [r3, #6]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d104      	bne.n	8008fa6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008f9c:	7bbb      	ldrb	r3, [r7, #14]
 8008f9e:	4619      	mov	r1, r3
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f001 fa2d 	bl	800a400 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f000 fd2e 	bl	8009a08 <USBD_CtlSendStatus>

              break;
 8008fac:	e004      	b.n	8008fb8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008fae:	6839      	ldr	r1, [r7, #0]
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	f000 fc5e 	bl	8009872 <USBD_CtlError>
              break;
 8008fb6:	bf00      	nop
          }
          break;
 8008fb8:	e107      	b.n	80091ca <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fc0:	b2db      	uxtb	r3, r3
 8008fc2:	2b02      	cmp	r3, #2
 8008fc4:	d002      	beq.n	8008fcc <USBD_StdEPReq+0x124>
 8008fc6:	2b03      	cmp	r3, #3
 8008fc8:	d016      	beq.n	8008ff8 <USBD_StdEPReq+0x150>
 8008fca:	e04b      	b.n	8009064 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008fcc:	7bbb      	ldrb	r3, [r7, #14]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d00d      	beq.n	8008fee <USBD_StdEPReq+0x146>
 8008fd2:	7bbb      	ldrb	r3, [r7, #14]
 8008fd4:	2b80      	cmp	r3, #128	; 0x80
 8008fd6:	d00a      	beq.n	8008fee <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008fd8:	7bbb      	ldrb	r3, [r7, #14]
 8008fda:	4619      	mov	r1, r3
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f001 fa0f 	bl	800a400 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008fe2:	2180      	movs	r1, #128	; 0x80
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f001 fa0b 	bl	800a400 <USBD_LL_StallEP>
 8008fea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008fec:	e040      	b.n	8009070 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008fee:	6839      	ldr	r1, [r7, #0]
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f000 fc3e 	bl	8009872 <USBD_CtlError>
              break;
 8008ff6:	e03b      	b.n	8009070 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	885b      	ldrh	r3, [r3, #2]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d136      	bne.n	800906e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009000:	7bbb      	ldrb	r3, [r7, #14]
 8009002:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009006:	2b00      	cmp	r3, #0
 8009008:	d004      	beq.n	8009014 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800900a:	7bbb      	ldrb	r3, [r7, #14]
 800900c:	4619      	mov	r1, r3
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	f001 fa15 	bl	800a43e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f000 fcf7 	bl	8009a08 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800901a:	7bbb      	ldrb	r3, [r7, #14]
 800901c:	4619      	mov	r1, r3
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f7ff fde2 	bl	8008be8 <USBD_CoreFindEP>
 8009024:	4603      	mov	r3, r0
 8009026:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009028:	7b7b      	ldrb	r3, [r7, #13]
 800902a:	2bff      	cmp	r3, #255	; 0xff
 800902c:	d01f      	beq.n	800906e <USBD_StdEPReq+0x1c6>
 800902e:	7b7b      	ldrb	r3, [r7, #13]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d11c      	bne.n	800906e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009034:	7b7a      	ldrb	r2, [r7, #13]
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800903c:	7b7a      	ldrb	r2, [r7, #13]
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	32ae      	adds	r2, #174	; 0xae
 8009042:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009046:	689b      	ldr	r3, [r3, #8]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d010      	beq.n	800906e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800904c:	7b7a      	ldrb	r2, [r7, #13]
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	32ae      	adds	r2, #174	; 0xae
 8009052:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009056:	689b      	ldr	r3, [r3, #8]
 8009058:	6839      	ldr	r1, [r7, #0]
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	4798      	blx	r3
 800905e:	4603      	mov	r3, r0
 8009060:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009062:	e004      	b.n	800906e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009064:	6839      	ldr	r1, [r7, #0]
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f000 fc03 	bl	8009872 <USBD_CtlError>
              break;
 800906c:	e000      	b.n	8009070 <USBD_StdEPReq+0x1c8>
              break;
 800906e:	bf00      	nop
          }
          break;
 8009070:	e0ab      	b.n	80091ca <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009078:	b2db      	uxtb	r3, r3
 800907a:	2b02      	cmp	r3, #2
 800907c:	d002      	beq.n	8009084 <USBD_StdEPReq+0x1dc>
 800907e:	2b03      	cmp	r3, #3
 8009080:	d032      	beq.n	80090e8 <USBD_StdEPReq+0x240>
 8009082:	e097      	b.n	80091b4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009084:	7bbb      	ldrb	r3, [r7, #14]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d007      	beq.n	800909a <USBD_StdEPReq+0x1f2>
 800908a:	7bbb      	ldrb	r3, [r7, #14]
 800908c:	2b80      	cmp	r3, #128	; 0x80
 800908e:	d004      	beq.n	800909a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009090:	6839      	ldr	r1, [r7, #0]
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f000 fbed 	bl	8009872 <USBD_CtlError>
                break;
 8009098:	e091      	b.n	80091be <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800909a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	da0b      	bge.n	80090ba <USBD_StdEPReq+0x212>
 80090a2:	7bbb      	ldrb	r3, [r7, #14]
 80090a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80090a8:	4613      	mov	r3, r2
 80090aa:	009b      	lsls	r3, r3, #2
 80090ac:	4413      	add	r3, r2
 80090ae:	009b      	lsls	r3, r3, #2
 80090b0:	3310      	adds	r3, #16
 80090b2:	687a      	ldr	r2, [r7, #4]
 80090b4:	4413      	add	r3, r2
 80090b6:	3304      	adds	r3, #4
 80090b8:	e00b      	b.n	80090d2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80090ba:	7bbb      	ldrb	r3, [r7, #14]
 80090bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80090c0:	4613      	mov	r3, r2
 80090c2:	009b      	lsls	r3, r3, #2
 80090c4:	4413      	add	r3, r2
 80090c6:	009b      	lsls	r3, r3, #2
 80090c8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80090cc:	687a      	ldr	r2, [r7, #4]
 80090ce:	4413      	add	r3, r2
 80090d0:	3304      	adds	r3, #4
 80090d2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	2200      	movs	r2, #0
 80090d8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80090da:	68bb      	ldr	r3, [r7, #8]
 80090dc:	2202      	movs	r2, #2
 80090de:	4619      	mov	r1, r3
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	f000 fc37 	bl	8009954 <USBD_CtlSendData>
              break;
 80090e6:	e06a      	b.n	80091be <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80090e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	da11      	bge.n	8009114 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80090f0:	7bbb      	ldrb	r3, [r7, #14]
 80090f2:	f003 020f 	and.w	r2, r3, #15
 80090f6:	6879      	ldr	r1, [r7, #4]
 80090f8:	4613      	mov	r3, r2
 80090fa:	009b      	lsls	r3, r3, #2
 80090fc:	4413      	add	r3, r2
 80090fe:	009b      	lsls	r3, r3, #2
 8009100:	440b      	add	r3, r1
 8009102:	3324      	adds	r3, #36	; 0x24
 8009104:	881b      	ldrh	r3, [r3, #0]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d117      	bne.n	800913a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800910a:	6839      	ldr	r1, [r7, #0]
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f000 fbb0 	bl	8009872 <USBD_CtlError>
                  break;
 8009112:	e054      	b.n	80091be <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009114:	7bbb      	ldrb	r3, [r7, #14]
 8009116:	f003 020f 	and.w	r2, r3, #15
 800911a:	6879      	ldr	r1, [r7, #4]
 800911c:	4613      	mov	r3, r2
 800911e:	009b      	lsls	r3, r3, #2
 8009120:	4413      	add	r3, r2
 8009122:	009b      	lsls	r3, r3, #2
 8009124:	440b      	add	r3, r1
 8009126:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800912a:	881b      	ldrh	r3, [r3, #0]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d104      	bne.n	800913a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009130:	6839      	ldr	r1, [r7, #0]
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	f000 fb9d 	bl	8009872 <USBD_CtlError>
                  break;
 8009138:	e041      	b.n	80091be <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800913a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800913e:	2b00      	cmp	r3, #0
 8009140:	da0b      	bge.n	800915a <USBD_StdEPReq+0x2b2>
 8009142:	7bbb      	ldrb	r3, [r7, #14]
 8009144:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009148:	4613      	mov	r3, r2
 800914a:	009b      	lsls	r3, r3, #2
 800914c:	4413      	add	r3, r2
 800914e:	009b      	lsls	r3, r3, #2
 8009150:	3310      	adds	r3, #16
 8009152:	687a      	ldr	r2, [r7, #4]
 8009154:	4413      	add	r3, r2
 8009156:	3304      	adds	r3, #4
 8009158:	e00b      	b.n	8009172 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800915a:	7bbb      	ldrb	r3, [r7, #14]
 800915c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009160:	4613      	mov	r3, r2
 8009162:	009b      	lsls	r3, r3, #2
 8009164:	4413      	add	r3, r2
 8009166:	009b      	lsls	r3, r3, #2
 8009168:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800916c:	687a      	ldr	r2, [r7, #4]
 800916e:	4413      	add	r3, r2
 8009170:	3304      	adds	r3, #4
 8009172:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009174:	7bbb      	ldrb	r3, [r7, #14]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d002      	beq.n	8009180 <USBD_StdEPReq+0x2d8>
 800917a:	7bbb      	ldrb	r3, [r7, #14]
 800917c:	2b80      	cmp	r3, #128	; 0x80
 800917e:	d103      	bne.n	8009188 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	2200      	movs	r2, #0
 8009184:	601a      	str	r2, [r3, #0]
 8009186:	e00e      	b.n	80091a6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009188:	7bbb      	ldrb	r3, [r7, #14]
 800918a:	4619      	mov	r1, r3
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	f001 f975 	bl	800a47c <USBD_LL_IsStallEP>
 8009192:	4603      	mov	r3, r0
 8009194:	2b00      	cmp	r3, #0
 8009196:	d003      	beq.n	80091a0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	2201      	movs	r2, #1
 800919c:	601a      	str	r2, [r3, #0]
 800919e:	e002      	b.n	80091a6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	2200      	movs	r2, #0
 80091a4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	2202      	movs	r2, #2
 80091aa:	4619      	mov	r1, r3
 80091ac:	6878      	ldr	r0, [r7, #4]
 80091ae:	f000 fbd1 	bl	8009954 <USBD_CtlSendData>
              break;
 80091b2:	e004      	b.n	80091be <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80091b4:	6839      	ldr	r1, [r7, #0]
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f000 fb5b 	bl	8009872 <USBD_CtlError>
              break;
 80091bc:	bf00      	nop
          }
          break;
 80091be:	e004      	b.n	80091ca <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80091c0:	6839      	ldr	r1, [r7, #0]
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f000 fb55 	bl	8009872 <USBD_CtlError>
          break;
 80091c8:	bf00      	nop
      }
      break;
 80091ca:	e005      	b.n	80091d8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80091cc:	6839      	ldr	r1, [r7, #0]
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f000 fb4f 	bl	8009872 <USBD_CtlError>
      break;
 80091d4:	e000      	b.n	80091d8 <USBD_StdEPReq+0x330>
      break;
 80091d6:	bf00      	nop
  }

  return ret;
 80091d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80091da:	4618      	mov	r0, r3
 80091dc:	3710      	adds	r7, #16
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}
	...

080091e4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b084      	sub	sp, #16
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
 80091ec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80091ee:	2300      	movs	r3, #0
 80091f0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80091f2:	2300      	movs	r3, #0
 80091f4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80091f6:	2300      	movs	r3, #0
 80091f8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	885b      	ldrh	r3, [r3, #2]
 80091fe:	0a1b      	lsrs	r3, r3, #8
 8009200:	b29b      	uxth	r3, r3
 8009202:	3b01      	subs	r3, #1
 8009204:	2b06      	cmp	r3, #6
 8009206:	f200 8128 	bhi.w	800945a <USBD_GetDescriptor+0x276>
 800920a:	a201      	add	r2, pc, #4	; (adr r2, 8009210 <USBD_GetDescriptor+0x2c>)
 800920c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009210:	0800922d 	.word	0x0800922d
 8009214:	08009245 	.word	0x08009245
 8009218:	08009285 	.word	0x08009285
 800921c:	0800945b 	.word	0x0800945b
 8009220:	0800945b 	.word	0x0800945b
 8009224:	080093fb 	.word	0x080093fb
 8009228:	08009427 	.word	0x08009427
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	687a      	ldr	r2, [r7, #4]
 8009236:	7c12      	ldrb	r2, [r2, #16]
 8009238:	f107 0108 	add.w	r1, r7, #8
 800923c:	4610      	mov	r0, r2
 800923e:	4798      	blx	r3
 8009240:	60f8      	str	r0, [r7, #12]
      break;
 8009242:	e112      	b.n	800946a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	7c1b      	ldrb	r3, [r3, #16]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d10d      	bne.n	8009268 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009254:	f107 0208 	add.w	r2, r7, #8
 8009258:	4610      	mov	r0, r2
 800925a:	4798      	blx	r3
 800925c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	3301      	adds	r3, #1
 8009262:	2202      	movs	r2, #2
 8009264:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009266:	e100      	b.n	800946a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800926e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009270:	f107 0208 	add.w	r2, r7, #8
 8009274:	4610      	mov	r0, r2
 8009276:	4798      	blx	r3
 8009278:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	3301      	adds	r3, #1
 800927e:	2202      	movs	r2, #2
 8009280:	701a      	strb	r2, [r3, #0]
      break;
 8009282:	e0f2      	b.n	800946a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	885b      	ldrh	r3, [r3, #2]
 8009288:	b2db      	uxtb	r3, r3
 800928a:	2b05      	cmp	r3, #5
 800928c:	f200 80ac 	bhi.w	80093e8 <USBD_GetDescriptor+0x204>
 8009290:	a201      	add	r2, pc, #4	; (adr r2, 8009298 <USBD_GetDescriptor+0xb4>)
 8009292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009296:	bf00      	nop
 8009298:	080092b1 	.word	0x080092b1
 800929c:	080092e5 	.word	0x080092e5
 80092a0:	08009319 	.word	0x08009319
 80092a4:	0800934d 	.word	0x0800934d
 80092a8:	08009381 	.word	0x08009381
 80092ac:	080093b5 	.word	0x080093b5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092b6:	685b      	ldr	r3, [r3, #4]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d00b      	beq.n	80092d4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092c2:	685b      	ldr	r3, [r3, #4]
 80092c4:	687a      	ldr	r2, [r7, #4]
 80092c6:	7c12      	ldrb	r2, [r2, #16]
 80092c8:	f107 0108 	add.w	r1, r7, #8
 80092cc:	4610      	mov	r0, r2
 80092ce:	4798      	blx	r3
 80092d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80092d2:	e091      	b.n	80093f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80092d4:	6839      	ldr	r1, [r7, #0]
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f000 facb 	bl	8009872 <USBD_CtlError>
            err++;
 80092dc:	7afb      	ldrb	r3, [r7, #11]
 80092de:	3301      	adds	r3, #1
 80092e0:	72fb      	strb	r3, [r7, #11]
          break;
 80092e2:	e089      	b.n	80093f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092ea:	689b      	ldr	r3, [r3, #8]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d00b      	beq.n	8009308 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092f6:	689b      	ldr	r3, [r3, #8]
 80092f8:	687a      	ldr	r2, [r7, #4]
 80092fa:	7c12      	ldrb	r2, [r2, #16]
 80092fc:	f107 0108 	add.w	r1, r7, #8
 8009300:	4610      	mov	r0, r2
 8009302:	4798      	blx	r3
 8009304:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009306:	e077      	b.n	80093f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009308:	6839      	ldr	r1, [r7, #0]
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	f000 fab1 	bl	8009872 <USBD_CtlError>
            err++;
 8009310:	7afb      	ldrb	r3, [r7, #11]
 8009312:	3301      	adds	r3, #1
 8009314:	72fb      	strb	r3, [r7, #11]
          break;
 8009316:	e06f      	b.n	80093f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800931e:	68db      	ldr	r3, [r3, #12]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d00b      	beq.n	800933c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800932a:	68db      	ldr	r3, [r3, #12]
 800932c:	687a      	ldr	r2, [r7, #4]
 800932e:	7c12      	ldrb	r2, [r2, #16]
 8009330:	f107 0108 	add.w	r1, r7, #8
 8009334:	4610      	mov	r0, r2
 8009336:	4798      	blx	r3
 8009338:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800933a:	e05d      	b.n	80093f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800933c:	6839      	ldr	r1, [r7, #0]
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	f000 fa97 	bl	8009872 <USBD_CtlError>
            err++;
 8009344:	7afb      	ldrb	r3, [r7, #11]
 8009346:	3301      	adds	r3, #1
 8009348:	72fb      	strb	r3, [r7, #11]
          break;
 800934a:	e055      	b.n	80093f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009352:	691b      	ldr	r3, [r3, #16]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d00b      	beq.n	8009370 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800935e:	691b      	ldr	r3, [r3, #16]
 8009360:	687a      	ldr	r2, [r7, #4]
 8009362:	7c12      	ldrb	r2, [r2, #16]
 8009364:	f107 0108 	add.w	r1, r7, #8
 8009368:	4610      	mov	r0, r2
 800936a:	4798      	blx	r3
 800936c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800936e:	e043      	b.n	80093f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009370:	6839      	ldr	r1, [r7, #0]
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f000 fa7d 	bl	8009872 <USBD_CtlError>
            err++;
 8009378:	7afb      	ldrb	r3, [r7, #11]
 800937a:	3301      	adds	r3, #1
 800937c:	72fb      	strb	r3, [r7, #11]
          break;
 800937e:	e03b      	b.n	80093f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009386:	695b      	ldr	r3, [r3, #20]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d00b      	beq.n	80093a4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009392:	695b      	ldr	r3, [r3, #20]
 8009394:	687a      	ldr	r2, [r7, #4]
 8009396:	7c12      	ldrb	r2, [r2, #16]
 8009398:	f107 0108 	add.w	r1, r7, #8
 800939c:	4610      	mov	r0, r2
 800939e:	4798      	blx	r3
 80093a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80093a2:	e029      	b.n	80093f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80093a4:	6839      	ldr	r1, [r7, #0]
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f000 fa63 	bl	8009872 <USBD_CtlError>
            err++;
 80093ac:	7afb      	ldrb	r3, [r7, #11]
 80093ae:	3301      	adds	r3, #1
 80093b0:	72fb      	strb	r3, [r7, #11]
          break;
 80093b2:	e021      	b.n	80093f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093ba:	699b      	ldr	r3, [r3, #24]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d00b      	beq.n	80093d8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093c6:	699b      	ldr	r3, [r3, #24]
 80093c8:	687a      	ldr	r2, [r7, #4]
 80093ca:	7c12      	ldrb	r2, [r2, #16]
 80093cc:	f107 0108 	add.w	r1, r7, #8
 80093d0:	4610      	mov	r0, r2
 80093d2:	4798      	blx	r3
 80093d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80093d6:	e00f      	b.n	80093f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80093d8:	6839      	ldr	r1, [r7, #0]
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	f000 fa49 	bl	8009872 <USBD_CtlError>
            err++;
 80093e0:	7afb      	ldrb	r3, [r7, #11]
 80093e2:	3301      	adds	r3, #1
 80093e4:	72fb      	strb	r3, [r7, #11]
          break;
 80093e6:	e007      	b.n	80093f8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80093e8:	6839      	ldr	r1, [r7, #0]
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f000 fa41 	bl	8009872 <USBD_CtlError>
          err++;
 80093f0:	7afb      	ldrb	r3, [r7, #11]
 80093f2:	3301      	adds	r3, #1
 80093f4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80093f6:	bf00      	nop
      }
      break;
 80093f8:	e037      	b.n	800946a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	7c1b      	ldrb	r3, [r3, #16]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d109      	bne.n	8009416 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800940a:	f107 0208 	add.w	r2, r7, #8
 800940e:	4610      	mov	r0, r2
 8009410:	4798      	blx	r3
 8009412:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009414:	e029      	b.n	800946a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009416:	6839      	ldr	r1, [r7, #0]
 8009418:	6878      	ldr	r0, [r7, #4]
 800941a:	f000 fa2a 	bl	8009872 <USBD_CtlError>
        err++;
 800941e:	7afb      	ldrb	r3, [r7, #11]
 8009420:	3301      	adds	r3, #1
 8009422:	72fb      	strb	r3, [r7, #11]
      break;
 8009424:	e021      	b.n	800946a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	7c1b      	ldrb	r3, [r3, #16]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d10d      	bne.n	800944a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009436:	f107 0208 	add.w	r2, r7, #8
 800943a:	4610      	mov	r0, r2
 800943c:	4798      	blx	r3
 800943e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	3301      	adds	r3, #1
 8009444:	2207      	movs	r2, #7
 8009446:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009448:	e00f      	b.n	800946a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800944a:	6839      	ldr	r1, [r7, #0]
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	f000 fa10 	bl	8009872 <USBD_CtlError>
        err++;
 8009452:	7afb      	ldrb	r3, [r7, #11]
 8009454:	3301      	adds	r3, #1
 8009456:	72fb      	strb	r3, [r7, #11]
      break;
 8009458:	e007      	b.n	800946a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800945a:	6839      	ldr	r1, [r7, #0]
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f000 fa08 	bl	8009872 <USBD_CtlError>
      err++;
 8009462:	7afb      	ldrb	r3, [r7, #11]
 8009464:	3301      	adds	r3, #1
 8009466:	72fb      	strb	r3, [r7, #11]
      break;
 8009468:	bf00      	nop
  }

  if (err != 0U)
 800946a:	7afb      	ldrb	r3, [r7, #11]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d11e      	bne.n	80094ae <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	88db      	ldrh	r3, [r3, #6]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d016      	beq.n	80094a6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009478:	893b      	ldrh	r3, [r7, #8]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d00e      	beq.n	800949c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	88da      	ldrh	r2, [r3, #6]
 8009482:	893b      	ldrh	r3, [r7, #8]
 8009484:	4293      	cmp	r3, r2
 8009486:	bf28      	it	cs
 8009488:	4613      	movcs	r3, r2
 800948a:	b29b      	uxth	r3, r3
 800948c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800948e:	893b      	ldrh	r3, [r7, #8]
 8009490:	461a      	mov	r2, r3
 8009492:	68f9      	ldr	r1, [r7, #12]
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f000 fa5d 	bl	8009954 <USBD_CtlSendData>
 800949a:	e009      	b.n	80094b0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800949c:	6839      	ldr	r1, [r7, #0]
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	f000 f9e7 	bl	8009872 <USBD_CtlError>
 80094a4:	e004      	b.n	80094b0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f000 faae 	bl	8009a08 <USBD_CtlSendStatus>
 80094ac:	e000      	b.n	80094b0 <USBD_GetDescriptor+0x2cc>
    return;
 80094ae:	bf00      	nop
  }
}
 80094b0:	3710      	adds	r7, #16
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bd80      	pop	{r7, pc}
 80094b6:	bf00      	nop

080094b8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b084      	sub	sp, #16
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
 80094c0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	889b      	ldrh	r3, [r3, #4]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d131      	bne.n	800952e <USBD_SetAddress+0x76>
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	88db      	ldrh	r3, [r3, #6]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d12d      	bne.n	800952e <USBD_SetAddress+0x76>
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	885b      	ldrh	r3, [r3, #2]
 80094d6:	2b7f      	cmp	r3, #127	; 0x7f
 80094d8:	d829      	bhi.n	800952e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	885b      	ldrh	r3, [r3, #2]
 80094de:	b2db      	uxtb	r3, r3
 80094e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094e4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094ec:	b2db      	uxtb	r3, r3
 80094ee:	2b03      	cmp	r3, #3
 80094f0:	d104      	bne.n	80094fc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80094f2:	6839      	ldr	r1, [r7, #0]
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f000 f9bc 	bl	8009872 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094fa:	e01d      	b.n	8009538 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	7bfa      	ldrb	r2, [r7, #15]
 8009500:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009504:	7bfb      	ldrb	r3, [r7, #15]
 8009506:	4619      	mov	r1, r3
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f000 ffe3 	bl	800a4d4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f000 fa7a 	bl	8009a08 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009514:	7bfb      	ldrb	r3, [r7, #15]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d004      	beq.n	8009524 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2202      	movs	r2, #2
 800951e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009522:	e009      	b.n	8009538 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2201      	movs	r2, #1
 8009528:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800952c:	e004      	b.n	8009538 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800952e:	6839      	ldr	r1, [r7, #0]
 8009530:	6878      	ldr	r0, [r7, #4]
 8009532:	f000 f99e 	bl	8009872 <USBD_CtlError>
  }
}
 8009536:	bf00      	nop
 8009538:	bf00      	nop
 800953a:	3710      	adds	r7, #16
 800953c:	46bd      	mov	sp, r7
 800953e:	bd80      	pop	{r7, pc}

08009540 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b084      	sub	sp, #16
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
 8009548:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800954a:	2300      	movs	r3, #0
 800954c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	885b      	ldrh	r3, [r3, #2]
 8009552:	b2da      	uxtb	r2, r3
 8009554:	4b4e      	ldr	r3, [pc, #312]	; (8009690 <USBD_SetConfig+0x150>)
 8009556:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009558:	4b4d      	ldr	r3, [pc, #308]	; (8009690 <USBD_SetConfig+0x150>)
 800955a:	781b      	ldrb	r3, [r3, #0]
 800955c:	2b01      	cmp	r3, #1
 800955e:	d905      	bls.n	800956c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009560:	6839      	ldr	r1, [r7, #0]
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f000 f985 	bl	8009872 <USBD_CtlError>
    return USBD_FAIL;
 8009568:	2303      	movs	r3, #3
 800956a:	e08c      	b.n	8009686 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009572:	b2db      	uxtb	r3, r3
 8009574:	2b02      	cmp	r3, #2
 8009576:	d002      	beq.n	800957e <USBD_SetConfig+0x3e>
 8009578:	2b03      	cmp	r3, #3
 800957a:	d029      	beq.n	80095d0 <USBD_SetConfig+0x90>
 800957c:	e075      	b.n	800966a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800957e:	4b44      	ldr	r3, [pc, #272]	; (8009690 <USBD_SetConfig+0x150>)
 8009580:	781b      	ldrb	r3, [r3, #0]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d020      	beq.n	80095c8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009586:	4b42      	ldr	r3, [pc, #264]	; (8009690 <USBD_SetConfig+0x150>)
 8009588:	781b      	ldrb	r3, [r3, #0]
 800958a:	461a      	mov	r2, r3
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009590:	4b3f      	ldr	r3, [pc, #252]	; (8009690 <USBD_SetConfig+0x150>)
 8009592:	781b      	ldrb	r3, [r3, #0]
 8009594:	4619      	mov	r1, r3
 8009596:	6878      	ldr	r0, [r7, #4]
 8009598:	f7fe ffe7 	bl	800856a <USBD_SetClassConfig>
 800959c:	4603      	mov	r3, r0
 800959e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80095a0:	7bfb      	ldrb	r3, [r7, #15]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d008      	beq.n	80095b8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80095a6:	6839      	ldr	r1, [r7, #0]
 80095a8:	6878      	ldr	r0, [r7, #4]
 80095aa:	f000 f962 	bl	8009872 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2202      	movs	r2, #2
 80095b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80095b6:	e065      	b.n	8009684 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80095b8:	6878      	ldr	r0, [r7, #4]
 80095ba:	f000 fa25 	bl	8009a08 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2203      	movs	r2, #3
 80095c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80095c6:	e05d      	b.n	8009684 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80095c8:	6878      	ldr	r0, [r7, #4]
 80095ca:	f000 fa1d 	bl	8009a08 <USBD_CtlSendStatus>
      break;
 80095ce:	e059      	b.n	8009684 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80095d0:	4b2f      	ldr	r3, [pc, #188]	; (8009690 <USBD_SetConfig+0x150>)
 80095d2:	781b      	ldrb	r3, [r3, #0]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d112      	bne.n	80095fe <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2202      	movs	r2, #2
 80095dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80095e0:	4b2b      	ldr	r3, [pc, #172]	; (8009690 <USBD_SetConfig+0x150>)
 80095e2:	781b      	ldrb	r3, [r3, #0]
 80095e4:	461a      	mov	r2, r3
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80095ea:	4b29      	ldr	r3, [pc, #164]	; (8009690 <USBD_SetConfig+0x150>)
 80095ec:	781b      	ldrb	r3, [r3, #0]
 80095ee:	4619      	mov	r1, r3
 80095f0:	6878      	ldr	r0, [r7, #4]
 80095f2:	f7fe ffd6 	bl	80085a2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	f000 fa06 	bl	8009a08 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80095fc:	e042      	b.n	8009684 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80095fe:	4b24      	ldr	r3, [pc, #144]	; (8009690 <USBD_SetConfig+0x150>)
 8009600:	781b      	ldrb	r3, [r3, #0]
 8009602:	461a      	mov	r2, r3
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	685b      	ldr	r3, [r3, #4]
 8009608:	429a      	cmp	r2, r3
 800960a:	d02a      	beq.n	8009662 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	685b      	ldr	r3, [r3, #4]
 8009610:	b2db      	uxtb	r3, r3
 8009612:	4619      	mov	r1, r3
 8009614:	6878      	ldr	r0, [r7, #4]
 8009616:	f7fe ffc4 	bl	80085a2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800961a:	4b1d      	ldr	r3, [pc, #116]	; (8009690 <USBD_SetConfig+0x150>)
 800961c:	781b      	ldrb	r3, [r3, #0]
 800961e:	461a      	mov	r2, r3
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009624:	4b1a      	ldr	r3, [pc, #104]	; (8009690 <USBD_SetConfig+0x150>)
 8009626:	781b      	ldrb	r3, [r3, #0]
 8009628:	4619      	mov	r1, r3
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	f7fe ff9d 	bl	800856a <USBD_SetClassConfig>
 8009630:	4603      	mov	r3, r0
 8009632:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009634:	7bfb      	ldrb	r3, [r7, #15]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d00f      	beq.n	800965a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800963a:	6839      	ldr	r1, [r7, #0]
 800963c:	6878      	ldr	r0, [r7, #4]
 800963e:	f000 f918 	bl	8009872 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	685b      	ldr	r3, [r3, #4]
 8009646:	b2db      	uxtb	r3, r3
 8009648:	4619      	mov	r1, r3
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f7fe ffa9 	bl	80085a2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2202      	movs	r2, #2
 8009654:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009658:	e014      	b.n	8009684 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f000 f9d4 	bl	8009a08 <USBD_CtlSendStatus>
      break;
 8009660:	e010      	b.n	8009684 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	f000 f9d0 	bl	8009a08 <USBD_CtlSendStatus>
      break;
 8009668:	e00c      	b.n	8009684 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800966a:	6839      	ldr	r1, [r7, #0]
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	f000 f900 	bl	8009872 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009672:	4b07      	ldr	r3, [pc, #28]	; (8009690 <USBD_SetConfig+0x150>)
 8009674:	781b      	ldrb	r3, [r3, #0]
 8009676:	4619      	mov	r1, r3
 8009678:	6878      	ldr	r0, [r7, #4]
 800967a:	f7fe ff92 	bl	80085a2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800967e:	2303      	movs	r3, #3
 8009680:	73fb      	strb	r3, [r7, #15]
      break;
 8009682:	bf00      	nop
  }

  return ret;
 8009684:	7bfb      	ldrb	r3, [r7, #15]
}
 8009686:	4618      	mov	r0, r3
 8009688:	3710      	adds	r7, #16
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}
 800968e:	bf00      	nop
 8009690:	240001b0 	.word	0x240001b0

08009694 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b082      	sub	sp, #8
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
 800969c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	88db      	ldrh	r3, [r3, #6]
 80096a2:	2b01      	cmp	r3, #1
 80096a4:	d004      	beq.n	80096b0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80096a6:	6839      	ldr	r1, [r7, #0]
 80096a8:	6878      	ldr	r0, [r7, #4]
 80096aa:	f000 f8e2 	bl	8009872 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80096ae:	e023      	b.n	80096f8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096b6:	b2db      	uxtb	r3, r3
 80096b8:	2b02      	cmp	r3, #2
 80096ba:	dc02      	bgt.n	80096c2 <USBD_GetConfig+0x2e>
 80096bc:	2b00      	cmp	r3, #0
 80096be:	dc03      	bgt.n	80096c8 <USBD_GetConfig+0x34>
 80096c0:	e015      	b.n	80096ee <USBD_GetConfig+0x5a>
 80096c2:	2b03      	cmp	r3, #3
 80096c4:	d00b      	beq.n	80096de <USBD_GetConfig+0x4a>
 80096c6:	e012      	b.n	80096ee <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2200      	movs	r2, #0
 80096cc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	3308      	adds	r3, #8
 80096d2:	2201      	movs	r2, #1
 80096d4:	4619      	mov	r1, r3
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f000 f93c 	bl	8009954 <USBD_CtlSendData>
        break;
 80096dc:	e00c      	b.n	80096f8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	3304      	adds	r3, #4
 80096e2:	2201      	movs	r2, #1
 80096e4:	4619      	mov	r1, r3
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	f000 f934 	bl	8009954 <USBD_CtlSendData>
        break;
 80096ec:	e004      	b.n	80096f8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80096ee:	6839      	ldr	r1, [r7, #0]
 80096f0:	6878      	ldr	r0, [r7, #4]
 80096f2:	f000 f8be 	bl	8009872 <USBD_CtlError>
        break;
 80096f6:	bf00      	nop
}
 80096f8:	bf00      	nop
 80096fa:	3708      	adds	r7, #8
 80096fc:	46bd      	mov	sp, r7
 80096fe:	bd80      	pop	{r7, pc}

08009700 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b082      	sub	sp, #8
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
 8009708:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009710:	b2db      	uxtb	r3, r3
 8009712:	3b01      	subs	r3, #1
 8009714:	2b02      	cmp	r3, #2
 8009716:	d81e      	bhi.n	8009756 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	88db      	ldrh	r3, [r3, #6]
 800971c:	2b02      	cmp	r3, #2
 800971e:	d004      	beq.n	800972a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009720:	6839      	ldr	r1, [r7, #0]
 8009722:	6878      	ldr	r0, [r7, #4]
 8009724:	f000 f8a5 	bl	8009872 <USBD_CtlError>
        break;
 8009728:	e01a      	b.n	8009760 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2201      	movs	r2, #1
 800972e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009736:	2b00      	cmp	r3, #0
 8009738:	d005      	beq.n	8009746 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	68db      	ldr	r3, [r3, #12]
 800973e:	f043 0202 	orr.w	r2, r3, #2
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	330c      	adds	r3, #12
 800974a:	2202      	movs	r2, #2
 800974c:	4619      	mov	r1, r3
 800974e:	6878      	ldr	r0, [r7, #4]
 8009750:	f000 f900 	bl	8009954 <USBD_CtlSendData>
      break;
 8009754:	e004      	b.n	8009760 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009756:	6839      	ldr	r1, [r7, #0]
 8009758:	6878      	ldr	r0, [r7, #4]
 800975a:	f000 f88a 	bl	8009872 <USBD_CtlError>
      break;
 800975e:	bf00      	nop
  }
}
 8009760:	bf00      	nop
 8009762:	3708      	adds	r7, #8
 8009764:	46bd      	mov	sp, r7
 8009766:	bd80      	pop	{r7, pc}

08009768 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b082      	sub	sp, #8
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
 8009770:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	885b      	ldrh	r3, [r3, #2]
 8009776:	2b01      	cmp	r3, #1
 8009778:	d107      	bne.n	800978a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2201      	movs	r2, #1
 800977e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009782:	6878      	ldr	r0, [r7, #4]
 8009784:	f000 f940 	bl	8009a08 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009788:	e013      	b.n	80097b2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	885b      	ldrh	r3, [r3, #2]
 800978e:	2b02      	cmp	r3, #2
 8009790:	d10b      	bne.n	80097aa <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	889b      	ldrh	r3, [r3, #4]
 8009796:	0a1b      	lsrs	r3, r3, #8
 8009798:	b29b      	uxth	r3, r3
 800979a:	b2da      	uxtb	r2, r3
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	f000 f930 	bl	8009a08 <USBD_CtlSendStatus>
}
 80097a8:	e003      	b.n	80097b2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80097aa:	6839      	ldr	r1, [r7, #0]
 80097ac:	6878      	ldr	r0, [r7, #4]
 80097ae:	f000 f860 	bl	8009872 <USBD_CtlError>
}
 80097b2:	bf00      	nop
 80097b4:	3708      	adds	r7, #8
 80097b6:	46bd      	mov	sp, r7
 80097b8:	bd80      	pop	{r7, pc}

080097ba <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097ba:	b580      	push	{r7, lr}
 80097bc:	b082      	sub	sp, #8
 80097be:	af00      	add	r7, sp, #0
 80097c0:	6078      	str	r0, [r7, #4]
 80097c2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097ca:	b2db      	uxtb	r3, r3
 80097cc:	3b01      	subs	r3, #1
 80097ce:	2b02      	cmp	r3, #2
 80097d0:	d80b      	bhi.n	80097ea <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	885b      	ldrh	r3, [r3, #2]
 80097d6:	2b01      	cmp	r3, #1
 80097d8:	d10c      	bne.n	80097f4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	2200      	movs	r2, #0
 80097de:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	f000 f910 	bl	8009a08 <USBD_CtlSendStatus>
      }
      break;
 80097e8:	e004      	b.n	80097f4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80097ea:	6839      	ldr	r1, [r7, #0]
 80097ec:	6878      	ldr	r0, [r7, #4]
 80097ee:	f000 f840 	bl	8009872 <USBD_CtlError>
      break;
 80097f2:	e000      	b.n	80097f6 <USBD_ClrFeature+0x3c>
      break;
 80097f4:	bf00      	nop
  }
}
 80097f6:	bf00      	nop
 80097f8:	3708      	adds	r7, #8
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bd80      	pop	{r7, pc}

080097fe <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80097fe:	b580      	push	{r7, lr}
 8009800:	b084      	sub	sp, #16
 8009802:	af00      	add	r7, sp, #0
 8009804:	6078      	str	r0, [r7, #4]
 8009806:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	781a      	ldrb	r2, [r3, #0]
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	3301      	adds	r3, #1
 8009818:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	781a      	ldrb	r2, [r3, #0]
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	3301      	adds	r3, #1
 8009826:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009828:	68f8      	ldr	r0, [r7, #12]
 800982a:	f7ff fa41 	bl	8008cb0 <SWAPBYTE>
 800982e:	4603      	mov	r3, r0
 8009830:	461a      	mov	r2, r3
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	3301      	adds	r3, #1
 800983a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	3301      	adds	r3, #1
 8009840:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009842:	68f8      	ldr	r0, [r7, #12]
 8009844:	f7ff fa34 	bl	8008cb0 <SWAPBYTE>
 8009848:	4603      	mov	r3, r0
 800984a:	461a      	mov	r2, r3
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	3301      	adds	r3, #1
 8009854:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	3301      	adds	r3, #1
 800985a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800985c:	68f8      	ldr	r0, [r7, #12]
 800985e:	f7ff fa27 	bl	8008cb0 <SWAPBYTE>
 8009862:	4603      	mov	r3, r0
 8009864:	461a      	mov	r2, r3
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	80da      	strh	r2, [r3, #6]
}
 800986a:	bf00      	nop
 800986c:	3710      	adds	r7, #16
 800986e:	46bd      	mov	sp, r7
 8009870:	bd80      	pop	{r7, pc}

08009872 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009872:	b580      	push	{r7, lr}
 8009874:	b082      	sub	sp, #8
 8009876:	af00      	add	r7, sp, #0
 8009878:	6078      	str	r0, [r7, #4]
 800987a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800987c:	2180      	movs	r1, #128	; 0x80
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	f000 fdbe 	bl	800a400 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009884:	2100      	movs	r1, #0
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f000 fdba 	bl	800a400 <USBD_LL_StallEP>
}
 800988c:	bf00      	nop
 800988e:	3708      	adds	r7, #8
 8009890:	46bd      	mov	sp, r7
 8009892:	bd80      	pop	{r7, pc}

08009894 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b086      	sub	sp, #24
 8009898:	af00      	add	r7, sp, #0
 800989a:	60f8      	str	r0, [r7, #12]
 800989c:	60b9      	str	r1, [r7, #8]
 800989e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80098a0:	2300      	movs	r3, #0
 80098a2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d036      	beq.n	8009918 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80098ae:	6938      	ldr	r0, [r7, #16]
 80098b0:	f000 f836 	bl	8009920 <USBD_GetLen>
 80098b4:	4603      	mov	r3, r0
 80098b6:	3301      	adds	r3, #1
 80098b8:	b29b      	uxth	r3, r3
 80098ba:	005b      	lsls	r3, r3, #1
 80098bc:	b29a      	uxth	r2, r3
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80098c2:	7dfb      	ldrb	r3, [r7, #23]
 80098c4:	68ba      	ldr	r2, [r7, #8]
 80098c6:	4413      	add	r3, r2
 80098c8:	687a      	ldr	r2, [r7, #4]
 80098ca:	7812      	ldrb	r2, [r2, #0]
 80098cc:	701a      	strb	r2, [r3, #0]
  idx++;
 80098ce:	7dfb      	ldrb	r3, [r7, #23]
 80098d0:	3301      	adds	r3, #1
 80098d2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80098d4:	7dfb      	ldrb	r3, [r7, #23]
 80098d6:	68ba      	ldr	r2, [r7, #8]
 80098d8:	4413      	add	r3, r2
 80098da:	2203      	movs	r2, #3
 80098dc:	701a      	strb	r2, [r3, #0]
  idx++;
 80098de:	7dfb      	ldrb	r3, [r7, #23]
 80098e0:	3301      	adds	r3, #1
 80098e2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80098e4:	e013      	b.n	800990e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80098e6:	7dfb      	ldrb	r3, [r7, #23]
 80098e8:	68ba      	ldr	r2, [r7, #8]
 80098ea:	4413      	add	r3, r2
 80098ec:	693a      	ldr	r2, [r7, #16]
 80098ee:	7812      	ldrb	r2, [r2, #0]
 80098f0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80098f2:	693b      	ldr	r3, [r7, #16]
 80098f4:	3301      	adds	r3, #1
 80098f6:	613b      	str	r3, [r7, #16]
    idx++;
 80098f8:	7dfb      	ldrb	r3, [r7, #23]
 80098fa:	3301      	adds	r3, #1
 80098fc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80098fe:	7dfb      	ldrb	r3, [r7, #23]
 8009900:	68ba      	ldr	r2, [r7, #8]
 8009902:	4413      	add	r3, r2
 8009904:	2200      	movs	r2, #0
 8009906:	701a      	strb	r2, [r3, #0]
    idx++;
 8009908:	7dfb      	ldrb	r3, [r7, #23]
 800990a:	3301      	adds	r3, #1
 800990c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800990e:	693b      	ldr	r3, [r7, #16]
 8009910:	781b      	ldrb	r3, [r3, #0]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d1e7      	bne.n	80098e6 <USBD_GetString+0x52>
 8009916:	e000      	b.n	800991a <USBD_GetString+0x86>
    return;
 8009918:	bf00      	nop
  }
}
 800991a:	3718      	adds	r7, #24
 800991c:	46bd      	mov	sp, r7
 800991e:	bd80      	pop	{r7, pc}

08009920 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009920:	b480      	push	{r7}
 8009922:	b085      	sub	sp, #20
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009928:	2300      	movs	r3, #0
 800992a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009930:	e005      	b.n	800993e <USBD_GetLen+0x1e>
  {
    len++;
 8009932:	7bfb      	ldrb	r3, [r7, #15]
 8009934:	3301      	adds	r3, #1
 8009936:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	3301      	adds	r3, #1
 800993c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800993e:	68bb      	ldr	r3, [r7, #8]
 8009940:	781b      	ldrb	r3, [r3, #0]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d1f5      	bne.n	8009932 <USBD_GetLen+0x12>
  }

  return len;
 8009946:	7bfb      	ldrb	r3, [r7, #15]
}
 8009948:	4618      	mov	r0, r3
 800994a:	3714      	adds	r7, #20
 800994c:	46bd      	mov	sp, r7
 800994e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009952:	4770      	bx	lr

08009954 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b084      	sub	sp, #16
 8009958:	af00      	add	r7, sp, #0
 800995a:	60f8      	str	r0, [r7, #12]
 800995c:	60b9      	str	r1, [r7, #8]
 800995e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	2202      	movs	r2, #2
 8009964:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	687a      	ldr	r2, [r7, #4]
 800996c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	687a      	ldr	r2, [r7, #4]
 8009972:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	68ba      	ldr	r2, [r7, #8]
 8009978:	2100      	movs	r1, #0
 800997a:	68f8      	ldr	r0, [r7, #12]
 800997c:	f000 fdc9 	bl	800a512 <USBD_LL_Transmit>

  return USBD_OK;
 8009980:	2300      	movs	r3, #0
}
 8009982:	4618      	mov	r0, r3
 8009984:	3710      	adds	r7, #16
 8009986:	46bd      	mov	sp, r7
 8009988:	bd80      	pop	{r7, pc}

0800998a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800998a:	b580      	push	{r7, lr}
 800998c:	b084      	sub	sp, #16
 800998e:	af00      	add	r7, sp, #0
 8009990:	60f8      	str	r0, [r7, #12]
 8009992:	60b9      	str	r1, [r7, #8]
 8009994:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	68ba      	ldr	r2, [r7, #8]
 800999a:	2100      	movs	r1, #0
 800999c:	68f8      	ldr	r0, [r7, #12]
 800999e:	f000 fdb8 	bl	800a512 <USBD_LL_Transmit>

  return USBD_OK;
 80099a2:	2300      	movs	r3, #0
}
 80099a4:	4618      	mov	r0, r3
 80099a6:	3710      	adds	r7, #16
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}

080099ac <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b084      	sub	sp, #16
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	60f8      	str	r0, [r7, #12]
 80099b4:	60b9      	str	r1, [r7, #8]
 80099b6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	2203      	movs	r2, #3
 80099bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	687a      	ldr	r2, [r7, #4]
 80099c4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	687a      	ldr	r2, [r7, #4]
 80099cc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	68ba      	ldr	r2, [r7, #8]
 80099d4:	2100      	movs	r1, #0
 80099d6:	68f8      	ldr	r0, [r7, #12]
 80099d8:	f000 fdbc 	bl	800a554 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80099dc:	2300      	movs	r3, #0
}
 80099de:	4618      	mov	r0, r3
 80099e0:	3710      	adds	r7, #16
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}

080099e6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80099e6:	b580      	push	{r7, lr}
 80099e8:	b084      	sub	sp, #16
 80099ea:	af00      	add	r7, sp, #0
 80099ec:	60f8      	str	r0, [r7, #12]
 80099ee:	60b9      	str	r1, [r7, #8]
 80099f0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	68ba      	ldr	r2, [r7, #8]
 80099f6:	2100      	movs	r1, #0
 80099f8:	68f8      	ldr	r0, [r7, #12]
 80099fa:	f000 fdab 	bl	800a554 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80099fe:	2300      	movs	r3, #0
}
 8009a00:	4618      	mov	r0, r3
 8009a02:	3710      	adds	r7, #16
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd80      	pop	{r7, pc}

08009a08 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b082      	sub	sp, #8
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2204      	movs	r2, #4
 8009a14:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009a18:	2300      	movs	r3, #0
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	2100      	movs	r1, #0
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f000 fd77 	bl	800a512 <USBD_LL_Transmit>

  return USBD_OK;
 8009a24:	2300      	movs	r3, #0
}
 8009a26:	4618      	mov	r0, r3
 8009a28:	3708      	adds	r7, #8
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	bd80      	pop	{r7, pc}

08009a2e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009a2e:	b580      	push	{r7, lr}
 8009a30:	b082      	sub	sp, #8
 8009a32:	af00      	add	r7, sp, #0
 8009a34:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2205      	movs	r2, #5
 8009a3a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009a3e:	2300      	movs	r3, #0
 8009a40:	2200      	movs	r2, #0
 8009a42:	2100      	movs	r1, #0
 8009a44:	6878      	ldr	r0, [r7, #4]
 8009a46:	f000 fd85 	bl	800a554 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009a4a:	2300      	movs	r3, #0
}
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	3708      	adds	r7, #8
 8009a50:	46bd      	mov	sp, r7
 8009a52:	bd80      	pop	{r7, pc}

08009a54 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8009a58:	2201      	movs	r2, #1
 8009a5a:	4913      	ldr	r1, [pc, #76]	; (8009aa8 <MX_USB_DEVICE_Init+0x54>)
 8009a5c:	4813      	ldr	r0, [pc, #76]	; (8009aac <MX_USB_DEVICE_Init+0x58>)
 8009a5e:	f7fe fd07 	bl	8008470 <USBD_Init>
 8009a62:	4603      	mov	r3, r0
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d001      	beq.n	8009a6c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009a68:	f7f6 ffbe 	bl	80009e8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8009a6c:	4910      	ldr	r1, [pc, #64]	; (8009ab0 <MX_USB_DEVICE_Init+0x5c>)
 8009a6e:	480f      	ldr	r0, [pc, #60]	; (8009aac <MX_USB_DEVICE_Init+0x58>)
 8009a70:	f7fe fd2e 	bl	80084d0 <USBD_RegisterClass>
 8009a74:	4603      	mov	r3, r0
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d001      	beq.n	8009a7e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009a7a:	f7f6 ffb5 	bl	80009e8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8009a7e:	490d      	ldr	r1, [pc, #52]	; (8009ab4 <MX_USB_DEVICE_Init+0x60>)
 8009a80:	480a      	ldr	r0, [pc, #40]	; (8009aac <MX_USB_DEVICE_Init+0x58>)
 8009a82:	f7fe fc1f 	bl	80082c4 <USBD_CDC_RegisterInterface>
 8009a86:	4603      	mov	r3, r0
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d001      	beq.n	8009a90 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009a8c:	f7f6 ffac 	bl	80009e8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8009a90:	4806      	ldr	r0, [pc, #24]	; (8009aac <MX_USB_DEVICE_Init+0x58>)
 8009a92:	f7fe fd53 	bl	800853c <USBD_Start>
 8009a96:	4603      	mov	r3, r0
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d001      	beq.n	8009aa0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009a9c:	f7f6 ffa4 	bl	80009e8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8009aa0:	f7f8 ff7a 	bl	8002998 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009aa4:	bf00      	nop
 8009aa6:	bd80      	pop	{r7, pc}
 8009aa8:	240000b0 	.word	0x240000b0
 8009aac:	240001b4 	.word	0x240001b4
 8009ab0:	2400001c 	.word	0x2400001c
 8009ab4:	2400009c 	.word	0x2400009c

08009ab8 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8009abc:	2200      	movs	r2, #0
 8009abe:	4905      	ldr	r1, [pc, #20]	; (8009ad4 <CDC_Init_HS+0x1c>)
 8009ac0:	4805      	ldr	r0, [pc, #20]	; (8009ad8 <CDC_Init_HS+0x20>)
 8009ac2:	f7fe fc19 	bl	80082f8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 8009ac6:	4905      	ldr	r1, [pc, #20]	; (8009adc <CDC_Init_HS+0x24>)
 8009ac8:	4803      	ldr	r0, [pc, #12]	; (8009ad8 <CDC_Init_HS+0x20>)
 8009aca:	f7fe fc37 	bl	800833c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009ace:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	bd80      	pop	{r7, pc}
 8009ad4:	24000c90 	.word	0x24000c90
 8009ad8:	240001b4 	.word	0x240001b4
 8009adc:	24000490 	.word	0x24000490

08009ae0 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 8009ae0:	b480      	push	{r7}
 8009ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8009ae4:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aee:	4770      	bx	lr

08009af0 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009af0:	b480      	push	{r7}
 8009af2:	b083      	sub	sp, #12
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	4603      	mov	r3, r0
 8009af8:	6039      	str	r1, [r7, #0]
 8009afa:	71fb      	strb	r3, [r7, #7]
 8009afc:	4613      	mov	r3, r2
 8009afe:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 8009b00:	79fb      	ldrb	r3, [r7, #7]
 8009b02:	2b23      	cmp	r3, #35	; 0x23
 8009b04:	d84a      	bhi.n	8009b9c <CDC_Control_HS+0xac>
 8009b06:	a201      	add	r2, pc, #4	; (adr r2, 8009b0c <CDC_Control_HS+0x1c>)
 8009b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b0c:	08009b9d 	.word	0x08009b9d
 8009b10:	08009b9d 	.word	0x08009b9d
 8009b14:	08009b9d 	.word	0x08009b9d
 8009b18:	08009b9d 	.word	0x08009b9d
 8009b1c:	08009b9d 	.word	0x08009b9d
 8009b20:	08009b9d 	.word	0x08009b9d
 8009b24:	08009b9d 	.word	0x08009b9d
 8009b28:	08009b9d 	.word	0x08009b9d
 8009b2c:	08009b9d 	.word	0x08009b9d
 8009b30:	08009b9d 	.word	0x08009b9d
 8009b34:	08009b9d 	.word	0x08009b9d
 8009b38:	08009b9d 	.word	0x08009b9d
 8009b3c:	08009b9d 	.word	0x08009b9d
 8009b40:	08009b9d 	.word	0x08009b9d
 8009b44:	08009b9d 	.word	0x08009b9d
 8009b48:	08009b9d 	.word	0x08009b9d
 8009b4c:	08009b9d 	.word	0x08009b9d
 8009b50:	08009b9d 	.word	0x08009b9d
 8009b54:	08009b9d 	.word	0x08009b9d
 8009b58:	08009b9d 	.word	0x08009b9d
 8009b5c:	08009b9d 	.word	0x08009b9d
 8009b60:	08009b9d 	.word	0x08009b9d
 8009b64:	08009b9d 	.word	0x08009b9d
 8009b68:	08009b9d 	.word	0x08009b9d
 8009b6c:	08009b9d 	.word	0x08009b9d
 8009b70:	08009b9d 	.word	0x08009b9d
 8009b74:	08009b9d 	.word	0x08009b9d
 8009b78:	08009b9d 	.word	0x08009b9d
 8009b7c:	08009b9d 	.word	0x08009b9d
 8009b80:	08009b9d 	.word	0x08009b9d
 8009b84:	08009b9d 	.word	0x08009b9d
 8009b88:	08009b9d 	.word	0x08009b9d
 8009b8c:	08009b9d 	.word	0x08009b9d
 8009b90:	08009b9d 	.word	0x08009b9d
 8009b94:	08009b9d 	.word	0x08009b9d
 8009b98:	08009b9d 	.word	0x08009b9d
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009b9c:	bf00      	nop
  }

  return (USBD_OK);
 8009b9e:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	370c      	adds	r7, #12
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009baa:	4770      	bx	lr

08009bac <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b082      	sub	sp, #8
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
 8009bb4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 8009bb6:	6879      	ldr	r1, [r7, #4]
 8009bb8:	4805      	ldr	r0, [pc, #20]	; (8009bd0 <CDC_Receive_HS+0x24>)
 8009bba:	f7fe fbbf 	bl	800833c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 8009bbe:	4804      	ldr	r0, [pc, #16]	; (8009bd0 <CDC_Receive_HS+0x24>)
 8009bc0:	f7fe fc20 	bl	8008404 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009bc4:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	3708      	adds	r7, #8
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	bd80      	pop	{r7, pc}
 8009bce:	bf00      	nop
 8009bd0:	240001b4 	.word	0x240001b4

08009bd4 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b084      	sub	sp, #16
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
 8009bdc:	460b      	mov	r3, r1
 8009bde:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009be0:	2300      	movs	r3, #0
 8009be2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 8009be4:	4b0d      	ldr	r3, [pc, #52]	; (8009c1c <CDC_Transmit_HS+0x48>)
 8009be6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009bea:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009bec:	68bb      	ldr	r3, [r7, #8]
 8009bee:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d001      	beq.n	8009bfa <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 8009bf6:	2301      	movs	r3, #1
 8009bf8:	e00b      	b.n	8009c12 <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 8009bfa:	887b      	ldrh	r3, [r7, #2]
 8009bfc:	461a      	mov	r2, r3
 8009bfe:	6879      	ldr	r1, [r7, #4]
 8009c00:	4806      	ldr	r0, [pc, #24]	; (8009c1c <CDC_Transmit_HS+0x48>)
 8009c02:	f7fe fb79 	bl	80082f8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 8009c06:	4805      	ldr	r0, [pc, #20]	; (8009c1c <CDC_Transmit_HS+0x48>)
 8009c08:	f7fe fbb6 	bl	8008378 <USBD_CDC_TransmitPacket>
 8009c0c:	4603      	mov	r3, r0
 8009c0e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 8009c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c12:	4618      	mov	r0, r3
 8009c14:	3710      	adds	r7, #16
 8009c16:	46bd      	mov	sp, r7
 8009c18:	bd80      	pop	{r7, pc}
 8009c1a:	bf00      	nop
 8009c1c:	240001b4 	.word	0x240001b4

08009c20 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009c20:	b480      	push	{r7}
 8009c22:	b087      	sub	sp, #28
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	60f8      	str	r0, [r7, #12]
 8009c28:	60b9      	str	r1, [r7, #8]
 8009c2a:	4613      	mov	r3, r2
 8009c2c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009c2e:	2300      	movs	r3, #0
 8009c30:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 8009c32:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009c36:	4618      	mov	r0, r3
 8009c38:	371c      	adds	r7, #28
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c40:	4770      	bx	lr
	...

08009c44 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c44:	b480      	push	{r7}
 8009c46:	b083      	sub	sp, #12
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	6039      	str	r1, [r7, #0]
 8009c4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	2212      	movs	r2, #18
 8009c54:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8009c56:	4b03      	ldr	r3, [pc, #12]	; (8009c64 <USBD_HS_DeviceDescriptor+0x20>)
}
 8009c58:	4618      	mov	r0, r3
 8009c5a:	370c      	adds	r7, #12
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c62:	4770      	bx	lr
 8009c64:	240000cc 	.word	0x240000cc

08009c68 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c68:	b480      	push	{r7}
 8009c6a:	b083      	sub	sp, #12
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	4603      	mov	r3, r0
 8009c70:	6039      	str	r1, [r7, #0]
 8009c72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	2204      	movs	r2, #4
 8009c78:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009c7a:	4b03      	ldr	r3, [pc, #12]	; (8009c88 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	370c      	adds	r7, #12
 8009c80:	46bd      	mov	sp, r7
 8009c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c86:	4770      	bx	lr
 8009c88:	240000e0 	.word	0x240000e0

08009c8c <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b082      	sub	sp, #8
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	4603      	mov	r3, r0
 8009c94:	6039      	str	r1, [r7, #0]
 8009c96:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009c98:	79fb      	ldrb	r3, [r7, #7]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d105      	bne.n	8009caa <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8009c9e:	683a      	ldr	r2, [r7, #0]
 8009ca0:	4907      	ldr	r1, [pc, #28]	; (8009cc0 <USBD_HS_ProductStrDescriptor+0x34>)
 8009ca2:	4808      	ldr	r0, [pc, #32]	; (8009cc4 <USBD_HS_ProductStrDescriptor+0x38>)
 8009ca4:	f7ff fdf6 	bl	8009894 <USBD_GetString>
 8009ca8:	e004      	b.n	8009cb4 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8009caa:	683a      	ldr	r2, [r7, #0]
 8009cac:	4904      	ldr	r1, [pc, #16]	; (8009cc0 <USBD_HS_ProductStrDescriptor+0x34>)
 8009cae:	4805      	ldr	r0, [pc, #20]	; (8009cc4 <USBD_HS_ProductStrDescriptor+0x38>)
 8009cb0:	f7ff fdf0 	bl	8009894 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009cb4:	4b02      	ldr	r3, [pc, #8]	; (8009cc0 <USBD_HS_ProductStrDescriptor+0x34>)
}
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	3708      	adds	r7, #8
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	bd80      	pop	{r7, pc}
 8009cbe:	bf00      	nop
 8009cc0:	24001490 	.word	0x24001490
 8009cc4:	0800a6c4 	.word	0x0800a6c4

08009cc8 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b082      	sub	sp, #8
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	4603      	mov	r3, r0
 8009cd0:	6039      	str	r1, [r7, #0]
 8009cd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009cd4:	683a      	ldr	r2, [r7, #0]
 8009cd6:	4904      	ldr	r1, [pc, #16]	; (8009ce8 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8009cd8:	4804      	ldr	r0, [pc, #16]	; (8009cec <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8009cda:	f7ff fddb 	bl	8009894 <USBD_GetString>
  return USBD_StrDesc;
 8009cde:	4b02      	ldr	r3, [pc, #8]	; (8009ce8 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	3708      	adds	r7, #8
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	bd80      	pop	{r7, pc}
 8009ce8:	24001490 	.word	0x24001490
 8009cec:	0800a6dc 	.word	0x0800a6dc

08009cf0 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b082      	sub	sp, #8
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	6039      	str	r1, [r7, #0]
 8009cfa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	221a      	movs	r2, #26
 8009d00:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009d02:	f000 f843 	bl	8009d8c <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8009d06:	4b02      	ldr	r3, [pc, #8]	; (8009d10 <USBD_HS_SerialStrDescriptor+0x20>)
}
 8009d08:	4618      	mov	r0, r3
 8009d0a:	3708      	adds	r7, #8
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	bd80      	pop	{r7, pc}
 8009d10:	240000e4 	.word	0x240000e4

08009d14 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b082      	sub	sp, #8
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	6039      	str	r1, [r7, #0]
 8009d1e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009d20:	79fb      	ldrb	r3, [r7, #7]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d105      	bne.n	8009d32 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8009d26:	683a      	ldr	r2, [r7, #0]
 8009d28:	4907      	ldr	r1, [pc, #28]	; (8009d48 <USBD_HS_ConfigStrDescriptor+0x34>)
 8009d2a:	4808      	ldr	r0, [pc, #32]	; (8009d4c <USBD_HS_ConfigStrDescriptor+0x38>)
 8009d2c:	f7ff fdb2 	bl	8009894 <USBD_GetString>
 8009d30:	e004      	b.n	8009d3c <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8009d32:	683a      	ldr	r2, [r7, #0]
 8009d34:	4904      	ldr	r1, [pc, #16]	; (8009d48 <USBD_HS_ConfigStrDescriptor+0x34>)
 8009d36:	4805      	ldr	r0, [pc, #20]	; (8009d4c <USBD_HS_ConfigStrDescriptor+0x38>)
 8009d38:	f7ff fdac 	bl	8009894 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009d3c:	4b02      	ldr	r3, [pc, #8]	; (8009d48 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8009d3e:	4618      	mov	r0, r3
 8009d40:	3708      	adds	r7, #8
 8009d42:	46bd      	mov	sp, r7
 8009d44:	bd80      	pop	{r7, pc}
 8009d46:	bf00      	nop
 8009d48:	24001490 	.word	0x24001490
 8009d4c:	0800a6f0 	.word	0x0800a6f0

08009d50 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b082      	sub	sp, #8
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	4603      	mov	r3, r0
 8009d58:	6039      	str	r1, [r7, #0]
 8009d5a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009d5c:	79fb      	ldrb	r3, [r7, #7]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d105      	bne.n	8009d6e <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8009d62:	683a      	ldr	r2, [r7, #0]
 8009d64:	4907      	ldr	r1, [pc, #28]	; (8009d84 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8009d66:	4808      	ldr	r0, [pc, #32]	; (8009d88 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8009d68:	f7ff fd94 	bl	8009894 <USBD_GetString>
 8009d6c:	e004      	b.n	8009d78 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8009d6e:	683a      	ldr	r2, [r7, #0]
 8009d70:	4904      	ldr	r1, [pc, #16]	; (8009d84 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8009d72:	4805      	ldr	r0, [pc, #20]	; (8009d88 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8009d74:	f7ff fd8e 	bl	8009894 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009d78:	4b02      	ldr	r3, [pc, #8]	; (8009d84 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	3708      	adds	r7, #8
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	bd80      	pop	{r7, pc}
 8009d82:	bf00      	nop
 8009d84:	24001490 	.word	0x24001490
 8009d88:	0800a6fc 	.word	0x0800a6fc

08009d8c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b084      	sub	sp, #16
 8009d90:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009d92:	4b0f      	ldr	r3, [pc, #60]	; (8009dd0 <Get_SerialNum+0x44>)
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009d98:	4b0e      	ldr	r3, [pc, #56]	; (8009dd4 <Get_SerialNum+0x48>)
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009d9e:	4b0e      	ldr	r3, [pc, #56]	; (8009dd8 <Get_SerialNum+0x4c>)
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009da4:	68fa      	ldr	r2, [r7, #12]
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	4413      	add	r3, r2
 8009daa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d009      	beq.n	8009dc6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009db2:	2208      	movs	r2, #8
 8009db4:	4909      	ldr	r1, [pc, #36]	; (8009ddc <Get_SerialNum+0x50>)
 8009db6:	68f8      	ldr	r0, [r7, #12]
 8009db8:	f000 f814 	bl	8009de4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009dbc:	2204      	movs	r2, #4
 8009dbe:	4908      	ldr	r1, [pc, #32]	; (8009de0 <Get_SerialNum+0x54>)
 8009dc0:	68b8      	ldr	r0, [r7, #8]
 8009dc2:	f000 f80f 	bl	8009de4 <IntToUnicode>
  }
}
 8009dc6:	bf00      	nop
 8009dc8:	3710      	adds	r7, #16
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}
 8009dce:	bf00      	nop
 8009dd0:	1ff1e800 	.word	0x1ff1e800
 8009dd4:	1ff1e804 	.word	0x1ff1e804
 8009dd8:	1ff1e808 	.word	0x1ff1e808
 8009ddc:	240000e6 	.word	0x240000e6
 8009de0:	240000f6 	.word	0x240000f6

08009de4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009de4:	b480      	push	{r7}
 8009de6:	b087      	sub	sp, #28
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	60f8      	str	r0, [r7, #12]
 8009dec:	60b9      	str	r1, [r7, #8]
 8009dee:	4613      	mov	r3, r2
 8009df0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009df2:	2300      	movs	r3, #0
 8009df4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009df6:	2300      	movs	r3, #0
 8009df8:	75fb      	strb	r3, [r7, #23]
 8009dfa:	e027      	b.n	8009e4c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	0f1b      	lsrs	r3, r3, #28
 8009e00:	2b09      	cmp	r3, #9
 8009e02:	d80b      	bhi.n	8009e1c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	0f1b      	lsrs	r3, r3, #28
 8009e08:	b2da      	uxtb	r2, r3
 8009e0a:	7dfb      	ldrb	r3, [r7, #23]
 8009e0c:	005b      	lsls	r3, r3, #1
 8009e0e:	4619      	mov	r1, r3
 8009e10:	68bb      	ldr	r3, [r7, #8]
 8009e12:	440b      	add	r3, r1
 8009e14:	3230      	adds	r2, #48	; 0x30
 8009e16:	b2d2      	uxtb	r2, r2
 8009e18:	701a      	strb	r2, [r3, #0]
 8009e1a:	e00a      	b.n	8009e32 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	0f1b      	lsrs	r3, r3, #28
 8009e20:	b2da      	uxtb	r2, r3
 8009e22:	7dfb      	ldrb	r3, [r7, #23]
 8009e24:	005b      	lsls	r3, r3, #1
 8009e26:	4619      	mov	r1, r3
 8009e28:	68bb      	ldr	r3, [r7, #8]
 8009e2a:	440b      	add	r3, r1
 8009e2c:	3237      	adds	r2, #55	; 0x37
 8009e2e:	b2d2      	uxtb	r2, r2
 8009e30:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	011b      	lsls	r3, r3, #4
 8009e36:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009e38:	7dfb      	ldrb	r3, [r7, #23]
 8009e3a:	005b      	lsls	r3, r3, #1
 8009e3c:	3301      	adds	r3, #1
 8009e3e:	68ba      	ldr	r2, [r7, #8]
 8009e40:	4413      	add	r3, r2
 8009e42:	2200      	movs	r2, #0
 8009e44:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009e46:	7dfb      	ldrb	r3, [r7, #23]
 8009e48:	3301      	adds	r3, #1
 8009e4a:	75fb      	strb	r3, [r7, #23]
 8009e4c:	7dfa      	ldrb	r2, [r7, #23]
 8009e4e:	79fb      	ldrb	r3, [r7, #7]
 8009e50:	429a      	cmp	r2, r3
 8009e52:	d3d3      	bcc.n	8009dfc <IntToUnicode+0x18>
  }
}
 8009e54:	bf00      	nop
 8009e56:	bf00      	nop
 8009e58:	371c      	adds	r7, #28
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e60:	4770      	bx	lr
	...

08009e64 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b0be      	sub	sp, #248	; 0xf8
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009e6c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8009e70:	2200      	movs	r2, #0
 8009e72:	601a      	str	r2, [r3, #0]
 8009e74:	605a      	str	r2, [r3, #4]
 8009e76:	609a      	str	r2, [r3, #8]
 8009e78:	60da      	str	r2, [r3, #12]
 8009e7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009e7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009e80:	22c0      	movs	r2, #192	; 0xc0
 8009e82:	2100      	movs	r1, #0
 8009e84:	4618      	mov	r0, r3
 8009e86:	f000 fc01 	bl	800a68c <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	4a83      	ldr	r2, [pc, #524]	; (800a09c <HAL_PCD_MspInit+0x238>)
 8009e90:	4293      	cmp	r3, r2
 8009e92:	f040 80ff 	bne.w	800a094 <HAL_PCD_MspInit+0x230>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8009e96:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009e9a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8009e9c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009ea0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009ea4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	f7f9 fda9 	bl	8003a00 <HAL_RCCEx_PeriphCLKConfig>
 8009eae:	4603      	mov	r3, r0
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d001      	beq.n	8009eb8 <HAL_PCD_MspInit+0x54>
    {
      Error_Handler();
 8009eb4:	f7f6 fd98 	bl	80009e8 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8009eb8:	f7f8 fd6e 	bl	8002998 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009ebc:	4b78      	ldr	r3, [pc, #480]	; (800a0a0 <HAL_PCD_MspInit+0x23c>)
 8009ebe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009ec2:	4a77      	ldr	r2, [pc, #476]	; (800a0a0 <HAL_PCD_MspInit+0x23c>)
 8009ec4:	f043 0302 	orr.w	r3, r3, #2
 8009ec8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009ecc:	4b74      	ldr	r3, [pc, #464]	; (800a0a0 <HAL_PCD_MspInit+0x23c>)
 8009ece:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009ed2:	f003 0302 	and.w	r3, r3, #2
 8009ed6:	623b      	str	r3, [r7, #32]
 8009ed8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8009eda:	4b71      	ldr	r3, [pc, #452]	; (800a0a0 <HAL_PCD_MspInit+0x23c>)
 8009edc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009ee0:	4a6f      	ldr	r2, [pc, #444]	; (800a0a0 <HAL_PCD_MspInit+0x23c>)
 8009ee2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ee6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009eea:	4b6d      	ldr	r3, [pc, #436]	; (800a0a0 <HAL_PCD_MspInit+0x23c>)
 8009eec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009ef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ef4:	61fb      	str	r3, [r7, #28]
 8009ef6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009ef8:	4b69      	ldr	r3, [pc, #420]	; (800a0a0 <HAL_PCD_MspInit+0x23c>)
 8009efa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009efe:	4a68      	ldr	r2, [pc, #416]	; (800a0a0 <HAL_PCD_MspInit+0x23c>)
 8009f00:	f043 0304 	orr.w	r3, r3, #4
 8009f04:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009f08:	4b65      	ldr	r3, [pc, #404]	; (800a0a0 <HAL_PCD_MspInit+0x23c>)
 8009f0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009f0e:	f003 0304 	and.w	r3, r3, #4
 8009f12:	61bb      	str	r3, [r7, #24]
 8009f14:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8009f16:	4b62      	ldr	r3, [pc, #392]	; (800a0a0 <HAL_PCD_MspInit+0x23c>)
 8009f18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009f1c:	4a60      	ldr	r2, [pc, #384]	; (800a0a0 <HAL_PCD_MspInit+0x23c>)
 8009f1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009f26:	4b5e      	ldr	r3, [pc, #376]	; (800a0a0 <HAL_PCD_MspInit+0x23c>)
 8009f28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009f2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f30:	617b      	str	r3, [r7, #20]
 8009f32:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009f34:	4b5a      	ldr	r3, [pc, #360]	; (800a0a0 <HAL_PCD_MspInit+0x23c>)
 8009f36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009f3a:	4a59      	ldr	r2, [pc, #356]	; (800a0a0 <HAL_PCD_MspInit+0x23c>)
 8009f3c:	f043 0301 	orr.w	r3, r3, #1
 8009f40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009f44:	4b56      	ldr	r3, [pc, #344]	; (800a0a0 <HAL_PCD_MspInit+0x23c>)
 8009f46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009f4a:	f003 0301 	and.w	r3, r3, #1
 8009f4e:	613b      	str	r3, [r7, #16]
 8009f50:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ULPI_D5
    PA3     ------> USB_OTG_HS_ULPI_D0
    PB0     ------> USB_OTG_HS_ULPI_D1
    PB13     ------> USB_OTG_HS_ULPI_D6
    */
    GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D3_Pin|ULPI_D4_Pin|ULPI_D2_Pin
 8009f52:	f643 4323 	movw	r3, #15395	; 0x3c23
 8009f56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |ULPI_D5_Pin|ULPI_D1_Pin|ULPI_D6_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f5a:	2302      	movs	r3, #2
 8009f5c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f60:	2300      	movs	r3, #0
 8009f62:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009f66:	2302      	movs	r3, #2
 8009f68:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8009f6c:	230a      	movs	r3, #10
 8009f6e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009f72:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8009f76:	4619      	mov	r1, r3
 8009f78:	484a      	ldr	r0, [pc, #296]	; (800a0a4 <HAL_PCD_MspInit+0x240>)
 8009f7a:	f7f6 ffff 	bl	8000f7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_DIR_Pin;
 8009f7e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009f82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f86:	2302      	movs	r3, #2
 8009f88:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009f92:	2302      	movs	r3, #2
 8009f94:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8009f98:	230a      	movs	r3, #10
 8009f9a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(ULPI_DIR_GPIO_Port, &GPIO_InitStruct);
 8009f9e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8009fa2:	4619      	mov	r1, r3
 8009fa4:	4840      	ldr	r0, [pc, #256]	; (800a0a8 <HAL_PCD_MspInit+0x244>)
 8009fa6:	f7f6 ffe9 	bl	8000f7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_STP_Pin;
 8009faa:	2301      	movs	r3, #1
 8009fac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009fb0:	2302      	movs	r3, #2
 8009fb2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009fbc:	2302      	movs	r3, #2
 8009fbe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8009fc2:	230a      	movs	r3, #10
 8009fc4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(ULPI_STP_GPIO_Port, &GPIO_InitStruct);
 8009fc8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8009fcc:	4619      	mov	r1, r3
 8009fce:	4837      	ldr	r0, [pc, #220]	; (800a0ac <HAL_PCD_MspInit+0x248>)
 8009fd0:	f7f6 ffd4 	bl	8000f7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8009fd4:	2310      	movs	r3, #16
 8009fd6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009fda:	2302      	movs	r3, #2
 8009fdc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009fe6:	2302      	movs	r3, #2
 8009fe8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8009fec:	230a      	movs	r3, #10
 8009fee:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8009ff2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8009ff6:	4619      	mov	r1, r3
 8009ff8:	482d      	ldr	r0, [pc, #180]	; (800a0b0 <HAL_PCD_MspInit+0x24c>)
 8009ffa:	f7f6 ffbf 	bl	8000f7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_CK_Pin|ULPI_D0_Pin;
 8009ffe:	2328      	movs	r3, #40	; 0x28
 800a000:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a004:	2302      	movs	r3, #2
 800a006:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a00a:	2300      	movs	r3, #0
 800a00c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a010:	2302      	movs	r3, #2
 800a012:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 800a016:	230a      	movs	r3, #10
 800a018:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a01c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800a020:	4619      	mov	r1, r3
 800a022:	4824      	ldr	r0, [pc, #144]	; (800a0b4 <HAL_PCD_MspInit+0x250>)
 800a024:	f7f6 ffaa 	bl	8000f7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800a028:	4b1d      	ldr	r3, [pc, #116]	; (800a0a0 <HAL_PCD_MspInit+0x23c>)
 800a02a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a02e:	4a1c      	ldr	r2, [pc, #112]	; (800a0a0 <HAL_PCD_MspInit+0x23c>)
 800a030:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a034:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800a038:	4b19      	ldr	r3, [pc, #100]	; (800a0a0 <HAL_PCD_MspInit+0x23c>)
 800a03a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a03e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a042:	60fb      	str	r3, [r7, #12]
 800a044:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 800a046:	4b16      	ldr	r3, [pc, #88]	; (800a0a0 <HAL_PCD_MspInit+0x23c>)
 800a048:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a04c:	4a14      	ldr	r2, [pc, #80]	; (800a0a0 <HAL_PCD_MspInit+0x23c>)
 800a04e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a052:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800a056:	4b12      	ldr	r3, [pc, #72]	; (800a0a0 <HAL_PCD_MspInit+0x23c>)
 800a058:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a05c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a060:	60bb      	str	r3, [r7, #8]
 800a062:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_EP1_OUT_IRQn, 0, 0);
 800a064:	2200      	movs	r2, #0
 800a066:	2100      	movs	r1, #0
 800a068:	204a      	movs	r0, #74	; 0x4a
 800a06a:	f7f6 ff52 	bl	8000f12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_EP1_OUT_IRQn);
 800a06e:	204a      	movs	r0, #74	; 0x4a
 800a070:	f7f6 ff69 	bl	8000f46 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_HS_EP1_IN_IRQn, 0, 0);
 800a074:	2200      	movs	r2, #0
 800a076:	2100      	movs	r1, #0
 800a078:	204b      	movs	r0, #75	; 0x4b
 800a07a:	f7f6 ff4a 	bl	8000f12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_EP1_IN_IRQn);
 800a07e:	204b      	movs	r0, #75	; 0x4b
 800a080:	f7f6 ff61 	bl	8000f46 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800a084:	2200      	movs	r2, #0
 800a086:	2100      	movs	r1, #0
 800a088:	204d      	movs	r0, #77	; 0x4d
 800a08a:	f7f6 ff42 	bl	8000f12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800a08e:	204d      	movs	r0, #77	; 0x4d
 800a090:	f7f6 ff59 	bl	8000f46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800a094:	bf00      	nop
 800a096:	37f8      	adds	r7, #248	; 0xf8
 800a098:	46bd      	mov	sp, r7
 800a09a:	bd80      	pop	{r7, pc}
 800a09c:	40040000 	.word	0x40040000
 800a0a0:	58024400 	.word	0x58024400
 800a0a4:	58020400 	.word	0x58020400
 800a0a8:	58022000 	.word	0x58022000
 800a0ac:	58020800 	.word	0x58020800
 800a0b0:	58021c00 	.word	0x58021c00
 800a0b4:	58020000 	.word	0x58020000

0800a0b8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b082      	sub	sp, #8
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a0cc:	4619      	mov	r1, r3
 800a0ce:	4610      	mov	r0, r2
 800a0d0:	f7fe fa81 	bl	80085d6 <USBD_LL_SetupStage>
}
 800a0d4:	bf00      	nop
 800a0d6:	3708      	adds	r7, #8
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	bd80      	pop	{r7, pc}

0800a0dc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b082      	sub	sp, #8
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
 800a0e4:	460b      	mov	r3, r1
 800a0e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a0ee:	78fa      	ldrb	r2, [r7, #3]
 800a0f0:	6879      	ldr	r1, [r7, #4]
 800a0f2:	4613      	mov	r3, r2
 800a0f4:	00db      	lsls	r3, r3, #3
 800a0f6:	4413      	add	r3, r2
 800a0f8:	009b      	lsls	r3, r3, #2
 800a0fa:	440b      	add	r3, r1
 800a0fc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800a100:	681a      	ldr	r2, [r3, #0]
 800a102:	78fb      	ldrb	r3, [r7, #3]
 800a104:	4619      	mov	r1, r3
 800a106:	f7fe fabb 	bl	8008680 <USBD_LL_DataOutStage>
}
 800a10a:	bf00      	nop
 800a10c:	3708      	adds	r7, #8
 800a10e:	46bd      	mov	sp, r7
 800a110:	bd80      	pop	{r7, pc}

0800a112 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a112:	b580      	push	{r7, lr}
 800a114:	b082      	sub	sp, #8
 800a116:	af00      	add	r7, sp, #0
 800a118:	6078      	str	r0, [r7, #4]
 800a11a:	460b      	mov	r3, r1
 800a11c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a124:	78fa      	ldrb	r2, [r7, #3]
 800a126:	6879      	ldr	r1, [r7, #4]
 800a128:	4613      	mov	r3, r2
 800a12a:	00db      	lsls	r3, r3, #3
 800a12c:	4413      	add	r3, r2
 800a12e:	009b      	lsls	r3, r3, #2
 800a130:	440b      	add	r3, r1
 800a132:	334c      	adds	r3, #76	; 0x4c
 800a134:	681a      	ldr	r2, [r3, #0]
 800a136:	78fb      	ldrb	r3, [r7, #3]
 800a138:	4619      	mov	r1, r3
 800a13a:	f7fe fb54 	bl	80087e6 <USBD_LL_DataInStage>
}
 800a13e:	bf00      	nop
 800a140:	3708      	adds	r7, #8
 800a142:	46bd      	mov	sp, r7
 800a144:	bd80      	pop	{r7, pc}

0800a146 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a146:	b580      	push	{r7, lr}
 800a148:	b082      	sub	sp, #8
 800a14a:	af00      	add	r7, sp, #0
 800a14c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a154:	4618      	mov	r0, r3
 800a156:	f7fe fc88 	bl	8008a6a <USBD_LL_SOF>
}
 800a15a:	bf00      	nop
 800a15c:	3708      	adds	r7, #8
 800a15e:	46bd      	mov	sp, r7
 800a160:	bd80      	pop	{r7, pc}

0800a162 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a162:	b580      	push	{r7, lr}
 800a164:	b084      	sub	sp, #16
 800a166:	af00      	add	r7, sp, #0
 800a168:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a16a:	2301      	movs	r3, #1
 800a16c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	68db      	ldr	r3, [r3, #12]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d102      	bne.n	800a17c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a176:	2300      	movs	r3, #0
 800a178:	73fb      	strb	r3, [r7, #15]
 800a17a:	e008      	b.n	800a18e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	68db      	ldr	r3, [r3, #12]
 800a180:	2b02      	cmp	r3, #2
 800a182:	d102      	bne.n	800a18a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a184:	2301      	movs	r3, #1
 800a186:	73fb      	strb	r3, [r7, #15]
 800a188:	e001      	b.n	800a18e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a18a:	f7f6 fc2d 	bl	80009e8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a194:	7bfa      	ldrb	r2, [r7, #15]
 800a196:	4611      	mov	r1, r2
 800a198:	4618      	mov	r0, r3
 800a19a:	f7fe fc28 	bl	80089ee <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	f7fe fbd0 	bl	800894a <USBD_LL_Reset>
}
 800a1aa:	bf00      	nop
 800a1ac:	3710      	adds	r7, #16
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	bd80      	pop	{r7, pc}
	...

0800a1b4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b082      	sub	sp, #8
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	f7fe fc23 	bl	8008a0e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	687a      	ldr	r2, [r7, #4]
 800a1d4:	6812      	ldr	r2, [r2, #0]
 800a1d6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a1da:	f043 0301 	orr.w	r3, r3, #1
 800a1de:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	6a1b      	ldr	r3, [r3, #32]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d005      	beq.n	800a1f4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a1e8:	4b04      	ldr	r3, [pc, #16]	; (800a1fc <HAL_PCD_SuspendCallback+0x48>)
 800a1ea:	691b      	ldr	r3, [r3, #16]
 800a1ec:	4a03      	ldr	r2, [pc, #12]	; (800a1fc <HAL_PCD_SuspendCallback+0x48>)
 800a1ee:	f043 0306 	orr.w	r3, r3, #6
 800a1f2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a1f4:	bf00      	nop
 800a1f6:	3708      	adds	r7, #8
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	bd80      	pop	{r7, pc}
 800a1fc:	e000ed00 	.word	0xe000ed00

0800a200 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b082      	sub	sp, #8
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a20e:	4618      	mov	r0, r3
 800a210:	f7fe fc13 	bl	8008a3a <USBD_LL_Resume>
}
 800a214:	bf00      	nop
 800a216:	3708      	adds	r7, #8
 800a218:	46bd      	mov	sp, r7
 800a21a:	bd80      	pop	{r7, pc}

0800a21c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b082      	sub	sp, #8
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
 800a224:	460b      	mov	r3, r1
 800a226:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a22e:	78fa      	ldrb	r2, [r7, #3]
 800a230:	4611      	mov	r1, r2
 800a232:	4618      	mov	r0, r3
 800a234:	f7fe fc6b 	bl	8008b0e <USBD_LL_IsoOUTIncomplete>
}
 800a238:	bf00      	nop
 800a23a:	3708      	adds	r7, #8
 800a23c:	46bd      	mov	sp, r7
 800a23e:	bd80      	pop	{r7, pc}

0800a240 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b082      	sub	sp, #8
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
 800a248:	460b      	mov	r3, r1
 800a24a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a252:	78fa      	ldrb	r2, [r7, #3]
 800a254:	4611      	mov	r1, r2
 800a256:	4618      	mov	r0, r3
 800a258:	f7fe fc27 	bl	8008aaa <USBD_LL_IsoINIncomplete>
}
 800a25c:	bf00      	nop
 800a25e:	3708      	adds	r7, #8
 800a260:	46bd      	mov	sp, r7
 800a262:	bd80      	pop	{r7, pc}

0800a264 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b082      	sub	sp, #8
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a272:	4618      	mov	r0, r3
 800a274:	f7fe fc7d 	bl	8008b72 <USBD_LL_DevConnected>
}
 800a278:	bf00      	nop
 800a27a:	3708      	adds	r7, #8
 800a27c:	46bd      	mov	sp, r7
 800a27e:	bd80      	pop	{r7, pc}

0800a280 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b082      	sub	sp, #8
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a28e:	4618      	mov	r0, r3
 800a290:	f7fe fc7a 	bl	8008b88 <USBD_LL_DevDisconnected>
}
 800a294:	bf00      	nop
 800a296:	3708      	adds	r7, #8
 800a298:	46bd      	mov	sp, r7
 800a29a:	bd80      	pop	{r7, pc}

0800a29c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b082      	sub	sp, #8
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	781b      	ldrb	r3, [r3, #0]
 800a2a8:	2b01      	cmp	r3, #1
 800a2aa:	d140      	bne.n	800a32e <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800a2ac:	4a22      	ldr	r2, [pc, #136]	; (800a338 <USBD_LL_Init+0x9c>)
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	4a20      	ldr	r2, [pc, #128]	; (800a338 <USBD_LL_Init+0x9c>)
 800a2b8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800a2bc:	4b1e      	ldr	r3, [pc, #120]	; (800a338 <USBD_LL_Init+0x9c>)
 800a2be:	4a1f      	ldr	r2, [pc, #124]	; (800a33c <USBD_LL_Init+0xa0>)
 800a2c0:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 800a2c2:	4b1d      	ldr	r3, [pc, #116]	; (800a338 <USBD_LL_Init+0x9c>)
 800a2c4:	2209      	movs	r2, #9
 800a2c6:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 800a2c8:	4b1b      	ldr	r3, [pc, #108]	; (800a338 <USBD_LL_Init+0x9c>)
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800a2ce:	4b1a      	ldr	r3, [pc, #104]	; (800a338 <USBD_LL_Init+0x9c>)
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 800a2d4:	4b18      	ldr	r3, [pc, #96]	; (800a338 <USBD_LL_Init+0x9c>)
 800a2d6:	2201      	movs	r2, #1
 800a2d8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800a2da:	4b17      	ldr	r3, [pc, #92]	; (800a338 <USBD_LL_Init+0x9c>)
 800a2dc:	2200      	movs	r2, #0
 800a2de:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800a2e0:	4b15      	ldr	r3, [pc, #84]	; (800a338 <USBD_LL_Init+0x9c>)
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800a2e6:	4b14      	ldr	r3, [pc, #80]	; (800a338 <USBD_LL_Init+0x9c>)
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800a2ec:	4b12      	ldr	r3, [pc, #72]	; (800a338 <USBD_LL_Init+0x9c>)
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800a2f2:	4b11      	ldr	r3, [pc, #68]	; (800a338 <USBD_LL_Init+0x9c>)
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800a2f8:	4b0f      	ldr	r3, [pc, #60]	; (800a338 <USBD_LL_Init+0x9c>)
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800a2fe:	480e      	ldr	r0, [pc, #56]	; (800a338 <USBD_LL_Init+0x9c>)
 800a300:	f7f7 f81a 	bl	8001338 <HAL_PCD_Init>
 800a304:	4603      	mov	r3, r0
 800a306:	2b00      	cmp	r3, #0
 800a308:	d001      	beq.n	800a30e <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800a30a:	f7f6 fb6d 	bl	80009e8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800a30e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a312:	4809      	ldr	r0, [pc, #36]	; (800a338 <USBD_LL_Init+0x9c>)
 800a314:	f7f8 faa5 	bl	8002862 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800a318:	2280      	movs	r2, #128	; 0x80
 800a31a:	2100      	movs	r1, #0
 800a31c:	4806      	ldr	r0, [pc, #24]	; (800a338 <USBD_LL_Init+0x9c>)
 800a31e:	f7f8 fa59 	bl	80027d4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800a322:	f44f 72ba 	mov.w	r2, #372	; 0x174
 800a326:	2101      	movs	r1, #1
 800a328:	4803      	ldr	r0, [pc, #12]	; (800a338 <USBD_LL_Init+0x9c>)
 800a32a:	f7f8 fa53 	bl	80027d4 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 800a32e:	2300      	movs	r3, #0
}
 800a330:	4618      	mov	r0, r3
 800a332:	3708      	adds	r7, #8
 800a334:	46bd      	mov	sp, r7
 800a336:	bd80      	pop	{r7, pc}
 800a338:	24001690 	.word	0x24001690
 800a33c:	40040000 	.word	0x40040000

0800a340 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b084      	sub	sp, #16
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a348:	2300      	movs	r3, #0
 800a34a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a34c:	2300      	movs	r3, #0
 800a34e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a356:	4618      	mov	r0, r3
 800a358:	f7f7 f912 	bl	8001580 <HAL_PCD_Start>
 800a35c:	4603      	mov	r3, r0
 800a35e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a360:	7bfb      	ldrb	r3, [r7, #15]
 800a362:	4618      	mov	r0, r3
 800a364:	f000 f942 	bl	800a5ec <USBD_Get_USB_Status>
 800a368:	4603      	mov	r3, r0
 800a36a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a36c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a36e:	4618      	mov	r0, r3
 800a370:	3710      	adds	r7, #16
 800a372:	46bd      	mov	sp, r7
 800a374:	bd80      	pop	{r7, pc}

0800a376 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a376:	b580      	push	{r7, lr}
 800a378:	b084      	sub	sp, #16
 800a37a:	af00      	add	r7, sp, #0
 800a37c:	6078      	str	r0, [r7, #4]
 800a37e:	4608      	mov	r0, r1
 800a380:	4611      	mov	r1, r2
 800a382:	461a      	mov	r2, r3
 800a384:	4603      	mov	r3, r0
 800a386:	70fb      	strb	r3, [r7, #3]
 800a388:	460b      	mov	r3, r1
 800a38a:	70bb      	strb	r3, [r7, #2]
 800a38c:	4613      	mov	r3, r2
 800a38e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a390:	2300      	movs	r3, #0
 800a392:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a394:	2300      	movs	r3, #0
 800a396:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a39e:	78bb      	ldrb	r3, [r7, #2]
 800a3a0:	883a      	ldrh	r2, [r7, #0]
 800a3a2:	78f9      	ldrb	r1, [r7, #3]
 800a3a4:	f7f7 fe10 	bl	8001fc8 <HAL_PCD_EP_Open>
 800a3a8:	4603      	mov	r3, r0
 800a3aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3ac:	7bfb      	ldrb	r3, [r7, #15]
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	f000 f91c 	bl	800a5ec <USBD_Get_USB_Status>
 800a3b4:	4603      	mov	r3, r0
 800a3b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a3b8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	3710      	adds	r7, #16
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	bd80      	pop	{r7, pc}

0800a3c2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a3c2:	b580      	push	{r7, lr}
 800a3c4:	b084      	sub	sp, #16
 800a3c6:	af00      	add	r7, sp, #0
 800a3c8:	6078      	str	r0, [r7, #4]
 800a3ca:	460b      	mov	r3, r1
 800a3cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a3dc:	78fa      	ldrb	r2, [r7, #3]
 800a3de:	4611      	mov	r1, r2
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	f7f7 fe59 	bl	8002098 <HAL_PCD_EP_Close>
 800a3e6:	4603      	mov	r3, r0
 800a3e8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3ea:	7bfb      	ldrb	r3, [r7, #15]
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	f000 f8fd 	bl	800a5ec <USBD_Get_USB_Status>
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a3f6:	7bbb      	ldrb	r3, [r7, #14]
}
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	3710      	adds	r7, #16
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	bd80      	pop	{r7, pc}

0800a400 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b084      	sub	sp, #16
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
 800a408:	460b      	mov	r3, r1
 800a40a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a40c:	2300      	movs	r3, #0
 800a40e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a410:	2300      	movs	r3, #0
 800a412:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a41a:	78fa      	ldrb	r2, [r7, #3]
 800a41c:	4611      	mov	r1, r2
 800a41e:	4618      	mov	r0, r3
 800a420:	f7f7 ff31 	bl	8002286 <HAL_PCD_EP_SetStall>
 800a424:	4603      	mov	r3, r0
 800a426:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a428:	7bfb      	ldrb	r3, [r7, #15]
 800a42a:	4618      	mov	r0, r3
 800a42c:	f000 f8de 	bl	800a5ec <USBD_Get_USB_Status>
 800a430:	4603      	mov	r3, r0
 800a432:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a434:	7bbb      	ldrb	r3, [r7, #14]
}
 800a436:	4618      	mov	r0, r3
 800a438:	3710      	adds	r7, #16
 800a43a:	46bd      	mov	sp, r7
 800a43c:	bd80      	pop	{r7, pc}

0800a43e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a43e:	b580      	push	{r7, lr}
 800a440:	b084      	sub	sp, #16
 800a442:	af00      	add	r7, sp, #0
 800a444:	6078      	str	r0, [r7, #4]
 800a446:	460b      	mov	r3, r1
 800a448:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a44a:	2300      	movs	r3, #0
 800a44c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a44e:	2300      	movs	r3, #0
 800a450:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a458:	78fa      	ldrb	r2, [r7, #3]
 800a45a:	4611      	mov	r1, r2
 800a45c:	4618      	mov	r0, r3
 800a45e:	f7f7 ff76 	bl	800234e <HAL_PCD_EP_ClrStall>
 800a462:	4603      	mov	r3, r0
 800a464:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a466:	7bfb      	ldrb	r3, [r7, #15]
 800a468:	4618      	mov	r0, r3
 800a46a:	f000 f8bf 	bl	800a5ec <USBD_Get_USB_Status>
 800a46e:	4603      	mov	r3, r0
 800a470:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a472:	7bbb      	ldrb	r3, [r7, #14]
}
 800a474:	4618      	mov	r0, r3
 800a476:	3710      	adds	r7, #16
 800a478:	46bd      	mov	sp, r7
 800a47a:	bd80      	pop	{r7, pc}

0800a47c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a47c:	b480      	push	{r7}
 800a47e:	b085      	sub	sp, #20
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
 800a484:	460b      	mov	r3, r1
 800a486:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a48e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a490:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a494:	2b00      	cmp	r3, #0
 800a496:	da0b      	bge.n	800a4b0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a498:	78fb      	ldrb	r3, [r7, #3]
 800a49a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a49e:	68f9      	ldr	r1, [r7, #12]
 800a4a0:	4613      	mov	r3, r2
 800a4a2:	00db      	lsls	r3, r3, #3
 800a4a4:	4413      	add	r3, r2
 800a4a6:	009b      	lsls	r3, r3, #2
 800a4a8:	440b      	add	r3, r1
 800a4aa:	333e      	adds	r3, #62	; 0x3e
 800a4ac:	781b      	ldrb	r3, [r3, #0]
 800a4ae:	e00b      	b.n	800a4c8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a4b0:	78fb      	ldrb	r3, [r7, #3]
 800a4b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a4b6:	68f9      	ldr	r1, [r7, #12]
 800a4b8:	4613      	mov	r3, r2
 800a4ba:	00db      	lsls	r3, r3, #3
 800a4bc:	4413      	add	r3, r2
 800a4be:	009b      	lsls	r3, r3, #2
 800a4c0:	440b      	add	r3, r1
 800a4c2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800a4c6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	3714      	adds	r7, #20
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d2:	4770      	bx	lr

0800a4d4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b084      	sub	sp, #16
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
 800a4dc:	460b      	mov	r3, r1
 800a4de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a4ee:	78fa      	ldrb	r2, [r7, #3]
 800a4f0:	4611      	mov	r1, r2
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	f7f7 fd43 	bl	8001f7e <HAL_PCD_SetAddress>
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a4fc:	7bfb      	ldrb	r3, [r7, #15]
 800a4fe:	4618      	mov	r0, r3
 800a500:	f000 f874 	bl	800a5ec <USBD_Get_USB_Status>
 800a504:	4603      	mov	r3, r0
 800a506:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a508:	7bbb      	ldrb	r3, [r7, #14]
}
 800a50a:	4618      	mov	r0, r3
 800a50c:	3710      	adds	r7, #16
 800a50e:	46bd      	mov	sp, r7
 800a510:	bd80      	pop	{r7, pc}

0800a512 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a512:	b580      	push	{r7, lr}
 800a514:	b086      	sub	sp, #24
 800a516:	af00      	add	r7, sp, #0
 800a518:	60f8      	str	r0, [r7, #12]
 800a51a:	607a      	str	r2, [r7, #4]
 800a51c:	603b      	str	r3, [r7, #0]
 800a51e:	460b      	mov	r3, r1
 800a520:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a522:	2300      	movs	r3, #0
 800a524:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a526:	2300      	movs	r3, #0
 800a528:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a530:	7af9      	ldrb	r1, [r7, #11]
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	687a      	ldr	r2, [r7, #4]
 800a536:	f7f7 fe5c 	bl	80021f2 <HAL_PCD_EP_Transmit>
 800a53a:	4603      	mov	r3, r0
 800a53c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a53e:	7dfb      	ldrb	r3, [r7, #23]
 800a540:	4618      	mov	r0, r3
 800a542:	f000 f853 	bl	800a5ec <USBD_Get_USB_Status>
 800a546:	4603      	mov	r3, r0
 800a548:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a54a:	7dbb      	ldrb	r3, [r7, #22]
}
 800a54c:	4618      	mov	r0, r3
 800a54e:	3718      	adds	r7, #24
 800a550:	46bd      	mov	sp, r7
 800a552:	bd80      	pop	{r7, pc}

0800a554 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b086      	sub	sp, #24
 800a558:	af00      	add	r7, sp, #0
 800a55a:	60f8      	str	r0, [r7, #12]
 800a55c:	607a      	str	r2, [r7, #4]
 800a55e:	603b      	str	r3, [r7, #0]
 800a560:	460b      	mov	r3, r1
 800a562:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a564:	2300      	movs	r3, #0
 800a566:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a568:	2300      	movs	r3, #0
 800a56a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a572:	7af9      	ldrb	r1, [r7, #11]
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	687a      	ldr	r2, [r7, #4]
 800a578:	f7f7 fdd8 	bl	800212c <HAL_PCD_EP_Receive>
 800a57c:	4603      	mov	r3, r0
 800a57e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a580:	7dfb      	ldrb	r3, [r7, #23]
 800a582:	4618      	mov	r0, r3
 800a584:	f000 f832 	bl	800a5ec <USBD_Get_USB_Status>
 800a588:	4603      	mov	r3, r0
 800a58a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a58c:	7dbb      	ldrb	r3, [r7, #22]
}
 800a58e:	4618      	mov	r0, r3
 800a590:	3718      	adds	r7, #24
 800a592:	46bd      	mov	sp, r7
 800a594:	bd80      	pop	{r7, pc}

0800a596 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a596:	b580      	push	{r7, lr}
 800a598:	b082      	sub	sp, #8
 800a59a:	af00      	add	r7, sp, #0
 800a59c:	6078      	str	r0, [r7, #4]
 800a59e:	460b      	mov	r3, r1
 800a5a0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a5a8:	78fa      	ldrb	r2, [r7, #3]
 800a5aa:	4611      	mov	r1, r2
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	f7f7 fe08 	bl	80021c2 <HAL_PCD_EP_GetRxCount>
 800a5b2:	4603      	mov	r3, r0
}
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	3708      	adds	r7, #8
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bd80      	pop	{r7, pc}

0800a5bc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a5bc:	b480      	push	{r7}
 800a5be:	b083      	sub	sp, #12
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a5c4:	4b03      	ldr	r3, [pc, #12]	; (800a5d4 <USBD_static_malloc+0x18>)
}
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	370c      	adds	r7, #12
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d0:	4770      	bx	lr
 800a5d2:	bf00      	nop
 800a5d4:	24001b9c 	.word	0x24001b9c

0800a5d8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a5d8:	b480      	push	{r7}
 800a5da:	b083      	sub	sp, #12
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]

}
 800a5e0:	bf00      	nop
 800a5e2:	370c      	adds	r7, #12
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ea:	4770      	bx	lr

0800a5ec <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a5ec:	b480      	push	{r7}
 800a5ee:	b085      	sub	sp, #20
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a5fa:	79fb      	ldrb	r3, [r7, #7]
 800a5fc:	2b03      	cmp	r3, #3
 800a5fe:	d817      	bhi.n	800a630 <USBD_Get_USB_Status+0x44>
 800a600:	a201      	add	r2, pc, #4	; (adr r2, 800a608 <USBD_Get_USB_Status+0x1c>)
 800a602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a606:	bf00      	nop
 800a608:	0800a619 	.word	0x0800a619
 800a60c:	0800a61f 	.word	0x0800a61f
 800a610:	0800a625 	.word	0x0800a625
 800a614:	0800a62b 	.word	0x0800a62b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a618:	2300      	movs	r3, #0
 800a61a:	73fb      	strb	r3, [r7, #15]
    break;
 800a61c:	e00b      	b.n	800a636 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a61e:	2303      	movs	r3, #3
 800a620:	73fb      	strb	r3, [r7, #15]
    break;
 800a622:	e008      	b.n	800a636 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a624:	2301      	movs	r3, #1
 800a626:	73fb      	strb	r3, [r7, #15]
    break;
 800a628:	e005      	b.n	800a636 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a62a:	2303      	movs	r3, #3
 800a62c:	73fb      	strb	r3, [r7, #15]
    break;
 800a62e:	e002      	b.n	800a636 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a630:	2303      	movs	r3, #3
 800a632:	73fb      	strb	r3, [r7, #15]
    break;
 800a634:	bf00      	nop
  }
  return usb_status;
 800a636:	7bfb      	ldrb	r3, [r7, #15]
}
 800a638:	4618      	mov	r0, r3
 800a63a:	3714      	adds	r7, #20
 800a63c:	46bd      	mov	sp, r7
 800a63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a642:	4770      	bx	lr

0800a644 <__libc_init_array>:
 800a644:	b570      	push	{r4, r5, r6, lr}
 800a646:	4d0d      	ldr	r5, [pc, #52]	; (800a67c <__libc_init_array+0x38>)
 800a648:	4c0d      	ldr	r4, [pc, #52]	; (800a680 <__libc_init_array+0x3c>)
 800a64a:	1b64      	subs	r4, r4, r5
 800a64c:	10a4      	asrs	r4, r4, #2
 800a64e:	2600      	movs	r6, #0
 800a650:	42a6      	cmp	r6, r4
 800a652:	d109      	bne.n	800a668 <__libc_init_array+0x24>
 800a654:	4d0b      	ldr	r5, [pc, #44]	; (800a684 <__libc_init_array+0x40>)
 800a656:	4c0c      	ldr	r4, [pc, #48]	; (800a688 <__libc_init_array+0x44>)
 800a658:	f000 f820 	bl	800a69c <_init>
 800a65c:	1b64      	subs	r4, r4, r5
 800a65e:	10a4      	asrs	r4, r4, #2
 800a660:	2600      	movs	r6, #0
 800a662:	42a6      	cmp	r6, r4
 800a664:	d105      	bne.n	800a672 <__libc_init_array+0x2e>
 800a666:	bd70      	pop	{r4, r5, r6, pc}
 800a668:	f855 3b04 	ldr.w	r3, [r5], #4
 800a66c:	4798      	blx	r3
 800a66e:	3601      	adds	r6, #1
 800a670:	e7ee      	b.n	800a650 <__libc_init_array+0xc>
 800a672:	f855 3b04 	ldr.w	r3, [r5], #4
 800a676:	4798      	blx	r3
 800a678:	3601      	adds	r6, #1
 800a67a:	e7f2      	b.n	800a662 <__libc_init_array+0x1e>
 800a67c:	0800a74c 	.word	0x0800a74c
 800a680:	0800a74c 	.word	0x0800a74c
 800a684:	0800a74c 	.word	0x0800a74c
 800a688:	0800a750 	.word	0x0800a750

0800a68c <memset>:
 800a68c:	4402      	add	r2, r0
 800a68e:	4603      	mov	r3, r0
 800a690:	4293      	cmp	r3, r2
 800a692:	d100      	bne.n	800a696 <memset+0xa>
 800a694:	4770      	bx	lr
 800a696:	f803 1b01 	strb.w	r1, [r3], #1
 800a69a:	e7f9      	b.n	800a690 <memset+0x4>

0800a69c <_init>:
 800a69c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a69e:	bf00      	nop
 800a6a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6a2:	bc08      	pop	{r3}
 800a6a4:	469e      	mov	lr, r3
 800a6a6:	4770      	bx	lr

0800a6a8 <_fini>:
 800a6a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6aa:	bf00      	nop
 800a6ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6ae:	bc08      	pop	{r3}
 800a6b0:	469e      	mov	lr, r3
 800a6b2:	4770      	bx	lr
