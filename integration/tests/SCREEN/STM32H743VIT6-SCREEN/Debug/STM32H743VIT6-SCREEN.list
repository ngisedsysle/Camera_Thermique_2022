
STM32H743VIT6-SCREEN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006164  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080063fc  080063fc  000163fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006434  08006434  00016434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800643c  0800643c  0001643c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006440  08006440  00016440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00025814  24000000  08006444  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000160  24025814  0802bc58  00045814  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24025974  0802bc58  00045974  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00045814  2**0
                  CONTENTS, READONLY
 10 .debug_info   00014263  00000000  00000000  00045842  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002515  00000000  00000000  00059aa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000ce0  00000000  00000000  0005bfc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000c08  00000000  00000000  0005cca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00038927  00000000  00000000  0005d8a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00011d52  00000000  00000000  000961cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015e939  00000000  00000000  000a7f21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0020685a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000034b0  00000000  00000000  002068ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24025814 	.word	0x24025814
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080063e4 	.word	0x080063e4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24025818 	.word	0x24025818
 80002d4:	080063e4 	.word	0x080063e4

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <FT801cmdWrite>:
#include "Lcd/FT801.h"

void FT801cmdWrite(SPI_HandleTypeDef *hspi, unsigned char ftCommand) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
 80005e4:	460b      	mov	r3, r1
 80005e6:	70fb      	strb	r3, [r7, #3]
	uint8_t tx[3] = { ftCommand, 0x00, 0x00 };
 80005e8:	78fb      	ldrb	r3, [r7, #3]
 80005ea:	733b      	strb	r3, [r7, #12]
 80005ec:	2300      	movs	r3, #0
 80005ee:	737b      	strb	r3, [r7, #13]
 80005f0:	2300      	movs	r3, #0
 80005f2:	73bb      	strb	r3, [r7, #14]

	HAL_GPIO_WritePin(GPIOB, FT801_CS_N, GPIO_PIN_RESET);
 80005f4:	2200      	movs	r2, #0
 80005f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005fa:	480a      	ldr	r0, [pc, #40]	; (8000624 <FT801cmdWrite+0x48>)
 80005fc:	f001 fcbc 	bl	8001f78 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, tx, 3, 0xffffff);
 8000600:	f107 010c 	add.w	r1, r7, #12
 8000604:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8000608:	2203      	movs	r2, #3
 800060a:	6878      	ldr	r0, [r7, #4]
 800060c:	f004 f94a 	bl	80048a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, FT801_CS_N, GPIO_PIN_SET);
 8000610:	2201      	movs	r2, #1
 8000612:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000616:	4803      	ldr	r0, [pc, #12]	; (8000624 <FT801cmdWrite+0x48>)
 8000618:	f001 fcae 	bl	8001f78 <HAL_GPIO_WritePin>
}
 800061c:	bf00      	nop
 800061e:	3710      	adds	r7, #16
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	58020400 	.word	0x58020400

08000628 <FT801memWrite8>:
void FT801memWrite8(SPI_HandleTypeDef *hspi, unsigned long ftAddress, unsigned char ftData8)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b086      	sub	sp, #24
 800062c:	af00      	add	r7, sp, #0
 800062e:	60f8      	str	r0, [r7, #12]
 8000630:	60b9      	str	r1, [r7, #8]
 8000632:	4613      	mov	r3, r2
 8000634:	71fb      	strb	r3, [r7, #7]
	uint8_t tx[4];

	tx[0] = (uint8_t) (ftAddress >> 16) | MEM_WRITE;
 8000636:	68bb      	ldr	r3, [r7, #8]
 8000638:	0c1b      	lsrs	r3, r3, #16
 800063a:	b2db      	uxtb	r3, r3
 800063c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000640:	b2db      	uxtb	r3, r3
 8000642:	753b      	strb	r3, [r7, #20]
	tx[1] = (uint8_t) (ftAddress >> 8);
 8000644:	68bb      	ldr	r3, [r7, #8]
 8000646:	0a1b      	lsrs	r3, r3, #8
 8000648:	b2db      	uxtb	r3, r3
 800064a:	757b      	strb	r3, [r7, #21]
	tx[2] = (uint8_t) (ftAddress);
 800064c:	68bb      	ldr	r3, [r7, #8]
 800064e:	b2db      	uxtb	r3, r3
 8000650:	75bb      	strb	r3, [r7, #22]
	tx[3] = (uint8_t) (ftData8);
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	75fb      	strb	r3, [r7, #23]


	HAL_GPIO_WritePin(GPIOB, FT801_CS_N, GPIO_PIN_RESET);
 8000656:	2200      	movs	r2, #0
 8000658:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800065c:	480a      	ldr	r0, [pc, #40]	; (8000688 <FT801memWrite8+0x60>)
 800065e:	f001 fc8b 	bl	8001f78 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, tx, 4, 0xffffff);
 8000662:	f107 0114 	add.w	r1, r7, #20
 8000666:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800066a:	2204      	movs	r2, #4
 800066c:	68f8      	ldr	r0, [r7, #12]
 800066e:	f004 f919 	bl	80048a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, FT801_CS_N, GPIO_PIN_SET);
 8000672:	2201      	movs	r2, #1
 8000674:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000678:	4803      	ldr	r0, [pc, #12]	; (8000688 <FT801memWrite8+0x60>)
 800067a:	f001 fc7d 	bl	8001f78 <HAL_GPIO_WritePin>
}
 800067e:	bf00      	nop
 8000680:	3718      	adds	r7, #24
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	58020400 	.word	0x58020400

0800068c <FT801memWrite16>:

void FT801memWrite16(SPI_HandleTypeDef *hspi, unsigned long ftAddress, unsigned int ftData16)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b086      	sub	sp, #24
 8000690:	af00      	add	r7, sp, #0
 8000692:	60f8      	str	r0, [r7, #12]
 8000694:	60b9      	str	r1, [r7, #8]
 8000696:	607a      	str	r2, [r7, #4]
	uint8_t tx[5];

	tx[0] = (uint8_t) (ftAddress >> 16) | MEM_WRITE;
 8000698:	68bb      	ldr	r3, [r7, #8]
 800069a:	0c1b      	lsrs	r3, r3, #16
 800069c:	b2db      	uxtb	r3, r3
 800069e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	743b      	strb	r3, [r7, #16]
	tx[1] = (uint8_t) (ftAddress >> 8);
 80006a6:	68bb      	ldr	r3, [r7, #8]
 80006a8:	0a1b      	lsrs	r3, r3, #8
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	747b      	strb	r3, [r7, #17]
	tx[2] = (uint8_t) (ftAddress);
 80006ae:	68bb      	ldr	r3, [r7, #8]
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	74bb      	strb	r3, [r7, #18]
	tx[3] = (uint8_t) (ftData16);
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	74fb      	strb	r3, [r7, #19]
	tx[4] = (uint8_t) (ftData16 >> 8);
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	0a1b      	lsrs	r3, r3, #8
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	753b      	strb	r3, [r7, #20]


	HAL_GPIO_WritePin(GPIOB, FT801_CS_N, GPIO_PIN_RESET);
 80006c2:	2200      	movs	r2, #0
 80006c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006c8:	480a      	ldr	r0, [pc, #40]	; (80006f4 <FT801memWrite16+0x68>)
 80006ca:	f001 fc55 	bl	8001f78 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, tx, 5, 0xffffff);
 80006ce:	f107 0110 	add.w	r1, r7, #16
 80006d2:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80006d6:	2205      	movs	r2, #5
 80006d8:	68f8      	ldr	r0, [r7, #12]
 80006da:	f004 f8e3 	bl	80048a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, FT801_CS_N, GPIO_PIN_SET);
 80006de:	2201      	movs	r2, #1
 80006e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006e4:	4803      	ldr	r0, [pc, #12]	; (80006f4 <FT801memWrite16+0x68>)
 80006e6:	f001 fc47 	bl	8001f78 <HAL_GPIO_WritePin>
}
 80006ea:	bf00      	nop
 80006ec:	3718      	adds	r7, #24
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	58020400 	.word	0x58020400

080006f8 <FT801memWrite32>:
void FT801memWrite32(SPI_HandleTypeDef *hspi, unsigned long ftAddress, unsigned long ftData32)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b086      	sub	sp, #24
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	60f8      	str	r0, [r7, #12]
 8000700:	60b9      	str	r1, [r7, #8]
 8000702:	607a      	str	r2, [r7, #4]
	uint8_t tx[7];

	tx[0] = (uint8_t) (ftAddress >> 16) | MEM_WRITE;
 8000704:	68bb      	ldr	r3, [r7, #8]
 8000706:	0c1b      	lsrs	r3, r3, #16
 8000708:	b2db      	uxtb	r3, r3
 800070a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800070e:	b2db      	uxtb	r3, r3
 8000710:	743b      	strb	r3, [r7, #16]
	tx[1] = (uint8_t) (ftAddress >> 8);
 8000712:	68bb      	ldr	r3, [r7, #8]
 8000714:	0a1b      	lsrs	r3, r3, #8
 8000716:	b2db      	uxtb	r3, r3
 8000718:	747b      	strb	r3, [r7, #17]
	tx[2] = (uint8_t) (ftAddress);
 800071a:	68bb      	ldr	r3, [r7, #8]
 800071c:	b2db      	uxtb	r3, r3
 800071e:	74bb      	strb	r3, [r7, #18]
	tx[3] = (uint8_t) (ftData32);
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	b2db      	uxtb	r3, r3
 8000724:	74fb      	strb	r3, [r7, #19]
	tx[4] = (uint8_t) (ftData32 >> 8);
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	0a1b      	lsrs	r3, r3, #8
 800072a:	b2db      	uxtb	r3, r3
 800072c:	753b      	strb	r3, [r7, #20]
	tx[5] = (uint8_t) (ftData32 >> 16);
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	0c1b      	lsrs	r3, r3, #16
 8000732:	b2db      	uxtb	r3, r3
 8000734:	757b      	strb	r3, [r7, #21]
	tx[6] = (uint8_t) (ftData32 >> 24);
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	0e1b      	lsrs	r3, r3, #24
 800073a:	b2db      	uxtb	r3, r3
 800073c:	75bb      	strb	r3, [r7, #22]


	HAL_GPIO_WritePin(GPIOB, FT801_CS_N, GPIO_PIN_RESET);
 800073e:	2200      	movs	r2, #0
 8000740:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000744:	480a      	ldr	r0, [pc, #40]	; (8000770 <FT801memWrite32+0x78>)
 8000746:	f001 fc17 	bl	8001f78 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, tx, 7, 0xffffff);
 800074a:	f107 0110 	add.w	r1, r7, #16
 800074e:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8000752:	2207      	movs	r2, #7
 8000754:	68f8      	ldr	r0, [r7, #12]
 8000756:	f004 f8a5 	bl	80048a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, FT801_CS_N, GPIO_PIN_SET);
 800075a:	2201      	movs	r2, #1
 800075c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000760:	4803      	ldr	r0, [pc, #12]	; (8000770 <FT801memWrite32+0x78>)
 8000762:	f001 fc09 	bl	8001f78 <HAL_GPIO_WritePin>
}
 8000766:	bf00      	nop
 8000768:	3718      	adds	r7, #24
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	58020400 	.word	0x58020400

08000774 <FT801memWriteRAM32>:
uint32_t FT801memWriteRAM32(SPI_HandleTypeDef *hspi, unsigned long startAddr, uint16_t *pData, int size)
{
 8000774:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000778:	b08d      	sub	sp, #52	; 0x34
 800077a:	af00      	add	r7, sp, #0
 800077c:	60f8      	str	r0, [r7, #12]
 800077e:	60b9      	str	r1, [r7, #8]
 8000780:	607a      	str	r2, [r7, #4]
 8000782:	603b      	str	r3, [r7, #0]
 8000784:	466b      	mov	r3, sp
 8000786:	461e      	mov	r6, r3
	unsigned long addr = startAddr;
 8000788:	68bb      	ldr	r3, [r7, #8]
 800078a:	623b      	str	r3, [r7, #32]
	uint16_t tx1_size = 0xFFFF;						// 3 + 0xFF - 3
 800078c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000790:	83fb      	strh	r3, [r7, #30]
	uint16_t tx2_size = tx1_size;
 8000792:	8bfb      	ldrh	r3, [r7, #30]
 8000794:	83bb      	strh	r3, [r7, #28]
	uint16_t tx3_size = 3 + size - 2*65532;
 8000796:	683b      	ldr	r3, [r7, #0]
 8000798:	b29b      	uxth	r3, r3
 800079a:	330b      	adds	r3, #11
 800079c:	837b      	strh	r3, [r7, #26]
	uint8_t tx[tx1_size];
 800079e:	8bf9      	ldrh	r1, [r7, #30]
 80007a0:	460b      	mov	r3, r1
 80007a2:	3b01      	subs	r3, #1
 80007a4:	617b      	str	r3, [r7, #20]
 80007a6:	b28b      	uxth	r3, r1
 80007a8:	2200      	movs	r2, #0
 80007aa:	4698      	mov	r8, r3
 80007ac:	4691      	mov	r9, r2
 80007ae:	f04f 0200 	mov.w	r2, #0
 80007b2:	f04f 0300 	mov.w	r3, #0
 80007b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80007ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80007be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80007c2:	b28b      	uxth	r3, r1
 80007c4:	2200      	movs	r2, #0
 80007c6:	461c      	mov	r4, r3
 80007c8:	4615      	mov	r5, r2
 80007ca:	f04f 0200 	mov.w	r2, #0
 80007ce:	f04f 0300 	mov.w	r3, #0
 80007d2:	00eb      	lsls	r3, r5, #3
 80007d4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80007d8:	00e2      	lsls	r2, r4, #3
 80007da:	460b      	mov	r3, r1
 80007dc:	3307      	adds	r3, #7
 80007de:	08db      	lsrs	r3, r3, #3
 80007e0:	00db      	lsls	r3, r3, #3
 80007e2:	ebad 0d03 	sub.w	sp, sp, r3
 80007e6:	466b      	mov	r3, sp
 80007e8:	3300      	adds	r3, #0
 80007ea:	613b      	str	r3, [r7, #16]
	tx[0] = (uint8_t) (addr >> 16) | MEM_WRITE;
 80007ec:	6a3b      	ldr	r3, [r7, #32]
 80007ee:	0c1b      	lsrs	r3, r3, #16
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80007f6:	b2da      	uxtb	r2, r3
 80007f8:	693b      	ldr	r3, [r7, #16]
 80007fa:	701a      	strb	r2, [r3, #0]
	tx[1] = (uint8_t) (addr >> 8);
 80007fc:	6a3b      	ldr	r3, [r7, #32]
 80007fe:	0a1b      	lsrs	r3, r3, #8
 8000800:	b2da      	uxtb	r2, r3
 8000802:	693b      	ldr	r3, [r7, #16]
 8000804:	705a      	strb	r2, [r3, #1]
	tx[2] = (uint8_t) (addr);
 8000806:	6a3b      	ldr	r3, [r7, #32]
 8000808:	b2da      	uxtb	r2, r3
 800080a:	693b      	ldr	r3, [r7, #16]
 800080c:	709a      	strb	r2, [r3, #2]
	for(int i = 3; i < tx1_size; i+=2, pData++){
 800080e:	2303      	movs	r3, #3
 8000810:	62bb      	str	r3, [r7, #40]	; 0x28
 8000812:	e016      	b.n	8000842 <FT801memWriteRAM32+0xce>
		tx[i] = (uint8_t) (*pData);
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	881b      	ldrh	r3, [r3, #0]
 8000818:	b2d9      	uxtb	r1, r3
 800081a:	693a      	ldr	r2, [r7, #16]
 800081c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800081e:	4413      	add	r3, r2
 8000820:	460a      	mov	r2, r1
 8000822:	701a      	strb	r2, [r3, #0]
		tx[i+1] = (uint8_t)(*pData >> 8);
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	881b      	ldrh	r3, [r3, #0]
 8000828:	0a1b      	lsrs	r3, r3, #8
 800082a:	b29a      	uxth	r2, r3
 800082c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800082e:	3301      	adds	r3, #1
 8000830:	b2d1      	uxtb	r1, r2
 8000832:	693a      	ldr	r2, [r7, #16]
 8000834:	54d1      	strb	r1, [r2, r3]
	for(int i = 3; i < tx1_size; i+=2, pData++){
 8000836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000838:	3302      	adds	r3, #2
 800083a:	62bb      	str	r3, [r7, #40]	; 0x28
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	3302      	adds	r3, #2
 8000840:	607b      	str	r3, [r7, #4]
 8000842:	8bfb      	ldrh	r3, [r7, #30]
 8000844:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000846:	429a      	cmp	r2, r3
 8000848:	dbe4      	blt.n	8000814 <FT801memWriteRAM32+0xa0>
	}
	HAL_GPIO_WritePin(GPIOB, FT801_CS_N, GPIO_PIN_RESET);
 800084a:	2200      	movs	r2, #0
 800084c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000850:	4856      	ldr	r0, [pc, #344]	; (80009ac <FT801memWriteRAM32+0x238>)
 8000852:	f001 fb91 	bl	8001f78 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, tx, tx1_size, 0xffffff);
 8000856:	8bfa      	ldrh	r2, [r7, #30]
 8000858:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800085c:	6939      	ldr	r1, [r7, #16]
 800085e:	68f8      	ldr	r0, [r7, #12]
 8000860:	f004 f820 	bl	80048a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, FT801_CS_N, GPIO_PIN_SET);
 8000864:	2201      	movs	r2, #1
 8000866:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800086a:	4850      	ldr	r0, [pc, #320]	; (80009ac <FT801memWriteRAM32+0x238>)
 800086c:	f001 fb84 	bl	8001f78 <HAL_GPIO_WritePin>

	addr += (tx1_size-1);
 8000870:	8bfa      	ldrh	r2, [r7, #30]
 8000872:	6a3b      	ldr	r3, [r7, #32]
 8000874:	4413      	add	r3, r2
 8000876:	3b01      	subs	r3, #1
 8000878:	623b      	str	r3, [r7, #32]
	pData++;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	3302      	adds	r3, #2
 800087e:	607b      	str	r3, [r7, #4]
	tx[0] = (uint8_t) (addr >> 16) | MEM_WRITE;
 8000880:	6a3b      	ldr	r3, [r7, #32]
 8000882:	0c1b      	lsrs	r3, r3, #16
 8000884:	b2db      	uxtb	r3, r3
 8000886:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800088a:	b2da      	uxtb	r2, r3
 800088c:	693b      	ldr	r3, [r7, #16]
 800088e:	701a      	strb	r2, [r3, #0]
	tx[1] = (uint8_t) (addr >> 8);
 8000890:	6a3b      	ldr	r3, [r7, #32]
 8000892:	0a1b      	lsrs	r3, r3, #8
 8000894:	b2da      	uxtb	r2, r3
 8000896:	693b      	ldr	r3, [r7, #16]
 8000898:	705a      	strb	r2, [r3, #1]
	tx[2] = (uint8_t) (addr);
 800089a:	6a3b      	ldr	r3, [r7, #32]
 800089c:	b2da      	uxtb	r2, r3
 800089e:	693b      	ldr	r3, [r7, #16]
 80008a0:	709a      	strb	r2, [r3, #2]
	for(int i = 3; i < tx2_size; i+=2, pData++){
 80008a2:	2303      	movs	r3, #3
 80008a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80008a6:	e016      	b.n	80008d6 <FT801memWriteRAM32+0x162>
		tx[i] = (uint8_t) (*pData);
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	881b      	ldrh	r3, [r3, #0]
 80008ac:	b2d9      	uxtb	r1, r3
 80008ae:	693a      	ldr	r2, [r7, #16]
 80008b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008b2:	4413      	add	r3, r2
 80008b4:	460a      	mov	r2, r1
 80008b6:	701a      	strb	r2, [r3, #0]
		tx[i+1] = (uint8_t)(*pData >> 8);
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	881b      	ldrh	r3, [r3, #0]
 80008bc:	0a1b      	lsrs	r3, r3, #8
 80008be:	b29a      	uxth	r2, r3
 80008c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008c2:	3301      	adds	r3, #1
 80008c4:	b2d1      	uxtb	r1, r2
 80008c6:	693a      	ldr	r2, [r7, #16]
 80008c8:	54d1      	strb	r1, [r2, r3]
	for(int i = 3; i < tx2_size; i+=2, pData++){
 80008ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008cc:	3302      	adds	r3, #2
 80008ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	3302      	adds	r3, #2
 80008d4:	607b      	str	r3, [r7, #4]
 80008d6:	8bbb      	ldrh	r3, [r7, #28]
 80008d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80008da:	429a      	cmp	r2, r3
 80008dc:	dbe4      	blt.n	80008a8 <FT801memWriteRAM32+0x134>
	}
	HAL_GPIO_WritePin(GPIOB, FT801_CS_N, GPIO_PIN_RESET);
 80008de:	2200      	movs	r2, #0
 80008e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008e4:	4831      	ldr	r0, [pc, #196]	; (80009ac <FT801memWriteRAM32+0x238>)
 80008e6:	f001 fb47 	bl	8001f78 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, tx, tx2_size, 0xffffff);
 80008ea:	8bba      	ldrh	r2, [r7, #28]
 80008ec:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80008f0:	6939      	ldr	r1, [r7, #16]
 80008f2:	68f8      	ldr	r0, [r7, #12]
 80008f4:	f003 ffd6 	bl	80048a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, FT801_CS_N, GPIO_PIN_SET);
 80008f8:	2201      	movs	r2, #1
 80008fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008fe:	482b      	ldr	r0, [pc, #172]	; (80009ac <FT801memWriteRAM32+0x238>)
 8000900:	f001 fb3a 	bl	8001f78 <HAL_GPIO_WritePin>

	addr += (tx2_size-1);
 8000904:	8bba      	ldrh	r2, [r7, #28]
 8000906:	6a3b      	ldr	r3, [r7, #32]
 8000908:	4413      	add	r3, r2
 800090a:	3b01      	subs	r3, #1
 800090c:	623b      	str	r3, [r7, #32]
	pData++;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	3302      	adds	r3, #2
 8000912:	607b      	str	r3, [r7, #4]
	tx[0] = (uint8_t) (addr >> 16) | MEM_WRITE;
 8000914:	6a3b      	ldr	r3, [r7, #32]
 8000916:	0c1b      	lsrs	r3, r3, #16
 8000918:	b2db      	uxtb	r3, r3
 800091a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800091e:	b2da      	uxtb	r2, r3
 8000920:	693b      	ldr	r3, [r7, #16]
 8000922:	701a      	strb	r2, [r3, #0]
	tx[1] = (uint8_t) (addr >> 8);
 8000924:	6a3b      	ldr	r3, [r7, #32]
 8000926:	0a1b      	lsrs	r3, r3, #8
 8000928:	b2da      	uxtb	r2, r3
 800092a:	693b      	ldr	r3, [r7, #16]
 800092c:	705a      	strb	r2, [r3, #1]
	tx[2] = (uint8_t) (addr);
 800092e:	6a3b      	ldr	r3, [r7, #32]
 8000930:	b2da      	uxtb	r2, r3
 8000932:	693b      	ldr	r3, [r7, #16]
 8000934:	709a      	strb	r2, [r3, #2]
	for(int i = 3; i < tx3_size; i+=2, pData++){
 8000936:	2303      	movs	r3, #3
 8000938:	627b      	str	r3, [r7, #36]	; 0x24
 800093a:	e016      	b.n	800096a <FT801memWriteRAM32+0x1f6>
		tx[i] = (uint8_t) (*pData);
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	881b      	ldrh	r3, [r3, #0]
 8000940:	b2d9      	uxtb	r1, r3
 8000942:	693a      	ldr	r2, [r7, #16]
 8000944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000946:	4413      	add	r3, r2
 8000948:	460a      	mov	r2, r1
 800094a:	701a      	strb	r2, [r3, #0]
		tx[i+1] = (uint8_t)(*pData >> 8);
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	881b      	ldrh	r3, [r3, #0]
 8000950:	0a1b      	lsrs	r3, r3, #8
 8000952:	b29a      	uxth	r2, r3
 8000954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000956:	3301      	adds	r3, #1
 8000958:	b2d1      	uxtb	r1, r2
 800095a:	693a      	ldr	r2, [r7, #16]
 800095c:	54d1      	strb	r1, [r2, r3]
	for(int i = 3; i < tx3_size; i+=2, pData++){
 800095e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000960:	3302      	adds	r3, #2
 8000962:	627b      	str	r3, [r7, #36]	; 0x24
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	3302      	adds	r3, #2
 8000968:	607b      	str	r3, [r7, #4]
 800096a:	8b7b      	ldrh	r3, [r7, #26]
 800096c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800096e:	429a      	cmp	r2, r3
 8000970:	dbe4      	blt.n	800093c <FT801memWriteRAM32+0x1c8>
	}
	HAL_GPIO_WritePin(GPIOB, FT801_CS_N, GPIO_PIN_RESET);
 8000972:	2200      	movs	r2, #0
 8000974:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000978:	480c      	ldr	r0, [pc, #48]	; (80009ac <FT801memWriteRAM32+0x238>)
 800097a:	f001 fafd 	bl	8001f78 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi, tx, tx3_size, 0xffffff);
 800097e:	8b7a      	ldrh	r2, [r7, #26]
 8000980:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8000984:	6939      	ldr	r1, [r7, #16]
 8000986:	68f8      	ldr	r0, [r7, #12]
 8000988:	f003 ff8c 	bl	80048a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, FT801_CS_N, GPIO_PIN_SET);
 800098c:	2201      	movs	r2, #1
 800098e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000992:	4806      	ldr	r0, [pc, #24]	; (80009ac <FT801memWriteRAM32+0x238>)
 8000994:	f001 faf0 	bl	8001f78 <HAL_GPIO_WritePin>

	return addr + size;
 8000998:	683a      	ldr	r2, [r7, #0]
 800099a:	6a3b      	ldr	r3, [r7, #32]
 800099c:	4413      	add	r3, r2
 800099e:	46b5      	mov	sp, r6
}
 80009a0:	4618      	mov	r0, r3
 80009a2:	3734      	adds	r7, #52	; 0x34
 80009a4:	46bd      	mov	sp, r7
 80009a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80009aa:	bf00      	nop
 80009ac:	58020400 	.word	0x58020400

080009b0 <FT801memRead8>:
	HAL_SPI_Transmit(hspi, tx, tx_size, 0xffffff);
	HAL_GPIO_WritePin(GPIOB, FT801_CS_N, GPIO_PIN_SET);

	return addr + size;
}
uint8_t FT801memRead8(SPI_HandleTypeDef *hspi, unsigned long ftAddress) {
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b088      	sub	sp, #32
 80009b4:	af02      	add	r7, sp, #8
 80009b6:	6078      	str	r0, [r7, #4]
 80009b8:	6039      	str	r1, [r7, #0]

	uint8_t tx[5] = { 0 };
 80009ba:	2300      	movs	r3, #0
 80009bc:	613b      	str	r3, [r7, #16]
 80009be:	2300      	movs	r3, #0
 80009c0:	753b      	strb	r3, [r7, #20]
	uint8_t rx[5] = { 0 };
 80009c2:	2300      	movs	r3, #0
 80009c4:	60bb      	str	r3, [r7, #8]
 80009c6:	2300      	movs	r3, #0
 80009c8:	733b      	strb	r3, [r7, #12]

	tx[0] = (uint8_t) (ftAddress >> 16);
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	0c1b      	lsrs	r3, r3, #16
 80009ce:	b2db      	uxtb	r3, r3
 80009d0:	743b      	strb	r3, [r7, #16]
	tx[1] = (uint8_t) (ftAddress >> 8);
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	0a1b      	lsrs	r3, r3, #8
 80009d6:	b2db      	uxtb	r3, r3
 80009d8:	747b      	strb	r3, [r7, #17]
	tx[2] = (uint8_t) (ftAddress);
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	b2db      	uxtb	r3, r3
 80009de:	74bb      	strb	r3, [r7, #18]

	HAL_GPIO_WritePin(GPIOB, FT801_CS_N, GPIO_PIN_RESET);
 80009e0:	2200      	movs	r2, #0
 80009e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009e6:	480c      	ldr	r0, [pc, #48]	; (8000a18 <FT801memRead8+0x68>)
 80009e8:	f001 fac6 	bl	8001f78 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(hspi, tx, rx, 5, 0xffffff);
 80009ec:	f107 0208 	add.w	r2, r7, #8
 80009f0:	f107 0110 	add.w	r1, r7, #16
 80009f4:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80009f8:	9300      	str	r3, [sp, #0]
 80009fa:	2305      	movs	r3, #5
 80009fc:	6878      	ldr	r0, [r7, #4]
 80009fe:	f004 f943 	bl	8004c88 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOB, FT801_CS_N, GPIO_PIN_SET);
 8000a02:	2201      	movs	r2, #1
 8000a04:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a08:	4803      	ldr	r0, [pc, #12]	; (8000a18 <FT801memRead8+0x68>)
 8000a0a:	f001 fab5 	bl	8001f78 <HAL_GPIO_WritePin>

	return rx[4];
 8000a0e:	7b3b      	ldrb	r3, [r7, #12]
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	3718      	adds	r7, #24
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	58020400 	.word	0x58020400

08000a1c <FT801memRead32>:

  return (rx[5] << 8 | rx[4]);
}

uint32_t FT801memRead32(SPI_HandleTypeDef *hspi, unsigned long ftAddress)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b088      	sub	sp, #32
 8000a20:	af02      	add	r7, sp, #8
 8000a22:	6078      	str	r0, [r7, #4]
 8000a24:	6039      	str	r1, [r7, #0]

	uint8_t tx[8] = { 0 };
 8000a26:	2300      	movs	r3, #0
 8000a28:	613b      	str	r3, [r7, #16]
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	617b      	str	r3, [r7, #20]
	uint8_t rx[8] = { 0 };
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60bb      	str	r3, [r7, #8]
 8000a32:	2300      	movs	r3, #0
 8000a34:	60fb      	str	r3, [r7, #12]

	tx[0] = (uint8_t) (ftAddress >> 16);
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	0c1b      	lsrs	r3, r3, #16
 8000a3a:	b2db      	uxtb	r3, r3
 8000a3c:	743b      	strb	r3, [r7, #16]
	tx[1] = (uint8_t) (ftAddress >> 8);
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	0a1b      	lsrs	r3, r3, #8
 8000a42:	b2db      	uxtb	r3, r3
 8000a44:	747b      	strb	r3, [r7, #17]
	tx[2] = (uint8_t) (ftAddress);
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	b2db      	uxtb	r3, r3
 8000a4a:	74bb      	strb	r3, [r7, #18]

	HAL_GPIO_WritePin(GPIOB, FT801_CS_N, GPIO_PIN_RESET);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a52:	4811      	ldr	r0, [pc, #68]	; (8000a98 <FT801memRead32+0x7c>)
 8000a54:	f001 fa90 	bl	8001f78 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(hspi, tx, rx, 8, 0xffffff);
 8000a58:	f107 0208 	add.w	r2, r7, #8
 8000a5c:	f107 0110 	add.w	r1, r7, #16
 8000a60:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8000a64:	9300      	str	r3, [sp, #0]
 8000a66:	2308      	movs	r3, #8
 8000a68:	6878      	ldr	r0, [r7, #4]
 8000a6a:	f004 f90d 	bl	8004c88 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOB, FT801_CS_N, GPIO_PIN_SET);
 8000a6e:	2201      	movs	r2, #1
 8000a70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a74:	4808      	ldr	r0, [pc, #32]	; (8000a98 <FT801memRead32+0x7c>)
 8000a76:	f001 fa7f 	bl	8001f78 <HAL_GPIO_WritePin>

  return (rx[7] << 24 | rx[6] << 16 | rx[5] << 8 | rx[4]);
 8000a7a:	7bfb      	ldrb	r3, [r7, #15]
 8000a7c:	061a      	lsls	r2, r3, #24
 8000a7e:	7bbb      	ldrb	r3, [r7, #14]
 8000a80:	041b      	lsls	r3, r3, #16
 8000a82:	431a      	orrs	r2, r3
 8000a84:	7b7b      	ldrb	r3, [r7, #13]
 8000a86:	021b      	lsls	r3, r3, #8
 8000a88:	4313      	orrs	r3, r2
 8000a8a:	7b3a      	ldrb	r2, [r7, #12]
 8000a8c:	4313      	orrs	r3, r2
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3718      	adds	r7, #24
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	58020400 	.word	0x58020400

08000a9c <LCD_Init>:
#include "Lcd/lcd.h"
#include "Lepton/lepton.h"
int switch_display = 1;

void LCD_Init(LCD *This, SPI_HandleTypeDef *hspi) {
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
 8000aa4:	6039      	str	r1, [r7, #0]
	This->hspi = hspi;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	683a      	ldr	r2, [r7, #0]
 8000aaa:	601a      	str	r2, [r3, #0]
	This->ramAddr = FT801_RAM_G;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	2200      	movs	r2, #0
 8000ab0:	621a      	str	r2, [r3, #32]
	This->cmd_offset = 0;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	849a      	strh	r2, [r3, #36]	; 0x24
	LCD_reset();
 8000ab8:	f000 f846 	bl	8000b48 <LCD_reset>
	LCD_wakeup(This);
 8000abc:	6878      	ldr	r0, [r7, #4]
 8000abe:	f000 f86d 	bl	8000b9c <LCD_wakeup>

	do {

		This->id = FT801memRead8(This->hspi, REG_ID);
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	491d      	ldr	r1, [pc, #116]	; (8000b3c <LCD_Init+0xa0>)
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f7ff ff71 	bl	80009b0 <FT801memRead8>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	711a      	strb	r2, [r3, #4]

	} while (This->id != 0x7C);
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	791b      	ldrb	r3, [r3, #4]
 8000ada:	2b7c      	cmp	r3, #124	; 0x7c
 8000adc:	d1f1      	bne.n	8000ac2 <LCD_Init+0x26>

	LCD_displayInit(This);
 8000ade:	6878      	ldr	r0, [r7, #4]
 8000ae0:	f000 f880 	bl	8000be4 <LCD_displayInit>
	LCD_touchInit(This);
 8000ae4:	6878      	ldr	r0, [r7, #4]
 8000ae6:	f000 f935 	bl	8000d54 <LCD_touchInit>
	LCD_audioInit(This);
 8000aea:	6878      	ldr	r0, [r7, #4]
 8000aec:	f000 f956 	bl	8000d9c <LCD_audioInit>

	This->gpio = FT801memRead8(This->hspi, REG_GPIO);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4912      	ldr	r1, [pc, #72]	; (8000b40 <LCD_Init+0xa4>)
 8000af6:	4618      	mov	r0, r3
 8000af8:	f7ff ff5a 	bl	80009b0 <FT801memRead8>
 8000afc:	4603      	mov	r3, r0
 8000afe:	461a      	mov	r2, r3
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	77da      	strb	r2, [r3, #31]
	This->gpio |= 0x80;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	7fdb      	ldrb	r3, [r3, #31]
 8000b08:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b0c:	b2da      	uxtb	r2, r3
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	77da      	strb	r2, [r3, #31]
	FT801memWrite8(This->hspi, REG_GPIO, This->gpio);
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	6818      	ldr	r0, [r3, #0]
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	7fdb      	ldrb	r3, [r3, #31]
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	4908      	ldr	r1, [pc, #32]	; (8000b40 <LCD_Init+0xa4>)
 8000b1e:	f7ff fd83 	bl	8000628 <FT801memWrite8>
	FT801memWrite8(This->hspi, REG_PCLK, This->lcdPclk);
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	6818      	ldr	r0, [r3, #0]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	8b5b      	ldrh	r3, [r3, #26]
 8000b2a:	b2db      	uxtb	r3, r3
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	4905      	ldr	r1, [pc, #20]	; (8000b44 <LCD_Init+0xa8>)
 8000b30:	f7ff fd7a 	bl	8000628 <FT801memWrite8>


	//LCD_calibration(This);


}
 8000b34:	bf00      	nop
 8000b36:	3708      	adds	r7, #8
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	00102400 	.word	0x00102400
 8000b40:	00102490 	.word	0x00102490
 8000b44:	0010246c 	.word	0x0010246c

08000b48 <LCD_reset>:
void LCD_reset(void) {
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, FT801_CS_N, GPIO_PIN_SET);	// Initial state of SPI CS - high
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b52:	4810      	ldr	r0, [pc, #64]	; (8000b94 <LCD_reset+0x4c>)
 8000b54:	f001 fa10 	bl	8001f78 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, FT801_PD_N, GPIO_PIN_SET); // Initial state of PD_N - high
 8000b58:	2201      	movs	r2, #1
 8000b5a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b5e:	480e      	ldr	r0, [pc, #56]	; (8000b98 <LCD_reset+0x50>)
 8000b60:	f001 fa0a 	bl	8001f78 <HAL_GPIO_WritePin>
	HAL_Delay(20);										// Wait 20ms
 8000b64:	2014      	movs	r0, #20
 8000b66:	f000 ff17 	bl	8001998 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, FT801_PD_N, GPIO_PIN_RESET); // Reset FT801
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b70:	4809      	ldr	r0, [pc, #36]	; (8000b98 <LCD_reset+0x50>)
 8000b72:	f001 fa01 	bl	8001f78 <HAL_GPIO_WritePin>
	HAL_Delay(20);									// Wait 20ms
 8000b76:	2014      	movs	r0, #20
 8000b78:	f000 ff0e 	bl	8001998 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, FT801_PD_N, GPIO_PIN_SET); 	// FT801 is awake
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b82:	4805      	ldr	r0, [pc, #20]	; (8000b98 <LCD_reset+0x50>)
 8000b84:	f001 f9f8 	bl	8001f78 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000b88:	2014      	movs	r0, #20
 8000b8a:	f000 ff05 	bl	8001998 <HAL_Delay>
}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	58020400 	.word	0x58020400
 8000b98:	58020c00 	.word	0x58020c00

08000b9c <LCD_wakeup>:

void LCD_wakeup(LCD *This) {
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
	FT801cmdWrite(This->hspi, FT801_ACTIVE);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	2100      	movs	r1, #0
 8000baa:	4618      	mov	r0, r3
 8000bac:	f7ff fd16 	bl	80005dc <FT801cmdWrite>
	HAL_Delay(5);
 8000bb0:	2005      	movs	r0, #5
 8000bb2:	f000 fef1 	bl	8001998 <HAL_Delay>
	FT801cmdWrite(This->hspi, FT801_CLKEXT);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	2144      	movs	r1, #68	; 0x44
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f7ff fd0d 	bl	80005dc <FT801cmdWrite>
	HAL_Delay(5);
 8000bc2:	2005      	movs	r0, #5
 8000bc4:	f000 fee8 	bl	8001998 <HAL_Delay>
	FT801cmdWrite(This->hspi, FT801_CLK48M);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	2162      	movs	r1, #98	; 0x62
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f7ff fd04 	bl	80005dc <FT801cmdWrite>
	HAL_Delay(5);
 8000bd4:	2005      	movs	r0, #5
 8000bd6:	f000 fedf 	bl	8001998 <HAL_Delay>
}
 8000bda:	bf00      	nop
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
	...

08000be4 <LCD_displayInit>:

void LCD_displayInit(LCD *This) {
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]

#ifdef LCD_QVGA																					// QVGA display parameters
	This->lcdWidth = 320;						// Active width of LCD display
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000bf2:	80da      	strh	r2, [r3, #6]
	This->lcdHeight = 240;						// Active height of LCD display
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	22f0      	movs	r2, #240	; 0xf0
 8000bf8:	811a      	strh	r2, [r3, #8]
	This->lcdHcycle = 408;					// Total number of clocks per line
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8000c00:	815a      	strh	r2, [r3, #10]
	This->lcdHoffset = 70;								// Start of active line
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2246      	movs	r2, #70	; 0x46
 8000c06:	819a      	strh	r2, [r3, #12]
	This->lcdHsync0 = 0;					// Start of horizontal sync pulse
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	81da      	strh	r2, [r3, #14]
	This->lcdHsync1 = 10;						// End of horizontal sync pulse
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	220a      	movs	r2, #10
 8000c12:	821a      	strh	r2, [r3, #16]
	This->lcdVcycle = 263;					// Total number of lines per screen
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	f240 1207 	movw	r2, #263	; 0x107
 8000c1a:	825a      	strh	r2, [r3, #18]
	This->lcdVoffset = 13;							// Start of active screen
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	220d      	movs	r2, #13
 8000c20:	829a      	strh	r2, [r3, #20]
	This->lcdVsync0 = 0;						// Start of vertical sync pulse
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	2200      	movs	r2, #0
 8000c26:	82da      	strh	r2, [r3, #22]
	This->lcdVsync1 = 2;						// End of vertical sync pulse
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2202      	movs	r2, #2
 8000c2c:	831a      	strh	r2, [r3, #24]
	This->lcdPclk = 8;											// Pixel Clock
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2208      	movs	r2, #8
 8000c32:	835a      	strh	r2, [r3, #26]
	This->lcdSwizzle = 2;							// Define RGB output pins
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	2202      	movs	r2, #2
 8000c38:	771a      	strb	r2, [r3, #28]
	This->lcdPclkpol = 0;						// Define active edge of PCLK
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	775a      	strb	r2, [r3, #29]
	This->lcdcspread = 1;						// output clock spreading enable
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2201      	movs	r2, #1
 8000c44:	779a      	strb	r2, [r3, #30]
	This->lcdSwizzle = 0;																				// Define RGB output pins
	This->lcdPclkpol = 1;																				// Define active edge of PCLK
	This->lcdcspread = 1;						// output clock spreading enable
#endif

	FT801memWrite16(This->hspi, REG_HSIZE, This->lcdWidth);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6818      	ldr	r0, [r3, #0]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	88db      	ldrh	r3, [r3, #6]
 8000c4e:	461a      	mov	r2, r3
 8000c50:	4933      	ldr	r1, [pc, #204]	; (8000d20 <LCD_displayInit+0x13c>)
 8000c52:	f7ff fd1b 	bl	800068c <FT801memWrite16>
	FT801memWrite16(This->hspi, REG_HCYCLE, This->lcdHcycle);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	6818      	ldr	r0, [r3, #0]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	895b      	ldrh	r3, [r3, #10]
 8000c5e:	461a      	mov	r2, r3
 8000c60:	4930      	ldr	r1, [pc, #192]	; (8000d24 <LCD_displayInit+0x140>)
 8000c62:	f7ff fd13 	bl	800068c <FT801memWrite16>
	FT801memWrite16(This->hspi, REG_HOFFSET, This->lcdHoffset);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6818      	ldr	r0, [r3, #0]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	899b      	ldrh	r3, [r3, #12]
 8000c6e:	461a      	mov	r2, r3
 8000c70:	492d      	ldr	r1, [pc, #180]	; (8000d28 <LCD_displayInit+0x144>)
 8000c72:	f7ff fd0b 	bl	800068c <FT801memWrite16>
	FT801memWrite16(This->hspi, REG_HSYNC0, This->lcdHsync0);
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6818      	ldr	r0, [r3, #0]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	89db      	ldrh	r3, [r3, #14]
 8000c7e:	461a      	mov	r2, r3
 8000c80:	492a      	ldr	r1, [pc, #168]	; (8000d2c <LCD_displayInit+0x148>)
 8000c82:	f7ff fd03 	bl	800068c <FT801memWrite16>
	FT801memWrite16(This->hspi, REG_HSYNC1, This->lcdHsync1);
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6818      	ldr	r0, [r3, #0]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	8a1b      	ldrh	r3, [r3, #16]
 8000c8e:	461a      	mov	r2, r3
 8000c90:	4927      	ldr	r1, [pc, #156]	; (8000d30 <LCD_displayInit+0x14c>)
 8000c92:	f7ff fcfb 	bl	800068c <FT801memWrite16>
	FT801memWrite16(This->hspi, REG_VSIZE, This->lcdHeight);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6818      	ldr	r0, [r3, #0]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	891b      	ldrh	r3, [r3, #8]
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	4924      	ldr	r1, [pc, #144]	; (8000d34 <LCD_displayInit+0x150>)
 8000ca2:	f7ff fcf3 	bl	800068c <FT801memWrite16>
	FT801memWrite16(This->hspi, REG_VCYCLE, This->lcdVcycle);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6818      	ldr	r0, [r3, #0]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	8a5b      	ldrh	r3, [r3, #18]
 8000cae:	461a      	mov	r2, r3
 8000cb0:	4921      	ldr	r1, [pc, #132]	; (8000d38 <LCD_displayInit+0x154>)
 8000cb2:	f7ff fceb 	bl	800068c <FT801memWrite16>
	FT801memWrite16(This->hspi, REG_VOFFSET, This->lcdVoffset);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6818      	ldr	r0, [r3, #0]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	8a9b      	ldrh	r3, [r3, #20]
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	491e      	ldr	r1, [pc, #120]	; (8000d3c <LCD_displayInit+0x158>)
 8000cc2:	f7ff fce3 	bl	800068c <FT801memWrite16>
	FT801memWrite16(This->hspi, REG_VSYNC0, This->lcdVsync0);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6818      	ldr	r0, [r3, #0]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	8adb      	ldrh	r3, [r3, #22]
 8000cce:	461a      	mov	r2, r3
 8000cd0:	491b      	ldr	r1, [pc, #108]	; (8000d40 <LCD_displayInit+0x15c>)
 8000cd2:	f7ff fcdb 	bl	800068c <FT801memWrite16>
	FT801memWrite16(This->hspi, REG_VSYNC1, This->lcdVsync1);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6818      	ldr	r0, [r3, #0]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	8b1b      	ldrh	r3, [r3, #24]
 8000cde:	461a      	mov	r2, r3
 8000ce0:	4918      	ldr	r1, [pc, #96]	; (8000d44 <LCD_displayInit+0x160>)
 8000ce2:	f7ff fcd3 	bl	800068c <FT801memWrite16>
	FT801memWrite8(This->hspi, REG_SWIZZLE, This->lcdSwizzle);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	6818      	ldr	r0, [r3, #0]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	7f1b      	ldrb	r3, [r3, #28]
 8000cee:	461a      	mov	r2, r3
 8000cf0:	4915      	ldr	r1, [pc, #84]	; (8000d48 <LCD_displayInit+0x164>)
 8000cf2:	f7ff fc99 	bl	8000628 <FT801memWrite8>
	FT801memWrite8(This->hspi, REG_PCLK_POL, This->lcdPclkpol);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6818      	ldr	r0, [r3, #0]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	7f5b      	ldrb	r3, [r3, #29]
 8000cfe:	461a      	mov	r2, r3
 8000d00:	4912      	ldr	r1, [pc, #72]	; (8000d4c <LCD_displayInit+0x168>)
 8000d02:	f7ff fc91 	bl	8000628 <FT801memWrite8>
	FT801memWrite8(This->hspi, REG_CSPREAD, This->lcdcspread);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	6818      	ldr	r0, [r3, #0]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	7f9b      	ldrb	r3, [r3, #30]
 8000d0e:	461a      	mov	r2, r3
 8000d10:	490f      	ldr	r1, [pc, #60]	; (8000d50 <LCD_displayInit+0x16c>)
 8000d12:	f7ff fc89 	bl	8000628 <FT801memWrite8>

}
 8000d16:	bf00      	nop
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	00102430 	.word	0x00102430
 8000d24:	00102428 	.word	0x00102428
 8000d28:	0010242c 	.word	0x0010242c
 8000d2c:	00102434 	.word	0x00102434
 8000d30:	00102438 	.word	0x00102438
 8000d34:	00102444 	.word	0x00102444
 8000d38:	0010243c 	.word	0x0010243c
 8000d3c:	00102440 	.word	0x00102440
 8000d40:	00102448 	.word	0x00102448
 8000d44:	0010244c 	.word	0x0010244c
 8000d48:	00102460 	.word	0x00102460
 8000d4c:	00102468 	.word	0x00102468
 8000d50:	00102464 	.word	0x00102464

08000d54 <LCD_touchInit>:

void LCD_touchInit(LCD *This){
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  FT801memWrite8(This->hspi, REG_TOUCH_MODE, 3);									// on mode
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	2203      	movs	r2, #3
 8000d62:	490b      	ldr	r1, [pc, #44]	; (8000d90 <LCD_touchInit+0x3c>)
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff fc5f 	bl	8000628 <FT801memWrite8>
  FT801memWrite8(This->hspi, REG_INT_EN, 1);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	2201      	movs	r2, #1
 8000d70:	4908      	ldr	r1, [pc, #32]	; (8000d94 <LCD_touchInit+0x40>)
 8000d72:	4618      	mov	r0, r3
 8000d74:	f7ff fc58 	bl	8000628 <FT801memWrite8>
  FT801memWrite8(This->hspi, REG_INT_MASK, 2);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	2202      	movs	r2, #2
 8000d7e:	4906      	ldr	r1, [pc, #24]	; (8000d98 <LCD_touchInit+0x44>)
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff fc51 	bl	8000628 <FT801memWrite8>
}
 8000d86:	bf00      	nop
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	001024f0 	.word	0x001024f0
 8000d94:	0010249c 	.word	0x0010249c
 8000d98:	001024a0 	.word	0x001024a0

08000d9c <LCD_audioInit>:
void LCD_audioInit(LCD *This){
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  FT801memWrite8(This->hspi, REG_VOL_PB, ZERO);											// turn recorded audio volume down
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	2200      	movs	r2, #0
 8000daa:	490b      	ldr	r1, [pc, #44]	; (8000dd8 <LCD_audioInit+0x3c>)
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff fc3b 	bl	8000628 <FT801memWrite8>
  FT801memWrite8(This->hspi, REG_VOL_SOUND, ZERO);									// turn synthesizer volume down
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	2200      	movs	r2, #0
 8000db8:	4908      	ldr	r1, [pc, #32]	; (8000ddc <LCD_audioInit+0x40>)
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f7ff fc34 	bl	8000628 <FT801memWrite8>
  FT801memWrite16(This->hspi, REG_SOUND, 0x6000);										// set synthesizer to mute
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8000dc8:	4905      	ldr	r1, [pc, #20]	; (8000de0 <LCD_audioInit+0x44>)
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f7ff fc5e 	bl	800068c <FT801memWrite16>
}
 8000dd0:	bf00      	nop
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	0010247c 	.word	0x0010247c
 8000ddc:	00102480 	.word	0x00102480
 8000de0:	00102484 	.word	0x00102484

08000de4 <LCD_readTouch>:

uint32_t LCD_readTouch(LCD *This)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
	uint32_t xy = FT801memRead32(This->hspi, REG_CTOUCH_SCREEN_XY);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4918      	ldr	r1, [pc, #96]	; (8000e54 <LCD_readTouch+0x70>)
 8000df2:	4618      	mov	r0, r3
 8000df4:	f7ff fe12 	bl	8000a1c <FT801memRead32>
 8000df8:	60f8      	str	r0, [r7, #12]
	if(switch_display){
 8000dfa:	4b17      	ldr	r3, [pc, #92]	; (8000e58 <LCD_readTouch+0x74>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d003      	beq.n	8000e0a <LCD_readTouch+0x26>
		LCD_displayLogo(This);
 8000e02:	6878      	ldr	r0, [r7, #4]
 8000e04:	f000 f82e 	bl	8000e64 <LCD_displayLogo>
 8000e08:	e00f      	b.n	8000e2a <LCD_readTouch+0x46>
	}
	else{
		LCD_startFrame(This);
 8000e0a:	6878      	ldr	r0, [r7, #4]
 8000e0c:	f000 f8c0 	bl	8000f90 <LCD_startFrame>
		FT801memWrite32(This->hspi, FT801_RAM_CMD + This->cmd_offset, COLOR_RGB(0x00, 0x00, 0xff));
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6818      	ldr	r0, [r3, #0]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000e18:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000e1c:	4a0f      	ldr	r2, [pc, #60]	; (8000e5c <LCD_readTouch+0x78>)
 8000e1e:	4619      	mov	r1, r3
 8000e20:	f7ff fc6a 	bl	80006f8 <FT801memWrite32>
		LCD_endFrame(This);
 8000e24:	6878      	ldr	r0, [r7, #4]
 8000e26:	f000 f8f1 	bl	800100c <LCD_endFrame>
	}
	switch_display = !switch_display;
 8000e2a:	4b0b      	ldr	r3, [pc, #44]	; (8000e58 <LCD_readTouch+0x74>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	bf0c      	ite	eq
 8000e32:	2301      	moveq	r3, #1
 8000e34:	2300      	movne	r3, #0
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	461a      	mov	r2, r3
 8000e3a:	4b07      	ldr	r3, [pc, #28]	; (8000e58 <LCD_readTouch+0x74>)
 8000e3c:	601a      	str	r2, [r3, #0]
	FT801memRead8(This->hspi, REG_INT_FLAGS);			// clear interrupt flags
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4907      	ldr	r1, [pc, #28]	; (8000e60 <LCD_readTouch+0x7c>)
 8000e44:	4618      	mov	r0, r3
 8000e46:	f7ff fdb3 	bl	80009b0 <FT801memRead8>
	return xy;
 8000e4a:	68fb      	ldr	r3, [r7, #12]
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3710      	adds	r7, #16
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	00102510 	.word	0x00102510
 8000e58:	24025800 	.word	0x24025800
 8000e5c:	040000ff 	.word	0x040000ff
 8000e60:	00102498 	.word	0x00102498

08000e64 <LCD_displayLogo>:

void LCD_displayLogo(LCD *This)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]


	FT801memWrite32(This->hspi, FT801_RAM_DL, CLEAR(1, 1, 1));
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a3b      	ldr	r2, [pc, #236]	; (8000f60 <LCD_displayLogo+0xfc>)
 8000e72:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8000e76:	4618      	mov	r0, r3
 8000e78:	f7ff fc3e 	bl	80006f8 <FT801memWrite32>
	FT801memWrite32(This->hspi, FT801_RAM_DL + 4, BEGIN(FT801_BITMAPS));
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a38      	ldr	r2, [pc, #224]	; (8000f64 <LCD_displayLogo+0x100>)
 8000e82:	4939      	ldr	r1, [pc, #228]	; (8000f68 <LCD_displayLogo+0x104>)
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff fc37 	bl	80006f8 <FT801memWrite32>
	//circular buffering
	if(This->ramAddr + 153600 > FT801_RAM_G_SIZE){
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6a1b      	ldr	r3, [r3, #32]
 8000e8e:	f503 3316 	add.w	r3, r3, #153600	; 0x25800
 8000e92:	f5b3 3f7a 	cmp.w	r3, #256000	; 0x3e800
 8000e96:	d902      	bls.n	8000e9e <LCD_displayLogo+0x3a>
		This->ramAddr = FT801_RAM_G;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	621a      	str	r2, [r3, #32]
	}
	FT801memWrite32(This->hspi, FT801_RAM_DL + 8, BITMAP_SOURCE(This->ramAddr));
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6818      	ldr	r0, [r3, #0]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6a1b      	ldr	r3, [r3, #32]
 8000ea6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000eaa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000eae:	461a      	mov	r2, r3
 8000eb0:	492e      	ldr	r1, [pc, #184]	; (8000f6c <LCD_displayLogo+0x108>)
 8000eb2:	f7ff fc21 	bl	80006f8 <FT801memWrite32>
	This->ramAddr = FT801memWriteRAM32(This->hspi,This->ramAddr,logo,153600);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6818      	ldr	r0, [r3, #0]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6a19      	ldr	r1, [r3, #32]
 8000ebe:	f44f 3316 	mov.w	r3, #153600	; 0x25800
 8000ec2:	4a2b      	ldr	r2, [pc, #172]	; (8000f70 <LCD_displayLogo+0x10c>)
 8000ec4:	f7ff fc56 	bl	8000774 <FT801memWriteRAM32>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	621a      	str	r2, [r3, #32]
	FT801memWrite32(This->hspi, FT801_RAM_DL + 12, BITMAP_LAYOUT(FT801_RGB565,2*This->lcdWidth, This->lcdHeight));
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6818      	ldr	r0, [r3, #0]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	88db      	ldrh	r3, [r3, #6]
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	025a      	lsls	r2, r3, #9
 8000eda:	4b26      	ldr	r3, [pc, #152]	; (8000f74 <LCD_displayLogo+0x110>)
 8000edc:	4013      	ands	r3, r2
 8000ede:	687a      	ldr	r2, [r7, #4]
 8000ee0:	8912      	ldrh	r2, [r2, #8]
 8000ee2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	f043 63e7 	orr.w	r3, r3, #121110528	; 0x7380000
 8000eec:	461a      	mov	r2, r3
 8000eee:	4922      	ldr	r1, [pc, #136]	; (8000f78 <LCD_displayLogo+0x114>)
 8000ef0:	f7ff fc02 	bl	80006f8 <FT801memWrite32>
	FT801memWrite32(This->hspi, FT801_RAM_DL + 16, BITMAP_SIZE(FT801_NEAREST,FT801_BORDER,FT801_BORDER,This->lcdWidth,This->lcdHeight));
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6818      	ldr	r0, [r3, #0]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	88db      	ldrh	r3, [r3, #6]
 8000efc:	025a      	lsls	r2, r3, #9
 8000efe:	4b1f      	ldr	r3, [pc, #124]	; (8000f7c <LCD_displayLogo+0x118>)
 8000f00:	4013      	ands	r3, r2
 8000f02:	687a      	ldr	r2, [r7, #4]
 8000f04:	8912      	ldrh	r2, [r2, #8]
 8000f06:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000f10:	461a      	mov	r2, r3
 8000f12:	f04f 1110 	mov.w	r1, #1048592	; 0x100010
 8000f16:	f7ff fbef 	bl	80006f8 <FT801memWrite32>
	FT801memWrite32(This->hspi, FT801_RAM_DL + 20, VERTEX2II(0,0,0,0));
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000f22:	4917      	ldr	r1, [pc, #92]	; (8000f80 <LCD_displayLogo+0x11c>)
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff fbe7 	bl	80006f8 <FT801memWrite32>
	FT801memWrite32(This->hspi, FT801_RAM_DL + 24, END());
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f04f 5204 	mov.w	r2, #553648128	; 0x21000000
 8000f32:	4914      	ldr	r1, [pc, #80]	; (8000f84 <LCD_displayLogo+0x120>)
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff fbdf 	bl	80006f8 <FT801memWrite32>
	FT801memWrite32(This->hspi, FT801_RAM_DL + 28, DISPLAY()); // display the image
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	2200      	movs	r2, #0
 8000f40:	4911      	ldr	r1, [pc, #68]	; (8000f88 <LCD_displayLogo+0x124>)
 8000f42:	4618      	mov	r0, r3
 8000f44:	f7ff fbd8 	bl	80006f8 <FT801memWrite32>
	FT801memWrite8(This->hspi, REG_DLSWAP, FT801_DLSWAP_FRAME);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2202      	movs	r2, #2
 8000f4e:	490f      	ldr	r1, [pc, #60]	; (8000f8c <LCD_displayLogo+0x128>)
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff fb69 	bl	8000628 <FT801memWrite8>

}
 8000f56:	bf00      	nop
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	26000007 	.word	0x26000007
 8000f64:	1f000001 	.word	0x1f000001
 8000f68:	00100004 	.word	0x00100004
 8000f6c:	00100008 	.word	0x00100008
 8000f70:	24000000 	.word	0x24000000
 8000f74:	0007fc00 	.word	0x0007fc00
 8000f78:	0010000c 	.word	0x0010000c
 8000f7c:	0003fe00 	.word	0x0003fe00
 8000f80:	00100014 	.word	0x00100014
 8000f84:	00100018 	.word	0x00100018
 8000f88:	0010001c 	.word	0x0010001c
 8000f8c:	00102450 	.word	0x00102450

08000f90 <LCD_startFrame>:
//	This->cmd_offset += 4;
//	FT801memWrite32(This->hspi, FT801_RAM_CMD + This->cmd_offset, VERTEX2II(110, y, 0, 0));
//	This->cmd_offset += 4;
}
void LCD_startFrame(LCD *This)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
	FT801memWrite32(This->hspi, FT801_RAM_CMD + This->cmd_offset, CMD_DLSTART);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6818      	ldr	r0, [r3, #0]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000fa0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000fa4:	f06f 02ff 	mvn.w	r2, #255	; 0xff
 8000fa8:	4619      	mov	r1, r3
 8000faa:	f7ff fba5 	bl	80006f8 <FT801memWrite32>
	This->cmd_offset += 4;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000fb2:	3304      	adds	r3, #4
 8000fb4:	b29a      	uxth	r2, r3
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	849a      	strh	r2, [r3, #36]	; 0x24
	FT801memWrite32(This->hspi, FT801_RAM_CMD + This->cmd_offset, CLEAR_COLOR_RGB(64,64,64));
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6818      	ldr	r0, [r3, #0]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000fc2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000fc6:	4a0f      	ldr	r2, [pc, #60]	; (8001004 <LCD_startFrame+0x74>)
 8000fc8:	4619      	mov	r1, r3
 8000fca:	f7ff fb95 	bl	80006f8 <FT801memWrite32>
	This->cmd_offset += 4;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000fd2:	3304      	adds	r3, #4
 8000fd4:	b29a      	uxth	r2, r3
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	849a      	strh	r2, [r3, #36]	; 0x24
	FT801memWrite32(This->hspi, FT801_RAM_CMD + This->cmd_offset, CLEAR(1, 1, 1));
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6818      	ldr	r0, [r3, #0]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000fe2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000fe6:	4a08      	ldr	r2, [pc, #32]	; (8001008 <LCD_startFrame+0x78>)
 8000fe8:	4619      	mov	r1, r3
 8000fea:	f7ff fb85 	bl	80006f8 <FT801memWrite32>
	This->cmd_offset += 4;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000ff2:	3304      	adds	r3, #4
 8000ff4:	b29a      	uxth	r2, r3
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	849a      	strh	r2, [r3, #36]	; 0x24

//	FT801memWrite32(This->hspi, FT801_RAM_CMD + This->cmd_offset, COLOR_RGB(0xff, 0xff, 0xff));
//	This->cmd_offset += 4;
}
 8000ffa:	bf00      	nop
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	02404040 	.word	0x02404040
 8001008:	26000007 	.word	0x26000007

0800100c <LCD_endFrame>:
	This->cmd_offset += 2;
	FT801memWrite32(This->hspi, FT801_RAM_CMD + This->cmd_offset, endColor);
	This->cmd_offset += 4;
}
void LCD_endFrame(LCD *This)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
	FT801memWrite32(This->hspi, FT801_RAM_CMD + This->cmd_offset, END());
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6818      	ldr	r0, [r3, #0]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800101c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001020:	f04f 5204 	mov.w	r2, #553648128	; 0x21000000
 8001024:	4619      	mov	r1, r3
 8001026:	f7ff fb67 	bl	80006f8 <FT801memWrite32>
	This->cmd_offset += 4;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800102e:	3304      	adds	r3, #4
 8001030:	b29a      	uxth	r2, r3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	849a      	strh	r2, [r3, #36]	; 0x24
	FT801memWrite16(This->hspi, REG_CMD_WRITE, This->cmd_offset);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6818      	ldr	r0, [r3, #0]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800103e:	461a      	mov	r2, r3
 8001040:	4914      	ldr	r1, [pc, #80]	; (8001094 <LCD_endFrame+0x88>)
 8001042:	f7ff fb23 	bl	800068c <FT801memWrite16>
	//This->cmd_offset += 4;
	FT801memWrite32(This->hspi, FT801_RAM_CMD + This->cmd_offset, DISPLAY());
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6818      	ldr	r0, [r3, #0]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800104e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001052:	2200      	movs	r2, #0
 8001054:	4619      	mov	r1, r3
 8001056:	f7ff fb4f 	bl	80006f8 <FT801memWrite32>
	This->cmd_offset += 4;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800105e:	3304      	adds	r3, #4
 8001060:	b29a      	uxth	r2, r3
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	849a      	strh	r2, [r3, #36]	; 0x24
	FT801memWrite16(This->hspi, REG_CMD_WRITE, This->cmd_offset);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6818      	ldr	r0, [r3, #0]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800106e:	461a      	mov	r2, r3
 8001070:	4908      	ldr	r1, [pc, #32]	; (8001094 <LCD_endFrame+0x88>)
 8001072:	f7ff fb0b 	bl	800068c <FT801memWrite16>
	FT801memWrite8(This->hspi, REG_DLSWAP, FT801_DLSWAP_FRAME);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	2202      	movs	r2, #2
 800107c:	4906      	ldr	r1, [pc, #24]	; (8001098 <LCD_endFrame+0x8c>)
 800107e:	4618      	mov	r0, r3
 8001080:	f7ff fad2 	bl	8000628 <FT801memWrite8>
	This->cmd_offset  = 0;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2200      	movs	r2, #0
 8001088:	849a      	strh	r2, [r3, #36]	; 0x24
}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	001024e8 	.word	0x001024e8
 8001098:	00102450 	.word	0x00102450

0800109c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010a0:	f000 fbe8 	bl	8001874 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010a4:	f000 f810 	bl	80010c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010a8:	f000 f930 	bl	800130c <MX_GPIO_Init>
  MX_SPI2_Init();
 80010ac:	f000 f88a 	bl	80011c4 <MX_SPI2_Init>
  MX_UART7_Init();
 80010b0:	f000 f8e0 	bl	8001274 <MX_UART7_Init>
  /* USER CODE BEGIN 2 */
  MODE_init(MODE1,&huart7, &hspi2);
 80010b4:	4a02      	ldr	r2, [pc, #8]	; (80010c0 <main+0x24>)
 80010b6:	4903      	ldr	r1, [pc, #12]	; (80010c4 <main+0x28>)
 80010b8:	2000      	movs	r0, #0
 80010ba:	f000 f9cd 	bl	8001458 <MODE_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010be:	e7fe      	b.n	80010be <main+0x22>
 80010c0:	24025830 	.word	0x24025830
 80010c4:	240258b8 	.word	0x240258b8

080010c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b09c      	sub	sp, #112	; 0x70
 80010cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010d2:	224c      	movs	r2, #76	; 0x4c
 80010d4:	2100      	movs	r1, #0
 80010d6:	4618      	mov	r0, r3
 80010d8:	f005 f97c 	bl	80063d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010dc:	1d3b      	adds	r3, r7, #4
 80010de:	2220      	movs	r2, #32
 80010e0:	2100      	movs	r1, #0
 80010e2:	4618      	mov	r0, r3
 80010e4:	f005 f976 	bl	80063d4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80010e8:	2002      	movs	r0, #2
 80010ea:	f000 ff79 	bl	8001fe0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80010ee:	2300      	movs	r3, #0
 80010f0:	603b      	str	r3, [r7, #0]
 80010f2:	4b32      	ldr	r3, [pc, #200]	; (80011bc <SystemClock_Config+0xf4>)
 80010f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010f6:	4a31      	ldr	r2, [pc, #196]	; (80011bc <SystemClock_Config+0xf4>)
 80010f8:	f023 0301 	bic.w	r3, r3, #1
 80010fc:	62d3      	str	r3, [r2, #44]	; 0x2c
 80010fe:	4b2f      	ldr	r3, [pc, #188]	; (80011bc <SystemClock_Config+0xf4>)
 8001100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001102:	f003 0301 	and.w	r3, r3, #1
 8001106:	603b      	str	r3, [r7, #0]
 8001108:	4b2d      	ldr	r3, [pc, #180]	; (80011c0 <SystemClock_Config+0xf8>)
 800110a:	699b      	ldr	r3, [r3, #24]
 800110c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001110:	4a2b      	ldr	r2, [pc, #172]	; (80011c0 <SystemClock_Config+0xf8>)
 8001112:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001116:	6193      	str	r3, [r2, #24]
 8001118:	4b29      	ldr	r3, [pc, #164]	; (80011c0 <SystemClock_Config+0xf8>)
 800111a:	699b      	ldr	r3, [r3, #24]
 800111c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001120:	603b      	str	r3, [r7, #0]
 8001122:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001124:	bf00      	nop
 8001126:	4b26      	ldr	r3, [pc, #152]	; (80011c0 <SystemClock_Config+0xf8>)
 8001128:	699b      	ldr	r3, [r3, #24]
 800112a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800112e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001132:	d1f8      	bne.n	8001126 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001134:	2302      	movs	r3, #2
 8001136:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001138:	2301      	movs	r3, #1
 800113a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800113c:	2340      	movs	r3, #64	; 0x40
 800113e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001140:	2302      	movs	r3, #2
 8001142:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001144:	2300      	movs	r3, #0
 8001146:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001148:	2304      	movs	r3, #4
 800114a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 9;
 800114c:	2309      	movs	r3, #9
 800114e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001150:	2302      	movs	r3, #2
 8001152:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001154:	2302      	movs	r3, #2
 8001156:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001158:	2302      	movs	r3, #2
 800115a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800115c:	230c      	movs	r3, #12
 800115e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8001160:	2302      	movs	r3, #2
 8001162:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 8001164:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001168:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800116a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800116e:	4618      	mov	r0, r3
 8001170:	f000 ff70 	bl	8002054 <HAL_RCC_OscConfig>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800117a:	f000 f968 	bl	800144e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800117e:	233f      	movs	r3, #63	; 0x3f
 8001180:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001182:	2300      	movs	r3, #0
 8001184:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001186:	2300      	movs	r3, #0
 8001188:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800118a:	2300      	movs	r3, #0
 800118c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800118e:	2300      	movs	r3, #0
 8001190:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001192:	2340      	movs	r3, #64	; 0x40
 8001194:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001196:	2300      	movs	r3, #0
 8001198:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800119a:	2300      	movs	r3, #0
 800119c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800119e:	1d3b      	adds	r3, r7, #4
 80011a0:	2101      	movs	r1, #1
 80011a2:	4618      	mov	r0, r3
 80011a4:	f001 fb84 	bl	80028b0 <HAL_RCC_ClockConfig>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <SystemClock_Config+0xea>
  {
    Error_Handler();
 80011ae:	f000 f94e 	bl	800144e <Error_Handler>
  }
}
 80011b2:	bf00      	nop
 80011b4:	3770      	adds	r7, #112	; 0x70
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	58000400 	.word	0x58000400
 80011c0:	58024800 	.word	0x58024800

080011c4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80011c8:	4b28      	ldr	r3, [pc, #160]	; (800126c <MX_SPI2_Init+0xa8>)
 80011ca:	4a29      	ldr	r2, [pc, #164]	; (8001270 <MX_SPI2_Init+0xac>)
 80011cc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80011ce:	4b27      	ldr	r3, [pc, #156]	; (800126c <MX_SPI2_Init+0xa8>)
 80011d0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80011d4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80011d6:	4b25      	ldr	r3, [pc, #148]	; (800126c <MX_SPI2_Init+0xa8>)
 80011d8:	2200      	movs	r2, #0
 80011da:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80011dc:	4b23      	ldr	r3, [pc, #140]	; (800126c <MX_SPI2_Init+0xa8>)
 80011de:	2207      	movs	r2, #7
 80011e0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80011e2:	4b22      	ldr	r3, [pc, #136]	; (800126c <MX_SPI2_Init+0xa8>)
 80011e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80011e8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011ea:	4b20      	ldr	r3, [pc, #128]	; (800126c <MX_SPI2_Init+0xa8>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80011f0:	4b1e      	ldr	r3, [pc, #120]	; (800126c <MX_SPI2_Init+0xa8>)
 80011f2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80011f6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80011f8:	4b1c      	ldr	r3, [pc, #112]	; (800126c <MX_SPI2_Init+0xa8>)
 80011fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011fe:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001200:	4b1a      	ldr	r3, [pc, #104]	; (800126c <MX_SPI2_Init+0xa8>)
 8001202:	2200      	movs	r2, #0
 8001204:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001206:	4b19      	ldr	r3, [pc, #100]	; (800126c <MX_SPI2_Init+0xa8>)
 8001208:	2200      	movs	r2, #0
 800120a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800120c:	4b17      	ldr	r3, [pc, #92]	; (800126c <MX_SPI2_Init+0xa8>)
 800120e:	2200      	movs	r2, #0
 8001210:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001212:	4b16      	ldr	r3, [pc, #88]	; (800126c <MX_SPI2_Init+0xa8>)
 8001214:	2200      	movs	r2, #0
 8001216:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001218:	4b14      	ldr	r3, [pc, #80]	; (800126c <MX_SPI2_Init+0xa8>)
 800121a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800121e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001220:	4b12      	ldr	r3, [pc, #72]	; (800126c <MX_SPI2_Init+0xa8>)
 8001222:	2200      	movs	r2, #0
 8001224:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001226:	4b11      	ldr	r3, [pc, #68]	; (800126c <MX_SPI2_Init+0xa8>)
 8001228:	2200      	movs	r2, #0
 800122a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800122c:	4b0f      	ldr	r3, [pc, #60]	; (800126c <MX_SPI2_Init+0xa8>)
 800122e:	2200      	movs	r2, #0
 8001230:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001232:	4b0e      	ldr	r3, [pc, #56]	; (800126c <MX_SPI2_Init+0xa8>)
 8001234:	2200      	movs	r2, #0
 8001236:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001238:	4b0c      	ldr	r3, [pc, #48]	; (800126c <MX_SPI2_Init+0xa8>)
 800123a:	2200      	movs	r2, #0
 800123c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800123e:	4b0b      	ldr	r3, [pc, #44]	; (800126c <MX_SPI2_Init+0xa8>)
 8001240:	2200      	movs	r2, #0
 8001242:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001244:	4b09      	ldr	r3, [pc, #36]	; (800126c <MX_SPI2_Init+0xa8>)
 8001246:	2200      	movs	r2, #0
 8001248:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800124a:	4b08      	ldr	r3, [pc, #32]	; (800126c <MX_SPI2_Init+0xa8>)
 800124c:	2200      	movs	r2, #0
 800124e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001250:	4b06      	ldr	r3, [pc, #24]	; (800126c <MX_SPI2_Init+0xa8>)
 8001252:	2200      	movs	r2, #0
 8001254:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001256:	4805      	ldr	r0, [pc, #20]	; (800126c <MX_SPI2_Init+0xa8>)
 8001258:	f003 fa1e 	bl	8004698 <HAL_SPI_Init>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 8001262:	f000 f8f4 	bl	800144e <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	24025830 	.word	0x24025830
 8001270:	40003800 	.word	0x40003800

08001274 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001278:	4b22      	ldr	r3, [pc, #136]	; (8001304 <MX_UART7_Init+0x90>)
 800127a:	4a23      	ldr	r2, [pc, #140]	; (8001308 <MX_UART7_Init+0x94>)
 800127c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 800127e:	4b21      	ldr	r3, [pc, #132]	; (8001304 <MX_UART7_Init+0x90>)
 8001280:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001284:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001286:	4b1f      	ldr	r3, [pc, #124]	; (8001304 <MX_UART7_Init+0x90>)
 8001288:	2200      	movs	r2, #0
 800128a:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 800128c:	4b1d      	ldr	r3, [pc, #116]	; (8001304 <MX_UART7_Init+0x90>)
 800128e:	2200      	movs	r2, #0
 8001290:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001292:	4b1c      	ldr	r3, [pc, #112]	; (8001304 <MX_UART7_Init+0x90>)
 8001294:	2200      	movs	r2, #0
 8001296:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001298:	4b1a      	ldr	r3, [pc, #104]	; (8001304 <MX_UART7_Init+0x90>)
 800129a:	220c      	movs	r2, #12
 800129c:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800129e:	4b19      	ldr	r3, [pc, #100]	; (8001304 <MX_UART7_Init+0x90>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80012a4:	4b17      	ldr	r3, [pc, #92]	; (8001304 <MX_UART7_Init+0x90>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012aa:	4b16      	ldr	r3, [pc, #88]	; (8001304 <MX_UART7_Init+0x90>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012b0:	4b14      	ldr	r3, [pc, #80]	; (8001304 <MX_UART7_Init+0x90>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012b6:	4b13      	ldr	r3, [pc, #76]	; (8001304 <MX_UART7_Init+0x90>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80012bc:	4811      	ldr	r0, [pc, #68]	; (8001304 <MX_UART7_Init+0x90>)
 80012be:	f003 fff4 	bl	80052aa <HAL_UART_Init>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_UART7_Init+0x58>
  {
    Error_Handler();
 80012c8:	f000 f8c1 	bl	800144e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012cc:	2100      	movs	r1, #0
 80012ce:	480d      	ldr	r0, [pc, #52]	; (8001304 <MX_UART7_Init+0x90>)
 80012d0:	f004 ff92 	bl	80061f8 <HAL_UARTEx_SetTxFifoThreshold>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 80012da:	f000 f8b8 	bl	800144e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012de:	2100      	movs	r1, #0
 80012e0:	4808      	ldr	r0, [pc, #32]	; (8001304 <MX_UART7_Init+0x90>)
 80012e2:	f004 ffc7 	bl	8006274 <HAL_UARTEx_SetRxFifoThreshold>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 80012ec:	f000 f8af 	bl	800144e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 80012f0:	4804      	ldr	r0, [pc, #16]	; (8001304 <MX_UART7_Init+0x90>)
 80012f2:	f004 ff48 	bl	8006186 <HAL_UARTEx_DisableFifoMode>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 80012fc:	f000 f8a7 	bl	800144e <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001300:	bf00      	nop
 8001302:	bd80      	pop	{r7, pc}
 8001304:	240258b8 	.word	0x240258b8
 8001308:	40007800 	.word	0x40007800

0800130c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b08a      	sub	sp, #40	; 0x28
 8001310:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001312:	f107 0314 	add.w	r3, r7, #20
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
 800131a:	605a      	str	r2, [r3, #4]
 800131c:	609a      	str	r2, [r3, #8]
 800131e:	60da      	str	r2, [r3, #12]
 8001320:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001322:	4b40      	ldr	r3, [pc, #256]	; (8001424 <MX_GPIO_Init+0x118>)
 8001324:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001328:	4a3e      	ldr	r2, [pc, #248]	; (8001424 <MX_GPIO_Init+0x118>)
 800132a:	f043 0304 	orr.w	r3, r3, #4
 800132e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001332:	4b3c      	ldr	r3, [pc, #240]	; (8001424 <MX_GPIO_Init+0x118>)
 8001334:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001338:	f003 0304 	and.w	r3, r3, #4
 800133c:	613b      	str	r3, [r7, #16]
 800133e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001340:	4b38      	ldr	r3, [pc, #224]	; (8001424 <MX_GPIO_Init+0x118>)
 8001342:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001346:	4a37      	ldr	r2, [pc, #220]	; (8001424 <MX_GPIO_Init+0x118>)
 8001348:	f043 0310 	orr.w	r3, r3, #16
 800134c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001350:	4b34      	ldr	r3, [pc, #208]	; (8001424 <MX_GPIO_Init+0x118>)
 8001352:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001356:	f003 0310 	and.w	r3, r3, #16
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800135e:	4b31      	ldr	r3, [pc, #196]	; (8001424 <MX_GPIO_Init+0x118>)
 8001360:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001364:	4a2f      	ldr	r2, [pc, #188]	; (8001424 <MX_GPIO_Init+0x118>)
 8001366:	f043 0302 	orr.w	r3, r3, #2
 800136a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800136e:	4b2d      	ldr	r3, [pc, #180]	; (8001424 <MX_GPIO_Init+0x118>)
 8001370:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001374:	f003 0302 	and.w	r3, r3, #2
 8001378:	60bb      	str	r3, [r7, #8]
 800137a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800137c:	4b29      	ldr	r3, [pc, #164]	; (8001424 <MX_GPIO_Init+0x118>)
 800137e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001382:	4a28      	ldr	r2, [pc, #160]	; (8001424 <MX_GPIO_Init+0x118>)
 8001384:	f043 0308 	orr.w	r3, r3, #8
 8001388:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800138c:	4b25      	ldr	r3, [pc, #148]	; (8001424 <MX_GPIO_Init+0x118>)
 800138e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001392:	f003 0308 	and.w	r3, r3, #8
 8001396:	607b      	str	r3, [r7, #4]
 8001398:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 800139a:	2200      	movs	r2, #0
 800139c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013a0:	4821      	ldr	r0, [pc, #132]	; (8001428 <MX_GPIO_Init+0x11c>)
 80013a2:	f000 fde9 	bl	8001f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);
 80013a6:	2200      	movs	r2, #0
 80013a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013ac:	481f      	ldr	r0, [pc, #124]	; (800142c <MX_GPIO_Init+0x120>)
 80013ae:	f000 fde3 	bl	8001f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80013b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b8:	2301      	movs	r3, #1
 80013ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013bc:	2300      	movs	r3, #0
 80013be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c0:	2300      	movs	r3, #0
 80013c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c4:	f107 0314 	add.w	r3, r7, #20
 80013c8:	4619      	mov	r1, r3
 80013ca:	4817      	ldr	r0, [pc, #92]	; (8001428 <MX_GPIO_Init+0x11c>)
 80013cc:	f000 fc24 	bl	8001c18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80013d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013d6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80013da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e0:	f107 0314 	add.w	r3, r7, #20
 80013e4:	4619      	mov	r1, r3
 80013e6:	4810      	ldr	r0, [pc, #64]	; (8001428 <MX_GPIO_Init+0x11c>)
 80013e8:	f000 fc16 	bl	8001c18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80013ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f2:	2301      	movs	r3, #1
 80013f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f6:	2300      	movs	r3, #0
 80013f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fa:	2300      	movs	r3, #0
 80013fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013fe:	f107 0314 	add.w	r3, r7, #20
 8001402:	4619      	mov	r1, r3
 8001404:	4809      	ldr	r0, [pc, #36]	; (800142c <MX_GPIO_Init+0x120>)
 8001406:	f000 fc07 	bl	8001c18 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800140a:	2200      	movs	r2, #0
 800140c:	2100      	movs	r1, #0
 800140e:	2028      	movs	r0, #40	; 0x28
 8001410:	f000 fbcd 	bl	8001bae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001414:	2028      	movs	r0, #40	; 0x28
 8001416:	f000 fbe4 	bl	8001be2 <HAL_NVIC_EnableIRQ>

}
 800141a:	bf00      	nop
 800141c:	3728      	adds	r7, #40	; 0x28
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	58024400 	.word	0x58024400
 8001428:	58020400 	.word	0x58020400
 800142c:	58020c00 	.word	0x58020c00

08001430 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_15) // If The INT Source Is EXTI Line9 ( Pin)
 800143a:	88fb      	ldrh	r3, [r7, #6]
 800143c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001440:	d101      	bne.n	8001446 <HAL_GPIO_EXTI_Callback+0x16>
    {
    	MODE_touchInterrupt();
 8001442:	f000 f81d 	bl	8001480 <MODE_touchInterrupt>
    }
}
 8001446:	bf00      	nop
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}

0800144e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800144e:	b480      	push	{r7}
 8001450:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001452:	b672      	cpsid	i
}
 8001454:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001456:	e7fe      	b.n	8001456 <Error_Handler+0x8>

08001458 <MODE_init>:
#include "mode.h"

LCD lcd;

void MODE_init(Mode mode, UART_HandleTypeDef *ptrhuart1, SPI_HandleTypeDef *ptrhspi2 )
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	60b9      	str	r1, [r7, #8]
 8001462:	607a      	str	r2, [r7, #4]
 8001464:	73fb      	strb	r3, [r7, #15]
	LCD_Init(&lcd, ptrhspi2);
 8001466:	6879      	ldr	r1, [r7, #4]
 8001468:	4804      	ldr	r0, [pc, #16]	; (800147c <MODE_init+0x24>)
 800146a:	f7ff fb17 	bl	8000a9c <LCD_Init>
	HAL_Delay(20);
 800146e:	2014      	movs	r0, #20
 8001470:	f000 fa92 	bl	8001998 <HAL_Delay>
}
 8001474:	bf00      	nop
 8001476:	3710      	adds	r7, #16
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	24025948 	.word	0x24025948

08001480 <MODE_touchInterrupt>:
void MODE_touchInterrupt(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
	LCD_readTouch(&lcd);
 8001484:	4802      	ldr	r0, [pc, #8]	; (8001490 <MODE_touchInterrupt+0x10>)
 8001486:	f7ff fcad 	bl	8000de4 <LCD_readTouch>

}
 800148a:	bf00      	nop
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	24025948 	.word	0x24025948

08001494 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800149a:	4b0a      	ldr	r3, [pc, #40]	; (80014c4 <HAL_MspInit+0x30>)
 800149c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80014a0:	4a08      	ldr	r2, [pc, #32]	; (80014c4 <HAL_MspInit+0x30>)
 80014a2:	f043 0302 	orr.w	r3, r3, #2
 80014a6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80014aa:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <HAL_MspInit+0x30>)
 80014ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80014b0:	f003 0302 	and.w	r3, r3, #2
 80014b4:	607b      	str	r3, [r7, #4]
 80014b6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014b8:	bf00      	nop
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr
 80014c4:	58024400 	.word	0x58024400

080014c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b0ba      	sub	sp, #232	; 0xe8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]
 80014de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014e0:	f107 0318 	add.w	r3, r7, #24
 80014e4:	22bc      	movs	r2, #188	; 0xbc
 80014e6:	2100      	movs	r1, #0
 80014e8:	4618      	mov	r0, r3
 80014ea:	f004 ff73 	bl	80063d4 <memset>
  if(hspi->Instance==SPI2)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a37      	ldr	r2, [pc, #220]	; (80015d0 <HAL_SPI_MspInit+0x108>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d166      	bne.n	80015c6 <HAL_SPI_MspInit+0xfe>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80014f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014fc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80014fe:	2300      	movs	r3, #0
 8001500:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001502:	f107 0318 	add.w	r3, r7, #24
 8001506:	4618      	mov	r0, r3
 8001508:	f001 fd5e 	bl	8002fc8 <HAL_RCCEx_PeriphCLKConfig>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8001512:	f7ff ff9c 	bl	800144e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001516:	4b2f      	ldr	r3, [pc, #188]	; (80015d4 <HAL_SPI_MspInit+0x10c>)
 8001518:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800151c:	4a2d      	ldr	r2, [pc, #180]	; (80015d4 <HAL_SPI_MspInit+0x10c>)
 800151e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001522:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001526:	4b2b      	ldr	r3, [pc, #172]	; (80015d4 <HAL_SPI_MspInit+0x10c>)
 8001528:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800152c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001530:	617b      	str	r3, [r7, #20]
 8001532:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001534:	4b27      	ldr	r3, [pc, #156]	; (80015d4 <HAL_SPI_MspInit+0x10c>)
 8001536:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800153a:	4a26      	ldr	r2, [pc, #152]	; (80015d4 <HAL_SPI_MspInit+0x10c>)
 800153c:	f043 0304 	orr.w	r3, r3, #4
 8001540:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001544:	4b23      	ldr	r3, [pc, #140]	; (80015d4 <HAL_SPI_MspInit+0x10c>)
 8001546:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800154a:	f003 0304 	and.w	r3, r3, #4
 800154e:	613b      	str	r3, [r7, #16]
 8001550:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001552:	4b20      	ldr	r3, [pc, #128]	; (80015d4 <HAL_SPI_MspInit+0x10c>)
 8001554:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001558:	4a1e      	ldr	r2, [pc, #120]	; (80015d4 <HAL_SPI_MspInit+0x10c>)
 800155a:	f043 0302 	orr.w	r3, r3, #2
 800155e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001562:	4b1c      	ldr	r3, [pc, #112]	; (80015d4 <HAL_SPI_MspInit+0x10c>)
 8001564:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001568:	f003 0302 	and.w	r3, r3, #2
 800156c:	60fb      	str	r3, [r7, #12]
 800156e:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001570:	2302      	movs	r3, #2
 8001572:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001576:	2302      	movs	r3, #2
 8001578:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157c:	2300      	movs	r3, #0
 800157e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001582:	2300      	movs	r3, #0
 8001584:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001588:	2305      	movs	r3, #5
 800158a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800158e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001592:	4619      	mov	r1, r3
 8001594:	4810      	ldr	r0, [pc, #64]	; (80015d8 <HAL_SPI_MspInit+0x110>)
 8001596:	f000 fb3f 	bl	8001c18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800159a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800159e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a2:	2302      	movs	r3, #2
 80015a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a8:	2300      	movs	r3, #0
 80015aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ae:	2300      	movs	r3, #0
 80015b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015b4:	2305      	movs	r3, #5
 80015b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ba:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80015be:	4619      	mov	r1, r3
 80015c0:	4806      	ldr	r0, [pc, #24]	; (80015dc <HAL_SPI_MspInit+0x114>)
 80015c2:	f000 fb29 	bl	8001c18 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80015c6:	bf00      	nop
 80015c8:	37e8      	adds	r7, #232	; 0xe8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40003800 	.word	0x40003800
 80015d4:	58024400 	.word	0x58024400
 80015d8:	58020800 	.word	0x58020800
 80015dc:	58020400 	.word	0x58020400

080015e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b0b8      	sub	sp, #224	; 0xe0
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	605a      	str	r2, [r3, #4]
 80015f2:	609a      	str	r2, [r3, #8]
 80015f4:	60da      	str	r2, [r3, #12]
 80015f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015f8:	f107 0310 	add.w	r3, r7, #16
 80015fc:	22bc      	movs	r2, #188	; 0xbc
 80015fe:	2100      	movs	r1, #0
 8001600:	4618      	mov	r0, r3
 8001602:	f004 fee7 	bl	80063d4 <memset>
  if(huart->Instance==UART7)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a25      	ldr	r2, [pc, #148]	; (80016a0 <HAL_UART_MspInit+0xc0>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d142      	bne.n	8001696 <HAL_UART_MspInit+0xb6>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8001610:	2302      	movs	r3, #2
 8001612:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001614:	2300      	movs	r3, #0
 8001616:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800161a:	f107 0310 	add.w	r3, r7, #16
 800161e:	4618      	mov	r0, r3
 8001620:	f001 fcd2 	bl	8002fc8 <HAL_RCCEx_PeriphCLKConfig>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800162a:	f7ff ff10 	bl	800144e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 800162e:	4b1d      	ldr	r3, [pc, #116]	; (80016a4 <HAL_UART_MspInit+0xc4>)
 8001630:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001634:	4a1b      	ldr	r2, [pc, #108]	; (80016a4 <HAL_UART_MspInit+0xc4>)
 8001636:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800163a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800163e:	4b19      	ldr	r3, [pc, #100]	; (80016a4 <HAL_UART_MspInit+0xc4>)
 8001640:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001644:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001648:	60fb      	str	r3, [r7, #12]
 800164a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800164c:	4b15      	ldr	r3, [pc, #84]	; (80016a4 <HAL_UART_MspInit+0xc4>)
 800164e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001652:	4a14      	ldr	r2, [pc, #80]	; (80016a4 <HAL_UART_MspInit+0xc4>)
 8001654:	f043 0310 	orr.w	r3, r3, #16
 8001658:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800165c:	4b11      	ldr	r3, [pc, #68]	; (80016a4 <HAL_UART_MspInit+0xc4>)
 800165e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001662:	f003 0310 	and.w	r3, r3, #16
 8001666:	60bb      	str	r3, [r7, #8]
 8001668:	68bb      	ldr	r3, [r7, #8]
    /**UART7 GPIO Configuration
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800166a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800166e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001672:	2302      	movs	r3, #2
 8001674:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001678:	2300      	movs	r3, #0
 800167a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167e:	2300      	movs	r3, #0
 8001680:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8001684:	2307      	movs	r3, #7
 8001686:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800168a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800168e:	4619      	mov	r1, r3
 8001690:	4805      	ldr	r0, [pc, #20]	; (80016a8 <HAL_UART_MspInit+0xc8>)
 8001692:	f000 fac1 	bl	8001c18 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 8001696:	bf00      	nop
 8001698:	37e0      	adds	r7, #224	; 0xe0
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	40007800 	.word	0x40007800
 80016a4:	58024400 	.word	0x58024400
 80016a8:	58021000 	.word	0x58021000

080016ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016b0:	e7fe      	b.n	80016b0 <NMI_Handler+0x4>

080016b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016b2:	b480      	push	{r7}
 80016b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016b6:	e7fe      	b.n	80016b6 <HardFault_Handler+0x4>

080016b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016bc:	e7fe      	b.n	80016bc <MemManage_Handler+0x4>

080016be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016be:	b480      	push	{r7}
 80016c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016c2:	e7fe      	b.n	80016c2 <BusFault_Handler+0x4>

080016c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016c8:	e7fe      	b.n	80016c8 <UsageFault_Handler+0x4>

080016ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016ca:	b480      	push	{r7}
 80016cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016ce:	bf00      	nop
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016dc:	bf00      	nop
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr

080016e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016e6:	b480      	push	{r7}
 80016e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016ea:	bf00      	nop
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016f8:	f000 f92e 	bl	8001958 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016fc:	bf00      	nop
 80016fe:	bd80      	pop	{r7, pc}

08001700 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001704:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001708:	f000 fc4f 	bl	8001faa <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800170c:	bf00      	nop
 800170e:	bd80      	pop	{r7, pc}

08001710 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001714:	4b37      	ldr	r3, [pc, #220]	; (80017f4 <SystemInit+0xe4>)
 8001716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800171a:	4a36      	ldr	r2, [pc, #216]	; (80017f4 <SystemInit+0xe4>)
 800171c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001720:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001724:	4b34      	ldr	r3, [pc, #208]	; (80017f8 <SystemInit+0xe8>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 030f 	and.w	r3, r3, #15
 800172c:	2b06      	cmp	r3, #6
 800172e:	d807      	bhi.n	8001740 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001730:	4b31      	ldr	r3, [pc, #196]	; (80017f8 <SystemInit+0xe8>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f023 030f 	bic.w	r3, r3, #15
 8001738:	4a2f      	ldr	r2, [pc, #188]	; (80017f8 <SystemInit+0xe8>)
 800173a:	f043 0307 	orr.w	r3, r3, #7
 800173e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001740:	4b2e      	ldr	r3, [pc, #184]	; (80017fc <SystemInit+0xec>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a2d      	ldr	r2, [pc, #180]	; (80017fc <SystemInit+0xec>)
 8001746:	f043 0301 	orr.w	r3, r3, #1
 800174a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800174c:	4b2b      	ldr	r3, [pc, #172]	; (80017fc <SystemInit+0xec>)
 800174e:	2200      	movs	r2, #0
 8001750:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001752:	4b2a      	ldr	r3, [pc, #168]	; (80017fc <SystemInit+0xec>)
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	4929      	ldr	r1, [pc, #164]	; (80017fc <SystemInit+0xec>)
 8001758:	4b29      	ldr	r3, [pc, #164]	; (8001800 <SystemInit+0xf0>)
 800175a:	4013      	ands	r3, r2
 800175c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800175e:	4b26      	ldr	r3, [pc, #152]	; (80017f8 <SystemInit+0xe8>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0308 	and.w	r3, r3, #8
 8001766:	2b00      	cmp	r3, #0
 8001768:	d007      	beq.n	800177a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800176a:	4b23      	ldr	r3, [pc, #140]	; (80017f8 <SystemInit+0xe8>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f023 030f 	bic.w	r3, r3, #15
 8001772:	4a21      	ldr	r2, [pc, #132]	; (80017f8 <SystemInit+0xe8>)
 8001774:	f043 0307 	orr.w	r3, r3, #7
 8001778:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800177a:	4b20      	ldr	r3, [pc, #128]	; (80017fc <SystemInit+0xec>)
 800177c:	2200      	movs	r2, #0
 800177e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001780:	4b1e      	ldr	r3, [pc, #120]	; (80017fc <SystemInit+0xec>)
 8001782:	2200      	movs	r2, #0
 8001784:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001786:	4b1d      	ldr	r3, [pc, #116]	; (80017fc <SystemInit+0xec>)
 8001788:	2200      	movs	r2, #0
 800178a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800178c:	4b1b      	ldr	r3, [pc, #108]	; (80017fc <SystemInit+0xec>)
 800178e:	4a1d      	ldr	r2, [pc, #116]	; (8001804 <SystemInit+0xf4>)
 8001790:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001792:	4b1a      	ldr	r3, [pc, #104]	; (80017fc <SystemInit+0xec>)
 8001794:	4a1c      	ldr	r2, [pc, #112]	; (8001808 <SystemInit+0xf8>)
 8001796:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001798:	4b18      	ldr	r3, [pc, #96]	; (80017fc <SystemInit+0xec>)
 800179a:	4a1c      	ldr	r2, [pc, #112]	; (800180c <SystemInit+0xfc>)
 800179c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800179e:	4b17      	ldr	r3, [pc, #92]	; (80017fc <SystemInit+0xec>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80017a4:	4b15      	ldr	r3, [pc, #84]	; (80017fc <SystemInit+0xec>)
 80017a6:	4a19      	ldr	r2, [pc, #100]	; (800180c <SystemInit+0xfc>)
 80017a8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80017aa:	4b14      	ldr	r3, [pc, #80]	; (80017fc <SystemInit+0xec>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80017b0:	4b12      	ldr	r3, [pc, #72]	; (80017fc <SystemInit+0xec>)
 80017b2:	4a16      	ldr	r2, [pc, #88]	; (800180c <SystemInit+0xfc>)
 80017b4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80017b6:	4b11      	ldr	r3, [pc, #68]	; (80017fc <SystemInit+0xec>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80017bc:	4b0f      	ldr	r3, [pc, #60]	; (80017fc <SystemInit+0xec>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a0e      	ldr	r2, [pc, #56]	; (80017fc <SystemInit+0xec>)
 80017c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017c6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80017c8:	4b0c      	ldr	r3, [pc, #48]	; (80017fc <SystemInit+0xec>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80017ce:	4b10      	ldr	r3, [pc, #64]	; (8001810 <SystemInit+0x100>)
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	4b10      	ldr	r3, [pc, #64]	; (8001814 <SystemInit+0x104>)
 80017d4:	4013      	ands	r3, r2
 80017d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80017da:	d202      	bcs.n	80017e2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80017dc:	4b0e      	ldr	r3, [pc, #56]	; (8001818 <SystemInit+0x108>)
 80017de:	2201      	movs	r2, #1
 80017e0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80017e2:	4b0e      	ldr	r3, [pc, #56]	; (800181c <SystemInit+0x10c>)
 80017e4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80017e8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80017ea:	bf00      	nop
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	e000ed00 	.word	0xe000ed00
 80017f8:	52002000 	.word	0x52002000
 80017fc:	58024400 	.word	0x58024400
 8001800:	eaf6ed7f 	.word	0xeaf6ed7f
 8001804:	02020200 	.word	0x02020200
 8001808:	01ff0000 	.word	0x01ff0000
 800180c:	01010280 	.word	0x01010280
 8001810:	5c001000 	.word	0x5c001000
 8001814:	ffff0000 	.word	0xffff0000
 8001818:	51008108 	.word	0x51008108
 800181c:	52004000 	.word	0x52004000

08001820 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001820:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001858 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001824:	f7ff ff74 	bl	8001710 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001828:	480c      	ldr	r0, [pc, #48]	; (800185c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800182a:	490d      	ldr	r1, [pc, #52]	; (8001860 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800182c:	4a0d      	ldr	r2, [pc, #52]	; (8001864 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800182e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001830:	e002      	b.n	8001838 <LoopCopyDataInit>

08001832 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001832:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001834:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001836:	3304      	adds	r3, #4

08001838 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001838:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800183a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800183c:	d3f9      	bcc.n	8001832 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800183e:	4a0a      	ldr	r2, [pc, #40]	; (8001868 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001840:	4c0a      	ldr	r4, [pc, #40]	; (800186c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001842:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001844:	e001      	b.n	800184a <LoopFillZerobss>

08001846 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001846:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001848:	3204      	adds	r2, #4

0800184a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800184a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800184c:	d3fb      	bcc.n	8001846 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800184e:	f004 fd9d 	bl	800638c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001852:	f7ff fc23 	bl	800109c <main>
  bx  lr
 8001856:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001858:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800185c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001860:	24025814 	.word	0x24025814
  ldr r2, =_sidata
 8001864:	08006444 	.word	0x08006444
  ldr r2, =_sbss
 8001868:	24025814 	.word	0x24025814
  ldr r4, =_ebss
 800186c:	24025974 	.word	0x24025974

08001870 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001870:	e7fe      	b.n	8001870 <ADC3_IRQHandler>
	...

08001874 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800187a:	2003      	movs	r0, #3
 800187c:	f000 f98c 	bl	8001b98 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001880:	f001 f9cc 	bl	8002c1c <HAL_RCC_GetSysClockFreq>
 8001884:	4602      	mov	r2, r0
 8001886:	4b15      	ldr	r3, [pc, #84]	; (80018dc <HAL_Init+0x68>)
 8001888:	699b      	ldr	r3, [r3, #24]
 800188a:	0a1b      	lsrs	r3, r3, #8
 800188c:	f003 030f 	and.w	r3, r3, #15
 8001890:	4913      	ldr	r1, [pc, #76]	; (80018e0 <HAL_Init+0x6c>)
 8001892:	5ccb      	ldrb	r3, [r1, r3]
 8001894:	f003 031f 	and.w	r3, r3, #31
 8001898:	fa22 f303 	lsr.w	r3, r2, r3
 800189c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800189e:	4b0f      	ldr	r3, [pc, #60]	; (80018dc <HAL_Init+0x68>)
 80018a0:	699b      	ldr	r3, [r3, #24]
 80018a2:	f003 030f 	and.w	r3, r3, #15
 80018a6:	4a0e      	ldr	r2, [pc, #56]	; (80018e0 <HAL_Init+0x6c>)
 80018a8:	5cd3      	ldrb	r3, [r2, r3]
 80018aa:	f003 031f 	and.w	r3, r3, #31
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	fa22 f303 	lsr.w	r3, r2, r3
 80018b4:	4a0b      	ldr	r2, [pc, #44]	; (80018e4 <HAL_Init+0x70>)
 80018b6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80018b8:	4a0b      	ldr	r2, [pc, #44]	; (80018e8 <HAL_Init+0x74>)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018be:	200f      	movs	r0, #15
 80018c0:	f000 f814 	bl	80018ec <HAL_InitTick>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e002      	b.n	80018d4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80018ce:	f7ff fde1 	bl	8001494 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018d2:	2300      	movs	r3, #0
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3708      	adds	r7, #8
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	58024400 	.word	0x58024400
 80018e0:	080063fc 	.word	0x080063fc
 80018e4:	24025808 	.word	0x24025808
 80018e8:	24025804 	.word	0x24025804

080018ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80018f4:	4b15      	ldr	r3, [pc, #84]	; (800194c <HAL_InitTick+0x60>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d101      	bne.n	8001900 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e021      	b.n	8001944 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001900:	4b13      	ldr	r3, [pc, #76]	; (8001950 <HAL_InitTick+0x64>)
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	4b11      	ldr	r3, [pc, #68]	; (800194c <HAL_InitTick+0x60>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	4619      	mov	r1, r3
 800190a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800190e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001912:	fbb2 f3f3 	udiv	r3, r2, r3
 8001916:	4618      	mov	r0, r3
 8001918:	f000 f971 	bl	8001bfe <HAL_SYSTICK_Config>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e00e      	b.n	8001944 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2b0f      	cmp	r3, #15
 800192a:	d80a      	bhi.n	8001942 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800192c:	2200      	movs	r2, #0
 800192e:	6879      	ldr	r1, [r7, #4]
 8001930:	f04f 30ff 	mov.w	r0, #4294967295
 8001934:	f000 f93b 	bl	8001bae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001938:	4a06      	ldr	r2, [pc, #24]	; (8001954 <HAL_InitTick+0x68>)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800193e:	2300      	movs	r3, #0
 8001940:	e000      	b.n	8001944 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
}
 8001944:	4618      	mov	r0, r3
 8001946:	3708      	adds	r7, #8
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	24025810 	.word	0x24025810
 8001950:	24025804 	.word	0x24025804
 8001954:	2402580c 	.word	0x2402580c

08001958 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800195c:	4b06      	ldr	r3, [pc, #24]	; (8001978 <HAL_IncTick+0x20>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	461a      	mov	r2, r3
 8001962:	4b06      	ldr	r3, [pc, #24]	; (800197c <HAL_IncTick+0x24>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4413      	add	r3, r2
 8001968:	4a04      	ldr	r2, [pc, #16]	; (800197c <HAL_IncTick+0x24>)
 800196a:	6013      	str	r3, [r2, #0]
}
 800196c:	bf00      	nop
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	24025810 	.word	0x24025810
 800197c:	24025970 	.word	0x24025970

08001980 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  return uwTick;
 8001984:	4b03      	ldr	r3, [pc, #12]	; (8001994 <HAL_GetTick+0x14>)
 8001986:	681b      	ldr	r3, [r3, #0]
}
 8001988:	4618      	mov	r0, r3
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	24025970 	.word	0x24025970

08001998 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019a0:	f7ff ffee 	bl	8001980 <HAL_GetTick>
 80019a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019b0:	d005      	beq.n	80019be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019b2:	4b0a      	ldr	r3, [pc, #40]	; (80019dc <HAL_Delay+0x44>)
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	461a      	mov	r2, r3
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	4413      	add	r3, r2
 80019bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019be:	bf00      	nop
 80019c0:	f7ff ffde 	bl	8001980 <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	68fa      	ldr	r2, [r7, #12]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d8f7      	bhi.n	80019c0 <HAL_Delay+0x28>
  {
  }
}
 80019d0:	bf00      	nop
 80019d2:	bf00      	nop
 80019d4:	3710      	adds	r7, #16
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	24025810 	.word	0x24025810

080019e0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80019e4:	4b03      	ldr	r3, [pc, #12]	; (80019f4 <HAL_GetREVID+0x14>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	0c1b      	lsrs	r3, r3, #16
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr
 80019f4:	5c001000 	.word	0x5c001000

080019f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b085      	sub	sp, #20
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f003 0307 	and.w	r3, r3, #7
 8001a06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a08:	4b0b      	ldr	r3, [pc, #44]	; (8001a38 <__NVIC_SetPriorityGrouping+0x40>)
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a0e:	68ba      	ldr	r2, [r7, #8]
 8001a10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a14:	4013      	ands	r3, r2
 8001a16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001a20:	4b06      	ldr	r3, [pc, #24]	; (8001a3c <__NVIC_SetPriorityGrouping+0x44>)
 8001a22:	4313      	orrs	r3, r2
 8001a24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a26:	4a04      	ldr	r2, [pc, #16]	; (8001a38 <__NVIC_SetPriorityGrouping+0x40>)
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	60d3      	str	r3, [r2, #12]
}
 8001a2c:	bf00      	nop
 8001a2e:	3714      	adds	r7, #20
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr
 8001a38:	e000ed00 	.word	0xe000ed00
 8001a3c:	05fa0000 	.word	0x05fa0000

08001a40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a44:	4b04      	ldr	r3, [pc, #16]	; (8001a58 <__NVIC_GetPriorityGrouping+0x18>)
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	0a1b      	lsrs	r3, r3, #8
 8001a4a:	f003 0307 	and.w	r3, r3, #7
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr
 8001a58:	e000ed00 	.word	0xe000ed00

08001a5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	4603      	mov	r3, r0
 8001a64:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001a66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	db0b      	blt.n	8001a86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a6e:	88fb      	ldrh	r3, [r7, #6]
 8001a70:	f003 021f 	and.w	r2, r3, #31
 8001a74:	4907      	ldr	r1, [pc, #28]	; (8001a94 <__NVIC_EnableIRQ+0x38>)
 8001a76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a7a:	095b      	lsrs	r3, r3, #5
 8001a7c:	2001      	movs	r0, #1
 8001a7e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a86:	bf00      	nop
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	e000e100 	.word	0xe000e100

08001a98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	6039      	str	r1, [r7, #0]
 8001aa2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001aa4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	db0a      	blt.n	8001ac2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	b2da      	uxtb	r2, r3
 8001ab0:	490c      	ldr	r1, [pc, #48]	; (8001ae4 <__NVIC_SetPriority+0x4c>)
 8001ab2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ab6:	0112      	lsls	r2, r2, #4
 8001ab8:	b2d2      	uxtb	r2, r2
 8001aba:	440b      	add	r3, r1
 8001abc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ac0:	e00a      	b.n	8001ad8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	b2da      	uxtb	r2, r3
 8001ac6:	4908      	ldr	r1, [pc, #32]	; (8001ae8 <__NVIC_SetPriority+0x50>)
 8001ac8:	88fb      	ldrh	r3, [r7, #6]
 8001aca:	f003 030f 	and.w	r3, r3, #15
 8001ace:	3b04      	subs	r3, #4
 8001ad0:	0112      	lsls	r2, r2, #4
 8001ad2:	b2d2      	uxtb	r2, r2
 8001ad4:	440b      	add	r3, r1
 8001ad6:	761a      	strb	r2, [r3, #24]
}
 8001ad8:	bf00      	nop
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr
 8001ae4:	e000e100 	.word	0xe000e100
 8001ae8:	e000ed00 	.word	0xe000ed00

08001aec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b089      	sub	sp, #36	; 0x24
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	60b9      	str	r1, [r7, #8]
 8001af6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	f003 0307 	and.w	r3, r3, #7
 8001afe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	f1c3 0307 	rsb	r3, r3, #7
 8001b06:	2b04      	cmp	r3, #4
 8001b08:	bf28      	it	cs
 8001b0a:	2304      	movcs	r3, #4
 8001b0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	3304      	adds	r3, #4
 8001b12:	2b06      	cmp	r3, #6
 8001b14:	d902      	bls.n	8001b1c <NVIC_EncodePriority+0x30>
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	3b03      	subs	r3, #3
 8001b1a:	e000      	b.n	8001b1e <NVIC_EncodePriority+0x32>
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b20:	f04f 32ff 	mov.w	r2, #4294967295
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2a:	43da      	mvns	r2, r3
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	401a      	ands	r2, r3
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b34:	f04f 31ff 	mov.w	r1, #4294967295
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b3e:	43d9      	mvns	r1, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b44:	4313      	orrs	r3, r2
         );
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3724      	adds	r7, #36	; 0x24
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
	...

08001b54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	3b01      	subs	r3, #1
 8001b60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b64:	d301      	bcc.n	8001b6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b66:	2301      	movs	r3, #1
 8001b68:	e00f      	b.n	8001b8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b6a:	4a0a      	ldr	r2, [pc, #40]	; (8001b94 <SysTick_Config+0x40>)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	3b01      	subs	r3, #1
 8001b70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b72:	210f      	movs	r1, #15
 8001b74:	f04f 30ff 	mov.w	r0, #4294967295
 8001b78:	f7ff ff8e 	bl	8001a98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b7c:	4b05      	ldr	r3, [pc, #20]	; (8001b94 <SysTick_Config+0x40>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b82:	4b04      	ldr	r3, [pc, #16]	; (8001b94 <SysTick_Config+0x40>)
 8001b84:	2207      	movs	r2, #7
 8001b86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	e000e010 	.word	0xe000e010

08001b98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f7ff ff29 	bl	80019f8 <__NVIC_SetPriorityGrouping>
}
 8001ba6:	bf00      	nop
 8001ba8:	3708      	adds	r7, #8
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b086      	sub	sp, #24
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	60b9      	str	r1, [r7, #8]
 8001bb8:	607a      	str	r2, [r7, #4]
 8001bba:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001bbc:	f7ff ff40 	bl	8001a40 <__NVIC_GetPriorityGrouping>
 8001bc0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	68b9      	ldr	r1, [r7, #8]
 8001bc6:	6978      	ldr	r0, [r7, #20]
 8001bc8:	f7ff ff90 	bl	8001aec <NVIC_EncodePriority>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001bd2:	4611      	mov	r1, r2
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff ff5f 	bl	8001a98 <__NVIC_SetPriority>
}
 8001bda:	bf00      	nop
 8001bdc:	3718      	adds	r7, #24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001be2:	b580      	push	{r7, lr}
 8001be4:	b082      	sub	sp, #8
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	4603      	mov	r3, r0
 8001bea:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff ff33 	bl	8001a5c <__NVIC_EnableIRQ>
}
 8001bf6:	bf00      	nop
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b082      	sub	sp, #8
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f7ff ffa4 	bl	8001b54 <SysTick_Config>
 8001c0c:	4603      	mov	r3, r0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
	...

08001c18 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b089      	sub	sp, #36	; 0x24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001c22:	2300      	movs	r3, #0
 8001c24:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001c26:	4b89      	ldr	r3, [pc, #548]	; (8001e4c <HAL_GPIO_Init+0x234>)
 8001c28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001c2a:	e194      	b.n	8001f56 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	2101      	movs	r1, #1
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	fa01 f303 	lsl.w	r3, r1, r3
 8001c38:	4013      	ands	r3, r2
 8001c3a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	f000 8186 	beq.w	8001f50 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f003 0303 	and.w	r3, r3, #3
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d005      	beq.n	8001c5c <HAL_GPIO_Init+0x44>
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f003 0303 	and.w	r3, r3, #3
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d130      	bne.n	8001cbe <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	2203      	movs	r2, #3
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	4013      	ands	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	68da      	ldr	r2, [r3, #12]
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	005b      	lsls	r3, r3, #1
 8001c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c92:	2201      	movs	r2, #1
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9a:	43db      	mvns	r3, r3
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	091b      	lsrs	r3, r3, #4
 8001ca8:	f003 0201 	and.w	r2, r3, #1
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f003 0303 	and.w	r3, r3, #3
 8001cc6:	2b03      	cmp	r3, #3
 8001cc8:	d017      	beq.n	8001cfa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	2203      	movs	r2, #3
 8001cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cda:	43db      	mvns	r3, r3
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	4013      	ands	r3, r2
 8001ce0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	689a      	ldr	r2, [r3, #8]
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	fa02 f303 	lsl.w	r3, r2, r3
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f003 0303 	and.w	r3, r3, #3
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d123      	bne.n	8001d4e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	08da      	lsrs	r2, r3, #3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	3208      	adds	r2, #8
 8001d0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	f003 0307 	and.w	r3, r3, #7
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	220f      	movs	r2, #15
 8001d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d22:	43db      	mvns	r3, r3
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	4013      	ands	r3, r2
 8001d28:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	691a      	ldr	r2, [r3, #16]
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	f003 0307 	and.w	r3, r3, #7
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3a:	69ba      	ldr	r2, [r7, #24]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	08da      	lsrs	r2, r3, #3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	3208      	adds	r2, #8
 8001d48:	69b9      	ldr	r1, [r7, #24]
 8001d4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	2203      	movs	r2, #3
 8001d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5e:	43db      	mvns	r3, r3
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	4013      	ands	r3, r2
 8001d64:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f003 0203 	and.w	r2, r3, #3
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	fa02 f303 	lsl.w	r3, r2, r3
 8001d76:	69ba      	ldr	r2, [r7, #24]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	f000 80e0 	beq.w	8001f50 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d90:	4b2f      	ldr	r3, [pc, #188]	; (8001e50 <HAL_GPIO_Init+0x238>)
 8001d92:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d96:	4a2e      	ldr	r2, [pc, #184]	; (8001e50 <HAL_GPIO_Init+0x238>)
 8001d98:	f043 0302 	orr.w	r3, r3, #2
 8001d9c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001da0:	4b2b      	ldr	r3, [pc, #172]	; (8001e50 <HAL_GPIO_Init+0x238>)
 8001da2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	60fb      	str	r3, [r7, #12]
 8001dac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dae:	4a29      	ldr	r2, [pc, #164]	; (8001e54 <HAL_GPIO_Init+0x23c>)
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	089b      	lsrs	r3, r3, #2
 8001db4:	3302      	adds	r3, #2
 8001db6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	f003 0303 	and.w	r3, r3, #3
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	220f      	movs	r2, #15
 8001dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dca:	43db      	mvns	r3, r3
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	4013      	ands	r3, r2
 8001dd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a20      	ldr	r2, [pc, #128]	; (8001e58 <HAL_GPIO_Init+0x240>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d052      	beq.n	8001e80 <HAL_GPIO_Init+0x268>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a1f      	ldr	r2, [pc, #124]	; (8001e5c <HAL_GPIO_Init+0x244>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d031      	beq.n	8001e46 <HAL_GPIO_Init+0x22e>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a1e      	ldr	r2, [pc, #120]	; (8001e60 <HAL_GPIO_Init+0x248>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d02b      	beq.n	8001e42 <HAL_GPIO_Init+0x22a>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a1d      	ldr	r2, [pc, #116]	; (8001e64 <HAL_GPIO_Init+0x24c>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d025      	beq.n	8001e3e <HAL_GPIO_Init+0x226>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a1c      	ldr	r2, [pc, #112]	; (8001e68 <HAL_GPIO_Init+0x250>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d01f      	beq.n	8001e3a <HAL_GPIO_Init+0x222>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a1b      	ldr	r2, [pc, #108]	; (8001e6c <HAL_GPIO_Init+0x254>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d019      	beq.n	8001e36 <HAL_GPIO_Init+0x21e>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a1a      	ldr	r2, [pc, #104]	; (8001e70 <HAL_GPIO_Init+0x258>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d013      	beq.n	8001e32 <HAL_GPIO_Init+0x21a>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a19      	ldr	r2, [pc, #100]	; (8001e74 <HAL_GPIO_Init+0x25c>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d00d      	beq.n	8001e2e <HAL_GPIO_Init+0x216>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a18      	ldr	r2, [pc, #96]	; (8001e78 <HAL_GPIO_Init+0x260>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d007      	beq.n	8001e2a <HAL_GPIO_Init+0x212>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a17      	ldr	r2, [pc, #92]	; (8001e7c <HAL_GPIO_Init+0x264>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d101      	bne.n	8001e26 <HAL_GPIO_Init+0x20e>
 8001e22:	2309      	movs	r3, #9
 8001e24:	e02d      	b.n	8001e82 <HAL_GPIO_Init+0x26a>
 8001e26:	230a      	movs	r3, #10
 8001e28:	e02b      	b.n	8001e82 <HAL_GPIO_Init+0x26a>
 8001e2a:	2308      	movs	r3, #8
 8001e2c:	e029      	b.n	8001e82 <HAL_GPIO_Init+0x26a>
 8001e2e:	2307      	movs	r3, #7
 8001e30:	e027      	b.n	8001e82 <HAL_GPIO_Init+0x26a>
 8001e32:	2306      	movs	r3, #6
 8001e34:	e025      	b.n	8001e82 <HAL_GPIO_Init+0x26a>
 8001e36:	2305      	movs	r3, #5
 8001e38:	e023      	b.n	8001e82 <HAL_GPIO_Init+0x26a>
 8001e3a:	2304      	movs	r3, #4
 8001e3c:	e021      	b.n	8001e82 <HAL_GPIO_Init+0x26a>
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e01f      	b.n	8001e82 <HAL_GPIO_Init+0x26a>
 8001e42:	2302      	movs	r3, #2
 8001e44:	e01d      	b.n	8001e82 <HAL_GPIO_Init+0x26a>
 8001e46:	2301      	movs	r3, #1
 8001e48:	e01b      	b.n	8001e82 <HAL_GPIO_Init+0x26a>
 8001e4a:	bf00      	nop
 8001e4c:	58000080 	.word	0x58000080
 8001e50:	58024400 	.word	0x58024400
 8001e54:	58000400 	.word	0x58000400
 8001e58:	58020000 	.word	0x58020000
 8001e5c:	58020400 	.word	0x58020400
 8001e60:	58020800 	.word	0x58020800
 8001e64:	58020c00 	.word	0x58020c00
 8001e68:	58021000 	.word	0x58021000
 8001e6c:	58021400 	.word	0x58021400
 8001e70:	58021800 	.word	0x58021800
 8001e74:	58021c00 	.word	0x58021c00
 8001e78:	58022000 	.word	0x58022000
 8001e7c:	58022400 	.word	0x58022400
 8001e80:	2300      	movs	r3, #0
 8001e82:	69fa      	ldr	r2, [r7, #28]
 8001e84:	f002 0203 	and.w	r2, r2, #3
 8001e88:	0092      	lsls	r2, r2, #2
 8001e8a:	4093      	lsls	r3, r2
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e92:	4938      	ldr	r1, [pc, #224]	; (8001f74 <HAL_GPIO_Init+0x35c>)
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	089b      	lsrs	r3, r3, #2
 8001e98:	3302      	adds	r3, #2
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ea0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	43db      	mvns	r3, r3
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d003      	beq.n	8001ec6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001ec6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001ece:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	43db      	mvns	r3, r3
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	4013      	ands	r3, r2
 8001ede:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d003      	beq.n	8001ef4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001ef4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	43db      	mvns	r3, r3
 8001f06:	69ba      	ldr	r2, [r7, #24]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d003      	beq.n	8001f20 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	43db      	mvns	r3, r3
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	4013      	ands	r3, r2
 8001f34:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d003      	beq.n	8001f4a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	3301      	adds	r3, #1
 8001f54:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	f47f ae63 	bne.w	8001c2c <HAL_GPIO_Init+0x14>
  }
}
 8001f66:	bf00      	nop
 8001f68:	bf00      	nop
 8001f6a:	3724      	adds	r7, #36	; 0x24
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr
 8001f74:	58000400 	.word	0x58000400

08001f78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	460b      	mov	r3, r1
 8001f82:	807b      	strh	r3, [r7, #2]
 8001f84:	4613      	mov	r3, r2
 8001f86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f88:	787b      	ldrb	r3, [r7, #1]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d003      	beq.n	8001f96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f8e:	887a      	ldrh	r2, [r7, #2]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001f94:	e003      	b.n	8001f9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001f96:	887b      	ldrh	r3, [r7, #2]
 8001f98:	041a      	lsls	r2, r3, #16
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	619a      	str	r2, [r3, #24]
}
 8001f9e:	bf00      	nop
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr

08001faa <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b082      	sub	sp, #8
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8001fb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fb8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001fbc:	88fb      	ldrh	r3, [r7, #6]
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d008      	beq.n	8001fd6 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001fc4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fc8:	88fb      	ldrh	r3, [r7, #6]
 8001fca:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001fce:	88fb      	ldrh	r3, [r7, #6]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7ff fa2d 	bl	8001430 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8001fd6:	bf00      	nop
 8001fd8:	3708      	adds	r7, #8
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
	...

08001fe0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001fe8:	4b19      	ldr	r3, [pc, #100]	; (8002050 <HAL_PWREx_ConfigSupply+0x70>)
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	f003 0304 	and.w	r3, r3, #4
 8001ff0:	2b04      	cmp	r3, #4
 8001ff2:	d00a      	beq.n	800200a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001ff4:	4b16      	ldr	r3, [pc, #88]	; (8002050 <HAL_PWREx_ConfigSupply+0x70>)
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	f003 0307 	and.w	r3, r3, #7
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d001      	beq.n	8002006 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e01f      	b.n	8002046 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002006:	2300      	movs	r3, #0
 8002008:	e01d      	b.n	8002046 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800200a:	4b11      	ldr	r3, [pc, #68]	; (8002050 <HAL_PWREx_ConfigSupply+0x70>)
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	f023 0207 	bic.w	r2, r3, #7
 8002012:	490f      	ldr	r1, [pc, #60]	; (8002050 <HAL_PWREx_ConfigSupply+0x70>)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4313      	orrs	r3, r2
 8002018:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800201a:	f7ff fcb1 	bl	8001980 <HAL_GetTick>
 800201e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002020:	e009      	b.n	8002036 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002022:	f7ff fcad 	bl	8001980 <HAL_GetTick>
 8002026:	4602      	mov	r2, r0
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002030:	d901      	bls.n	8002036 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e007      	b.n	8002046 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002036:	4b06      	ldr	r3, [pc, #24]	; (8002050 <HAL_PWREx_ConfigSupply+0x70>)
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800203e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002042:	d1ee      	bne.n	8002022 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	3710      	adds	r7, #16
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	58024800 	.word	0x58024800

08002054 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b08c      	sub	sp, #48	; 0x30
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d102      	bne.n	8002068 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	f000 bc1d 	b.w	80028a2 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0301 	and.w	r3, r3, #1
 8002070:	2b00      	cmp	r3, #0
 8002072:	f000 8087 	beq.w	8002184 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002076:	4b99      	ldr	r3, [pc, #612]	; (80022dc <HAL_RCC_OscConfig+0x288>)
 8002078:	691b      	ldr	r3, [r3, #16]
 800207a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800207e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002080:	4b96      	ldr	r3, [pc, #600]	; (80022dc <HAL_RCC_OscConfig+0x288>)
 8002082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002084:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002088:	2b10      	cmp	r3, #16
 800208a:	d007      	beq.n	800209c <HAL_RCC_OscConfig+0x48>
 800208c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800208e:	2b18      	cmp	r3, #24
 8002090:	d110      	bne.n	80020b4 <HAL_RCC_OscConfig+0x60>
 8002092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002094:	f003 0303 	and.w	r3, r3, #3
 8002098:	2b02      	cmp	r3, #2
 800209a:	d10b      	bne.n	80020b4 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800209c:	4b8f      	ldr	r3, [pc, #572]	; (80022dc <HAL_RCC_OscConfig+0x288>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d06c      	beq.n	8002182 <HAL_RCC_OscConfig+0x12e>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d168      	bne.n	8002182 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e3f6      	b.n	80028a2 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020bc:	d106      	bne.n	80020cc <HAL_RCC_OscConfig+0x78>
 80020be:	4b87      	ldr	r3, [pc, #540]	; (80022dc <HAL_RCC_OscConfig+0x288>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a86      	ldr	r2, [pc, #536]	; (80022dc <HAL_RCC_OscConfig+0x288>)
 80020c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020c8:	6013      	str	r3, [r2, #0]
 80020ca:	e02e      	b.n	800212a <HAL_RCC_OscConfig+0xd6>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d10c      	bne.n	80020ee <HAL_RCC_OscConfig+0x9a>
 80020d4:	4b81      	ldr	r3, [pc, #516]	; (80022dc <HAL_RCC_OscConfig+0x288>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a80      	ldr	r2, [pc, #512]	; (80022dc <HAL_RCC_OscConfig+0x288>)
 80020da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020de:	6013      	str	r3, [r2, #0]
 80020e0:	4b7e      	ldr	r3, [pc, #504]	; (80022dc <HAL_RCC_OscConfig+0x288>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a7d      	ldr	r2, [pc, #500]	; (80022dc <HAL_RCC_OscConfig+0x288>)
 80020e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020ea:	6013      	str	r3, [r2, #0]
 80020ec:	e01d      	b.n	800212a <HAL_RCC_OscConfig+0xd6>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020f6:	d10c      	bne.n	8002112 <HAL_RCC_OscConfig+0xbe>
 80020f8:	4b78      	ldr	r3, [pc, #480]	; (80022dc <HAL_RCC_OscConfig+0x288>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a77      	ldr	r2, [pc, #476]	; (80022dc <HAL_RCC_OscConfig+0x288>)
 80020fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002102:	6013      	str	r3, [r2, #0]
 8002104:	4b75      	ldr	r3, [pc, #468]	; (80022dc <HAL_RCC_OscConfig+0x288>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a74      	ldr	r2, [pc, #464]	; (80022dc <HAL_RCC_OscConfig+0x288>)
 800210a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800210e:	6013      	str	r3, [r2, #0]
 8002110:	e00b      	b.n	800212a <HAL_RCC_OscConfig+0xd6>
 8002112:	4b72      	ldr	r3, [pc, #456]	; (80022dc <HAL_RCC_OscConfig+0x288>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a71      	ldr	r2, [pc, #452]	; (80022dc <HAL_RCC_OscConfig+0x288>)
 8002118:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800211c:	6013      	str	r3, [r2, #0]
 800211e:	4b6f      	ldr	r3, [pc, #444]	; (80022dc <HAL_RCC_OscConfig+0x288>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a6e      	ldr	r2, [pc, #440]	; (80022dc <HAL_RCC_OscConfig+0x288>)
 8002124:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002128:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d013      	beq.n	800215a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002132:	f7ff fc25 	bl	8001980 <HAL_GetTick>
 8002136:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002138:	e008      	b.n	800214c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800213a:	f7ff fc21 	bl	8001980 <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	2b64      	cmp	r3, #100	; 0x64
 8002146:	d901      	bls.n	800214c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e3aa      	b.n	80028a2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800214c:	4b63      	ldr	r3, [pc, #396]	; (80022dc <HAL_RCC_OscConfig+0x288>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d0f0      	beq.n	800213a <HAL_RCC_OscConfig+0xe6>
 8002158:	e014      	b.n	8002184 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800215a:	f7ff fc11 	bl	8001980 <HAL_GetTick>
 800215e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002160:	e008      	b.n	8002174 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002162:	f7ff fc0d 	bl	8001980 <HAL_GetTick>
 8002166:	4602      	mov	r2, r0
 8002168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	2b64      	cmp	r3, #100	; 0x64
 800216e:	d901      	bls.n	8002174 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8002170:	2303      	movs	r3, #3
 8002172:	e396      	b.n	80028a2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002174:	4b59      	ldr	r3, [pc, #356]	; (80022dc <HAL_RCC_OscConfig+0x288>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d1f0      	bne.n	8002162 <HAL_RCC_OscConfig+0x10e>
 8002180:	e000      	b.n	8002184 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002182:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0302 	and.w	r3, r3, #2
 800218c:	2b00      	cmp	r3, #0
 800218e:	f000 80cb 	beq.w	8002328 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002192:	4b52      	ldr	r3, [pc, #328]	; (80022dc <HAL_RCC_OscConfig+0x288>)
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800219a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800219c:	4b4f      	ldr	r3, [pc, #316]	; (80022dc <HAL_RCC_OscConfig+0x288>)
 800219e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a0:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80021a2:	6a3b      	ldr	r3, [r7, #32]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d007      	beq.n	80021b8 <HAL_RCC_OscConfig+0x164>
 80021a8:	6a3b      	ldr	r3, [r7, #32]
 80021aa:	2b18      	cmp	r3, #24
 80021ac:	d156      	bne.n	800225c <HAL_RCC_OscConfig+0x208>
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	f003 0303 	and.w	r3, r3, #3
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d151      	bne.n	800225c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021b8:	4b48      	ldr	r3, [pc, #288]	; (80022dc <HAL_RCC_OscConfig+0x288>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0304 	and.w	r3, r3, #4
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d005      	beq.n	80021d0 <HAL_RCC_OscConfig+0x17c>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d101      	bne.n	80021d0 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e368      	b.n	80028a2 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80021d0:	4b42      	ldr	r3, [pc, #264]	; (80022dc <HAL_RCC_OscConfig+0x288>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f023 0219 	bic.w	r2, r3, #25
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	493f      	ldr	r1, [pc, #252]	; (80022dc <HAL_RCC_OscConfig+0x288>)
 80021de:	4313      	orrs	r3, r2
 80021e0:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80021e2:	f7ff fbcd 	bl	8001980 <HAL_GetTick>
 80021e6:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80021e8:	e008      	b.n	80021fc <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021ea:	f7ff fbc9 	bl	8001980 <HAL_GetTick>
 80021ee:	4602      	mov	r2, r0
 80021f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d901      	bls.n	80021fc <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	e352      	b.n	80028a2 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80021fc:	4b37      	ldr	r3, [pc, #220]	; (80022dc <HAL_RCC_OscConfig+0x288>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0304 	and.w	r3, r3, #4
 8002204:	2b00      	cmp	r3, #0
 8002206:	d0f0      	beq.n	80021ea <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002208:	f7ff fbea 	bl	80019e0 <HAL_GetREVID>
 800220c:	4603      	mov	r3, r0
 800220e:	f241 0203 	movw	r2, #4099	; 0x1003
 8002212:	4293      	cmp	r3, r2
 8002214:	d817      	bhi.n	8002246 <HAL_RCC_OscConfig+0x1f2>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	691b      	ldr	r3, [r3, #16]
 800221a:	2b40      	cmp	r3, #64	; 0x40
 800221c:	d108      	bne.n	8002230 <HAL_RCC_OscConfig+0x1dc>
 800221e:	4b2f      	ldr	r3, [pc, #188]	; (80022dc <HAL_RCC_OscConfig+0x288>)
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002226:	4a2d      	ldr	r2, [pc, #180]	; (80022dc <HAL_RCC_OscConfig+0x288>)
 8002228:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800222c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800222e:	e07b      	b.n	8002328 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002230:	4b2a      	ldr	r3, [pc, #168]	; (80022dc <HAL_RCC_OscConfig+0x288>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	691b      	ldr	r3, [r3, #16]
 800223c:	031b      	lsls	r3, r3, #12
 800223e:	4927      	ldr	r1, [pc, #156]	; (80022dc <HAL_RCC_OscConfig+0x288>)
 8002240:	4313      	orrs	r3, r2
 8002242:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002244:	e070      	b.n	8002328 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002246:	4b25      	ldr	r3, [pc, #148]	; (80022dc <HAL_RCC_OscConfig+0x288>)
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	691b      	ldr	r3, [r3, #16]
 8002252:	061b      	lsls	r3, r3, #24
 8002254:	4921      	ldr	r1, [pc, #132]	; (80022dc <HAL_RCC_OscConfig+0x288>)
 8002256:	4313      	orrs	r3, r2
 8002258:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800225a:	e065      	b.n	8002328 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d048      	beq.n	80022f6 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002264:	4b1d      	ldr	r3, [pc, #116]	; (80022dc <HAL_RCC_OscConfig+0x288>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f023 0219 	bic.w	r2, r3, #25
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	491a      	ldr	r1, [pc, #104]	; (80022dc <HAL_RCC_OscConfig+0x288>)
 8002272:	4313      	orrs	r3, r2
 8002274:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002276:	f7ff fb83 	bl	8001980 <HAL_GetTick>
 800227a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800227c:	e008      	b.n	8002290 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800227e:	f7ff fb7f 	bl	8001980 <HAL_GetTick>
 8002282:	4602      	mov	r2, r0
 8002284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	2b02      	cmp	r3, #2
 800228a:	d901      	bls.n	8002290 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	e308      	b.n	80028a2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002290:	4b12      	ldr	r3, [pc, #72]	; (80022dc <HAL_RCC_OscConfig+0x288>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0304 	and.w	r3, r3, #4
 8002298:	2b00      	cmp	r3, #0
 800229a:	d0f0      	beq.n	800227e <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800229c:	f7ff fba0 	bl	80019e0 <HAL_GetREVID>
 80022a0:	4603      	mov	r3, r0
 80022a2:	f241 0203 	movw	r2, #4099	; 0x1003
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d81a      	bhi.n	80022e0 <HAL_RCC_OscConfig+0x28c>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	2b40      	cmp	r3, #64	; 0x40
 80022b0:	d108      	bne.n	80022c4 <HAL_RCC_OscConfig+0x270>
 80022b2:	4b0a      	ldr	r3, [pc, #40]	; (80022dc <HAL_RCC_OscConfig+0x288>)
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80022ba:	4a08      	ldr	r2, [pc, #32]	; (80022dc <HAL_RCC_OscConfig+0x288>)
 80022bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022c0:	6053      	str	r3, [r2, #4]
 80022c2:	e031      	b.n	8002328 <HAL_RCC_OscConfig+0x2d4>
 80022c4:	4b05      	ldr	r3, [pc, #20]	; (80022dc <HAL_RCC_OscConfig+0x288>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	691b      	ldr	r3, [r3, #16]
 80022d0:	031b      	lsls	r3, r3, #12
 80022d2:	4902      	ldr	r1, [pc, #8]	; (80022dc <HAL_RCC_OscConfig+0x288>)
 80022d4:	4313      	orrs	r3, r2
 80022d6:	604b      	str	r3, [r1, #4]
 80022d8:	e026      	b.n	8002328 <HAL_RCC_OscConfig+0x2d4>
 80022da:	bf00      	nop
 80022dc:	58024400 	.word	0x58024400
 80022e0:	4b9a      	ldr	r3, [pc, #616]	; (800254c <HAL_RCC_OscConfig+0x4f8>)
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	691b      	ldr	r3, [r3, #16]
 80022ec:	061b      	lsls	r3, r3, #24
 80022ee:	4997      	ldr	r1, [pc, #604]	; (800254c <HAL_RCC_OscConfig+0x4f8>)
 80022f0:	4313      	orrs	r3, r2
 80022f2:	604b      	str	r3, [r1, #4]
 80022f4:	e018      	b.n	8002328 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022f6:	4b95      	ldr	r3, [pc, #596]	; (800254c <HAL_RCC_OscConfig+0x4f8>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a94      	ldr	r2, [pc, #592]	; (800254c <HAL_RCC_OscConfig+0x4f8>)
 80022fc:	f023 0301 	bic.w	r3, r3, #1
 8002300:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002302:	f7ff fb3d 	bl	8001980 <HAL_GetTick>
 8002306:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002308:	e008      	b.n	800231c <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800230a:	f7ff fb39 	bl	8001980 <HAL_GetTick>
 800230e:	4602      	mov	r2, r0
 8002310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	2b02      	cmp	r3, #2
 8002316:	d901      	bls.n	800231c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	e2c2      	b.n	80028a2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800231c:	4b8b      	ldr	r3, [pc, #556]	; (800254c <HAL_RCC_OscConfig+0x4f8>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0304 	and.w	r3, r3, #4
 8002324:	2b00      	cmp	r3, #0
 8002326:	d1f0      	bne.n	800230a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0310 	and.w	r3, r3, #16
 8002330:	2b00      	cmp	r3, #0
 8002332:	f000 80a9 	beq.w	8002488 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002336:	4b85      	ldr	r3, [pc, #532]	; (800254c <HAL_RCC_OscConfig+0x4f8>)
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800233e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002340:	4b82      	ldr	r3, [pc, #520]	; (800254c <HAL_RCC_OscConfig+0x4f8>)
 8002342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002344:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	2b08      	cmp	r3, #8
 800234a:	d007      	beq.n	800235c <HAL_RCC_OscConfig+0x308>
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	2b18      	cmp	r3, #24
 8002350:	d13a      	bne.n	80023c8 <HAL_RCC_OscConfig+0x374>
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	f003 0303 	and.w	r3, r3, #3
 8002358:	2b01      	cmp	r3, #1
 800235a:	d135      	bne.n	80023c8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800235c:	4b7b      	ldr	r3, [pc, #492]	; (800254c <HAL_RCC_OscConfig+0x4f8>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002364:	2b00      	cmp	r3, #0
 8002366:	d005      	beq.n	8002374 <HAL_RCC_OscConfig+0x320>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	69db      	ldr	r3, [r3, #28]
 800236c:	2b80      	cmp	r3, #128	; 0x80
 800236e:	d001      	beq.n	8002374 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e296      	b.n	80028a2 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002374:	f7ff fb34 	bl	80019e0 <HAL_GetREVID>
 8002378:	4603      	mov	r3, r0
 800237a:	f241 0203 	movw	r2, #4099	; 0x1003
 800237e:	4293      	cmp	r3, r2
 8002380:	d817      	bhi.n	80023b2 <HAL_RCC_OscConfig+0x35e>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6a1b      	ldr	r3, [r3, #32]
 8002386:	2b20      	cmp	r3, #32
 8002388:	d108      	bne.n	800239c <HAL_RCC_OscConfig+0x348>
 800238a:	4b70      	ldr	r3, [pc, #448]	; (800254c <HAL_RCC_OscConfig+0x4f8>)
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002392:	4a6e      	ldr	r2, [pc, #440]	; (800254c <HAL_RCC_OscConfig+0x4f8>)
 8002394:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002398:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800239a:	e075      	b.n	8002488 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800239c:	4b6b      	ldr	r3, [pc, #428]	; (800254c <HAL_RCC_OscConfig+0x4f8>)
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6a1b      	ldr	r3, [r3, #32]
 80023a8:	069b      	lsls	r3, r3, #26
 80023aa:	4968      	ldr	r1, [pc, #416]	; (800254c <HAL_RCC_OscConfig+0x4f8>)
 80023ac:	4313      	orrs	r3, r2
 80023ae:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80023b0:	e06a      	b.n	8002488 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80023b2:	4b66      	ldr	r3, [pc, #408]	; (800254c <HAL_RCC_OscConfig+0x4f8>)
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6a1b      	ldr	r3, [r3, #32]
 80023be:	061b      	lsls	r3, r3, #24
 80023c0:	4962      	ldr	r1, [pc, #392]	; (800254c <HAL_RCC_OscConfig+0x4f8>)
 80023c2:	4313      	orrs	r3, r2
 80023c4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80023c6:	e05f      	b.n	8002488 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	69db      	ldr	r3, [r3, #28]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d042      	beq.n	8002456 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80023d0:	4b5e      	ldr	r3, [pc, #376]	; (800254c <HAL_RCC_OscConfig+0x4f8>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a5d      	ldr	r2, [pc, #372]	; (800254c <HAL_RCC_OscConfig+0x4f8>)
 80023d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023dc:	f7ff fad0 	bl	8001980 <HAL_GetTick>
 80023e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80023e2:	e008      	b.n	80023f6 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80023e4:	f7ff facc 	bl	8001980 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e255      	b.n	80028a2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80023f6:	4b55      	ldr	r3, [pc, #340]	; (800254c <HAL_RCC_OscConfig+0x4f8>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d0f0      	beq.n	80023e4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002402:	f7ff faed 	bl	80019e0 <HAL_GetREVID>
 8002406:	4603      	mov	r3, r0
 8002408:	f241 0203 	movw	r2, #4099	; 0x1003
 800240c:	4293      	cmp	r3, r2
 800240e:	d817      	bhi.n	8002440 <HAL_RCC_OscConfig+0x3ec>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6a1b      	ldr	r3, [r3, #32]
 8002414:	2b20      	cmp	r3, #32
 8002416:	d108      	bne.n	800242a <HAL_RCC_OscConfig+0x3d6>
 8002418:	4b4c      	ldr	r3, [pc, #304]	; (800254c <HAL_RCC_OscConfig+0x4f8>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002420:	4a4a      	ldr	r2, [pc, #296]	; (800254c <HAL_RCC_OscConfig+0x4f8>)
 8002422:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002426:	6053      	str	r3, [r2, #4]
 8002428:	e02e      	b.n	8002488 <HAL_RCC_OscConfig+0x434>
 800242a:	4b48      	ldr	r3, [pc, #288]	; (800254c <HAL_RCC_OscConfig+0x4f8>)
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a1b      	ldr	r3, [r3, #32]
 8002436:	069b      	lsls	r3, r3, #26
 8002438:	4944      	ldr	r1, [pc, #272]	; (800254c <HAL_RCC_OscConfig+0x4f8>)
 800243a:	4313      	orrs	r3, r2
 800243c:	604b      	str	r3, [r1, #4]
 800243e:	e023      	b.n	8002488 <HAL_RCC_OscConfig+0x434>
 8002440:	4b42      	ldr	r3, [pc, #264]	; (800254c <HAL_RCC_OscConfig+0x4f8>)
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6a1b      	ldr	r3, [r3, #32]
 800244c:	061b      	lsls	r3, r3, #24
 800244e:	493f      	ldr	r1, [pc, #252]	; (800254c <HAL_RCC_OscConfig+0x4f8>)
 8002450:	4313      	orrs	r3, r2
 8002452:	60cb      	str	r3, [r1, #12]
 8002454:	e018      	b.n	8002488 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002456:	4b3d      	ldr	r3, [pc, #244]	; (800254c <HAL_RCC_OscConfig+0x4f8>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a3c      	ldr	r2, [pc, #240]	; (800254c <HAL_RCC_OscConfig+0x4f8>)
 800245c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002460:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002462:	f7ff fa8d 	bl	8001980 <HAL_GetTick>
 8002466:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002468:	e008      	b.n	800247c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800246a:	f7ff fa89 	bl	8001980 <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	2b02      	cmp	r3, #2
 8002476:	d901      	bls.n	800247c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e212      	b.n	80028a2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800247c:	4b33      	ldr	r3, [pc, #204]	; (800254c <HAL_RCC_OscConfig+0x4f8>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002484:	2b00      	cmp	r3, #0
 8002486:	d1f0      	bne.n	800246a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0308 	and.w	r3, r3, #8
 8002490:	2b00      	cmp	r3, #0
 8002492:	d036      	beq.n	8002502 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	695b      	ldr	r3, [r3, #20]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d019      	beq.n	80024d0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800249c:	4b2b      	ldr	r3, [pc, #172]	; (800254c <HAL_RCC_OscConfig+0x4f8>)
 800249e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024a0:	4a2a      	ldr	r2, [pc, #168]	; (800254c <HAL_RCC_OscConfig+0x4f8>)
 80024a2:	f043 0301 	orr.w	r3, r3, #1
 80024a6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024a8:	f7ff fa6a 	bl	8001980 <HAL_GetTick>
 80024ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80024ae:	e008      	b.n	80024c2 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024b0:	f7ff fa66 	bl	8001980 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e1ef      	b.n	80028a2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80024c2:	4b22      	ldr	r3, [pc, #136]	; (800254c <HAL_RCC_OscConfig+0x4f8>)
 80024c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024c6:	f003 0302 	and.w	r3, r3, #2
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d0f0      	beq.n	80024b0 <HAL_RCC_OscConfig+0x45c>
 80024ce:	e018      	b.n	8002502 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024d0:	4b1e      	ldr	r3, [pc, #120]	; (800254c <HAL_RCC_OscConfig+0x4f8>)
 80024d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024d4:	4a1d      	ldr	r2, [pc, #116]	; (800254c <HAL_RCC_OscConfig+0x4f8>)
 80024d6:	f023 0301 	bic.w	r3, r3, #1
 80024da:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024dc:	f7ff fa50 	bl	8001980 <HAL_GetTick>
 80024e0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80024e2:	e008      	b.n	80024f6 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024e4:	f7ff fa4c 	bl	8001980 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e1d5      	b.n	80028a2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80024f6:	4b15      	ldr	r3, [pc, #84]	; (800254c <HAL_RCC_OscConfig+0x4f8>)
 80024f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024fa:	f003 0302 	and.w	r3, r3, #2
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d1f0      	bne.n	80024e4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0320 	and.w	r3, r3, #32
 800250a:	2b00      	cmp	r3, #0
 800250c:	d039      	beq.n	8002582 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	699b      	ldr	r3, [r3, #24]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d01c      	beq.n	8002550 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002516:	4b0d      	ldr	r3, [pc, #52]	; (800254c <HAL_RCC_OscConfig+0x4f8>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a0c      	ldr	r2, [pc, #48]	; (800254c <HAL_RCC_OscConfig+0x4f8>)
 800251c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002520:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002522:	f7ff fa2d 	bl	8001980 <HAL_GetTick>
 8002526:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002528:	e008      	b.n	800253c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800252a:	f7ff fa29 	bl	8001980 <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	2b02      	cmp	r3, #2
 8002536:	d901      	bls.n	800253c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e1b2      	b.n	80028a2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800253c:	4b03      	ldr	r3, [pc, #12]	; (800254c <HAL_RCC_OscConfig+0x4f8>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d0f0      	beq.n	800252a <HAL_RCC_OscConfig+0x4d6>
 8002548:	e01b      	b.n	8002582 <HAL_RCC_OscConfig+0x52e>
 800254a:	bf00      	nop
 800254c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002550:	4b9b      	ldr	r3, [pc, #620]	; (80027c0 <HAL_RCC_OscConfig+0x76c>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a9a      	ldr	r2, [pc, #616]	; (80027c0 <HAL_RCC_OscConfig+0x76c>)
 8002556:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800255a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800255c:	f7ff fa10 	bl	8001980 <HAL_GetTick>
 8002560:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002562:	e008      	b.n	8002576 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002564:	f7ff fa0c 	bl	8001980 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b02      	cmp	r3, #2
 8002570:	d901      	bls.n	8002576 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e195      	b.n	80028a2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002576:	4b92      	ldr	r3, [pc, #584]	; (80027c0 <HAL_RCC_OscConfig+0x76c>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d1f0      	bne.n	8002564 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0304 	and.w	r3, r3, #4
 800258a:	2b00      	cmp	r3, #0
 800258c:	f000 8081 	beq.w	8002692 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002590:	4b8c      	ldr	r3, [pc, #560]	; (80027c4 <HAL_RCC_OscConfig+0x770>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a8b      	ldr	r2, [pc, #556]	; (80027c4 <HAL_RCC_OscConfig+0x770>)
 8002596:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800259a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800259c:	f7ff f9f0 	bl	8001980 <HAL_GetTick>
 80025a0:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80025a2:	e008      	b.n	80025b6 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80025a4:	f7ff f9ec 	bl	8001980 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b64      	cmp	r3, #100	; 0x64
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e175      	b.n	80028a2 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80025b6:	4b83      	ldr	r3, [pc, #524]	; (80027c4 <HAL_RCC_OscConfig+0x770>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d0f0      	beq.n	80025a4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d106      	bne.n	80025d8 <HAL_RCC_OscConfig+0x584>
 80025ca:	4b7d      	ldr	r3, [pc, #500]	; (80027c0 <HAL_RCC_OscConfig+0x76c>)
 80025cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ce:	4a7c      	ldr	r2, [pc, #496]	; (80027c0 <HAL_RCC_OscConfig+0x76c>)
 80025d0:	f043 0301 	orr.w	r3, r3, #1
 80025d4:	6713      	str	r3, [r2, #112]	; 0x70
 80025d6:	e02d      	b.n	8002634 <HAL_RCC_OscConfig+0x5e0>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d10c      	bne.n	80025fa <HAL_RCC_OscConfig+0x5a6>
 80025e0:	4b77      	ldr	r3, [pc, #476]	; (80027c0 <HAL_RCC_OscConfig+0x76c>)
 80025e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e4:	4a76      	ldr	r2, [pc, #472]	; (80027c0 <HAL_RCC_OscConfig+0x76c>)
 80025e6:	f023 0301 	bic.w	r3, r3, #1
 80025ea:	6713      	str	r3, [r2, #112]	; 0x70
 80025ec:	4b74      	ldr	r3, [pc, #464]	; (80027c0 <HAL_RCC_OscConfig+0x76c>)
 80025ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f0:	4a73      	ldr	r2, [pc, #460]	; (80027c0 <HAL_RCC_OscConfig+0x76c>)
 80025f2:	f023 0304 	bic.w	r3, r3, #4
 80025f6:	6713      	str	r3, [r2, #112]	; 0x70
 80025f8:	e01c      	b.n	8002634 <HAL_RCC_OscConfig+0x5e0>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	2b05      	cmp	r3, #5
 8002600:	d10c      	bne.n	800261c <HAL_RCC_OscConfig+0x5c8>
 8002602:	4b6f      	ldr	r3, [pc, #444]	; (80027c0 <HAL_RCC_OscConfig+0x76c>)
 8002604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002606:	4a6e      	ldr	r2, [pc, #440]	; (80027c0 <HAL_RCC_OscConfig+0x76c>)
 8002608:	f043 0304 	orr.w	r3, r3, #4
 800260c:	6713      	str	r3, [r2, #112]	; 0x70
 800260e:	4b6c      	ldr	r3, [pc, #432]	; (80027c0 <HAL_RCC_OscConfig+0x76c>)
 8002610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002612:	4a6b      	ldr	r2, [pc, #428]	; (80027c0 <HAL_RCC_OscConfig+0x76c>)
 8002614:	f043 0301 	orr.w	r3, r3, #1
 8002618:	6713      	str	r3, [r2, #112]	; 0x70
 800261a:	e00b      	b.n	8002634 <HAL_RCC_OscConfig+0x5e0>
 800261c:	4b68      	ldr	r3, [pc, #416]	; (80027c0 <HAL_RCC_OscConfig+0x76c>)
 800261e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002620:	4a67      	ldr	r2, [pc, #412]	; (80027c0 <HAL_RCC_OscConfig+0x76c>)
 8002622:	f023 0301 	bic.w	r3, r3, #1
 8002626:	6713      	str	r3, [r2, #112]	; 0x70
 8002628:	4b65      	ldr	r3, [pc, #404]	; (80027c0 <HAL_RCC_OscConfig+0x76c>)
 800262a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800262c:	4a64      	ldr	r2, [pc, #400]	; (80027c0 <HAL_RCC_OscConfig+0x76c>)
 800262e:	f023 0304 	bic.w	r3, r3, #4
 8002632:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d015      	beq.n	8002668 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800263c:	f7ff f9a0 	bl	8001980 <HAL_GetTick>
 8002640:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002642:	e00a      	b.n	800265a <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002644:	f7ff f99c 	bl	8001980 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002652:	4293      	cmp	r3, r2
 8002654:	d901      	bls.n	800265a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e123      	b.n	80028a2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800265a:	4b59      	ldr	r3, [pc, #356]	; (80027c0 <HAL_RCC_OscConfig+0x76c>)
 800265c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d0ee      	beq.n	8002644 <HAL_RCC_OscConfig+0x5f0>
 8002666:	e014      	b.n	8002692 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002668:	f7ff f98a 	bl	8001980 <HAL_GetTick>
 800266c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800266e:	e00a      	b.n	8002686 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002670:	f7ff f986 	bl	8001980 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	f241 3288 	movw	r2, #5000	; 0x1388
 800267e:	4293      	cmp	r3, r2
 8002680:	d901      	bls.n	8002686 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e10d      	b.n	80028a2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002686:	4b4e      	ldr	r3, [pc, #312]	; (80027c0 <HAL_RCC_OscConfig+0x76c>)
 8002688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d1ee      	bne.n	8002670 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002696:	2b00      	cmp	r3, #0
 8002698:	f000 8102 	beq.w	80028a0 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800269c:	4b48      	ldr	r3, [pc, #288]	; (80027c0 <HAL_RCC_OscConfig+0x76c>)
 800269e:	691b      	ldr	r3, [r3, #16]
 80026a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026a4:	2b18      	cmp	r3, #24
 80026a6:	f000 80bd 	beq.w	8002824 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	f040 809e 	bne.w	80027f0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026b4:	4b42      	ldr	r3, [pc, #264]	; (80027c0 <HAL_RCC_OscConfig+0x76c>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a41      	ldr	r2, [pc, #260]	; (80027c0 <HAL_RCC_OscConfig+0x76c>)
 80026ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c0:	f7ff f95e 	bl	8001980 <HAL_GetTick>
 80026c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80026c6:	e008      	b.n	80026da <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026c8:	f7ff f95a 	bl	8001980 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d901      	bls.n	80026da <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e0e3      	b.n	80028a2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80026da:	4b39      	ldr	r3, [pc, #228]	; (80027c0 <HAL_RCC_OscConfig+0x76c>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d1f0      	bne.n	80026c8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026e6:	4b36      	ldr	r3, [pc, #216]	; (80027c0 <HAL_RCC_OscConfig+0x76c>)
 80026e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026ea:	4b37      	ldr	r3, [pc, #220]	; (80027c8 <HAL_RCC_OscConfig+0x774>)
 80026ec:	4013      	ands	r3, r2
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80026f6:	0112      	lsls	r2, r2, #4
 80026f8:	430a      	orrs	r2, r1
 80026fa:	4931      	ldr	r1, [pc, #196]	; (80027c0 <HAL_RCC_OscConfig+0x76c>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	628b      	str	r3, [r1, #40]	; 0x28
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002704:	3b01      	subs	r3, #1
 8002706:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800270e:	3b01      	subs	r3, #1
 8002710:	025b      	lsls	r3, r3, #9
 8002712:	b29b      	uxth	r3, r3
 8002714:	431a      	orrs	r2, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800271a:	3b01      	subs	r3, #1
 800271c:	041b      	lsls	r3, r3, #16
 800271e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002722:	431a      	orrs	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002728:	3b01      	subs	r3, #1
 800272a:	061b      	lsls	r3, r3, #24
 800272c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002730:	4923      	ldr	r1, [pc, #140]	; (80027c0 <HAL_RCC_OscConfig+0x76c>)
 8002732:	4313      	orrs	r3, r2
 8002734:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002736:	4b22      	ldr	r3, [pc, #136]	; (80027c0 <HAL_RCC_OscConfig+0x76c>)
 8002738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273a:	4a21      	ldr	r2, [pc, #132]	; (80027c0 <HAL_RCC_OscConfig+0x76c>)
 800273c:	f023 0301 	bic.w	r3, r3, #1
 8002740:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002742:	4b1f      	ldr	r3, [pc, #124]	; (80027c0 <HAL_RCC_OscConfig+0x76c>)
 8002744:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002746:	4b21      	ldr	r3, [pc, #132]	; (80027cc <HAL_RCC_OscConfig+0x778>)
 8002748:	4013      	ands	r3, r2
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800274e:	00d2      	lsls	r2, r2, #3
 8002750:	491b      	ldr	r1, [pc, #108]	; (80027c0 <HAL_RCC_OscConfig+0x76c>)
 8002752:	4313      	orrs	r3, r2
 8002754:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002756:	4b1a      	ldr	r3, [pc, #104]	; (80027c0 <HAL_RCC_OscConfig+0x76c>)
 8002758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800275a:	f023 020c 	bic.w	r2, r3, #12
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002762:	4917      	ldr	r1, [pc, #92]	; (80027c0 <HAL_RCC_OscConfig+0x76c>)
 8002764:	4313      	orrs	r3, r2
 8002766:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002768:	4b15      	ldr	r3, [pc, #84]	; (80027c0 <HAL_RCC_OscConfig+0x76c>)
 800276a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800276c:	f023 0202 	bic.w	r2, r3, #2
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002774:	4912      	ldr	r1, [pc, #72]	; (80027c0 <HAL_RCC_OscConfig+0x76c>)
 8002776:	4313      	orrs	r3, r2
 8002778:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800277a:	4b11      	ldr	r3, [pc, #68]	; (80027c0 <HAL_RCC_OscConfig+0x76c>)
 800277c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800277e:	4a10      	ldr	r2, [pc, #64]	; (80027c0 <HAL_RCC_OscConfig+0x76c>)
 8002780:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002784:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002786:	4b0e      	ldr	r3, [pc, #56]	; (80027c0 <HAL_RCC_OscConfig+0x76c>)
 8002788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800278a:	4a0d      	ldr	r2, [pc, #52]	; (80027c0 <HAL_RCC_OscConfig+0x76c>)
 800278c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002790:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002792:	4b0b      	ldr	r3, [pc, #44]	; (80027c0 <HAL_RCC_OscConfig+0x76c>)
 8002794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002796:	4a0a      	ldr	r2, [pc, #40]	; (80027c0 <HAL_RCC_OscConfig+0x76c>)
 8002798:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800279c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800279e:	4b08      	ldr	r3, [pc, #32]	; (80027c0 <HAL_RCC_OscConfig+0x76c>)
 80027a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a2:	4a07      	ldr	r2, [pc, #28]	; (80027c0 <HAL_RCC_OscConfig+0x76c>)
 80027a4:	f043 0301 	orr.w	r3, r3, #1
 80027a8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027aa:	4b05      	ldr	r3, [pc, #20]	; (80027c0 <HAL_RCC_OscConfig+0x76c>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a04      	ldr	r2, [pc, #16]	; (80027c0 <HAL_RCC_OscConfig+0x76c>)
 80027b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b6:	f7ff f8e3 	bl	8001980 <HAL_GetTick>
 80027ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80027bc:	e011      	b.n	80027e2 <HAL_RCC_OscConfig+0x78e>
 80027be:	bf00      	nop
 80027c0:	58024400 	.word	0x58024400
 80027c4:	58024800 	.word	0x58024800
 80027c8:	fffffc0c 	.word	0xfffffc0c
 80027cc:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027d0:	f7ff f8d6 	bl	8001980 <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d901      	bls.n	80027e2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e05f      	b.n	80028a2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80027e2:	4b32      	ldr	r3, [pc, #200]	; (80028ac <HAL_RCC_OscConfig+0x858>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d0f0      	beq.n	80027d0 <HAL_RCC_OscConfig+0x77c>
 80027ee:	e057      	b.n	80028a0 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027f0:	4b2e      	ldr	r3, [pc, #184]	; (80028ac <HAL_RCC_OscConfig+0x858>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a2d      	ldr	r2, [pc, #180]	; (80028ac <HAL_RCC_OscConfig+0x858>)
 80027f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027fc:	f7ff f8c0 	bl	8001980 <HAL_GetTick>
 8002800:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002802:	e008      	b.n	8002816 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002804:	f7ff f8bc 	bl	8001980 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	2b02      	cmp	r3, #2
 8002810:	d901      	bls.n	8002816 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e045      	b.n	80028a2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002816:	4b25      	ldr	r3, [pc, #148]	; (80028ac <HAL_RCC_OscConfig+0x858>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d1f0      	bne.n	8002804 <HAL_RCC_OscConfig+0x7b0>
 8002822:	e03d      	b.n	80028a0 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002824:	4b21      	ldr	r3, [pc, #132]	; (80028ac <HAL_RCC_OscConfig+0x858>)
 8002826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002828:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800282a:	4b20      	ldr	r3, [pc, #128]	; (80028ac <HAL_RCC_OscConfig+0x858>)
 800282c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002834:	2b01      	cmp	r3, #1
 8002836:	d031      	beq.n	800289c <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	f003 0203 	and.w	r2, r3, #3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002842:	429a      	cmp	r2, r3
 8002844:	d12a      	bne.n	800289c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	091b      	lsrs	r3, r3, #4
 800284a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002852:	429a      	cmp	r2, r3
 8002854:	d122      	bne.n	800289c <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002860:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002862:	429a      	cmp	r2, r3
 8002864:	d11a      	bne.n	800289c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	0a5b      	lsrs	r3, r3, #9
 800286a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002872:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002874:	429a      	cmp	r2, r3
 8002876:	d111      	bne.n	800289c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	0c1b      	lsrs	r3, r3, #16
 800287c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002884:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002886:	429a      	cmp	r2, r3
 8002888:	d108      	bne.n	800289c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	0e1b      	lsrs	r3, r3, #24
 800288e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002896:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002898:	429a      	cmp	r2, r3
 800289a:	d001      	beq.n	80028a0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e000      	b.n	80028a2 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3730      	adds	r7, #48	; 0x30
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	58024400 	.word	0x58024400

080028b0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b086      	sub	sp, #24
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d101      	bne.n	80028c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e19c      	b.n	8002bfe <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028c4:	4b8a      	ldr	r3, [pc, #552]	; (8002af0 <HAL_RCC_ClockConfig+0x240>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 030f 	and.w	r3, r3, #15
 80028cc:	683a      	ldr	r2, [r7, #0]
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d910      	bls.n	80028f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028d2:	4b87      	ldr	r3, [pc, #540]	; (8002af0 <HAL_RCC_ClockConfig+0x240>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f023 020f 	bic.w	r2, r3, #15
 80028da:	4985      	ldr	r1, [pc, #532]	; (8002af0 <HAL_RCC_ClockConfig+0x240>)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	4313      	orrs	r3, r2
 80028e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028e2:	4b83      	ldr	r3, [pc, #524]	; (8002af0 <HAL_RCC_ClockConfig+0x240>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 030f 	and.w	r3, r3, #15
 80028ea:	683a      	ldr	r2, [r7, #0]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d001      	beq.n	80028f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e184      	b.n	8002bfe <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0304 	and.w	r3, r3, #4
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d010      	beq.n	8002922 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	691a      	ldr	r2, [r3, #16]
 8002904:	4b7b      	ldr	r3, [pc, #492]	; (8002af4 <HAL_RCC_ClockConfig+0x244>)
 8002906:	699b      	ldr	r3, [r3, #24]
 8002908:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800290c:	429a      	cmp	r2, r3
 800290e:	d908      	bls.n	8002922 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002910:	4b78      	ldr	r3, [pc, #480]	; (8002af4 <HAL_RCC_ClockConfig+0x244>)
 8002912:	699b      	ldr	r3, [r3, #24]
 8002914:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	691b      	ldr	r3, [r3, #16]
 800291c:	4975      	ldr	r1, [pc, #468]	; (8002af4 <HAL_RCC_ClockConfig+0x244>)
 800291e:	4313      	orrs	r3, r2
 8002920:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0308 	and.w	r3, r3, #8
 800292a:	2b00      	cmp	r3, #0
 800292c:	d010      	beq.n	8002950 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	695a      	ldr	r2, [r3, #20]
 8002932:	4b70      	ldr	r3, [pc, #448]	; (8002af4 <HAL_RCC_ClockConfig+0x244>)
 8002934:	69db      	ldr	r3, [r3, #28]
 8002936:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800293a:	429a      	cmp	r2, r3
 800293c:	d908      	bls.n	8002950 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800293e:	4b6d      	ldr	r3, [pc, #436]	; (8002af4 <HAL_RCC_ClockConfig+0x244>)
 8002940:	69db      	ldr	r3, [r3, #28]
 8002942:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	695b      	ldr	r3, [r3, #20]
 800294a:	496a      	ldr	r1, [pc, #424]	; (8002af4 <HAL_RCC_ClockConfig+0x244>)
 800294c:	4313      	orrs	r3, r2
 800294e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0310 	and.w	r3, r3, #16
 8002958:	2b00      	cmp	r3, #0
 800295a:	d010      	beq.n	800297e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	699a      	ldr	r2, [r3, #24]
 8002960:	4b64      	ldr	r3, [pc, #400]	; (8002af4 <HAL_RCC_ClockConfig+0x244>)
 8002962:	69db      	ldr	r3, [r3, #28]
 8002964:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002968:	429a      	cmp	r2, r3
 800296a:	d908      	bls.n	800297e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800296c:	4b61      	ldr	r3, [pc, #388]	; (8002af4 <HAL_RCC_ClockConfig+0x244>)
 800296e:	69db      	ldr	r3, [r3, #28]
 8002970:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	699b      	ldr	r3, [r3, #24]
 8002978:	495e      	ldr	r1, [pc, #376]	; (8002af4 <HAL_RCC_ClockConfig+0x244>)
 800297a:	4313      	orrs	r3, r2
 800297c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0320 	and.w	r3, r3, #32
 8002986:	2b00      	cmp	r3, #0
 8002988:	d010      	beq.n	80029ac <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	69da      	ldr	r2, [r3, #28]
 800298e:	4b59      	ldr	r3, [pc, #356]	; (8002af4 <HAL_RCC_ClockConfig+0x244>)
 8002990:	6a1b      	ldr	r3, [r3, #32]
 8002992:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002996:	429a      	cmp	r2, r3
 8002998:	d908      	bls.n	80029ac <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800299a:	4b56      	ldr	r3, [pc, #344]	; (8002af4 <HAL_RCC_ClockConfig+0x244>)
 800299c:	6a1b      	ldr	r3, [r3, #32]
 800299e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	69db      	ldr	r3, [r3, #28]
 80029a6:	4953      	ldr	r1, [pc, #332]	; (8002af4 <HAL_RCC_ClockConfig+0x244>)
 80029a8:	4313      	orrs	r3, r2
 80029aa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0302 	and.w	r3, r3, #2
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d010      	beq.n	80029da <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	68da      	ldr	r2, [r3, #12]
 80029bc:	4b4d      	ldr	r3, [pc, #308]	; (8002af4 <HAL_RCC_ClockConfig+0x244>)
 80029be:	699b      	ldr	r3, [r3, #24]
 80029c0:	f003 030f 	and.w	r3, r3, #15
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d908      	bls.n	80029da <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029c8:	4b4a      	ldr	r3, [pc, #296]	; (8002af4 <HAL_RCC_ClockConfig+0x244>)
 80029ca:	699b      	ldr	r3, [r3, #24]
 80029cc:	f023 020f 	bic.w	r2, r3, #15
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	4947      	ldr	r1, [pc, #284]	; (8002af4 <HAL_RCC_ClockConfig+0x244>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0301 	and.w	r3, r3, #1
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d055      	beq.n	8002a92 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80029e6:	4b43      	ldr	r3, [pc, #268]	; (8002af4 <HAL_RCC_ClockConfig+0x244>)
 80029e8:	699b      	ldr	r3, [r3, #24]
 80029ea:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	4940      	ldr	r1, [pc, #256]	; (8002af4 <HAL_RCC_ClockConfig+0x244>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d107      	bne.n	8002a10 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a00:	4b3c      	ldr	r3, [pc, #240]	; (8002af4 <HAL_RCC_ClockConfig+0x244>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d121      	bne.n	8002a50 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e0f6      	b.n	8002bfe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	2b03      	cmp	r3, #3
 8002a16:	d107      	bne.n	8002a28 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a18:	4b36      	ldr	r3, [pc, #216]	; (8002af4 <HAL_RCC_ClockConfig+0x244>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d115      	bne.n	8002a50 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e0ea      	b.n	8002bfe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d107      	bne.n	8002a40 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002a30:	4b30      	ldr	r3, [pc, #192]	; (8002af4 <HAL_RCC_ClockConfig+0x244>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d109      	bne.n	8002a50 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e0de      	b.n	8002bfe <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a40:	4b2c      	ldr	r3, [pc, #176]	; (8002af4 <HAL_RCC_ClockConfig+0x244>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0304 	and.w	r3, r3, #4
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d101      	bne.n	8002a50 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e0d6      	b.n	8002bfe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a50:	4b28      	ldr	r3, [pc, #160]	; (8002af4 <HAL_RCC_ClockConfig+0x244>)
 8002a52:	691b      	ldr	r3, [r3, #16]
 8002a54:	f023 0207 	bic.w	r2, r3, #7
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	4925      	ldr	r1, [pc, #148]	; (8002af4 <HAL_RCC_ClockConfig+0x244>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a62:	f7fe ff8d 	bl	8001980 <HAL_GetTick>
 8002a66:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a68:	e00a      	b.n	8002a80 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a6a:	f7fe ff89 	bl	8001980 <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d901      	bls.n	8002a80 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e0be      	b.n	8002bfe <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a80:	4b1c      	ldr	r3, [pc, #112]	; (8002af4 <HAL_RCC_ClockConfig+0x244>)
 8002a82:	691b      	ldr	r3, [r3, #16]
 8002a84:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	00db      	lsls	r3, r3, #3
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d1eb      	bne.n	8002a6a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0302 	and.w	r3, r3, #2
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d010      	beq.n	8002ac0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	68da      	ldr	r2, [r3, #12]
 8002aa2:	4b14      	ldr	r3, [pc, #80]	; (8002af4 <HAL_RCC_ClockConfig+0x244>)
 8002aa4:	699b      	ldr	r3, [r3, #24]
 8002aa6:	f003 030f 	and.w	r3, r3, #15
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d208      	bcs.n	8002ac0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002aae:	4b11      	ldr	r3, [pc, #68]	; (8002af4 <HAL_RCC_ClockConfig+0x244>)
 8002ab0:	699b      	ldr	r3, [r3, #24]
 8002ab2:	f023 020f 	bic.w	r2, r3, #15
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	490e      	ldr	r1, [pc, #56]	; (8002af4 <HAL_RCC_ClockConfig+0x244>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ac0:	4b0b      	ldr	r3, [pc, #44]	; (8002af0 <HAL_RCC_ClockConfig+0x240>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 030f 	and.w	r3, r3, #15
 8002ac8:	683a      	ldr	r2, [r7, #0]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d214      	bcs.n	8002af8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ace:	4b08      	ldr	r3, [pc, #32]	; (8002af0 <HAL_RCC_ClockConfig+0x240>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f023 020f 	bic.w	r2, r3, #15
 8002ad6:	4906      	ldr	r1, [pc, #24]	; (8002af0 <HAL_RCC_ClockConfig+0x240>)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ade:	4b04      	ldr	r3, [pc, #16]	; (8002af0 <HAL_RCC_ClockConfig+0x240>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 030f 	and.w	r3, r3, #15
 8002ae6:	683a      	ldr	r2, [r7, #0]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d005      	beq.n	8002af8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e086      	b.n	8002bfe <HAL_RCC_ClockConfig+0x34e>
 8002af0:	52002000 	.word	0x52002000
 8002af4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0304 	and.w	r3, r3, #4
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d010      	beq.n	8002b26 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	691a      	ldr	r2, [r3, #16]
 8002b08:	4b3f      	ldr	r3, [pc, #252]	; (8002c08 <HAL_RCC_ClockConfig+0x358>)
 8002b0a:	699b      	ldr	r3, [r3, #24]
 8002b0c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d208      	bcs.n	8002b26 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002b14:	4b3c      	ldr	r3, [pc, #240]	; (8002c08 <HAL_RCC_ClockConfig+0x358>)
 8002b16:	699b      	ldr	r3, [r3, #24]
 8002b18:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	691b      	ldr	r3, [r3, #16]
 8002b20:	4939      	ldr	r1, [pc, #228]	; (8002c08 <HAL_RCC_ClockConfig+0x358>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0308 	and.w	r3, r3, #8
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d010      	beq.n	8002b54 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	695a      	ldr	r2, [r3, #20]
 8002b36:	4b34      	ldr	r3, [pc, #208]	; (8002c08 <HAL_RCC_ClockConfig+0x358>)
 8002b38:	69db      	ldr	r3, [r3, #28]
 8002b3a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d208      	bcs.n	8002b54 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002b42:	4b31      	ldr	r3, [pc, #196]	; (8002c08 <HAL_RCC_ClockConfig+0x358>)
 8002b44:	69db      	ldr	r3, [r3, #28]
 8002b46:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	695b      	ldr	r3, [r3, #20]
 8002b4e:	492e      	ldr	r1, [pc, #184]	; (8002c08 <HAL_RCC_ClockConfig+0x358>)
 8002b50:	4313      	orrs	r3, r2
 8002b52:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0310 	and.w	r3, r3, #16
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d010      	beq.n	8002b82 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	699a      	ldr	r2, [r3, #24]
 8002b64:	4b28      	ldr	r3, [pc, #160]	; (8002c08 <HAL_RCC_ClockConfig+0x358>)
 8002b66:	69db      	ldr	r3, [r3, #28]
 8002b68:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d208      	bcs.n	8002b82 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002b70:	4b25      	ldr	r3, [pc, #148]	; (8002c08 <HAL_RCC_ClockConfig+0x358>)
 8002b72:	69db      	ldr	r3, [r3, #28]
 8002b74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	699b      	ldr	r3, [r3, #24]
 8002b7c:	4922      	ldr	r1, [pc, #136]	; (8002c08 <HAL_RCC_ClockConfig+0x358>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0320 	and.w	r3, r3, #32
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d010      	beq.n	8002bb0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	69da      	ldr	r2, [r3, #28]
 8002b92:	4b1d      	ldr	r3, [pc, #116]	; (8002c08 <HAL_RCC_ClockConfig+0x358>)
 8002b94:	6a1b      	ldr	r3, [r3, #32]
 8002b96:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d208      	bcs.n	8002bb0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002b9e:	4b1a      	ldr	r3, [pc, #104]	; (8002c08 <HAL_RCC_ClockConfig+0x358>)
 8002ba0:	6a1b      	ldr	r3, [r3, #32]
 8002ba2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	69db      	ldr	r3, [r3, #28]
 8002baa:	4917      	ldr	r1, [pc, #92]	; (8002c08 <HAL_RCC_ClockConfig+0x358>)
 8002bac:	4313      	orrs	r3, r2
 8002bae:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002bb0:	f000 f834 	bl	8002c1c <HAL_RCC_GetSysClockFreq>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	4b14      	ldr	r3, [pc, #80]	; (8002c08 <HAL_RCC_ClockConfig+0x358>)
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	0a1b      	lsrs	r3, r3, #8
 8002bbc:	f003 030f 	and.w	r3, r3, #15
 8002bc0:	4912      	ldr	r1, [pc, #72]	; (8002c0c <HAL_RCC_ClockConfig+0x35c>)
 8002bc2:	5ccb      	ldrb	r3, [r1, r3]
 8002bc4:	f003 031f 	and.w	r3, r3, #31
 8002bc8:	fa22 f303 	lsr.w	r3, r2, r3
 8002bcc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002bce:	4b0e      	ldr	r3, [pc, #56]	; (8002c08 <HAL_RCC_ClockConfig+0x358>)
 8002bd0:	699b      	ldr	r3, [r3, #24]
 8002bd2:	f003 030f 	and.w	r3, r3, #15
 8002bd6:	4a0d      	ldr	r2, [pc, #52]	; (8002c0c <HAL_RCC_ClockConfig+0x35c>)
 8002bd8:	5cd3      	ldrb	r3, [r2, r3]
 8002bda:	f003 031f 	and.w	r3, r3, #31
 8002bde:	693a      	ldr	r2, [r7, #16]
 8002be0:	fa22 f303 	lsr.w	r3, r2, r3
 8002be4:	4a0a      	ldr	r2, [pc, #40]	; (8002c10 <HAL_RCC_ClockConfig+0x360>)
 8002be6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002be8:	4a0a      	ldr	r2, [pc, #40]	; (8002c14 <HAL_RCC_ClockConfig+0x364>)
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002bee:	4b0a      	ldr	r3, [pc, #40]	; (8002c18 <HAL_RCC_ClockConfig+0x368>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7fe fe7a 	bl	80018ec <HAL_InitTick>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3718      	adds	r7, #24
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	58024400 	.word	0x58024400
 8002c0c:	080063fc 	.word	0x080063fc
 8002c10:	24025808 	.word	0x24025808
 8002c14:	24025804 	.word	0x24025804
 8002c18:	2402580c 	.word	0x2402580c

08002c1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b089      	sub	sp, #36	; 0x24
 8002c20:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c22:	4bb3      	ldr	r3, [pc, #716]	; (8002ef0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c24:	691b      	ldr	r3, [r3, #16]
 8002c26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c2a:	2b18      	cmp	r3, #24
 8002c2c:	f200 8155 	bhi.w	8002eda <HAL_RCC_GetSysClockFreq+0x2be>
 8002c30:	a201      	add	r2, pc, #4	; (adr r2, 8002c38 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c36:	bf00      	nop
 8002c38:	08002c9d 	.word	0x08002c9d
 8002c3c:	08002edb 	.word	0x08002edb
 8002c40:	08002edb 	.word	0x08002edb
 8002c44:	08002edb 	.word	0x08002edb
 8002c48:	08002edb 	.word	0x08002edb
 8002c4c:	08002edb 	.word	0x08002edb
 8002c50:	08002edb 	.word	0x08002edb
 8002c54:	08002edb 	.word	0x08002edb
 8002c58:	08002cc3 	.word	0x08002cc3
 8002c5c:	08002edb 	.word	0x08002edb
 8002c60:	08002edb 	.word	0x08002edb
 8002c64:	08002edb 	.word	0x08002edb
 8002c68:	08002edb 	.word	0x08002edb
 8002c6c:	08002edb 	.word	0x08002edb
 8002c70:	08002edb 	.word	0x08002edb
 8002c74:	08002edb 	.word	0x08002edb
 8002c78:	08002cc9 	.word	0x08002cc9
 8002c7c:	08002edb 	.word	0x08002edb
 8002c80:	08002edb 	.word	0x08002edb
 8002c84:	08002edb 	.word	0x08002edb
 8002c88:	08002edb 	.word	0x08002edb
 8002c8c:	08002edb 	.word	0x08002edb
 8002c90:	08002edb 	.word	0x08002edb
 8002c94:	08002edb 	.word	0x08002edb
 8002c98:	08002ccf 	.word	0x08002ccf
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002c9c:	4b94      	ldr	r3, [pc, #592]	; (8002ef0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0320 	and.w	r3, r3, #32
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d009      	beq.n	8002cbc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002ca8:	4b91      	ldr	r3, [pc, #580]	; (8002ef0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	08db      	lsrs	r3, r3, #3
 8002cae:	f003 0303 	and.w	r3, r3, #3
 8002cb2:	4a90      	ldr	r2, [pc, #576]	; (8002ef4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002cb4:	fa22 f303 	lsr.w	r3, r2, r3
 8002cb8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002cba:	e111      	b.n	8002ee0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002cbc:	4b8d      	ldr	r3, [pc, #564]	; (8002ef4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002cbe:	61bb      	str	r3, [r7, #24]
    break;
 8002cc0:	e10e      	b.n	8002ee0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002cc2:	4b8d      	ldr	r3, [pc, #564]	; (8002ef8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002cc4:	61bb      	str	r3, [r7, #24]
    break;
 8002cc6:	e10b      	b.n	8002ee0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002cc8:	4b8c      	ldr	r3, [pc, #560]	; (8002efc <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002cca:	61bb      	str	r3, [r7, #24]
    break;
 8002ccc:	e108      	b.n	8002ee0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002cce:	4b88      	ldr	r3, [pc, #544]	; (8002ef0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd2:	f003 0303 	and.w	r3, r3, #3
 8002cd6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002cd8:	4b85      	ldr	r3, [pc, #532]	; (8002ef0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cdc:	091b      	lsrs	r3, r3, #4
 8002cde:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ce2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002ce4:	4b82      	ldr	r3, [pc, #520]	; (8002ef0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce8:	f003 0301 	and.w	r3, r3, #1
 8002cec:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002cee:	4b80      	ldr	r3, [pc, #512]	; (8002ef0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cf2:	08db      	lsrs	r3, r3, #3
 8002cf4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002cf8:	68fa      	ldr	r2, [r7, #12]
 8002cfa:	fb02 f303 	mul.w	r3, r2, r3
 8002cfe:	ee07 3a90 	vmov	s15, r3
 8002d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d06:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	f000 80e1 	beq.w	8002ed4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	f000 8083 	beq.w	8002e20 <HAL_RCC_GetSysClockFreq+0x204>
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	f200 80a1 	bhi.w	8002e64 <HAL_RCC_GetSysClockFreq+0x248>
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d003      	beq.n	8002d30 <HAL_RCC_GetSysClockFreq+0x114>
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d056      	beq.n	8002ddc <HAL_RCC_GetSysClockFreq+0x1c0>
 8002d2e:	e099      	b.n	8002e64 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002d30:	4b6f      	ldr	r3, [pc, #444]	; (8002ef0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0320 	and.w	r3, r3, #32
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d02d      	beq.n	8002d98 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002d3c:	4b6c      	ldr	r3, [pc, #432]	; (8002ef0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	08db      	lsrs	r3, r3, #3
 8002d42:	f003 0303 	and.w	r3, r3, #3
 8002d46:	4a6b      	ldr	r2, [pc, #428]	; (8002ef4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002d48:	fa22 f303 	lsr.w	r3, r2, r3
 8002d4c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	ee07 3a90 	vmov	s15, r3
 8002d54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	ee07 3a90 	vmov	s15, r3
 8002d5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d66:	4b62      	ldr	r3, [pc, #392]	; (8002ef0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d6e:	ee07 3a90 	vmov	s15, r3
 8002d72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d76:	ed97 6a02 	vldr	s12, [r7, #8]
 8002d7a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002f00 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002d7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002d8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d92:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002d96:	e087      	b.n	8002ea8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	ee07 3a90 	vmov	s15, r3
 8002d9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002da2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002f04 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002da6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002daa:	4b51      	ldr	r3, [pc, #324]	; (8002ef0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002db2:	ee07 3a90 	vmov	s15, r3
 8002db6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002dba:	ed97 6a02 	vldr	s12, [r7, #8]
 8002dbe:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002f00 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002dc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002dc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002dca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002dce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002dd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dd6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002dda:	e065      	b.n	8002ea8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	ee07 3a90 	vmov	s15, r3
 8002de2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002de6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002f08 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002dea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002dee:	4b40      	ldr	r3, [pc, #256]	; (8002ef0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002df6:	ee07 3a90 	vmov	s15, r3
 8002dfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002dfe:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e02:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002f00 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002e12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002e1e:	e043      	b.n	8002ea8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	ee07 3a90 	vmov	s15, r3
 8002e26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e2a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002f0c <HAL_RCC_GetSysClockFreq+0x2f0>
 8002e2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e32:	4b2f      	ldr	r3, [pc, #188]	; (8002ef0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e3a:	ee07 3a90 	vmov	s15, r3
 8002e3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e42:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e46:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002f00 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002e56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002e62:	e021      	b.n	8002ea8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	ee07 3a90 	vmov	s15, r3
 8002e6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e6e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002f08 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002e72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e76:	4b1e      	ldr	r3, [pc, #120]	; (8002ef0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e7e:	ee07 3a90 	vmov	s15, r3
 8002e82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e86:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e8a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002f00 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002e9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ea2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002ea6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002ea8:	4b11      	ldr	r3, [pc, #68]	; (8002ef0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eac:	0a5b      	lsrs	r3, r3, #9
 8002eae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	ee07 3a90 	vmov	s15, r3
 8002ebc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002ec0:	edd7 6a07 	vldr	s13, [r7, #28]
 8002ec4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ec8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ecc:	ee17 3a90 	vmov	r3, s15
 8002ed0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002ed2:	e005      	b.n	8002ee0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	61bb      	str	r3, [r7, #24]
    break;
 8002ed8:	e002      	b.n	8002ee0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8002eda:	4b07      	ldr	r3, [pc, #28]	; (8002ef8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002edc:	61bb      	str	r3, [r7, #24]
    break;
 8002ede:	bf00      	nop
  }

  return sysclockfreq;
 8002ee0:	69bb      	ldr	r3, [r7, #24]
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3724      	adds	r7, #36	; 0x24
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr
 8002eee:	bf00      	nop
 8002ef0:	58024400 	.word	0x58024400
 8002ef4:	03d09000 	.word	0x03d09000
 8002ef8:	003d0900 	.word	0x003d0900
 8002efc:	017d7840 	.word	0x017d7840
 8002f00:	46000000 	.word	0x46000000
 8002f04:	4c742400 	.word	0x4c742400
 8002f08:	4a742400 	.word	0x4a742400
 8002f0c:	4bbebc20 	.word	0x4bbebc20

08002f10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b082      	sub	sp, #8
 8002f14:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002f16:	f7ff fe81 	bl	8002c1c <HAL_RCC_GetSysClockFreq>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	4b10      	ldr	r3, [pc, #64]	; (8002f60 <HAL_RCC_GetHCLKFreq+0x50>)
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	0a1b      	lsrs	r3, r3, #8
 8002f22:	f003 030f 	and.w	r3, r3, #15
 8002f26:	490f      	ldr	r1, [pc, #60]	; (8002f64 <HAL_RCC_GetHCLKFreq+0x54>)
 8002f28:	5ccb      	ldrb	r3, [r1, r3]
 8002f2a:	f003 031f 	and.w	r3, r3, #31
 8002f2e:	fa22 f303 	lsr.w	r3, r2, r3
 8002f32:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002f34:	4b0a      	ldr	r3, [pc, #40]	; (8002f60 <HAL_RCC_GetHCLKFreq+0x50>)
 8002f36:	699b      	ldr	r3, [r3, #24]
 8002f38:	f003 030f 	and.w	r3, r3, #15
 8002f3c:	4a09      	ldr	r2, [pc, #36]	; (8002f64 <HAL_RCC_GetHCLKFreq+0x54>)
 8002f3e:	5cd3      	ldrb	r3, [r2, r3]
 8002f40:	f003 031f 	and.w	r3, r3, #31
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	fa22 f303 	lsr.w	r3, r2, r3
 8002f4a:	4a07      	ldr	r2, [pc, #28]	; (8002f68 <HAL_RCC_GetHCLKFreq+0x58>)
 8002f4c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002f4e:	4a07      	ldr	r2, [pc, #28]	; (8002f6c <HAL_RCC_GetHCLKFreq+0x5c>)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002f54:	4b04      	ldr	r3, [pc, #16]	; (8002f68 <HAL_RCC_GetHCLKFreq+0x58>)
 8002f56:	681b      	ldr	r3, [r3, #0]
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3708      	adds	r7, #8
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	58024400 	.word	0x58024400
 8002f64:	080063fc 	.word	0x080063fc
 8002f68:	24025808 	.word	0x24025808
 8002f6c:	24025804 	.word	0x24025804

08002f70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002f74:	f7ff ffcc 	bl	8002f10 <HAL_RCC_GetHCLKFreq>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	4b06      	ldr	r3, [pc, #24]	; (8002f94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f7c:	69db      	ldr	r3, [r3, #28]
 8002f7e:	091b      	lsrs	r3, r3, #4
 8002f80:	f003 0307 	and.w	r3, r3, #7
 8002f84:	4904      	ldr	r1, [pc, #16]	; (8002f98 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f86:	5ccb      	ldrb	r3, [r1, r3]
 8002f88:	f003 031f 	and.w	r3, r3, #31
 8002f8c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	58024400 	.word	0x58024400
 8002f98:	080063fc 	.word	0x080063fc

08002f9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002fa0:	f7ff ffb6 	bl	8002f10 <HAL_RCC_GetHCLKFreq>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	4b06      	ldr	r3, [pc, #24]	; (8002fc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fa8:	69db      	ldr	r3, [r3, #28]
 8002faa:	0a1b      	lsrs	r3, r3, #8
 8002fac:	f003 0307 	and.w	r3, r3, #7
 8002fb0:	4904      	ldr	r1, [pc, #16]	; (8002fc4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002fb2:	5ccb      	ldrb	r3, [r1, r3]
 8002fb4:	f003 031f 	and.w	r3, r3, #31
 8002fb8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	58024400 	.word	0x58024400
 8002fc4:	080063fc 	.word	0x080063fc

08002fc8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b086      	sub	sp, #24
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d03f      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fe8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002fec:	d02a      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002fee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002ff2:	d824      	bhi.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002ff4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ff8:	d018      	beq.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002ffa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ffe:	d81e      	bhi.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003000:	2b00      	cmp	r3, #0
 8003002:	d003      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003004:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003008:	d007      	beq.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800300a:	e018      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800300c:	4ba3      	ldr	r3, [pc, #652]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800300e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003010:	4aa2      	ldr	r2, [pc, #648]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003012:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003016:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003018:	e015      	b.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	3304      	adds	r3, #4
 800301e:	2102      	movs	r1, #2
 8003020:	4618      	mov	r0, r3
 8003022:	f001 f9d5 	bl	80043d0 <RCCEx_PLL2_Config>
 8003026:	4603      	mov	r3, r0
 8003028:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800302a:	e00c      	b.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	3324      	adds	r3, #36	; 0x24
 8003030:	2102      	movs	r1, #2
 8003032:	4618      	mov	r0, r3
 8003034:	f001 fa7e 	bl	8004534 <RCCEx_PLL3_Config>
 8003038:	4603      	mov	r3, r0
 800303a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800303c:	e003      	b.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	75fb      	strb	r3, [r7, #23]
      break;
 8003042:	e000      	b.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003044:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003046:	7dfb      	ldrb	r3, [r7, #23]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d109      	bne.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800304c:	4b93      	ldr	r3, [pc, #588]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800304e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003050:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003058:	4990      	ldr	r1, [pc, #576]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800305a:	4313      	orrs	r3, r2
 800305c:	650b      	str	r3, [r1, #80]	; 0x50
 800305e:	e001      	b.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003060:	7dfb      	ldrb	r3, [r7, #23]
 8003062:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800306c:	2b00      	cmp	r3, #0
 800306e:	d03d      	beq.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003074:	2b04      	cmp	r3, #4
 8003076:	d826      	bhi.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003078:	a201      	add	r2, pc, #4	; (adr r2, 8003080 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800307a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800307e:	bf00      	nop
 8003080:	08003095 	.word	0x08003095
 8003084:	080030a3 	.word	0x080030a3
 8003088:	080030b5 	.word	0x080030b5
 800308c:	080030cd 	.word	0x080030cd
 8003090:	080030cd 	.word	0x080030cd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003094:	4b81      	ldr	r3, [pc, #516]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003098:	4a80      	ldr	r2, [pc, #512]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800309a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800309e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80030a0:	e015      	b.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	3304      	adds	r3, #4
 80030a6:	2100      	movs	r1, #0
 80030a8:	4618      	mov	r0, r3
 80030aa:	f001 f991 	bl	80043d0 <RCCEx_PLL2_Config>
 80030ae:	4603      	mov	r3, r0
 80030b0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80030b2:	e00c      	b.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	3324      	adds	r3, #36	; 0x24
 80030b8:	2100      	movs	r1, #0
 80030ba:	4618      	mov	r0, r3
 80030bc:	f001 fa3a 	bl	8004534 <RCCEx_PLL3_Config>
 80030c0:	4603      	mov	r3, r0
 80030c2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80030c4:	e003      	b.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	75fb      	strb	r3, [r7, #23]
      break;
 80030ca:	e000      	b.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80030cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030ce:	7dfb      	ldrb	r3, [r7, #23]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d109      	bne.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80030d4:	4b71      	ldr	r3, [pc, #452]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80030d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030d8:	f023 0207 	bic.w	r2, r3, #7
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030e0:	496e      	ldr	r1, [pc, #440]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	650b      	str	r3, [r1, #80]	; 0x50
 80030e6:	e001      	b.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030e8:	7dfb      	ldrb	r3, [r7, #23]
 80030ea:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d042      	beq.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003100:	d02b      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003102:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003106:	d825      	bhi.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003108:	2bc0      	cmp	r3, #192	; 0xc0
 800310a:	d028      	beq.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x196>
 800310c:	2bc0      	cmp	r3, #192	; 0xc0
 800310e:	d821      	bhi.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003110:	2b80      	cmp	r3, #128	; 0x80
 8003112:	d016      	beq.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003114:	2b80      	cmp	r3, #128	; 0x80
 8003116:	d81d      	bhi.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003118:	2b00      	cmp	r3, #0
 800311a:	d002      	beq.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800311c:	2b40      	cmp	r3, #64	; 0x40
 800311e:	d007      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003120:	e018      	b.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003122:	4b5e      	ldr	r3, [pc, #376]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003126:	4a5d      	ldr	r2, [pc, #372]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003128:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800312c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800312e:	e017      	b.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	3304      	adds	r3, #4
 8003134:	2100      	movs	r1, #0
 8003136:	4618      	mov	r0, r3
 8003138:	f001 f94a 	bl	80043d0 <RCCEx_PLL2_Config>
 800313c:	4603      	mov	r3, r0
 800313e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003140:	e00e      	b.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	3324      	adds	r3, #36	; 0x24
 8003146:	2100      	movs	r1, #0
 8003148:	4618      	mov	r0, r3
 800314a:	f001 f9f3 	bl	8004534 <RCCEx_PLL3_Config>
 800314e:	4603      	mov	r3, r0
 8003150:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003152:	e005      	b.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	75fb      	strb	r3, [r7, #23]
      break;
 8003158:	e002      	b.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800315a:	bf00      	nop
 800315c:	e000      	b.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800315e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003160:	7dfb      	ldrb	r3, [r7, #23]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d109      	bne.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003166:	4b4d      	ldr	r3, [pc, #308]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003168:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800316a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003172:	494a      	ldr	r1, [pc, #296]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003174:	4313      	orrs	r3, r2
 8003176:	650b      	str	r3, [r1, #80]	; 0x50
 8003178:	e001      	b.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800317a:	7dfb      	ldrb	r3, [r7, #23]
 800317c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003186:	2b00      	cmp	r3, #0
 8003188:	d049      	beq.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003190:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003194:	d030      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003196:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800319a:	d82a      	bhi.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800319c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80031a0:	d02c      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x234>
 80031a2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80031a6:	d824      	bhi.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80031a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031ac:	d018      	beq.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80031ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031b2:	d81e      	bhi.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d003      	beq.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80031b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80031bc:	d007      	beq.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x206>
 80031be:	e018      	b.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031c0:	4b36      	ldr	r3, [pc, #216]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80031c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c4:	4a35      	ldr	r2, [pc, #212]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80031c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80031cc:	e017      	b.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	3304      	adds	r3, #4
 80031d2:	2100      	movs	r1, #0
 80031d4:	4618      	mov	r0, r3
 80031d6:	f001 f8fb 	bl	80043d0 <RCCEx_PLL2_Config>
 80031da:	4603      	mov	r3, r0
 80031dc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80031de:	e00e      	b.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	3324      	adds	r3, #36	; 0x24
 80031e4:	2100      	movs	r1, #0
 80031e6:	4618      	mov	r0, r3
 80031e8:	f001 f9a4 	bl	8004534 <RCCEx_PLL3_Config>
 80031ec:	4603      	mov	r3, r0
 80031ee:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80031f0:	e005      	b.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	75fb      	strb	r3, [r7, #23]
      break;
 80031f6:	e002      	b.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80031f8:	bf00      	nop
 80031fa:	e000      	b.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80031fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031fe:	7dfb      	ldrb	r3, [r7, #23]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d10a      	bne.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003204:	4b25      	ldr	r3, [pc, #148]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003208:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003212:	4922      	ldr	r1, [pc, #136]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003214:	4313      	orrs	r3, r2
 8003216:	658b      	str	r3, [r1, #88]	; 0x58
 8003218:	e001      	b.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800321a:	7dfb      	ldrb	r3, [r7, #23]
 800321c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003226:	2b00      	cmp	r3, #0
 8003228:	d04b      	beq.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003230:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003234:	d030      	beq.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8003236:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800323a:	d82a      	bhi.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800323c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003240:	d02e      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8003242:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003246:	d824      	bhi.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003248:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800324c:	d018      	beq.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800324e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003252:	d81e      	bhi.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003254:	2b00      	cmp	r3, #0
 8003256:	d003      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003258:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800325c:	d007      	beq.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800325e:	e018      	b.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003260:	4b0e      	ldr	r3, [pc, #56]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003264:	4a0d      	ldr	r2, [pc, #52]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003266:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800326a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800326c:	e019      	b.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	3304      	adds	r3, #4
 8003272:	2100      	movs	r1, #0
 8003274:	4618      	mov	r0, r3
 8003276:	f001 f8ab 	bl	80043d0 <RCCEx_PLL2_Config>
 800327a:	4603      	mov	r3, r0
 800327c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800327e:	e010      	b.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	3324      	adds	r3, #36	; 0x24
 8003284:	2100      	movs	r1, #0
 8003286:	4618      	mov	r0, r3
 8003288:	f001 f954 	bl	8004534 <RCCEx_PLL3_Config>
 800328c:	4603      	mov	r3, r0
 800328e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003290:	e007      	b.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	75fb      	strb	r3, [r7, #23]
      break;
 8003296:	e004      	b.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8003298:	bf00      	nop
 800329a:	e002      	b.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800329c:	58024400 	.word	0x58024400
      break;
 80032a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032a2:	7dfb      	ldrb	r3, [r7, #23]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d10a      	bne.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80032a8:	4b99      	ldr	r3, [pc, #612]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80032aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ac:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80032b6:	4996      	ldr	r1, [pc, #600]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80032b8:	4313      	orrs	r3, r2
 80032ba:	658b      	str	r3, [r1, #88]	; 0x58
 80032bc:	e001      	b.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032be:	7dfb      	ldrb	r3, [r7, #23]
 80032c0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d032      	beq.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032d2:	2b30      	cmp	r3, #48	; 0x30
 80032d4:	d01c      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80032d6:	2b30      	cmp	r3, #48	; 0x30
 80032d8:	d817      	bhi.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x342>
 80032da:	2b20      	cmp	r3, #32
 80032dc:	d00c      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x330>
 80032de:	2b20      	cmp	r3, #32
 80032e0:	d813      	bhi.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x342>
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d016      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80032e6:	2b10      	cmp	r3, #16
 80032e8:	d10f      	bne.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032ea:	4b89      	ldr	r3, [pc, #548]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80032ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ee:	4a88      	ldr	r2, [pc, #544]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80032f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032f4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80032f6:	e00e      	b.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	3304      	adds	r3, #4
 80032fc:	2102      	movs	r1, #2
 80032fe:	4618      	mov	r0, r3
 8003300:	f001 f866 	bl	80043d0 <RCCEx_PLL2_Config>
 8003304:	4603      	mov	r3, r0
 8003306:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003308:	e005      	b.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	75fb      	strb	r3, [r7, #23]
      break;
 800330e:	e002      	b.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003310:	bf00      	nop
 8003312:	e000      	b.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003314:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003316:	7dfb      	ldrb	r3, [r7, #23]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d109      	bne.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800331c:	4b7c      	ldr	r3, [pc, #496]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800331e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003320:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003328:	4979      	ldr	r1, [pc, #484]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800332a:	4313      	orrs	r3, r2
 800332c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800332e:	e001      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003330:	7dfb      	ldrb	r3, [r7, #23]
 8003332:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800333c:	2b00      	cmp	r3, #0
 800333e:	d047      	beq.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003344:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003348:	d030      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800334a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800334e:	d82a      	bhi.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003350:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003354:	d02c      	beq.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003356:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800335a:	d824      	bhi.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800335c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003360:	d018      	beq.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003362:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003366:	d81e      	bhi.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003368:	2b00      	cmp	r3, #0
 800336a:	d003      	beq.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800336c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003370:	d007      	beq.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8003372:	e018      	b.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003374:	4b66      	ldr	r3, [pc, #408]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003378:	4a65      	ldr	r2, [pc, #404]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800337a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800337e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003380:	e017      	b.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	3304      	adds	r3, #4
 8003386:	2100      	movs	r1, #0
 8003388:	4618      	mov	r0, r3
 800338a:	f001 f821 	bl	80043d0 <RCCEx_PLL2_Config>
 800338e:	4603      	mov	r3, r0
 8003390:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003392:	e00e      	b.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	3324      	adds	r3, #36	; 0x24
 8003398:	2100      	movs	r1, #0
 800339a:	4618      	mov	r0, r3
 800339c:	f001 f8ca 	bl	8004534 <RCCEx_PLL3_Config>
 80033a0:	4603      	mov	r3, r0
 80033a2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80033a4:	e005      	b.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	75fb      	strb	r3, [r7, #23]
      break;
 80033aa:	e002      	b.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80033ac:	bf00      	nop
 80033ae:	e000      	b.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80033b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033b2:	7dfb      	ldrb	r3, [r7, #23]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d109      	bne.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80033b8:	4b55      	ldr	r3, [pc, #340]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80033ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033bc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c4:	4952      	ldr	r1, [pc, #328]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80033c6:	4313      	orrs	r3, r2
 80033c8:	650b      	str	r3, [r1, #80]	; 0x50
 80033ca:	e001      	b.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033cc:	7dfb      	ldrb	r3, [r7, #23]
 80033ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d049      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033e4:	d02e      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80033e6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033ea:	d828      	bhi.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x476>
 80033ec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80033f0:	d02a      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x480>
 80033f2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80033f6:	d822      	bhi.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x476>
 80033f8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80033fc:	d026      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x484>
 80033fe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003402:	d81c      	bhi.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003404:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003408:	d010      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x464>
 800340a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800340e:	d816      	bhi.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003410:	2b00      	cmp	r3, #0
 8003412:	d01d      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8003414:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003418:	d111      	bne.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	3304      	adds	r3, #4
 800341e:	2101      	movs	r1, #1
 8003420:	4618      	mov	r0, r3
 8003422:	f000 ffd5 	bl	80043d0 <RCCEx_PLL2_Config>
 8003426:	4603      	mov	r3, r0
 8003428:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800342a:	e012      	b.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	3324      	adds	r3, #36	; 0x24
 8003430:	2101      	movs	r1, #1
 8003432:	4618      	mov	r0, r3
 8003434:	f001 f87e 	bl	8004534 <RCCEx_PLL3_Config>
 8003438:	4603      	mov	r3, r0
 800343a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800343c:	e009      	b.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	75fb      	strb	r3, [r7, #23]
      break;
 8003442:	e006      	b.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003444:	bf00      	nop
 8003446:	e004      	b.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003448:	bf00      	nop
 800344a:	e002      	b.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800344c:	bf00      	nop
 800344e:	e000      	b.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003450:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003452:	7dfb      	ldrb	r3, [r7, #23]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d109      	bne.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003458:	4b2d      	ldr	r3, [pc, #180]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800345a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800345c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003464:	492a      	ldr	r1, [pc, #168]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003466:	4313      	orrs	r3, r2
 8003468:	650b      	str	r3, [r1, #80]	; 0x50
 800346a:	e001      	b.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800346c:	7dfb      	ldrb	r3, [r7, #23]
 800346e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d04d      	beq.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003482:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003486:	d02e      	beq.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8003488:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800348c:	d828      	bhi.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800348e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003492:	d02a      	beq.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x522>
 8003494:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003498:	d822      	bhi.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800349a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800349e:	d026      	beq.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x526>
 80034a0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80034a4:	d81c      	bhi.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80034a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034aa:	d010      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x506>
 80034ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034b0:	d816      	bhi.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d01d      	beq.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80034b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80034ba:	d111      	bne.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	3304      	adds	r3, #4
 80034c0:	2101      	movs	r1, #1
 80034c2:	4618      	mov	r0, r3
 80034c4:	f000 ff84 	bl	80043d0 <RCCEx_PLL2_Config>
 80034c8:	4603      	mov	r3, r0
 80034ca:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80034cc:	e012      	b.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	3324      	adds	r3, #36	; 0x24
 80034d2:	2101      	movs	r1, #1
 80034d4:	4618      	mov	r0, r3
 80034d6:	f001 f82d 	bl	8004534 <RCCEx_PLL3_Config>
 80034da:	4603      	mov	r3, r0
 80034dc:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80034de:	e009      	b.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	75fb      	strb	r3, [r7, #23]
      break;
 80034e4:	e006      	b.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80034e6:	bf00      	nop
 80034e8:	e004      	b.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80034ea:	bf00      	nop
 80034ec:	e002      	b.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80034ee:	bf00      	nop
 80034f0:	e000      	b.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80034f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034f4:	7dfb      	ldrb	r3, [r7, #23]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d10c      	bne.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80034fa:	4b05      	ldr	r3, [pc, #20]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80034fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034fe:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003508:	4901      	ldr	r1, [pc, #4]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800350a:	4313      	orrs	r3, r2
 800350c:	658b      	str	r3, [r1, #88]	; 0x58
 800350e:	e003      	b.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8003510:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003514:	7dfb      	ldrb	r3, [r7, #23]
 8003516:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d02f      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003528:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800352c:	d00e      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x584>
 800352e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003532:	d814      	bhi.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x596>
 8003534:	2b00      	cmp	r3, #0
 8003536:	d015      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8003538:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800353c:	d10f      	bne.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800353e:	4baf      	ldr	r3, [pc, #700]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003542:	4aae      	ldr	r2, [pc, #696]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003544:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003548:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800354a:	e00c      	b.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	3304      	adds	r3, #4
 8003550:	2101      	movs	r1, #1
 8003552:	4618      	mov	r0, r3
 8003554:	f000 ff3c 	bl	80043d0 <RCCEx_PLL2_Config>
 8003558:	4603      	mov	r3, r0
 800355a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800355c:	e003      	b.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	75fb      	strb	r3, [r7, #23]
      break;
 8003562:	e000      	b.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8003564:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003566:	7dfb      	ldrb	r3, [r7, #23]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d109      	bne.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800356c:	4ba3      	ldr	r3, [pc, #652]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800356e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003570:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003578:	49a0      	ldr	r1, [pc, #640]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800357a:	4313      	orrs	r3, r2
 800357c:	650b      	str	r3, [r1, #80]	; 0x50
 800357e:	e001      	b.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003580:	7dfb      	ldrb	r3, [r7, #23]
 8003582:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d032      	beq.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003594:	2b03      	cmp	r3, #3
 8003596:	d81b      	bhi.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003598:	a201      	add	r2, pc, #4	; (adr r2, 80035a0 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800359a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800359e:	bf00      	nop
 80035a0:	080035d7 	.word	0x080035d7
 80035a4:	080035b1 	.word	0x080035b1
 80035a8:	080035bf 	.word	0x080035bf
 80035ac:	080035d7 	.word	0x080035d7
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035b0:	4b92      	ldr	r3, [pc, #584]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80035b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b4:	4a91      	ldr	r2, [pc, #580]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80035b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80035bc:	e00c      	b.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	3304      	adds	r3, #4
 80035c2:	2102      	movs	r1, #2
 80035c4:	4618      	mov	r0, r3
 80035c6:	f000 ff03 	bl	80043d0 <RCCEx_PLL2_Config>
 80035ca:	4603      	mov	r3, r0
 80035cc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80035ce:	e003      	b.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	75fb      	strb	r3, [r7, #23]
      break;
 80035d4:	e000      	b.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80035d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035d8:	7dfb      	ldrb	r3, [r7, #23]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d109      	bne.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80035de:	4b87      	ldr	r3, [pc, #540]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80035e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035e2:	f023 0203 	bic.w	r2, r3, #3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ea:	4984      	ldr	r1, [pc, #528]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80035ec:	4313      	orrs	r3, r2
 80035ee:	64cb      	str	r3, [r1, #76]	; 0x4c
 80035f0:	e001      	b.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035f2:	7dfb      	ldrb	r3, [r7, #23]
 80035f4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	f000 8086 	beq.w	8003710 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003604:	4b7e      	ldr	r3, [pc, #504]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a7d      	ldr	r2, [pc, #500]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800360a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800360e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003610:	f7fe f9b6 	bl	8001980 <HAL_GetTick>
 8003614:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003616:	e009      	b.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003618:	f7fe f9b2 	bl	8001980 <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	2b64      	cmp	r3, #100	; 0x64
 8003624:	d902      	bls.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	75fb      	strb	r3, [r7, #23]
        break;
 800362a:	e005      	b.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800362c:	4b74      	ldr	r3, [pc, #464]	; (8003800 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003634:	2b00      	cmp	r3, #0
 8003636:	d0ef      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003638:	7dfb      	ldrb	r3, [r7, #23]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d166      	bne.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800363e:	4b6f      	ldr	r3, [pc, #444]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003640:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003648:	4053      	eors	r3, r2
 800364a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800364e:	2b00      	cmp	r3, #0
 8003650:	d013      	beq.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003652:	4b6a      	ldr	r3, [pc, #424]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003656:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800365a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800365c:	4b67      	ldr	r3, [pc, #412]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800365e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003660:	4a66      	ldr	r2, [pc, #408]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003662:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003666:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003668:	4b64      	ldr	r3, [pc, #400]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800366a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800366c:	4a63      	ldr	r2, [pc, #396]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800366e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003672:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003674:	4a61      	ldr	r2, [pc, #388]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003680:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003684:	d115      	bne.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003686:	f7fe f97b 	bl	8001980 <HAL_GetTick>
 800368a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800368c:	e00b      	b.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800368e:	f7fe f977 	bl	8001980 <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	f241 3288 	movw	r2, #5000	; 0x1388
 800369c:	4293      	cmp	r3, r2
 800369e:	d902      	bls.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80036a0:	2303      	movs	r3, #3
 80036a2:	75fb      	strb	r3, [r7, #23]
            break;
 80036a4:	e005      	b.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80036a6:	4b55      	ldr	r3, [pc, #340]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80036a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036aa:	f003 0302 	and.w	r3, r3, #2
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d0ed      	beq.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80036b2:	7dfb      	ldrb	r3, [r7, #23]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d126      	bne.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80036be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036c6:	d10d      	bne.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80036c8:	4b4c      	ldr	r3, [pc, #304]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80036ca:	691b      	ldr	r3, [r3, #16]
 80036cc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80036d6:	0919      	lsrs	r1, r3, #4
 80036d8:	4b4a      	ldr	r3, [pc, #296]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 80036da:	400b      	ands	r3, r1
 80036dc:	4947      	ldr	r1, [pc, #284]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	610b      	str	r3, [r1, #16]
 80036e2:	e005      	b.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80036e4:	4b45      	ldr	r3, [pc, #276]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80036e6:	691b      	ldr	r3, [r3, #16]
 80036e8:	4a44      	ldr	r2, [pc, #272]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80036ea:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80036ee:	6113      	str	r3, [r2, #16]
 80036f0:	4b42      	ldr	r3, [pc, #264]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80036f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80036fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036fe:	493f      	ldr	r1, [pc, #252]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003700:	4313      	orrs	r3, r2
 8003702:	670b      	str	r3, [r1, #112]	; 0x70
 8003704:	e004      	b.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003706:	7dfb      	ldrb	r3, [r7, #23]
 8003708:	75bb      	strb	r3, [r7, #22]
 800370a:	e001      	b.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800370c:	7dfb      	ldrb	r3, [r7, #23]
 800370e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0301 	and.w	r3, r3, #1
 8003718:	2b00      	cmp	r3, #0
 800371a:	f000 8085 	beq.w	8003828 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003722:	2b28      	cmp	r3, #40	; 0x28
 8003724:	d866      	bhi.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003726:	a201      	add	r2, pc, #4	; (adr r2, 800372c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800372c:	08003809 	.word	0x08003809
 8003730:	080037f5 	.word	0x080037f5
 8003734:	080037f5 	.word	0x080037f5
 8003738:	080037f5 	.word	0x080037f5
 800373c:	080037f5 	.word	0x080037f5
 8003740:	080037f5 	.word	0x080037f5
 8003744:	080037f5 	.word	0x080037f5
 8003748:	080037f5 	.word	0x080037f5
 800374c:	080037d1 	.word	0x080037d1
 8003750:	080037f5 	.word	0x080037f5
 8003754:	080037f5 	.word	0x080037f5
 8003758:	080037f5 	.word	0x080037f5
 800375c:	080037f5 	.word	0x080037f5
 8003760:	080037f5 	.word	0x080037f5
 8003764:	080037f5 	.word	0x080037f5
 8003768:	080037f5 	.word	0x080037f5
 800376c:	080037e3 	.word	0x080037e3
 8003770:	080037f5 	.word	0x080037f5
 8003774:	080037f5 	.word	0x080037f5
 8003778:	080037f5 	.word	0x080037f5
 800377c:	080037f5 	.word	0x080037f5
 8003780:	080037f5 	.word	0x080037f5
 8003784:	080037f5 	.word	0x080037f5
 8003788:	080037f5 	.word	0x080037f5
 800378c:	08003809 	.word	0x08003809
 8003790:	080037f5 	.word	0x080037f5
 8003794:	080037f5 	.word	0x080037f5
 8003798:	080037f5 	.word	0x080037f5
 800379c:	080037f5 	.word	0x080037f5
 80037a0:	080037f5 	.word	0x080037f5
 80037a4:	080037f5 	.word	0x080037f5
 80037a8:	080037f5 	.word	0x080037f5
 80037ac:	08003809 	.word	0x08003809
 80037b0:	080037f5 	.word	0x080037f5
 80037b4:	080037f5 	.word	0x080037f5
 80037b8:	080037f5 	.word	0x080037f5
 80037bc:	080037f5 	.word	0x080037f5
 80037c0:	080037f5 	.word	0x080037f5
 80037c4:	080037f5 	.word	0x080037f5
 80037c8:	080037f5 	.word	0x080037f5
 80037cc:	08003809 	.word	0x08003809
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	3304      	adds	r3, #4
 80037d4:	2101      	movs	r1, #1
 80037d6:	4618      	mov	r0, r3
 80037d8:	f000 fdfa 	bl	80043d0 <RCCEx_PLL2_Config>
 80037dc:	4603      	mov	r3, r0
 80037de:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80037e0:	e013      	b.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	3324      	adds	r3, #36	; 0x24
 80037e6:	2101      	movs	r1, #1
 80037e8:	4618      	mov	r0, r3
 80037ea:	f000 fea3 	bl	8004534 <RCCEx_PLL3_Config>
 80037ee:	4603      	mov	r3, r0
 80037f0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80037f2:	e00a      	b.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	75fb      	strb	r3, [r7, #23]
      break;
 80037f8:	e007      	b.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80037fa:	bf00      	nop
 80037fc:	58024400 	.word	0x58024400
 8003800:	58024800 	.word	0x58024800
 8003804:	00ffffcf 	.word	0x00ffffcf
      break;
 8003808:	bf00      	nop
    }

    if(ret == HAL_OK)
 800380a:	7dfb      	ldrb	r3, [r7, #23]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d109      	bne.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003810:	4b96      	ldr	r3, [pc, #600]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003814:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800381c:	4993      	ldr	r1, [pc, #588]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800381e:	4313      	orrs	r3, r2
 8003820:	654b      	str	r3, [r1, #84]	; 0x54
 8003822:	e001      	b.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003824:	7dfb      	ldrb	r3, [r7, #23]
 8003826:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0302 	and.w	r3, r3, #2
 8003830:	2b00      	cmp	r3, #0
 8003832:	d038      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003838:	2b05      	cmp	r3, #5
 800383a:	d821      	bhi.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800383c:	a201      	add	r2, pc, #4	; (adr r2, 8003844 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800383e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003842:	bf00      	nop
 8003844:	08003887 	.word	0x08003887
 8003848:	0800385d 	.word	0x0800385d
 800384c:	0800386f 	.word	0x0800386f
 8003850:	08003887 	.word	0x08003887
 8003854:	08003887 	.word	0x08003887
 8003858:	08003887 	.word	0x08003887
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	3304      	adds	r3, #4
 8003860:	2101      	movs	r1, #1
 8003862:	4618      	mov	r0, r3
 8003864:	f000 fdb4 	bl	80043d0 <RCCEx_PLL2_Config>
 8003868:	4603      	mov	r3, r0
 800386a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800386c:	e00c      	b.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	3324      	adds	r3, #36	; 0x24
 8003872:	2101      	movs	r1, #1
 8003874:	4618      	mov	r0, r3
 8003876:	f000 fe5d 	bl	8004534 <RCCEx_PLL3_Config>
 800387a:	4603      	mov	r3, r0
 800387c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800387e:	e003      	b.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	75fb      	strb	r3, [r7, #23]
      break;
 8003884:	e000      	b.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8003886:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003888:	7dfb      	ldrb	r3, [r7, #23]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d109      	bne.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800388e:	4b77      	ldr	r3, [pc, #476]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003892:	f023 0207 	bic.w	r2, r3, #7
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800389a:	4974      	ldr	r1, [pc, #464]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800389c:	4313      	orrs	r3, r2
 800389e:	654b      	str	r3, [r1, #84]	; 0x54
 80038a0:	e001      	b.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038a2:	7dfb      	ldrb	r3, [r7, #23]
 80038a4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0304 	and.w	r3, r3, #4
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d03a      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038b8:	2b05      	cmp	r3, #5
 80038ba:	d821      	bhi.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x938>
 80038bc:	a201      	add	r2, pc, #4	; (adr r2, 80038c4 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 80038be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038c2:	bf00      	nop
 80038c4:	08003907 	.word	0x08003907
 80038c8:	080038dd 	.word	0x080038dd
 80038cc:	080038ef 	.word	0x080038ef
 80038d0:	08003907 	.word	0x08003907
 80038d4:	08003907 	.word	0x08003907
 80038d8:	08003907 	.word	0x08003907
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	3304      	adds	r3, #4
 80038e0:	2101      	movs	r1, #1
 80038e2:	4618      	mov	r0, r3
 80038e4:	f000 fd74 	bl	80043d0 <RCCEx_PLL2_Config>
 80038e8:	4603      	mov	r3, r0
 80038ea:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80038ec:	e00c      	b.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	3324      	adds	r3, #36	; 0x24
 80038f2:	2101      	movs	r1, #1
 80038f4:	4618      	mov	r0, r3
 80038f6:	f000 fe1d 	bl	8004534 <RCCEx_PLL3_Config>
 80038fa:	4603      	mov	r3, r0
 80038fc:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80038fe:	e003      	b.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	75fb      	strb	r3, [r7, #23]
      break;
 8003904:	e000      	b.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8003906:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003908:	7dfb      	ldrb	r3, [r7, #23]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d10a      	bne.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800390e:	4b57      	ldr	r3, [pc, #348]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003912:	f023 0207 	bic.w	r2, r3, #7
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800391c:	4953      	ldr	r1, [pc, #332]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800391e:	4313      	orrs	r3, r2
 8003920:	658b      	str	r3, [r1, #88]	; 0x58
 8003922:	e001      	b.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003924:	7dfb      	ldrb	r3, [r7, #23]
 8003926:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0320 	and.w	r3, r3, #32
 8003930:	2b00      	cmp	r3, #0
 8003932:	d04b      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800393a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800393e:	d02e      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8003940:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003944:	d828      	bhi.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003946:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800394a:	d02a      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800394c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003950:	d822      	bhi.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003952:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003956:	d026      	beq.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003958:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800395c:	d81c      	bhi.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800395e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003962:	d010      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8003964:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003968:	d816      	bhi.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800396a:	2b00      	cmp	r3, #0
 800396c:	d01d      	beq.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800396e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003972:	d111      	bne.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	3304      	adds	r3, #4
 8003978:	2100      	movs	r1, #0
 800397a:	4618      	mov	r0, r3
 800397c:	f000 fd28 	bl	80043d0 <RCCEx_PLL2_Config>
 8003980:	4603      	mov	r3, r0
 8003982:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003984:	e012      	b.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	3324      	adds	r3, #36	; 0x24
 800398a:	2102      	movs	r1, #2
 800398c:	4618      	mov	r0, r3
 800398e:	f000 fdd1 	bl	8004534 <RCCEx_PLL3_Config>
 8003992:	4603      	mov	r3, r0
 8003994:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003996:	e009      	b.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	75fb      	strb	r3, [r7, #23]
      break;
 800399c:	e006      	b.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800399e:	bf00      	nop
 80039a0:	e004      	b.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80039a2:	bf00      	nop
 80039a4:	e002      	b.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80039a6:	bf00      	nop
 80039a8:	e000      	b.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80039aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039ac:	7dfb      	ldrb	r3, [r7, #23]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d10a      	bne.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80039b2:	4b2e      	ldr	r3, [pc, #184]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80039b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039b6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039c0:	492a      	ldr	r1, [pc, #168]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80039c2:	4313      	orrs	r3, r2
 80039c4:	654b      	str	r3, [r1, #84]	; 0x54
 80039c6:	e001      	b.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039c8:	7dfb      	ldrb	r3, [r7, #23]
 80039ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d04d      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80039de:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80039e2:	d02e      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80039e4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80039e8:	d828      	bhi.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80039ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039ee:	d02a      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80039f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039f4:	d822      	bhi.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80039f6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80039fa:	d026      	beq.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80039fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a00:	d81c      	bhi.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003a02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a06:	d010      	beq.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8003a08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a0c:	d816      	bhi.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d01d      	beq.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8003a12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a16:	d111      	bne.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	3304      	adds	r3, #4
 8003a1c:	2100      	movs	r1, #0
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f000 fcd6 	bl	80043d0 <RCCEx_PLL2_Config>
 8003a24:	4603      	mov	r3, r0
 8003a26:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003a28:	e012      	b.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	3324      	adds	r3, #36	; 0x24
 8003a2e:	2102      	movs	r1, #2
 8003a30:	4618      	mov	r0, r3
 8003a32:	f000 fd7f 	bl	8004534 <RCCEx_PLL3_Config>
 8003a36:	4603      	mov	r3, r0
 8003a38:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003a3a:	e009      	b.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	75fb      	strb	r3, [r7, #23]
      break;
 8003a40:	e006      	b.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003a42:	bf00      	nop
 8003a44:	e004      	b.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003a46:	bf00      	nop
 8003a48:	e002      	b.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003a4a:	bf00      	nop
 8003a4c:	e000      	b.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003a4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a50:	7dfb      	ldrb	r3, [r7, #23]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d10c      	bne.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003a56:	4b05      	ldr	r3, [pc, #20]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a5a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a64:	4901      	ldr	r1, [pc, #4]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003a66:	4313      	orrs	r3, r2
 8003a68:	658b      	str	r3, [r1, #88]	; 0x58
 8003a6a:	e003      	b.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8003a6c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a70:	7dfb      	ldrb	r3, [r7, #23]
 8003a72:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d04b      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a86:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003a8a:	d02e      	beq.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8003a8c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003a90:	d828      	bhi.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003a92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a96:	d02a      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8003a98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a9c:	d822      	bhi.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003a9e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003aa2:	d026      	beq.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8003aa4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003aa8:	d81c      	bhi.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003aaa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003aae:	d010      	beq.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8003ab0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ab4:	d816      	bhi.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d01d      	beq.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8003aba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003abe:	d111      	bne.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	3304      	adds	r3, #4
 8003ac4:	2100      	movs	r1, #0
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f000 fc82 	bl	80043d0 <RCCEx_PLL2_Config>
 8003acc:	4603      	mov	r3, r0
 8003ace:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003ad0:	e012      	b.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	3324      	adds	r3, #36	; 0x24
 8003ad6:	2102      	movs	r1, #2
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f000 fd2b 	bl	8004534 <RCCEx_PLL3_Config>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003ae2:	e009      	b.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	75fb      	strb	r3, [r7, #23]
      break;
 8003ae8:	e006      	b.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003aea:	bf00      	nop
 8003aec:	e004      	b.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003aee:	bf00      	nop
 8003af0:	e002      	b.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003af2:	bf00      	nop
 8003af4:	e000      	b.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003af6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003af8:	7dfb      	ldrb	r3, [r7, #23]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d10a      	bne.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003afe:	4b9d      	ldr	r3, [pc, #628]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b0c:	4999      	ldr	r1, [pc, #612]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	658b      	str	r3, [r1, #88]	; 0x58
 8003b12:	e001      	b.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b14:	7dfb      	ldrb	r3, [r7, #23]
 8003b16:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0308 	and.w	r3, r3, #8
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d01a      	beq.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b2e:	d10a      	bne.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	3324      	adds	r3, #36	; 0x24
 8003b34:	2102      	movs	r1, #2
 8003b36:	4618      	mov	r0, r3
 8003b38:	f000 fcfc 	bl	8004534 <RCCEx_PLL3_Config>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d001      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003b46:	4b8b      	ldr	r3, [pc, #556]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b4a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b54:	4987      	ldr	r1, [pc, #540]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003b56:	4313      	orrs	r3, r2
 8003b58:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0310 	and.w	r3, r3, #16
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d01a      	beq.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b70:	d10a      	bne.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	3324      	adds	r3, #36	; 0x24
 8003b76:	2102      	movs	r1, #2
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f000 fcdb 	bl	8004534 <RCCEx_PLL3_Config>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d001      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003b88:	4b7a      	ldr	r3, [pc, #488]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b96:	4977      	ldr	r1, [pc, #476]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d034      	beq.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003bae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003bb2:	d01d      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8003bb4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003bb8:	d817      	bhi.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d003      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8003bbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bc2:	d009      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8003bc4:	e011      	b.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	3304      	adds	r3, #4
 8003bca:	2100      	movs	r1, #0
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f000 fbff 	bl	80043d0 <RCCEx_PLL2_Config>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003bd6:	e00c      	b.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	3324      	adds	r3, #36	; 0x24
 8003bdc:	2102      	movs	r1, #2
 8003bde:	4618      	mov	r0, r3
 8003be0:	f000 fca8 	bl	8004534 <RCCEx_PLL3_Config>
 8003be4:	4603      	mov	r3, r0
 8003be6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003be8:	e003      	b.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	75fb      	strb	r3, [r7, #23]
      break;
 8003bee:	e000      	b.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8003bf0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bf2:	7dfb      	ldrb	r3, [r7, #23]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d10a      	bne.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003bf8:	4b5e      	ldr	r3, [pc, #376]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003bfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bfc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003c06:	495b      	ldr	r1, [pc, #364]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	658b      	str	r3, [r1, #88]	; 0x58
 8003c0c:	e001      	b.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c0e:	7dfb      	ldrb	r3, [r7, #23]
 8003c10:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d033      	beq.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c24:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003c28:	d01c      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8003c2a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003c2e:	d816      	bhi.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8003c30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c34:	d003      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8003c36:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c3a:	d007      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8003c3c:	e00f      	b.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c3e:	4b4d      	ldr	r3, [pc, #308]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c42:	4a4c      	ldr	r2, [pc, #304]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003c44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c48:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003c4a:	e00c      	b.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	3324      	adds	r3, #36	; 0x24
 8003c50:	2101      	movs	r1, #1
 8003c52:	4618      	mov	r0, r3
 8003c54:	f000 fc6e 	bl	8004534 <RCCEx_PLL3_Config>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003c5c:	e003      	b.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	75fb      	strb	r3, [r7, #23]
      break;
 8003c62:	e000      	b.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8003c64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c66:	7dfb      	ldrb	r3, [r7, #23]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d10a      	bne.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c6c:	4b41      	ldr	r3, [pc, #260]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003c6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c70:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c7a:	493e      	ldr	r1, [pc, #248]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	654b      	str	r3, [r1, #84]	; 0x54
 8003c80:	e001      	b.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c82:	7dfb      	ldrb	r3, [r7, #23]
 8003c84:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d029      	beq.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d003      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8003c9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c9e:	d007      	beq.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8003ca0:	e00f      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ca2:	4b34      	ldr	r3, [pc, #208]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca6:	4a33      	ldr	r2, [pc, #204]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003ca8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003cae:	e00b      	b.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	3304      	adds	r3, #4
 8003cb4:	2102      	movs	r1, #2
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f000 fb8a 	bl	80043d0 <RCCEx_PLL2_Config>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003cc0:	e002      	b.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	75fb      	strb	r3, [r7, #23]
      break;
 8003cc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cc8:	7dfb      	ldrb	r3, [r7, #23]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d109      	bne.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003cce:	4b29      	ldr	r3, [pc, #164]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cd2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cda:	4926      	ldr	r1, [pc, #152]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003ce0:	e001      	b.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ce2:	7dfb      	ldrb	r3, [r7, #23]
 8003ce4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d00a      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	3324      	adds	r3, #36	; 0x24
 8003cf6:	2102      	movs	r1, #2
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f000 fc1b 	bl	8004534 <RCCEx_PLL3_Config>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d001      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d033      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d1c:	d017      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8003d1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d22:	d811      	bhi.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8003d24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d28:	d013      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8003d2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d2e:	d80b      	bhi.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d010      	beq.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8003d34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d38:	d106      	bne.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d3a:	4b0e      	ldr	r3, [pc, #56]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d3e:	4a0d      	ldr	r2, [pc, #52]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003d40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d44:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003d46:	e007      	b.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	75fb      	strb	r3, [r7, #23]
      break;
 8003d4c:	e004      	b.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8003d4e:	bf00      	nop
 8003d50:	e002      	b.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8003d52:	bf00      	nop
 8003d54:	e000      	b.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8003d56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d58:	7dfb      	ldrb	r3, [r7, #23]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d10c      	bne.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d5e:	4b05      	ldr	r3, [pc, #20]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d62:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d6a:	4902      	ldr	r1, [pc, #8]	; (8003d74 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	654b      	str	r3, [r1, #84]	; 0x54
 8003d70:	e004      	b.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8003d72:	bf00      	nop
 8003d74:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d78:	7dfb      	ldrb	r3, [r7, #23]
 8003d7a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d008      	beq.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003d88:	4b31      	ldr	r3, [pc, #196]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003d8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d8c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d94:	492e      	ldr	r1, [pc, #184]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003d96:	4313      	orrs	r3, r2
 8003d98:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d009      	beq.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003da6:	4b2a      	ldr	r3, [pc, #168]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003db4:	4926      	ldr	r1, [pc, #152]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003db6:	4313      	orrs	r3, r2
 8003db8:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d008      	beq.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003dc6:	4b22      	ldr	r3, [pc, #136]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003dc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dca:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003dd2:	491f      	ldr	r1, [pc, #124]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d00d      	beq.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003de4:	4b1a      	ldr	r3, [pc, #104]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003de6:	691b      	ldr	r3, [r3, #16]
 8003de8:	4a19      	ldr	r2, [pc, #100]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003dea:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003dee:	6113      	str	r3, [r2, #16]
 8003df0:	4b17      	ldr	r3, [pc, #92]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003df2:	691a      	ldr	r2, [r3, #16]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003dfa:	4915      	ldr	r1, [pc, #84]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	da08      	bge.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003e08:	4b11      	ldr	r3, [pc, #68]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003e0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e0c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e14:	490e      	ldr	r1, [pc, #56]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003e16:	4313      	orrs	r3, r2
 8003e18:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d009      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003e26:	4b0a      	ldr	r3, [pc, #40]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003e28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e2a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e34:	4906      	ldr	r1, [pc, #24]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003e36:	4313      	orrs	r3, r2
 8003e38:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8003e3a:	7dbb      	ldrb	r3, [r7, #22]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d101      	bne.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8003e40:	2300      	movs	r3, #0
 8003e42:	e000      	b.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3718      	adds	r7, #24
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	58024400 	.word	0x58024400

08003e54 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003e58:	f7ff f85a 	bl	8002f10 <HAL_RCC_GetHCLKFreq>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	4b06      	ldr	r3, [pc, #24]	; (8003e78 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003e60:	6a1b      	ldr	r3, [r3, #32]
 8003e62:	091b      	lsrs	r3, r3, #4
 8003e64:	f003 0307 	and.w	r3, r3, #7
 8003e68:	4904      	ldr	r1, [pc, #16]	; (8003e7c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003e6a:	5ccb      	ldrb	r3, [r1, r3]
 8003e6c:	f003 031f 	and.w	r3, r3, #31
 8003e70:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	58024400 	.word	0x58024400
 8003e7c:	080063fc 	.word	0x080063fc

08003e80 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b089      	sub	sp, #36	; 0x24
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003e88:	4ba1      	ldr	r3, [pc, #644]	; (8004110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e8c:	f003 0303 	and.w	r3, r3, #3
 8003e90:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8003e92:	4b9f      	ldr	r3, [pc, #636]	; (8004110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e96:	0b1b      	lsrs	r3, r3, #12
 8003e98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e9c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003e9e:	4b9c      	ldr	r3, [pc, #624]	; (8004110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea2:	091b      	lsrs	r3, r3, #4
 8003ea4:	f003 0301 	and.w	r3, r3, #1
 8003ea8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003eaa:	4b99      	ldr	r3, [pc, #612]	; (8004110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eae:	08db      	lsrs	r3, r3, #3
 8003eb0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003eb4:	693a      	ldr	r2, [r7, #16]
 8003eb6:	fb02 f303 	mul.w	r3, r2, r3
 8003eba:	ee07 3a90 	vmov	s15, r3
 8003ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ec2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	f000 8111 	beq.w	80040f0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003ece:	69bb      	ldr	r3, [r7, #24]
 8003ed0:	2b02      	cmp	r3, #2
 8003ed2:	f000 8083 	beq.w	8003fdc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003ed6:	69bb      	ldr	r3, [r7, #24]
 8003ed8:	2b02      	cmp	r3, #2
 8003eda:	f200 80a1 	bhi.w	8004020 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003ede:	69bb      	ldr	r3, [r7, #24]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d003      	beq.n	8003eec <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003ee4:	69bb      	ldr	r3, [r7, #24]
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d056      	beq.n	8003f98 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003eea:	e099      	b.n	8004020 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003eec:	4b88      	ldr	r3, [pc, #544]	; (8004110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0320 	and.w	r3, r3, #32
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d02d      	beq.n	8003f54 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003ef8:	4b85      	ldr	r3, [pc, #532]	; (8004110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	08db      	lsrs	r3, r3, #3
 8003efe:	f003 0303 	and.w	r3, r3, #3
 8003f02:	4a84      	ldr	r2, [pc, #528]	; (8004114 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003f04:	fa22 f303 	lsr.w	r3, r2, r3
 8003f08:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	ee07 3a90 	vmov	s15, r3
 8003f10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	ee07 3a90 	vmov	s15, r3
 8003f1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f22:	4b7b      	ldr	r3, [pc, #492]	; (8004110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f2a:	ee07 3a90 	vmov	s15, r3
 8003f2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f32:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f36:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004118 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003f3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f4e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003f52:	e087      	b.n	8004064 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	ee07 3a90 	vmov	s15, r3
 8003f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f5e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800411c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003f62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f66:	4b6a      	ldr	r3, [pc, #424]	; (8004110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f6e:	ee07 3a90 	vmov	s15, r3
 8003f72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f76:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f7a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004118 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003f7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f92:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003f96:	e065      	b.n	8004064 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	ee07 3a90 	vmov	s15, r3
 8003f9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fa2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004120 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003fa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003faa:	4b59      	ldr	r3, [pc, #356]	; (8004110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fb2:	ee07 3a90 	vmov	s15, r3
 8003fb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fba:	ed97 6a03 	vldr	s12, [r7, #12]
 8003fbe:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004118 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003fc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003fce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fd6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003fda:	e043      	b.n	8004064 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	ee07 3a90 	vmov	s15, r3
 8003fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fe6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004124 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003fea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fee:	4b48      	ldr	r3, [pc, #288]	; (8004110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ff6:	ee07 3a90 	vmov	s15, r3
 8003ffa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ffe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004002:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004118 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004006:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800400a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800400e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004012:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004016:	ee67 7a27 	vmul.f32	s15, s14, s15
 800401a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800401e:	e021      	b.n	8004064 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	ee07 3a90 	vmov	s15, r3
 8004026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800402a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004120 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800402e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004032:	4b37      	ldr	r3, [pc, #220]	; (8004110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004036:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800403a:	ee07 3a90 	vmov	s15, r3
 800403e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004042:	ed97 6a03 	vldr	s12, [r7, #12]
 8004046:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004118 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800404a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800404e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004052:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004056:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800405a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800405e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004062:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004064:	4b2a      	ldr	r3, [pc, #168]	; (8004110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004068:	0a5b      	lsrs	r3, r3, #9
 800406a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800406e:	ee07 3a90 	vmov	s15, r3
 8004072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004076:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800407a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800407e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004082:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004086:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800408a:	ee17 2a90 	vmov	r2, s15
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004092:	4b1f      	ldr	r3, [pc, #124]	; (8004110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004096:	0c1b      	lsrs	r3, r3, #16
 8004098:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800409c:	ee07 3a90 	vmov	s15, r3
 80040a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80040a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80040ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80040b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040b8:	ee17 2a90 	vmov	r2, s15
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80040c0:	4b13      	ldr	r3, [pc, #76]	; (8004110 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c4:	0e1b      	lsrs	r3, r3, #24
 80040c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040ca:	ee07 3a90 	vmov	s15, r3
 80040ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80040d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80040da:	edd7 6a07 	vldr	s13, [r7, #28]
 80040de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040e6:	ee17 2a90 	vmov	r2, s15
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80040ee:	e008      	b.n	8004102 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	609a      	str	r2, [r3, #8]
}
 8004102:	bf00      	nop
 8004104:	3724      	adds	r7, #36	; 0x24
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop
 8004110:	58024400 	.word	0x58024400
 8004114:	03d09000 	.word	0x03d09000
 8004118:	46000000 	.word	0x46000000
 800411c:	4c742400 	.word	0x4c742400
 8004120:	4a742400 	.word	0x4a742400
 8004124:	4bbebc20 	.word	0x4bbebc20

08004128 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004128:	b480      	push	{r7}
 800412a:	b089      	sub	sp, #36	; 0x24
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004130:	4ba1      	ldr	r3, [pc, #644]	; (80043b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004134:	f003 0303 	and.w	r3, r3, #3
 8004138:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800413a:	4b9f      	ldr	r3, [pc, #636]	; (80043b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800413c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800413e:	0d1b      	lsrs	r3, r3, #20
 8004140:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004144:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004146:	4b9c      	ldr	r3, [pc, #624]	; (80043b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800414a:	0a1b      	lsrs	r3, r3, #8
 800414c:	f003 0301 	and.w	r3, r3, #1
 8004150:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004152:	4b99      	ldr	r3, [pc, #612]	; (80043b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004156:	08db      	lsrs	r3, r3, #3
 8004158:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800415c:	693a      	ldr	r2, [r7, #16]
 800415e:	fb02 f303 	mul.w	r3, r2, r3
 8004162:	ee07 3a90 	vmov	s15, r3
 8004166:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800416a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	2b00      	cmp	r3, #0
 8004172:	f000 8111 	beq.w	8004398 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004176:	69bb      	ldr	r3, [r7, #24]
 8004178:	2b02      	cmp	r3, #2
 800417a:	f000 8083 	beq.w	8004284 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800417e:	69bb      	ldr	r3, [r7, #24]
 8004180:	2b02      	cmp	r3, #2
 8004182:	f200 80a1 	bhi.w	80042c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004186:	69bb      	ldr	r3, [r7, #24]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d003      	beq.n	8004194 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	2b01      	cmp	r3, #1
 8004190:	d056      	beq.n	8004240 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004192:	e099      	b.n	80042c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004194:	4b88      	ldr	r3, [pc, #544]	; (80043b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0320 	and.w	r3, r3, #32
 800419c:	2b00      	cmp	r3, #0
 800419e:	d02d      	beq.n	80041fc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80041a0:	4b85      	ldr	r3, [pc, #532]	; (80043b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	08db      	lsrs	r3, r3, #3
 80041a6:	f003 0303 	and.w	r3, r3, #3
 80041aa:	4a84      	ldr	r2, [pc, #528]	; (80043bc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80041ac:	fa22 f303 	lsr.w	r3, r2, r3
 80041b0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	ee07 3a90 	vmov	s15, r3
 80041b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	ee07 3a90 	vmov	s15, r3
 80041c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041ca:	4b7b      	ldr	r3, [pc, #492]	; (80043b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041d2:	ee07 3a90 	vmov	s15, r3
 80041d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041da:	ed97 6a03 	vldr	s12, [r7, #12]
 80041de:	eddf 5a78 	vldr	s11, [pc, #480]	; 80043c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80041e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80041ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041f6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80041fa:	e087      	b.n	800430c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	ee07 3a90 	vmov	s15, r3
 8004202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004206:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80043c4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800420a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800420e:	4b6a      	ldr	r3, [pc, #424]	; (80043b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004212:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004216:	ee07 3a90 	vmov	s15, r3
 800421a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800421e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004222:	eddf 5a67 	vldr	s11, [pc, #412]	; 80043c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004226:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800422a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800422e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004232:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004236:	ee67 7a27 	vmul.f32	s15, s14, s15
 800423a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800423e:	e065      	b.n	800430c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	ee07 3a90 	vmov	s15, r3
 8004246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800424a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80043c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800424e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004252:	4b59      	ldr	r3, [pc, #356]	; (80043b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004256:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800425a:	ee07 3a90 	vmov	s15, r3
 800425e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004262:	ed97 6a03 	vldr	s12, [r7, #12]
 8004266:	eddf 5a56 	vldr	s11, [pc, #344]	; 80043c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800426a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800426e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004272:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004276:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800427a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800427e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004282:	e043      	b.n	800430c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	ee07 3a90 	vmov	s15, r3
 800428a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800428e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80043cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004292:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004296:	4b48      	ldr	r3, [pc, #288]	; (80043b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800429e:	ee07 3a90 	vmov	s15, r3
 80042a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80042aa:	eddf 5a45 	vldr	s11, [pc, #276]	; 80043c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80042ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80042c6:	e021      	b.n	800430c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	ee07 3a90 	vmov	s15, r3
 80042ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042d2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80043c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80042d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042da:	4b37      	ldr	r3, [pc, #220]	; (80043b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042e2:	ee07 3a90 	vmov	s15, r3
 80042e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80042ee:	eddf 5a34 	vldr	s11, [pc, #208]	; 80043c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80042f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004302:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004306:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800430a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800430c:	4b2a      	ldr	r3, [pc, #168]	; (80043b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800430e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004310:	0a5b      	lsrs	r3, r3, #9
 8004312:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004316:	ee07 3a90 	vmov	s15, r3
 800431a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800431e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004322:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004326:	edd7 6a07 	vldr	s13, [r7, #28]
 800432a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800432e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004332:	ee17 2a90 	vmov	r2, s15
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800433a:	4b1f      	ldr	r3, [pc, #124]	; (80043b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800433c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433e:	0c1b      	lsrs	r3, r3, #16
 8004340:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004344:	ee07 3a90 	vmov	s15, r3
 8004348:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800434c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004350:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004354:	edd7 6a07 	vldr	s13, [r7, #28]
 8004358:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800435c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004360:	ee17 2a90 	vmov	r2, s15
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004368:	4b13      	ldr	r3, [pc, #76]	; (80043b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800436a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436c:	0e1b      	lsrs	r3, r3, #24
 800436e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004372:	ee07 3a90 	vmov	s15, r3
 8004376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800437a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800437e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004382:	edd7 6a07 	vldr	s13, [r7, #28]
 8004386:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800438a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800438e:	ee17 2a90 	vmov	r2, s15
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004396:	e008      	b.n	80043aa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	609a      	str	r2, [r3, #8]
}
 80043aa:	bf00      	nop
 80043ac:	3724      	adds	r7, #36	; 0x24
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr
 80043b6:	bf00      	nop
 80043b8:	58024400 	.word	0x58024400
 80043bc:	03d09000 	.word	0x03d09000
 80043c0:	46000000 	.word	0x46000000
 80043c4:	4c742400 	.word	0x4c742400
 80043c8:	4a742400 	.word	0x4a742400
 80043cc:	4bbebc20 	.word	0x4bbebc20

080043d0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80043da:	2300      	movs	r3, #0
 80043dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80043de:	4b53      	ldr	r3, [pc, #332]	; (800452c <RCCEx_PLL2_Config+0x15c>)
 80043e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e2:	f003 0303 	and.w	r3, r3, #3
 80043e6:	2b03      	cmp	r3, #3
 80043e8:	d101      	bne.n	80043ee <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e099      	b.n	8004522 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80043ee:	4b4f      	ldr	r3, [pc, #316]	; (800452c <RCCEx_PLL2_Config+0x15c>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a4e      	ldr	r2, [pc, #312]	; (800452c <RCCEx_PLL2_Config+0x15c>)
 80043f4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80043f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043fa:	f7fd fac1 	bl	8001980 <HAL_GetTick>
 80043fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004400:	e008      	b.n	8004414 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004402:	f7fd fabd 	bl	8001980 <HAL_GetTick>
 8004406:	4602      	mov	r2, r0
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	1ad3      	subs	r3, r2, r3
 800440c:	2b02      	cmp	r3, #2
 800440e:	d901      	bls.n	8004414 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004410:	2303      	movs	r3, #3
 8004412:	e086      	b.n	8004522 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004414:	4b45      	ldr	r3, [pc, #276]	; (800452c <RCCEx_PLL2_Config+0x15c>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800441c:	2b00      	cmp	r3, #0
 800441e:	d1f0      	bne.n	8004402 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004420:	4b42      	ldr	r3, [pc, #264]	; (800452c <RCCEx_PLL2_Config+0x15c>)
 8004422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004424:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	031b      	lsls	r3, r3, #12
 800442e:	493f      	ldr	r1, [pc, #252]	; (800452c <RCCEx_PLL2_Config+0x15c>)
 8004430:	4313      	orrs	r3, r2
 8004432:	628b      	str	r3, [r1, #40]	; 0x28
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	3b01      	subs	r3, #1
 800443a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	3b01      	subs	r3, #1
 8004444:	025b      	lsls	r3, r3, #9
 8004446:	b29b      	uxth	r3, r3
 8004448:	431a      	orrs	r2, r3
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	3b01      	subs	r3, #1
 8004450:	041b      	lsls	r3, r3, #16
 8004452:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004456:	431a      	orrs	r2, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	691b      	ldr	r3, [r3, #16]
 800445c:	3b01      	subs	r3, #1
 800445e:	061b      	lsls	r3, r3, #24
 8004460:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004464:	4931      	ldr	r1, [pc, #196]	; (800452c <RCCEx_PLL2_Config+0x15c>)
 8004466:	4313      	orrs	r3, r2
 8004468:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800446a:	4b30      	ldr	r3, [pc, #192]	; (800452c <RCCEx_PLL2_Config+0x15c>)
 800446c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800446e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	695b      	ldr	r3, [r3, #20]
 8004476:	492d      	ldr	r1, [pc, #180]	; (800452c <RCCEx_PLL2_Config+0x15c>)
 8004478:	4313      	orrs	r3, r2
 800447a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800447c:	4b2b      	ldr	r3, [pc, #172]	; (800452c <RCCEx_PLL2_Config+0x15c>)
 800447e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004480:	f023 0220 	bic.w	r2, r3, #32
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	699b      	ldr	r3, [r3, #24]
 8004488:	4928      	ldr	r1, [pc, #160]	; (800452c <RCCEx_PLL2_Config+0x15c>)
 800448a:	4313      	orrs	r3, r2
 800448c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800448e:	4b27      	ldr	r3, [pc, #156]	; (800452c <RCCEx_PLL2_Config+0x15c>)
 8004490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004492:	4a26      	ldr	r2, [pc, #152]	; (800452c <RCCEx_PLL2_Config+0x15c>)
 8004494:	f023 0310 	bic.w	r3, r3, #16
 8004498:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800449a:	4b24      	ldr	r3, [pc, #144]	; (800452c <RCCEx_PLL2_Config+0x15c>)
 800449c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800449e:	4b24      	ldr	r3, [pc, #144]	; (8004530 <RCCEx_PLL2_Config+0x160>)
 80044a0:	4013      	ands	r3, r2
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	69d2      	ldr	r2, [r2, #28]
 80044a6:	00d2      	lsls	r2, r2, #3
 80044a8:	4920      	ldr	r1, [pc, #128]	; (800452c <RCCEx_PLL2_Config+0x15c>)
 80044aa:	4313      	orrs	r3, r2
 80044ac:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80044ae:	4b1f      	ldr	r3, [pc, #124]	; (800452c <RCCEx_PLL2_Config+0x15c>)
 80044b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b2:	4a1e      	ldr	r2, [pc, #120]	; (800452c <RCCEx_PLL2_Config+0x15c>)
 80044b4:	f043 0310 	orr.w	r3, r3, #16
 80044b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d106      	bne.n	80044ce <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80044c0:	4b1a      	ldr	r3, [pc, #104]	; (800452c <RCCEx_PLL2_Config+0x15c>)
 80044c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c4:	4a19      	ldr	r2, [pc, #100]	; (800452c <RCCEx_PLL2_Config+0x15c>)
 80044c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80044ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 80044cc:	e00f      	b.n	80044ee <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d106      	bne.n	80044e2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80044d4:	4b15      	ldr	r3, [pc, #84]	; (800452c <RCCEx_PLL2_Config+0x15c>)
 80044d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d8:	4a14      	ldr	r2, [pc, #80]	; (800452c <RCCEx_PLL2_Config+0x15c>)
 80044da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044de:	62d3      	str	r3, [r2, #44]	; 0x2c
 80044e0:	e005      	b.n	80044ee <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80044e2:	4b12      	ldr	r3, [pc, #72]	; (800452c <RCCEx_PLL2_Config+0x15c>)
 80044e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e6:	4a11      	ldr	r2, [pc, #68]	; (800452c <RCCEx_PLL2_Config+0x15c>)
 80044e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80044ec:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80044ee:	4b0f      	ldr	r3, [pc, #60]	; (800452c <RCCEx_PLL2_Config+0x15c>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a0e      	ldr	r2, [pc, #56]	; (800452c <RCCEx_PLL2_Config+0x15c>)
 80044f4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80044f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044fa:	f7fd fa41 	bl	8001980 <HAL_GetTick>
 80044fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004500:	e008      	b.n	8004514 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004502:	f7fd fa3d 	bl	8001980 <HAL_GetTick>
 8004506:	4602      	mov	r2, r0
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	2b02      	cmp	r3, #2
 800450e:	d901      	bls.n	8004514 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004510:	2303      	movs	r3, #3
 8004512:	e006      	b.n	8004522 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004514:	4b05      	ldr	r3, [pc, #20]	; (800452c <RCCEx_PLL2_Config+0x15c>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800451c:	2b00      	cmp	r3, #0
 800451e:	d0f0      	beq.n	8004502 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004520:	7bfb      	ldrb	r3, [r7, #15]
}
 8004522:	4618      	mov	r0, r3
 8004524:	3710      	adds	r7, #16
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
 800452a:	bf00      	nop
 800452c:	58024400 	.word	0x58024400
 8004530:	ffff0007 	.word	0xffff0007

08004534 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b084      	sub	sp, #16
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800453e:	2300      	movs	r3, #0
 8004540:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004542:	4b53      	ldr	r3, [pc, #332]	; (8004690 <RCCEx_PLL3_Config+0x15c>)
 8004544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004546:	f003 0303 	and.w	r3, r3, #3
 800454a:	2b03      	cmp	r3, #3
 800454c:	d101      	bne.n	8004552 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e099      	b.n	8004686 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004552:	4b4f      	ldr	r3, [pc, #316]	; (8004690 <RCCEx_PLL3_Config+0x15c>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a4e      	ldr	r2, [pc, #312]	; (8004690 <RCCEx_PLL3_Config+0x15c>)
 8004558:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800455c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800455e:	f7fd fa0f 	bl	8001980 <HAL_GetTick>
 8004562:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004564:	e008      	b.n	8004578 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004566:	f7fd fa0b 	bl	8001980 <HAL_GetTick>
 800456a:	4602      	mov	r2, r0
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	2b02      	cmp	r3, #2
 8004572:	d901      	bls.n	8004578 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004574:	2303      	movs	r3, #3
 8004576:	e086      	b.n	8004686 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004578:	4b45      	ldr	r3, [pc, #276]	; (8004690 <RCCEx_PLL3_Config+0x15c>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004580:	2b00      	cmp	r3, #0
 8004582:	d1f0      	bne.n	8004566 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004584:	4b42      	ldr	r3, [pc, #264]	; (8004690 <RCCEx_PLL3_Config+0x15c>)
 8004586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004588:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	051b      	lsls	r3, r3, #20
 8004592:	493f      	ldr	r1, [pc, #252]	; (8004690 <RCCEx_PLL3_Config+0x15c>)
 8004594:	4313      	orrs	r3, r2
 8004596:	628b      	str	r3, [r1, #40]	; 0x28
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	3b01      	subs	r3, #1
 800459e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	3b01      	subs	r3, #1
 80045a8:	025b      	lsls	r3, r3, #9
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	431a      	orrs	r2, r3
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	3b01      	subs	r3, #1
 80045b4:	041b      	lsls	r3, r3, #16
 80045b6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80045ba:	431a      	orrs	r2, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	691b      	ldr	r3, [r3, #16]
 80045c0:	3b01      	subs	r3, #1
 80045c2:	061b      	lsls	r3, r3, #24
 80045c4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80045c8:	4931      	ldr	r1, [pc, #196]	; (8004690 <RCCEx_PLL3_Config+0x15c>)
 80045ca:	4313      	orrs	r3, r2
 80045cc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80045ce:	4b30      	ldr	r3, [pc, #192]	; (8004690 <RCCEx_PLL3_Config+0x15c>)
 80045d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	695b      	ldr	r3, [r3, #20]
 80045da:	492d      	ldr	r1, [pc, #180]	; (8004690 <RCCEx_PLL3_Config+0x15c>)
 80045dc:	4313      	orrs	r3, r2
 80045de:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80045e0:	4b2b      	ldr	r3, [pc, #172]	; (8004690 <RCCEx_PLL3_Config+0x15c>)
 80045e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	699b      	ldr	r3, [r3, #24]
 80045ec:	4928      	ldr	r1, [pc, #160]	; (8004690 <RCCEx_PLL3_Config+0x15c>)
 80045ee:	4313      	orrs	r3, r2
 80045f0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80045f2:	4b27      	ldr	r3, [pc, #156]	; (8004690 <RCCEx_PLL3_Config+0x15c>)
 80045f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f6:	4a26      	ldr	r2, [pc, #152]	; (8004690 <RCCEx_PLL3_Config+0x15c>)
 80045f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045fc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80045fe:	4b24      	ldr	r3, [pc, #144]	; (8004690 <RCCEx_PLL3_Config+0x15c>)
 8004600:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004602:	4b24      	ldr	r3, [pc, #144]	; (8004694 <RCCEx_PLL3_Config+0x160>)
 8004604:	4013      	ands	r3, r2
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	69d2      	ldr	r2, [r2, #28]
 800460a:	00d2      	lsls	r2, r2, #3
 800460c:	4920      	ldr	r1, [pc, #128]	; (8004690 <RCCEx_PLL3_Config+0x15c>)
 800460e:	4313      	orrs	r3, r2
 8004610:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004612:	4b1f      	ldr	r3, [pc, #124]	; (8004690 <RCCEx_PLL3_Config+0x15c>)
 8004614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004616:	4a1e      	ldr	r2, [pc, #120]	; (8004690 <RCCEx_PLL3_Config+0x15c>)
 8004618:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800461c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d106      	bne.n	8004632 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004624:	4b1a      	ldr	r3, [pc, #104]	; (8004690 <RCCEx_PLL3_Config+0x15c>)
 8004626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004628:	4a19      	ldr	r2, [pc, #100]	; (8004690 <RCCEx_PLL3_Config+0x15c>)
 800462a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800462e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004630:	e00f      	b.n	8004652 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	2b01      	cmp	r3, #1
 8004636:	d106      	bne.n	8004646 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004638:	4b15      	ldr	r3, [pc, #84]	; (8004690 <RCCEx_PLL3_Config+0x15c>)
 800463a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800463c:	4a14      	ldr	r2, [pc, #80]	; (8004690 <RCCEx_PLL3_Config+0x15c>)
 800463e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004642:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004644:	e005      	b.n	8004652 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004646:	4b12      	ldr	r3, [pc, #72]	; (8004690 <RCCEx_PLL3_Config+0x15c>)
 8004648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464a:	4a11      	ldr	r2, [pc, #68]	; (8004690 <RCCEx_PLL3_Config+0x15c>)
 800464c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004650:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004652:	4b0f      	ldr	r3, [pc, #60]	; (8004690 <RCCEx_PLL3_Config+0x15c>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a0e      	ldr	r2, [pc, #56]	; (8004690 <RCCEx_PLL3_Config+0x15c>)
 8004658:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800465c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800465e:	f7fd f98f 	bl	8001980 <HAL_GetTick>
 8004662:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004664:	e008      	b.n	8004678 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004666:	f7fd f98b 	bl	8001980 <HAL_GetTick>
 800466a:	4602      	mov	r2, r0
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	1ad3      	subs	r3, r2, r3
 8004670:	2b02      	cmp	r3, #2
 8004672:	d901      	bls.n	8004678 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004674:	2303      	movs	r3, #3
 8004676:	e006      	b.n	8004686 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004678:	4b05      	ldr	r3, [pc, #20]	; (8004690 <RCCEx_PLL3_Config+0x15c>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004680:	2b00      	cmp	r3, #0
 8004682:	d0f0      	beq.n	8004666 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004684:	7bfb      	ldrb	r3, [r7, #15]
}
 8004686:	4618      	mov	r0, r3
 8004688:	3710      	adds	r7, #16
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	58024400 	.word	0x58024400
 8004694:	ffff0007 	.word	0xffff0007

08004698 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b084      	sub	sp, #16
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d101      	bne.n	80046aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e0f1      	b.n	800488e <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a78      	ldr	r2, [pc, #480]	; (8004898 <HAL_SPI_Init+0x200>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d00f      	beq.n	80046da <HAL_SPI_Init+0x42>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a77      	ldr	r2, [pc, #476]	; (800489c <HAL_SPI_Init+0x204>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d00a      	beq.n	80046da <HAL_SPI_Init+0x42>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a75      	ldr	r2, [pc, #468]	; (80048a0 <HAL_SPI_Init+0x208>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d005      	beq.n	80046da <HAL_SPI_Init+0x42>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	2b0f      	cmp	r3, #15
 80046d4:	d901      	bls.n	80046da <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e0d9      	b.n	800488e <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f000 fdca 	bl	8005274 <SPI_GetPacketSize>
 80046e0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a6c      	ldr	r2, [pc, #432]	; (8004898 <HAL_SPI_Init+0x200>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d00c      	beq.n	8004706 <HAL_SPI_Init+0x6e>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a6a      	ldr	r2, [pc, #424]	; (800489c <HAL_SPI_Init+0x204>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d007      	beq.n	8004706 <HAL_SPI_Init+0x6e>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a69      	ldr	r2, [pc, #420]	; (80048a0 <HAL_SPI_Init+0x208>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d002      	beq.n	8004706 <HAL_SPI_Init+0x6e>
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2b08      	cmp	r3, #8
 8004704:	d811      	bhi.n	800472a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800470a:	4a63      	ldr	r2, [pc, #396]	; (8004898 <HAL_SPI_Init+0x200>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d009      	beq.n	8004724 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a61      	ldr	r2, [pc, #388]	; (800489c <HAL_SPI_Init+0x204>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d004      	beq.n	8004724 <HAL_SPI_Init+0x8c>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a60      	ldr	r2, [pc, #384]	; (80048a0 <HAL_SPI_Init+0x208>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d104      	bne.n	800472e <HAL_SPI_Init+0x96>
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2b10      	cmp	r3, #16
 8004728:	d901      	bls.n	800472e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e0af      	b.n	800488e <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004734:	b2db      	uxtb	r3, r3
 8004736:	2b00      	cmp	r3, #0
 8004738:	d106      	bne.n	8004748 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f7fc fec0 	bl	80014c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2202      	movs	r2, #2
 800474c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f022 0201 	bic.w	r2, r2, #1
 800475e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800476a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	699b      	ldr	r3, [r3, #24]
 8004770:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004774:	d119      	bne.n	80047aa <HAL_SPI_Init+0x112>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800477e:	d103      	bne.n	8004788 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004784:	2b00      	cmp	r3, #0
 8004786:	d008      	beq.n	800479a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800478c:	2b00      	cmp	r3, #0
 800478e:	d10c      	bne.n	80047aa <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004794:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004798:	d107      	bne.n	80047aa <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80047a8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	69da      	ldr	r2, [r3, #28]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b2:	431a      	orrs	r2, r3
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	431a      	orrs	r2, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047bc:	ea42 0103 	orr.w	r1, r2, r3
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	68da      	ldr	r2, [r3, #12]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	430a      	orrs	r2, r1
 80047ca:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d4:	431a      	orrs	r2, r3
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047da:	431a      	orrs	r2, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	699b      	ldr	r3, [r3, #24]
 80047e0:	431a      	orrs	r2, r3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	691b      	ldr	r3, [r3, #16]
 80047e6:	431a      	orrs	r2, r3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	695b      	ldr	r3, [r3, #20]
 80047ec:	431a      	orrs	r2, r3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a1b      	ldr	r3, [r3, #32]
 80047f2:	431a      	orrs	r2, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	431a      	orrs	r2, r3
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047fe:	431a      	orrs	r2, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	431a      	orrs	r2, r3
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800480a:	ea42 0103 	orr.w	r1, r2, r3
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	430a      	orrs	r2, r1
 8004818:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d113      	bne.n	800484a <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004834:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004848:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f022 0201 	bic.w	r2, r2, #1
 8004858:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004862:	2b00      	cmp	r3, #0
 8004864:	d00a      	beq.n	800487c <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	430a      	orrs	r2, r1
 800487a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2201      	movs	r2, #1
 8004888:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800488c:	2300      	movs	r3, #0
}
 800488e:	4618      	mov	r0, r3
 8004890:	3710      	adds	r7, #16
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
 8004896:	bf00      	nop
 8004898:	40013000 	.word	0x40013000
 800489c:	40003800 	.word	0x40003800
 80048a0:	40003c00 	.word	0x40003c00

080048a4 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b08a      	sub	sp, #40	; 0x28
 80048a8:	af02      	add	r7, sp, #8
 80048aa:	60f8      	str	r0, [r7, #12]
 80048ac:	60b9      	str	r1, [r7, #8]
 80048ae:	603b      	str	r3, [r7, #0]
 80048b0:	4613      	mov	r3, r2
 80048b2:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	3320      	adds	r3, #32
 80048ba:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80048bc:	2300      	movs	r3, #0
 80048be:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d101      	bne.n	80048ce <HAL_SPI_Transmit+0x2a>
 80048ca:	2302      	movs	r3, #2
 80048cc:	e1d7      	b.n	8004c7e <HAL_SPI_Transmit+0x3da>
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2201      	movs	r2, #1
 80048d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80048d6:	f7fd f853 	bl	8001980 <HAL_GetTick>
 80048da:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d007      	beq.n	80048f8 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 80048e8:	2302      	movs	r3, #2
 80048ea:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2200      	movs	r2, #0
 80048f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80048f4:	7efb      	ldrb	r3, [r7, #27]
 80048f6:	e1c2      	b.n	8004c7e <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d002      	beq.n	8004904 <HAL_SPI_Transmit+0x60>
 80048fe:	88fb      	ldrh	r3, [r7, #6]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d107      	bne.n	8004914 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2200      	movs	r2, #0
 800490c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8004910:	7efb      	ldrb	r3, [r7, #27]
 8004912:	e1b4      	b.n	8004c7e <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2203      	movs	r2, #3
 8004918:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2200      	movs	r2, #0
 8004920:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	68ba      	ldr	r2, [r7, #8]
 8004928:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	88fa      	ldrh	r2, [r7, #6]
 800492e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	88fa      	ldrh	r2, [r7, #6]
 8004936:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2200      	movs	r2, #0
 800493e:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2200      	movs	r2, #0
 8004944:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2200      	movs	r2, #0
 800494c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2200      	movs	r2, #0
 8004954:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2200      	movs	r2, #0
 800495a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8004964:	d107      	bne.n	8004976 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004974:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	685a      	ldr	r2, [r3, #4]
 800497c:	4b96      	ldr	r3, [pc, #600]	; (8004bd8 <HAL_SPI_Transmit+0x334>)
 800497e:	4013      	ands	r3, r2
 8004980:	88f9      	ldrh	r1, [r7, #6]
 8004982:	68fa      	ldr	r2, [r7, #12]
 8004984:	6812      	ldr	r2, [r2, #0]
 8004986:	430b      	orrs	r3, r1
 8004988:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f042 0201 	orr.w	r2, r2, #1
 8004998:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049a2:	d107      	bne.n	80049b4 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	2b0f      	cmp	r3, #15
 80049ba:	d947      	bls.n	8004a4c <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80049bc:	e03f      	b.n	8004a3e <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	695b      	ldr	r3, [r3, #20]
 80049c4:	f003 0302 	and.w	r3, r3, #2
 80049c8:	2b02      	cmp	r3, #2
 80049ca:	d114      	bne.n	80049f6 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	6812      	ldr	r2, [r2, #0]
 80049d6:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049dc:	1d1a      	adds	r2, r3, #4
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	3b01      	subs	r3, #1
 80049ec:	b29a      	uxth	r2, r3
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80049f4:	e023      	b.n	8004a3e <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049f6:	f7fc ffc3 	bl	8001980 <HAL_GetTick>
 80049fa:	4602      	mov	r2, r0
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	1ad3      	subs	r3, r2, r3
 8004a00:	683a      	ldr	r2, [r7, #0]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d803      	bhi.n	8004a0e <HAL_SPI_Transmit+0x16a>
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a0c:	d102      	bne.n	8004a14 <HAL_SPI_Transmit+0x170>
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d114      	bne.n	8004a3e <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004a14:	68f8      	ldr	r0, [r7, #12]
 8004a16:	f000 fb5f 	bl	80050d8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a28:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2201      	movs	r2, #1
 8004a36:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	e11f      	b.n	8004c7e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d1b9      	bne.n	80049be <HAL_SPI_Transmit+0x11a>
 8004a4a:	e0f2      	b.n	8004c32 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	2b07      	cmp	r3, #7
 8004a52:	f240 80e7 	bls.w	8004c24 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8004a56:	e05d      	b.n	8004b14 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	695b      	ldr	r3, [r3, #20]
 8004a5e:	f003 0302 	and.w	r3, r3, #2
 8004a62:	2b02      	cmp	r3, #2
 8004a64:	d132      	bne.n	8004acc <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004a6c:	b29b      	uxth	r3, r3
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d918      	bls.n	8004aa4 <HAL_SPI_Transmit+0x200>
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d014      	beq.n	8004aa4 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	6812      	ldr	r2, [r2, #0]
 8004a84:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a8a:	1d1a      	adds	r2, r3, #4
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	3b02      	subs	r3, #2
 8004a9a:	b29a      	uxth	r2, r3
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8004aa2:	e037      	b.n	8004b14 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aa8:	881a      	ldrh	r2, [r3, #0]
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ab2:	1c9a      	adds	r2, r3, #2
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	3b01      	subs	r3, #1
 8004ac2:	b29a      	uxth	r2, r3
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8004aca:	e023      	b.n	8004b14 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004acc:	f7fc ff58 	bl	8001980 <HAL_GetTick>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	683a      	ldr	r2, [r7, #0]
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d803      	bhi.n	8004ae4 <HAL_SPI_Transmit+0x240>
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ae2:	d102      	bne.n	8004aea <HAL_SPI_Transmit+0x246>
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d114      	bne.n	8004b14 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004aea:	68f8      	ldr	r0, [r7, #12]
 8004aec:	f000 faf4 	bl	80050d8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2200      	movs	r2, #0
 8004af4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004afe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8004b10:	2303      	movs	r3, #3
 8004b12:	e0b4      	b.n	8004c7e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d19b      	bne.n	8004a58 <HAL_SPI_Transmit+0x1b4>
 8004b20:	e087      	b.n	8004c32 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	695b      	ldr	r3, [r3, #20]
 8004b28:	f003 0302 	and.w	r3, r3, #2
 8004b2c:	2b02      	cmp	r3, #2
 8004b2e:	d155      	bne.n	8004bdc <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	2b03      	cmp	r3, #3
 8004b3a:	d918      	bls.n	8004b6e <HAL_SPI_Transmit+0x2ca>
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b40:	2b40      	cmp	r3, #64	; 0x40
 8004b42:	d914      	bls.n	8004b6e <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	6812      	ldr	r2, [r2, #0]
 8004b4e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b54:	1d1a      	adds	r2, r3, #4
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	3b04      	subs	r3, #4
 8004b64:	b29a      	uxth	r2, r3
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8004b6c:	e05a      	b.n	8004c24 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d917      	bls.n	8004baa <HAL_SPI_Transmit+0x306>
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d013      	beq.n	8004baa <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b86:	881a      	ldrh	r2, [r3, #0]
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b90:	1c9a      	adds	r2, r3, #2
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	3b02      	subs	r3, #2
 8004ba0:	b29a      	uxth	r2, r3
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8004ba8:	e03c      	b.n	8004c24 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	3320      	adds	r3, #32
 8004bb4:	7812      	ldrb	r2, [r2, #0]
 8004bb6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bbc:	1c5a      	adds	r2, r3, #1
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	3b01      	subs	r3, #1
 8004bcc:	b29a      	uxth	r2, r3
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8004bd4:	e026      	b.n	8004c24 <HAL_SPI_Transmit+0x380>
 8004bd6:	bf00      	nop
 8004bd8:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bdc:	f7fc fed0 	bl	8001980 <HAL_GetTick>
 8004be0:	4602      	mov	r2, r0
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	1ad3      	subs	r3, r2, r3
 8004be6:	683a      	ldr	r2, [r7, #0]
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d803      	bhi.n	8004bf4 <HAL_SPI_Transmit+0x350>
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bf2:	d102      	bne.n	8004bfa <HAL_SPI_Transmit+0x356>
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d114      	bne.n	8004c24 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004bfa:	68f8      	ldr	r0, [r7, #12]
 8004bfc:	f000 fa6c 	bl	80050d8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2200      	movs	r2, #0
 8004c04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c0e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8004c20:	2303      	movs	r3, #3
 8004c22:	e02c      	b.n	8004c7e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	f47f af78 	bne.w	8004b22 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	9300      	str	r3, [sp, #0]
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	2108      	movs	r1, #8
 8004c3c:	68f8      	ldr	r0, [r7, #12]
 8004c3e:	f000 faeb 	bl	8005218 <SPI_WaitOnFlagUntilTimeout>
 8004c42:	4603      	mov	r3, r0
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d007      	beq.n	8004c58 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c4e:	f043 0220 	orr.w	r2, r3, #32
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8004c58:	68f8      	ldr	r0, [r7, #12]
 8004c5a:	f000 fa3d 	bl	80050d8 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2200      	movs	r2, #0
 8004c62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2201      	movs	r2, #1
 8004c6a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d001      	beq.n	8004c7c <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e000      	b.n	8004c7e <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8004c7c:	7efb      	ldrb	r3, [r7, #27]
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3720      	adds	r7, #32
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop

08004c88 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b08e      	sub	sp, #56	; 0x38
 8004c8c:	af02      	add	r7, sp, #8
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	60b9      	str	r1, [r7, #8]
 8004c92:	607a      	str	r2, [r7, #4]
 8004c94:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004c96:	2300      	movs	r3, #0
 8004c98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	3320      	adds	r3, #32
 8004ca2:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	3330      	adds	r3, #48	; 0x30
 8004caa:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d101      	bne.n	8004cba <HAL_SPI_TransmitReceive+0x32>
 8004cb6:	2302      	movs	r3, #2
 8004cb8:	e209      	b.n	80050ce <HAL_SPI_TransmitReceive+0x446>
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004cc2:	f7fc fe5d 	bl	8001980 <HAL_GetTick>
 8004cc6:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8004cc8:	887b      	ldrh	r3, [r7, #2]
 8004cca:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 8004ccc:	887b      	ldrh	r3, [r7, #2]
 8004cce:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004cd6:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004cde:	7efb      	ldrb	r3, [r7, #27]
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d014      	beq.n	8004d0e <HAL_SPI_TransmitReceive+0x86>
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cea:	d106      	bne.n	8004cfa <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d102      	bne.n	8004cfa <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8004cf4:	7efb      	ldrb	r3, [r7, #27]
 8004cf6:	2b04      	cmp	r3, #4
 8004cf8:	d009      	beq.n	8004d0e <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 8004cfa:	2302      	movs	r3, #2
 8004cfc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2200      	movs	r2, #0
 8004d04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8004d08:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004d0c:	e1df      	b.n	80050ce <HAL_SPI_TransmitReceive+0x446>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d005      	beq.n	8004d20 <HAL_SPI_TransmitReceive+0x98>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d002      	beq.n	8004d20 <HAL_SPI_TransmitReceive+0x98>
 8004d1a:	887b      	ldrh	r3, [r7, #2]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d109      	bne.n	8004d34 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8004d2e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004d32:	e1cc      	b.n	80050ce <HAL_SPI_TransmitReceive+0x446>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	2b04      	cmp	r3, #4
 8004d3e:	d003      	beq.n	8004d48 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2205      	movs	r2, #5
 8004d44:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	887a      	ldrh	r2, [r7, #2]
 8004d5a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	887a      	ldrh	r2, [r7, #2]
 8004d62:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	68ba      	ldr	r2, [r7, #8]
 8004d6a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	887a      	ldrh	r2, [r7, #2]
 8004d70:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	887a      	ldrh	r2, [r7, #2]
 8004d78:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2200      	movs	r2, #0
 8004d86:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	685a      	ldr	r2, [r3, #4]
 8004d8e:	4b82      	ldr	r3, [pc, #520]	; (8004f98 <HAL_SPI_TransmitReceive+0x310>)
 8004d90:	4013      	ands	r3, r2
 8004d92:	8879      	ldrh	r1, [r7, #2]
 8004d94:	68fa      	ldr	r2, [r7, #12]
 8004d96:	6812      	ldr	r2, [r2, #0]
 8004d98:	430b      	orrs	r3, r1
 8004d9a:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f042 0201 	orr.w	r2, r2, #1
 8004daa:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004db4:	d107      	bne.n	8004dc6 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dc4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	2b0f      	cmp	r3, #15
 8004dcc:	d970      	bls.n	8004eb0 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8004dce:	e068      	b.n	8004ea2 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	695b      	ldr	r3, [r3, #20]
 8004dd6:	f003 0302 	and.w	r3, r3, #2
 8004dda:	2b02      	cmp	r3, #2
 8004ddc:	d11a      	bne.n	8004e14 <HAL_SPI_TransmitReceive+0x18c>
 8004dde:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d017      	beq.n	8004e14 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	6812      	ldr	r2, [r2, #0]
 8004dee:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004df4:	1d1a      	adds	r2, r3, #4
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	3b01      	subs	r3, #1
 8004e04:	b29a      	uxth	r2, r3
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004e12:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	695a      	ldr	r2, [r3, #20]
 8004e1a:	f248 0308 	movw	r3, #32776	; 0x8008
 8004e1e:	4013      	ands	r3, r2
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d01a      	beq.n	8004e5a <HAL_SPI_TransmitReceive+0x1d2>
 8004e24:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d017      	beq.n	8004e5a <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e32:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004e34:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e3a:	1d1a      	adds	r2, r3, #4
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	3b01      	subs	r3, #1
 8004e4a:	b29a      	uxth	r2, r3
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004e58:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e5a:	f7fc fd91 	bl	8001980 <HAL_GetTick>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	1ad3      	subs	r3, r2, r3
 8004e64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d803      	bhi.n	8004e72 <HAL_SPI_TransmitReceive+0x1ea>
 8004e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e70:	d102      	bne.n	8004e78 <HAL_SPI_TransmitReceive+0x1f0>
 8004e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d114      	bne.n	8004ea2 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8004e78:	68f8      	ldr	r0, [r7, #12]
 8004e7a:	f000 f92d 	bl	80050d8 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2200      	movs	r2, #0
 8004e82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e8c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2201      	movs	r2, #1
 8004e9a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	e115      	b.n	80050ce <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8004ea2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d193      	bne.n	8004dd0 <HAL_SPI_TransmitReceive+0x148>
 8004ea8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d190      	bne.n	8004dd0 <HAL_SPI_TransmitReceive+0x148>
 8004eae:	e0e7      	b.n	8005080 <HAL_SPI_TransmitReceive+0x3f8>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	2b07      	cmp	r3, #7
 8004eb6:	f240 80dd 	bls.w	8005074 <HAL_SPI_TransmitReceive+0x3ec>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8004eba:	e066      	b.n	8004f8a <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	695b      	ldr	r3, [r3, #20]
 8004ec2:	f003 0302 	and.w	r3, r3, #2
 8004ec6:	2b02      	cmp	r3, #2
 8004ec8:	d119      	bne.n	8004efe <HAL_SPI_TransmitReceive+0x276>
 8004eca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d016      	beq.n	8004efe <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ed4:	881a      	ldrh	r2, [r3, #0]
 8004ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed8:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ede:	1c9a      	adds	r2, r3, #2
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	3b01      	subs	r3, #1
 8004eee:	b29a      	uxth	r2, r3
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004efc:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	695b      	ldr	r3, [r3, #20]
 8004f04:	f003 0301 	and.w	r3, r3, #1
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d11a      	bne.n	8004f42 <HAL_SPI_TransmitReceive+0x2ba>
 8004f0c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d017      	beq.n	8004f42 <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f16:	6a3a      	ldr	r2, [r7, #32]
 8004f18:	8812      	ldrh	r2, [r2, #0]
 8004f1a:	b292      	uxth	r2, r2
 8004f1c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f22:	1c9a      	adds	r2, r3, #2
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	3b01      	subs	r3, #1
 8004f32:	b29a      	uxth	r2, r3
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004f40:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f42:	f7fc fd1d 	bl	8001980 <HAL_GetTick>
 8004f46:	4602      	mov	r2, r0
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	1ad3      	subs	r3, r2, r3
 8004f4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d803      	bhi.n	8004f5a <HAL_SPI_TransmitReceive+0x2d2>
 8004f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f58:	d102      	bne.n	8004f60 <HAL_SPI_TransmitReceive+0x2d8>
 8004f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d114      	bne.n	8004f8a <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8004f60:	68f8      	ldr	r0, [r7, #12]
 8004f62:	f000 f8b9 	bl	80050d8 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f74:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2201      	movs	r2, #1
 8004f82:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8004f86:	2303      	movs	r3, #3
 8004f88:	e0a1      	b.n	80050ce <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8004f8a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d195      	bne.n	8004ebc <HAL_SPI_TransmitReceive+0x234>
 8004f90:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d192      	bne.n	8004ebc <HAL_SPI_TransmitReceive+0x234>
 8004f96:	e073      	b.n	8005080 <HAL_SPI_TransmitReceive+0x3f8>
 8004f98:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	695b      	ldr	r3, [r3, #20]
 8004fa2:	f003 0302 	and.w	r3, r3, #2
 8004fa6:	2b02      	cmp	r3, #2
 8004fa8:	d11b      	bne.n	8004fe2 <HAL_SPI_TransmitReceive+0x35a>
 8004faa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d018      	beq.n	8004fe2 <HAL_SPI_TransmitReceive+0x35a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	3320      	adds	r3, #32
 8004fba:	7812      	ldrb	r2, [r2, #0]
 8004fbc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fc2:	1c5a      	adds	r2, r3, #1
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	3b01      	subs	r3, #1
 8004fd2:	b29a      	uxth	r2, r3
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004fe0:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	695b      	ldr	r3, [r3, #20]
 8004fe8:	f003 0301 	and.w	r3, r3, #1
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d11d      	bne.n	800502c <HAL_SPI_TransmitReceive+0x3a4>
 8004ff0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d01a      	beq.n	800502c <HAL_SPI_TransmitReceive+0x3a4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005002:	7812      	ldrb	r2, [r2, #0]
 8005004:	b2d2      	uxtb	r2, r2
 8005006:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800500c:	1c5a      	adds	r2, r3, #1
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005018:	b29b      	uxth	r3, r3
 800501a:	3b01      	subs	r3, #1
 800501c:	b29a      	uxth	r2, r3
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800502a:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800502c:	f7fc fca8 	bl	8001980 <HAL_GetTick>
 8005030:	4602      	mov	r2, r0
 8005032:	69fb      	ldr	r3, [r7, #28]
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005038:	429a      	cmp	r2, r3
 800503a:	d803      	bhi.n	8005044 <HAL_SPI_TransmitReceive+0x3bc>
 800503c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800503e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005042:	d102      	bne.n	800504a <HAL_SPI_TransmitReceive+0x3c2>
 8005044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005046:	2b00      	cmp	r3, #0
 8005048:	d114      	bne.n	8005074 <HAL_SPI_TransmitReceive+0x3ec>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800504a:	68f8      	ldr	r0, [r7, #12]
 800504c:	f000 f844 	bl	80050d8 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2200      	movs	r2, #0
 8005054:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800505e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8005070:	2303      	movs	r3, #3
 8005072:	e02c      	b.n	80050ce <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005074:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005076:	2b00      	cmp	r3, #0
 8005078:	d190      	bne.n	8004f9c <HAL_SPI_TransmitReceive+0x314>
 800507a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800507c:	2b00      	cmp	r3, #0
 800507e:	d18d      	bne.n	8004f9c <HAL_SPI_TransmitReceive+0x314>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8005080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005082:	9300      	str	r3, [sp, #0]
 8005084:	69fb      	ldr	r3, [r7, #28]
 8005086:	2200      	movs	r2, #0
 8005088:	2108      	movs	r1, #8
 800508a:	68f8      	ldr	r0, [r7, #12]
 800508c:	f000 f8c4 	bl	8005218 <SPI_WaitOnFlagUntilTimeout>
 8005090:	4603      	mov	r3, r0
 8005092:	2b00      	cmp	r3, #0
 8005094:	d007      	beq.n	80050a6 <HAL_SPI_TransmitReceive+0x41e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800509c:	f043 0220 	orr.w	r2, r3, #32
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80050a6:	68f8      	ldr	r0, [r7, #12]
 80050a8:	f000 f816 	bl	80050d8 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2200      	movs	r2, #0
 80050b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d001      	beq.n	80050ca <HAL_SPI_TransmitReceive+0x442>
  {
    return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e001      	b.n	80050ce <HAL_SPI_TransmitReceive+0x446>
  }
  return errorcode;
 80050ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3730      	adds	r7, #48	; 0x30
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}
 80050d6:	bf00      	nop

080050d8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80050d8:	b480      	push	{r7}
 80050da:	b085      	sub	sp, #20
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	695b      	ldr	r3, [r3, #20]
 80050e6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	699a      	ldr	r2, [r3, #24]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f042 0208 	orr.w	r2, r2, #8
 80050f6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	699a      	ldr	r2, [r3, #24]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f042 0210 	orr.w	r2, r2, #16
 8005106:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f022 0201 	bic.w	r2, r2, #1
 8005116:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	6919      	ldr	r1, [r3, #16]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	4b3c      	ldr	r3, [pc, #240]	; (8005214 <SPI_CloseTransfer+0x13c>)
 8005124:	400b      	ands	r3, r1
 8005126:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	689a      	ldr	r2, [r3, #8]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8005136:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800513e:	b2db      	uxtb	r3, r3
 8005140:	2b04      	cmp	r3, #4
 8005142:	d014      	beq.n	800516e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f003 0320 	and.w	r3, r3, #32
 800514a:	2b00      	cmp	r3, #0
 800514c:	d00f      	beq.n	800516e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005154:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	699a      	ldr	r2, [r3, #24]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f042 0220 	orr.w	r2, r2, #32
 800516c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005174:	b2db      	uxtb	r3, r3
 8005176:	2b03      	cmp	r3, #3
 8005178:	d014      	beq.n	80051a4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005180:	2b00      	cmp	r3, #0
 8005182:	d00f      	beq.n	80051a4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800518a:	f043 0204 	orr.w	r2, r3, #4
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	699a      	ldr	r2, [r3, #24]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051a2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d00f      	beq.n	80051ce <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051b4:	f043 0201 	orr.w	r2, r3, #1
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	699a      	ldr	r2, [r3, #24]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051cc:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d00f      	beq.n	80051f8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051de:	f043 0208 	orr.w	r2, r3, #8
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	699a      	ldr	r2, [r3, #24]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051f6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2200      	movs	r2, #0
 8005204:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8005208:	bf00      	nop
 800520a:	3714      	adds	r7, #20
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr
 8005214:	fffffc90 	.word	0xfffffc90

08005218 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b084      	sub	sp, #16
 800521c:	af00      	add	r7, sp, #0
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	60b9      	str	r1, [r7, #8]
 8005222:	603b      	str	r3, [r7, #0]
 8005224:	4613      	mov	r3, r2
 8005226:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005228:	e010      	b.n	800524c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800522a:	f7fc fba9 	bl	8001980 <HAL_GetTick>
 800522e:	4602      	mov	r2, r0
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	1ad3      	subs	r3, r2, r3
 8005234:	69ba      	ldr	r2, [r7, #24]
 8005236:	429a      	cmp	r2, r3
 8005238:	d803      	bhi.n	8005242 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800523a:	69bb      	ldr	r3, [r7, #24]
 800523c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005240:	d102      	bne.n	8005248 <SPI_WaitOnFlagUntilTimeout+0x30>
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d101      	bne.n	800524c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8005248:	2303      	movs	r3, #3
 800524a:	e00f      	b.n	800526c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	695a      	ldr	r2, [r3, #20]
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	4013      	ands	r3, r2
 8005256:	68ba      	ldr	r2, [r7, #8]
 8005258:	429a      	cmp	r2, r3
 800525a:	bf0c      	ite	eq
 800525c:	2301      	moveq	r3, #1
 800525e:	2300      	movne	r3, #0
 8005260:	b2db      	uxtb	r3, r3
 8005262:	461a      	mov	r2, r3
 8005264:	79fb      	ldrb	r3, [r7, #7]
 8005266:	429a      	cmp	r2, r3
 8005268:	d0df      	beq.n	800522a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800526a:	2300      	movs	r3, #0
}
 800526c:	4618      	mov	r0, r3
 800526e:	3710      	adds	r7, #16
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}

08005274 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8005274:	b480      	push	{r7}
 8005276:	b085      	sub	sp, #20
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005280:	095b      	lsrs	r3, r3, #5
 8005282:	3301      	adds	r3, #1
 8005284:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	68db      	ldr	r3, [r3, #12]
 800528a:	3301      	adds	r3, #1
 800528c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	3307      	adds	r3, #7
 8005292:	08db      	lsrs	r3, r3, #3
 8005294:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	68fa      	ldr	r2, [r7, #12]
 800529a:	fb02 f303 	mul.w	r3, r2, r3
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3714      	adds	r7, #20
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr

080052aa <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052aa:	b580      	push	{r7, lr}
 80052ac:	b082      	sub	sp, #8
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d101      	bne.n	80052bc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	e042      	b.n	8005342 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d106      	bne.n	80052d4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2200      	movs	r2, #0
 80052ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f7fc f986 	bl	80015e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2224      	movs	r2, #36	; 0x24
 80052d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f022 0201 	bic.w	r2, r2, #1
 80052ea:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f000 f82d 	bl	800534c <UART_SetConfig>
 80052f2:	4603      	mov	r3, r0
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d101      	bne.n	80052fc <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	e022      	b.n	8005342 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005300:	2b00      	cmp	r3, #0
 8005302:	d002      	beq.n	800530a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f000 fd89 	bl	8005e1c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	685a      	ldr	r2, [r3, #4]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005318:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	689a      	ldr	r2, [r3, #8]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005328:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f042 0201 	orr.w	r2, r2, #1
 8005338:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f000 fe10 	bl	8005f60 <UART_CheckIdleState>
 8005340:	4603      	mov	r3, r0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3708      	adds	r7, #8
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
	...

0800534c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800534c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005350:	b092      	sub	sp, #72	; 0x48
 8005352:	af00      	add	r7, sp, #0
 8005354:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005356:	2300      	movs	r3, #0
 8005358:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	689a      	ldr	r2, [r3, #8]
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	691b      	ldr	r3, [r3, #16]
 8005364:	431a      	orrs	r2, r3
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	695b      	ldr	r3, [r3, #20]
 800536a:	431a      	orrs	r2, r3
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	69db      	ldr	r3, [r3, #28]
 8005370:	4313      	orrs	r3, r2
 8005372:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	4bbe      	ldr	r3, [pc, #760]	; (8005674 <UART_SetConfig+0x328>)
 800537c:	4013      	ands	r3, r2
 800537e:	697a      	ldr	r2, [r7, #20]
 8005380:	6812      	ldr	r2, [r2, #0]
 8005382:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005384:	430b      	orrs	r3, r1
 8005386:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	68da      	ldr	r2, [r3, #12]
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	430a      	orrs	r2, r1
 800539c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	699b      	ldr	r3, [r3, #24]
 80053a2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4ab3      	ldr	r2, [pc, #716]	; (8005678 <UART_SetConfig+0x32c>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d004      	beq.n	80053b8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	6a1b      	ldr	r3, [r3, #32]
 80053b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80053b4:	4313      	orrs	r3, r2
 80053b6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	689a      	ldr	r2, [r3, #8]
 80053be:	4baf      	ldr	r3, [pc, #700]	; (800567c <UART_SetConfig+0x330>)
 80053c0:	4013      	ands	r3, r2
 80053c2:	697a      	ldr	r2, [r7, #20]
 80053c4:	6812      	ldr	r2, [r2, #0]
 80053c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80053c8:	430b      	orrs	r3, r1
 80053ca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d2:	f023 010f 	bic.w	r1, r3, #15
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	430a      	orrs	r2, r1
 80053e0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4aa6      	ldr	r2, [pc, #664]	; (8005680 <UART_SetConfig+0x334>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d177      	bne.n	80054dc <UART_SetConfig+0x190>
 80053ec:	4ba5      	ldr	r3, [pc, #660]	; (8005684 <UART_SetConfig+0x338>)
 80053ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80053f4:	2b28      	cmp	r3, #40	; 0x28
 80053f6:	d86d      	bhi.n	80054d4 <UART_SetConfig+0x188>
 80053f8:	a201      	add	r2, pc, #4	; (adr r2, 8005400 <UART_SetConfig+0xb4>)
 80053fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053fe:	bf00      	nop
 8005400:	080054a5 	.word	0x080054a5
 8005404:	080054d5 	.word	0x080054d5
 8005408:	080054d5 	.word	0x080054d5
 800540c:	080054d5 	.word	0x080054d5
 8005410:	080054d5 	.word	0x080054d5
 8005414:	080054d5 	.word	0x080054d5
 8005418:	080054d5 	.word	0x080054d5
 800541c:	080054d5 	.word	0x080054d5
 8005420:	080054ad 	.word	0x080054ad
 8005424:	080054d5 	.word	0x080054d5
 8005428:	080054d5 	.word	0x080054d5
 800542c:	080054d5 	.word	0x080054d5
 8005430:	080054d5 	.word	0x080054d5
 8005434:	080054d5 	.word	0x080054d5
 8005438:	080054d5 	.word	0x080054d5
 800543c:	080054d5 	.word	0x080054d5
 8005440:	080054b5 	.word	0x080054b5
 8005444:	080054d5 	.word	0x080054d5
 8005448:	080054d5 	.word	0x080054d5
 800544c:	080054d5 	.word	0x080054d5
 8005450:	080054d5 	.word	0x080054d5
 8005454:	080054d5 	.word	0x080054d5
 8005458:	080054d5 	.word	0x080054d5
 800545c:	080054d5 	.word	0x080054d5
 8005460:	080054bd 	.word	0x080054bd
 8005464:	080054d5 	.word	0x080054d5
 8005468:	080054d5 	.word	0x080054d5
 800546c:	080054d5 	.word	0x080054d5
 8005470:	080054d5 	.word	0x080054d5
 8005474:	080054d5 	.word	0x080054d5
 8005478:	080054d5 	.word	0x080054d5
 800547c:	080054d5 	.word	0x080054d5
 8005480:	080054c5 	.word	0x080054c5
 8005484:	080054d5 	.word	0x080054d5
 8005488:	080054d5 	.word	0x080054d5
 800548c:	080054d5 	.word	0x080054d5
 8005490:	080054d5 	.word	0x080054d5
 8005494:	080054d5 	.word	0x080054d5
 8005498:	080054d5 	.word	0x080054d5
 800549c:	080054d5 	.word	0x080054d5
 80054a0:	080054cd 	.word	0x080054cd
 80054a4:	2301      	movs	r3, #1
 80054a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054aa:	e222      	b.n	80058f2 <UART_SetConfig+0x5a6>
 80054ac:	2304      	movs	r3, #4
 80054ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054b2:	e21e      	b.n	80058f2 <UART_SetConfig+0x5a6>
 80054b4:	2308      	movs	r3, #8
 80054b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054ba:	e21a      	b.n	80058f2 <UART_SetConfig+0x5a6>
 80054bc:	2310      	movs	r3, #16
 80054be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054c2:	e216      	b.n	80058f2 <UART_SetConfig+0x5a6>
 80054c4:	2320      	movs	r3, #32
 80054c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054ca:	e212      	b.n	80058f2 <UART_SetConfig+0x5a6>
 80054cc:	2340      	movs	r3, #64	; 0x40
 80054ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054d2:	e20e      	b.n	80058f2 <UART_SetConfig+0x5a6>
 80054d4:	2380      	movs	r3, #128	; 0x80
 80054d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80054da:	e20a      	b.n	80058f2 <UART_SetConfig+0x5a6>
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a69      	ldr	r2, [pc, #420]	; (8005688 <UART_SetConfig+0x33c>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d130      	bne.n	8005548 <UART_SetConfig+0x1fc>
 80054e6:	4b67      	ldr	r3, [pc, #412]	; (8005684 <UART_SetConfig+0x338>)
 80054e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ea:	f003 0307 	and.w	r3, r3, #7
 80054ee:	2b05      	cmp	r3, #5
 80054f0:	d826      	bhi.n	8005540 <UART_SetConfig+0x1f4>
 80054f2:	a201      	add	r2, pc, #4	; (adr r2, 80054f8 <UART_SetConfig+0x1ac>)
 80054f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054f8:	08005511 	.word	0x08005511
 80054fc:	08005519 	.word	0x08005519
 8005500:	08005521 	.word	0x08005521
 8005504:	08005529 	.word	0x08005529
 8005508:	08005531 	.word	0x08005531
 800550c:	08005539 	.word	0x08005539
 8005510:	2300      	movs	r3, #0
 8005512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005516:	e1ec      	b.n	80058f2 <UART_SetConfig+0x5a6>
 8005518:	2304      	movs	r3, #4
 800551a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800551e:	e1e8      	b.n	80058f2 <UART_SetConfig+0x5a6>
 8005520:	2308      	movs	r3, #8
 8005522:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005526:	e1e4      	b.n	80058f2 <UART_SetConfig+0x5a6>
 8005528:	2310      	movs	r3, #16
 800552a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800552e:	e1e0      	b.n	80058f2 <UART_SetConfig+0x5a6>
 8005530:	2320      	movs	r3, #32
 8005532:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005536:	e1dc      	b.n	80058f2 <UART_SetConfig+0x5a6>
 8005538:	2340      	movs	r3, #64	; 0x40
 800553a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800553e:	e1d8      	b.n	80058f2 <UART_SetConfig+0x5a6>
 8005540:	2380      	movs	r3, #128	; 0x80
 8005542:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005546:	e1d4      	b.n	80058f2 <UART_SetConfig+0x5a6>
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a4f      	ldr	r2, [pc, #316]	; (800568c <UART_SetConfig+0x340>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d130      	bne.n	80055b4 <UART_SetConfig+0x268>
 8005552:	4b4c      	ldr	r3, [pc, #304]	; (8005684 <UART_SetConfig+0x338>)
 8005554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005556:	f003 0307 	and.w	r3, r3, #7
 800555a:	2b05      	cmp	r3, #5
 800555c:	d826      	bhi.n	80055ac <UART_SetConfig+0x260>
 800555e:	a201      	add	r2, pc, #4	; (adr r2, 8005564 <UART_SetConfig+0x218>)
 8005560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005564:	0800557d 	.word	0x0800557d
 8005568:	08005585 	.word	0x08005585
 800556c:	0800558d 	.word	0x0800558d
 8005570:	08005595 	.word	0x08005595
 8005574:	0800559d 	.word	0x0800559d
 8005578:	080055a5 	.word	0x080055a5
 800557c:	2300      	movs	r3, #0
 800557e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005582:	e1b6      	b.n	80058f2 <UART_SetConfig+0x5a6>
 8005584:	2304      	movs	r3, #4
 8005586:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800558a:	e1b2      	b.n	80058f2 <UART_SetConfig+0x5a6>
 800558c:	2308      	movs	r3, #8
 800558e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005592:	e1ae      	b.n	80058f2 <UART_SetConfig+0x5a6>
 8005594:	2310      	movs	r3, #16
 8005596:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800559a:	e1aa      	b.n	80058f2 <UART_SetConfig+0x5a6>
 800559c:	2320      	movs	r3, #32
 800559e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055a2:	e1a6      	b.n	80058f2 <UART_SetConfig+0x5a6>
 80055a4:	2340      	movs	r3, #64	; 0x40
 80055a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055aa:	e1a2      	b.n	80058f2 <UART_SetConfig+0x5a6>
 80055ac:	2380      	movs	r3, #128	; 0x80
 80055ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055b2:	e19e      	b.n	80058f2 <UART_SetConfig+0x5a6>
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a35      	ldr	r2, [pc, #212]	; (8005690 <UART_SetConfig+0x344>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d130      	bne.n	8005620 <UART_SetConfig+0x2d4>
 80055be:	4b31      	ldr	r3, [pc, #196]	; (8005684 <UART_SetConfig+0x338>)
 80055c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055c2:	f003 0307 	and.w	r3, r3, #7
 80055c6:	2b05      	cmp	r3, #5
 80055c8:	d826      	bhi.n	8005618 <UART_SetConfig+0x2cc>
 80055ca:	a201      	add	r2, pc, #4	; (adr r2, 80055d0 <UART_SetConfig+0x284>)
 80055cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055d0:	080055e9 	.word	0x080055e9
 80055d4:	080055f1 	.word	0x080055f1
 80055d8:	080055f9 	.word	0x080055f9
 80055dc:	08005601 	.word	0x08005601
 80055e0:	08005609 	.word	0x08005609
 80055e4:	08005611 	.word	0x08005611
 80055e8:	2300      	movs	r3, #0
 80055ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055ee:	e180      	b.n	80058f2 <UART_SetConfig+0x5a6>
 80055f0:	2304      	movs	r3, #4
 80055f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055f6:	e17c      	b.n	80058f2 <UART_SetConfig+0x5a6>
 80055f8:	2308      	movs	r3, #8
 80055fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80055fe:	e178      	b.n	80058f2 <UART_SetConfig+0x5a6>
 8005600:	2310      	movs	r3, #16
 8005602:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005606:	e174      	b.n	80058f2 <UART_SetConfig+0x5a6>
 8005608:	2320      	movs	r3, #32
 800560a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800560e:	e170      	b.n	80058f2 <UART_SetConfig+0x5a6>
 8005610:	2340      	movs	r3, #64	; 0x40
 8005612:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005616:	e16c      	b.n	80058f2 <UART_SetConfig+0x5a6>
 8005618:	2380      	movs	r3, #128	; 0x80
 800561a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800561e:	e168      	b.n	80058f2 <UART_SetConfig+0x5a6>
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a1b      	ldr	r2, [pc, #108]	; (8005694 <UART_SetConfig+0x348>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d142      	bne.n	80056b0 <UART_SetConfig+0x364>
 800562a:	4b16      	ldr	r3, [pc, #88]	; (8005684 <UART_SetConfig+0x338>)
 800562c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800562e:	f003 0307 	and.w	r3, r3, #7
 8005632:	2b05      	cmp	r3, #5
 8005634:	d838      	bhi.n	80056a8 <UART_SetConfig+0x35c>
 8005636:	a201      	add	r2, pc, #4	; (adr r2, 800563c <UART_SetConfig+0x2f0>)
 8005638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800563c:	08005655 	.word	0x08005655
 8005640:	0800565d 	.word	0x0800565d
 8005644:	08005665 	.word	0x08005665
 8005648:	0800566d 	.word	0x0800566d
 800564c:	08005699 	.word	0x08005699
 8005650:	080056a1 	.word	0x080056a1
 8005654:	2300      	movs	r3, #0
 8005656:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800565a:	e14a      	b.n	80058f2 <UART_SetConfig+0x5a6>
 800565c:	2304      	movs	r3, #4
 800565e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005662:	e146      	b.n	80058f2 <UART_SetConfig+0x5a6>
 8005664:	2308      	movs	r3, #8
 8005666:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800566a:	e142      	b.n	80058f2 <UART_SetConfig+0x5a6>
 800566c:	2310      	movs	r3, #16
 800566e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005672:	e13e      	b.n	80058f2 <UART_SetConfig+0x5a6>
 8005674:	cfff69f3 	.word	0xcfff69f3
 8005678:	58000c00 	.word	0x58000c00
 800567c:	11fff4ff 	.word	0x11fff4ff
 8005680:	40011000 	.word	0x40011000
 8005684:	58024400 	.word	0x58024400
 8005688:	40004400 	.word	0x40004400
 800568c:	40004800 	.word	0x40004800
 8005690:	40004c00 	.word	0x40004c00
 8005694:	40005000 	.word	0x40005000
 8005698:	2320      	movs	r3, #32
 800569a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800569e:	e128      	b.n	80058f2 <UART_SetConfig+0x5a6>
 80056a0:	2340      	movs	r3, #64	; 0x40
 80056a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056a6:	e124      	b.n	80058f2 <UART_SetConfig+0x5a6>
 80056a8:	2380      	movs	r3, #128	; 0x80
 80056aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80056ae:	e120      	b.n	80058f2 <UART_SetConfig+0x5a6>
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4acb      	ldr	r2, [pc, #812]	; (80059e4 <UART_SetConfig+0x698>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d176      	bne.n	80057a8 <UART_SetConfig+0x45c>
 80056ba:	4bcb      	ldr	r3, [pc, #812]	; (80059e8 <UART_SetConfig+0x69c>)
 80056bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80056c2:	2b28      	cmp	r3, #40	; 0x28
 80056c4:	d86c      	bhi.n	80057a0 <UART_SetConfig+0x454>
 80056c6:	a201      	add	r2, pc, #4	; (adr r2, 80056cc <UART_SetConfig+0x380>)
 80056c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056cc:	08005771 	.word	0x08005771
 80056d0:	080057a1 	.word	0x080057a1
 80056d4:	080057a1 	.word	0x080057a1
 80056d8:	080057a1 	.word	0x080057a1
 80056dc:	080057a1 	.word	0x080057a1
 80056e0:	080057a1 	.word	0x080057a1
 80056e4:	080057a1 	.word	0x080057a1
 80056e8:	080057a1 	.word	0x080057a1
 80056ec:	08005779 	.word	0x08005779
 80056f0:	080057a1 	.word	0x080057a1
 80056f4:	080057a1 	.word	0x080057a1
 80056f8:	080057a1 	.word	0x080057a1
 80056fc:	080057a1 	.word	0x080057a1
 8005700:	080057a1 	.word	0x080057a1
 8005704:	080057a1 	.word	0x080057a1
 8005708:	080057a1 	.word	0x080057a1
 800570c:	08005781 	.word	0x08005781
 8005710:	080057a1 	.word	0x080057a1
 8005714:	080057a1 	.word	0x080057a1
 8005718:	080057a1 	.word	0x080057a1
 800571c:	080057a1 	.word	0x080057a1
 8005720:	080057a1 	.word	0x080057a1
 8005724:	080057a1 	.word	0x080057a1
 8005728:	080057a1 	.word	0x080057a1
 800572c:	08005789 	.word	0x08005789
 8005730:	080057a1 	.word	0x080057a1
 8005734:	080057a1 	.word	0x080057a1
 8005738:	080057a1 	.word	0x080057a1
 800573c:	080057a1 	.word	0x080057a1
 8005740:	080057a1 	.word	0x080057a1
 8005744:	080057a1 	.word	0x080057a1
 8005748:	080057a1 	.word	0x080057a1
 800574c:	08005791 	.word	0x08005791
 8005750:	080057a1 	.word	0x080057a1
 8005754:	080057a1 	.word	0x080057a1
 8005758:	080057a1 	.word	0x080057a1
 800575c:	080057a1 	.word	0x080057a1
 8005760:	080057a1 	.word	0x080057a1
 8005764:	080057a1 	.word	0x080057a1
 8005768:	080057a1 	.word	0x080057a1
 800576c:	08005799 	.word	0x08005799
 8005770:	2301      	movs	r3, #1
 8005772:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005776:	e0bc      	b.n	80058f2 <UART_SetConfig+0x5a6>
 8005778:	2304      	movs	r3, #4
 800577a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800577e:	e0b8      	b.n	80058f2 <UART_SetConfig+0x5a6>
 8005780:	2308      	movs	r3, #8
 8005782:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005786:	e0b4      	b.n	80058f2 <UART_SetConfig+0x5a6>
 8005788:	2310      	movs	r3, #16
 800578a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800578e:	e0b0      	b.n	80058f2 <UART_SetConfig+0x5a6>
 8005790:	2320      	movs	r3, #32
 8005792:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005796:	e0ac      	b.n	80058f2 <UART_SetConfig+0x5a6>
 8005798:	2340      	movs	r3, #64	; 0x40
 800579a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800579e:	e0a8      	b.n	80058f2 <UART_SetConfig+0x5a6>
 80057a0:	2380      	movs	r3, #128	; 0x80
 80057a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057a6:	e0a4      	b.n	80058f2 <UART_SetConfig+0x5a6>
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a8f      	ldr	r2, [pc, #572]	; (80059ec <UART_SetConfig+0x6a0>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d130      	bne.n	8005814 <UART_SetConfig+0x4c8>
 80057b2:	4b8d      	ldr	r3, [pc, #564]	; (80059e8 <UART_SetConfig+0x69c>)
 80057b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057b6:	f003 0307 	and.w	r3, r3, #7
 80057ba:	2b05      	cmp	r3, #5
 80057bc:	d826      	bhi.n	800580c <UART_SetConfig+0x4c0>
 80057be:	a201      	add	r2, pc, #4	; (adr r2, 80057c4 <UART_SetConfig+0x478>)
 80057c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057c4:	080057dd 	.word	0x080057dd
 80057c8:	080057e5 	.word	0x080057e5
 80057cc:	080057ed 	.word	0x080057ed
 80057d0:	080057f5 	.word	0x080057f5
 80057d4:	080057fd 	.word	0x080057fd
 80057d8:	08005805 	.word	0x08005805
 80057dc:	2300      	movs	r3, #0
 80057de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057e2:	e086      	b.n	80058f2 <UART_SetConfig+0x5a6>
 80057e4:	2304      	movs	r3, #4
 80057e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057ea:	e082      	b.n	80058f2 <UART_SetConfig+0x5a6>
 80057ec:	2308      	movs	r3, #8
 80057ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057f2:	e07e      	b.n	80058f2 <UART_SetConfig+0x5a6>
 80057f4:	2310      	movs	r3, #16
 80057f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80057fa:	e07a      	b.n	80058f2 <UART_SetConfig+0x5a6>
 80057fc:	2320      	movs	r3, #32
 80057fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005802:	e076      	b.n	80058f2 <UART_SetConfig+0x5a6>
 8005804:	2340      	movs	r3, #64	; 0x40
 8005806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800580a:	e072      	b.n	80058f2 <UART_SetConfig+0x5a6>
 800580c:	2380      	movs	r3, #128	; 0x80
 800580e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005812:	e06e      	b.n	80058f2 <UART_SetConfig+0x5a6>
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a75      	ldr	r2, [pc, #468]	; (80059f0 <UART_SetConfig+0x6a4>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d130      	bne.n	8005880 <UART_SetConfig+0x534>
 800581e:	4b72      	ldr	r3, [pc, #456]	; (80059e8 <UART_SetConfig+0x69c>)
 8005820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005822:	f003 0307 	and.w	r3, r3, #7
 8005826:	2b05      	cmp	r3, #5
 8005828:	d826      	bhi.n	8005878 <UART_SetConfig+0x52c>
 800582a:	a201      	add	r2, pc, #4	; (adr r2, 8005830 <UART_SetConfig+0x4e4>)
 800582c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005830:	08005849 	.word	0x08005849
 8005834:	08005851 	.word	0x08005851
 8005838:	08005859 	.word	0x08005859
 800583c:	08005861 	.word	0x08005861
 8005840:	08005869 	.word	0x08005869
 8005844:	08005871 	.word	0x08005871
 8005848:	2300      	movs	r3, #0
 800584a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800584e:	e050      	b.n	80058f2 <UART_SetConfig+0x5a6>
 8005850:	2304      	movs	r3, #4
 8005852:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005856:	e04c      	b.n	80058f2 <UART_SetConfig+0x5a6>
 8005858:	2308      	movs	r3, #8
 800585a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800585e:	e048      	b.n	80058f2 <UART_SetConfig+0x5a6>
 8005860:	2310      	movs	r3, #16
 8005862:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005866:	e044      	b.n	80058f2 <UART_SetConfig+0x5a6>
 8005868:	2320      	movs	r3, #32
 800586a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800586e:	e040      	b.n	80058f2 <UART_SetConfig+0x5a6>
 8005870:	2340      	movs	r3, #64	; 0x40
 8005872:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005876:	e03c      	b.n	80058f2 <UART_SetConfig+0x5a6>
 8005878:	2380      	movs	r3, #128	; 0x80
 800587a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800587e:	e038      	b.n	80058f2 <UART_SetConfig+0x5a6>
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a5b      	ldr	r2, [pc, #364]	; (80059f4 <UART_SetConfig+0x6a8>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d130      	bne.n	80058ec <UART_SetConfig+0x5a0>
 800588a:	4b57      	ldr	r3, [pc, #348]	; (80059e8 <UART_SetConfig+0x69c>)
 800588c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800588e:	f003 0307 	and.w	r3, r3, #7
 8005892:	2b05      	cmp	r3, #5
 8005894:	d826      	bhi.n	80058e4 <UART_SetConfig+0x598>
 8005896:	a201      	add	r2, pc, #4	; (adr r2, 800589c <UART_SetConfig+0x550>)
 8005898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800589c:	080058b5 	.word	0x080058b5
 80058a0:	080058bd 	.word	0x080058bd
 80058a4:	080058c5 	.word	0x080058c5
 80058a8:	080058cd 	.word	0x080058cd
 80058ac:	080058d5 	.word	0x080058d5
 80058b0:	080058dd 	.word	0x080058dd
 80058b4:	2302      	movs	r3, #2
 80058b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058ba:	e01a      	b.n	80058f2 <UART_SetConfig+0x5a6>
 80058bc:	2304      	movs	r3, #4
 80058be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058c2:	e016      	b.n	80058f2 <UART_SetConfig+0x5a6>
 80058c4:	2308      	movs	r3, #8
 80058c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058ca:	e012      	b.n	80058f2 <UART_SetConfig+0x5a6>
 80058cc:	2310      	movs	r3, #16
 80058ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058d2:	e00e      	b.n	80058f2 <UART_SetConfig+0x5a6>
 80058d4:	2320      	movs	r3, #32
 80058d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058da:	e00a      	b.n	80058f2 <UART_SetConfig+0x5a6>
 80058dc:	2340      	movs	r3, #64	; 0x40
 80058de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058e2:	e006      	b.n	80058f2 <UART_SetConfig+0x5a6>
 80058e4:	2380      	movs	r3, #128	; 0x80
 80058e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058ea:	e002      	b.n	80058f2 <UART_SetConfig+0x5a6>
 80058ec:	2380      	movs	r3, #128	; 0x80
 80058ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a3f      	ldr	r2, [pc, #252]	; (80059f4 <UART_SetConfig+0x6a8>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	f040 80f8 	bne.w	8005aee <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80058fe:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005902:	2b20      	cmp	r3, #32
 8005904:	dc46      	bgt.n	8005994 <UART_SetConfig+0x648>
 8005906:	2b02      	cmp	r3, #2
 8005908:	f2c0 8082 	blt.w	8005a10 <UART_SetConfig+0x6c4>
 800590c:	3b02      	subs	r3, #2
 800590e:	2b1e      	cmp	r3, #30
 8005910:	d87e      	bhi.n	8005a10 <UART_SetConfig+0x6c4>
 8005912:	a201      	add	r2, pc, #4	; (adr r2, 8005918 <UART_SetConfig+0x5cc>)
 8005914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005918:	0800599b 	.word	0x0800599b
 800591c:	08005a11 	.word	0x08005a11
 8005920:	080059a3 	.word	0x080059a3
 8005924:	08005a11 	.word	0x08005a11
 8005928:	08005a11 	.word	0x08005a11
 800592c:	08005a11 	.word	0x08005a11
 8005930:	080059b3 	.word	0x080059b3
 8005934:	08005a11 	.word	0x08005a11
 8005938:	08005a11 	.word	0x08005a11
 800593c:	08005a11 	.word	0x08005a11
 8005940:	08005a11 	.word	0x08005a11
 8005944:	08005a11 	.word	0x08005a11
 8005948:	08005a11 	.word	0x08005a11
 800594c:	08005a11 	.word	0x08005a11
 8005950:	080059c3 	.word	0x080059c3
 8005954:	08005a11 	.word	0x08005a11
 8005958:	08005a11 	.word	0x08005a11
 800595c:	08005a11 	.word	0x08005a11
 8005960:	08005a11 	.word	0x08005a11
 8005964:	08005a11 	.word	0x08005a11
 8005968:	08005a11 	.word	0x08005a11
 800596c:	08005a11 	.word	0x08005a11
 8005970:	08005a11 	.word	0x08005a11
 8005974:	08005a11 	.word	0x08005a11
 8005978:	08005a11 	.word	0x08005a11
 800597c:	08005a11 	.word	0x08005a11
 8005980:	08005a11 	.word	0x08005a11
 8005984:	08005a11 	.word	0x08005a11
 8005988:	08005a11 	.word	0x08005a11
 800598c:	08005a11 	.word	0x08005a11
 8005990:	08005a03 	.word	0x08005a03
 8005994:	2b40      	cmp	r3, #64	; 0x40
 8005996:	d037      	beq.n	8005a08 <UART_SetConfig+0x6bc>
 8005998:	e03a      	b.n	8005a10 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800599a:	f7fe fa5b 	bl	8003e54 <HAL_RCCEx_GetD3PCLK1Freq>
 800599e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80059a0:	e03c      	b.n	8005a1c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80059a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80059a6:	4618      	mov	r0, r3
 80059a8:	f7fe fa6a 	bl	8003e80 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80059ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80059b0:	e034      	b.n	8005a1c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80059b2:	f107 0318 	add.w	r3, r7, #24
 80059b6:	4618      	mov	r0, r3
 80059b8:	f7fe fbb6 	bl	8004128 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80059bc:	69fb      	ldr	r3, [r7, #28]
 80059be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80059c0:	e02c      	b.n	8005a1c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80059c2:	4b09      	ldr	r3, [pc, #36]	; (80059e8 <UART_SetConfig+0x69c>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f003 0320 	and.w	r3, r3, #32
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d016      	beq.n	80059fc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80059ce:	4b06      	ldr	r3, [pc, #24]	; (80059e8 <UART_SetConfig+0x69c>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	08db      	lsrs	r3, r3, #3
 80059d4:	f003 0303 	and.w	r3, r3, #3
 80059d8:	4a07      	ldr	r2, [pc, #28]	; (80059f8 <UART_SetConfig+0x6ac>)
 80059da:	fa22 f303 	lsr.w	r3, r2, r3
 80059de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80059e0:	e01c      	b.n	8005a1c <UART_SetConfig+0x6d0>
 80059e2:	bf00      	nop
 80059e4:	40011400 	.word	0x40011400
 80059e8:	58024400 	.word	0x58024400
 80059ec:	40007800 	.word	0x40007800
 80059f0:	40007c00 	.word	0x40007c00
 80059f4:	58000c00 	.word	0x58000c00
 80059f8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80059fc:	4b9d      	ldr	r3, [pc, #628]	; (8005c74 <UART_SetConfig+0x928>)
 80059fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a00:	e00c      	b.n	8005a1c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005a02:	4b9d      	ldr	r3, [pc, #628]	; (8005c78 <UART_SetConfig+0x92c>)
 8005a04:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a06:	e009      	b.n	8005a1c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a0e:	e005      	b.n	8005a1c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005a10:	2300      	movs	r3, #0
 8005a12:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005a1a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005a1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	f000 81de 	beq.w	8005de0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a28:	4a94      	ldr	r2, [pc, #592]	; (8005c7c <UART_SetConfig+0x930>)
 8005a2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a2e:	461a      	mov	r2, r3
 8005a30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a32:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a36:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	685a      	ldr	r2, [r3, #4]
 8005a3c:	4613      	mov	r3, r2
 8005a3e:	005b      	lsls	r3, r3, #1
 8005a40:	4413      	add	r3, r2
 8005a42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d305      	bcc.n	8005a54 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005a4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d903      	bls.n	8005a5c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005a5a:	e1c1      	b.n	8005de0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a5e:	2200      	movs	r2, #0
 8005a60:	60bb      	str	r3, [r7, #8]
 8005a62:	60fa      	str	r2, [r7, #12]
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a68:	4a84      	ldr	r2, [pc, #528]	; (8005c7c <UART_SetConfig+0x930>)
 8005a6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	2200      	movs	r2, #0
 8005a72:	603b      	str	r3, [r7, #0]
 8005a74:	607a      	str	r2, [r7, #4]
 8005a76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a7a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005a7e:	f7fa fc2b 	bl	80002d8 <__aeabi_uldivmod>
 8005a82:	4602      	mov	r2, r0
 8005a84:	460b      	mov	r3, r1
 8005a86:	4610      	mov	r0, r2
 8005a88:	4619      	mov	r1, r3
 8005a8a:	f04f 0200 	mov.w	r2, #0
 8005a8e:	f04f 0300 	mov.w	r3, #0
 8005a92:	020b      	lsls	r3, r1, #8
 8005a94:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005a98:	0202      	lsls	r2, r0, #8
 8005a9a:	6979      	ldr	r1, [r7, #20]
 8005a9c:	6849      	ldr	r1, [r1, #4]
 8005a9e:	0849      	lsrs	r1, r1, #1
 8005aa0:	2000      	movs	r0, #0
 8005aa2:	460c      	mov	r4, r1
 8005aa4:	4605      	mov	r5, r0
 8005aa6:	eb12 0804 	adds.w	r8, r2, r4
 8005aaa:	eb43 0905 	adc.w	r9, r3, r5
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	469a      	mov	sl, r3
 8005ab6:	4693      	mov	fp, r2
 8005ab8:	4652      	mov	r2, sl
 8005aba:	465b      	mov	r3, fp
 8005abc:	4640      	mov	r0, r8
 8005abe:	4649      	mov	r1, r9
 8005ac0:	f7fa fc0a 	bl	80002d8 <__aeabi_uldivmod>
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	460b      	mov	r3, r1
 8005ac8:	4613      	mov	r3, r2
 8005aca:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ace:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ad2:	d308      	bcc.n	8005ae6 <UART_SetConfig+0x79a>
 8005ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ad6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ada:	d204      	bcs.n	8005ae6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ae2:	60da      	str	r2, [r3, #12]
 8005ae4:	e17c      	b.n	8005de0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005aec:	e178      	b.n	8005de0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	69db      	ldr	r3, [r3, #28]
 8005af2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005af6:	f040 80c5 	bne.w	8005c84 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8005afa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005afe:	2b20      	cmp	r3, #32
 8005b00:	dc48      	bgt.n	8005b94 <UART_SetConfig+0x848>
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	db7b      	blt.n	8005bfe <UART_SetConfig+0x8b2>
 8005b06:	2b20      	cmp	r3, #32
 8005b08:	d879      	bhi.n	8005bfe <UART_SetConfig+0x8b2>
 8005b0a:	a201      	add	r2, pc, #4	; (adr r2, 8005b10 <UART_SetConfig+0x7c4>)
 8005b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b10:	08005b9b 	.word	0x08005b9b
 8005b14:	08005ba3 	.word	0x08005ba3
 8005b18:	08005bff 	.word	0x08005bff
 8005b1c:	08005bff 	.word	0x08005bff
 8005b20:	08005bab 	.word	0x08005bab
 8005b24:	08005bff 	.word	0x08005bff
 8005b28:	08005bff 	.word	0x08005bff
 8005b2c:	08005bff 	.word	0x08005bff
 8005b30:	08005bbb 	.word	0x08005bbb
 8005b34:	08005bff 	.word	0x08005bff
 8005b38:	08005bff 	.word	0x08005bff
 8005b3c:	08005bff 	.word	0x08005bff
 8005b40:	08005bff 	.word	0x08005bff
 8005b44:	08005bff 	.word	0x08005bff
 8005b48:	08005bff 	.word	0x08005bff
 8005b4c:	08005bff 	.word	0x08005bff
 8005b50:	08005bcb 	.word	0x08005bcb
 8005b54:	08005bff 	.word	0x08005bff
 8005b58:	08005bff 	.word	0x08005bff
 8005b5c:	08005bff 	.word	0x08005bff
 8005b60:	08005bff 	.word	0x08005bff
 8005b64:	08005bff 	.word	0x08005bff
 8005b68:	08005bff 	.word	0x08005bff
 8005b6c:	08005bff 	.word	0x08005bff
 8005b70:	08005bff 	.word	0x08005bff
 8005b74:	08005bff 	.word	0x08005bff
 8005b78:	08005bff 	.word	0x08005bff
 8005b7c:	08005bff 	.word	0x08005bff
 8005b80:	08005bff 	.word	0x08005bff
 8005b84:	08005bff 	.word	0x08005bff
 8005b88:	08005bff 	.word	0x08005bff
 8005b8c:	08005bff 	.word	0x08005bff
 8005b90:	08005bf1 	.word	0x08005bf1
 8005b94:	2b40      	cmp	r3, #64	; 0x40
 8005b96:	d02e      	beq.n	8005bf6 <UART_SetConfig+0x8aa>
 8005b98:	e031      	b.n	8005bfe <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b9a:	f7fd f9e9 	bl	8002f70 <HAL_RCC_GetPCLK1Freq>
 8005b9e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005ba0:	e033      	b.n	8005c0a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ba2:	f7fd f9fb 	bl	8002f9c <HAL_RCC_GetPCLK2Freq>
 8005ba6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005ba8:	e02f      	b.n	8005c0a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005baa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f7fe f966 	bl	8003e80 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005bb8:	e027      	b.n	8005c0a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005bba:	f107 0318 	add.w	r3, r7, #24
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f7fe fab2 	bl	8004128 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005bc4:	69fb      	ldr	r3, [r7, #28]
 8005bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005bc8:	e01f      	b.n	8005c0a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005bca:	4b2d      	ldr	r3, [pc, #180]	; (8005c80 <UART_SetConfig+0x934>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f003 0320 	and.w	r3, r3, #32
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d009      	beq.n	8005bea <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005bd6:	4b2a      	ldr	r3, [pc, #168]	; (8005c80 <UART_SetConfig+0x934>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	08db      	lsrs	r3, r3, #3
 8005bdc:	f003 0303 	and.w	r3, r3, #3
 8005be0:	4a24      	ldr	r2, [pc, #144]	; (8005c74 <UART_SetConfig+0x928>)
 8005be2:	fa22 f303 	lsr.w	r3, r2, r3
 8005be6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005be8:	e00f      	b.n	8005c0a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005bea:	4b22      	ldr	r3, [pc, #136]	; (8005c74 <UART_SetConfig+0x928>)
 8005bec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005bee:	e00c      	b.n	8005c0a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005bf0:	4b21      	ldr	r3, [pc, #132]	; (8005c78 <UART_SetConfig+0x92c>)
 8005bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005bf4:	e009      	b.n	8005c0a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005bfc:	e005      	b.n	8005c0a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005c08:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005c0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	f000 80e7 	beq.w	8005de0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c16:	4a19      	ldr	r2, [pc, #100]	; (8005c7c <UART_SetConfig+0x930>)
 8005c18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c20:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c24:	005a      	lsls	r2, r3, #1
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	085b      	lsrs	r3, r3, #1
 8005c2c:	441a      	add	r2, r3
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c36:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c3a:	2b0f      	cmp	r3, #15
 8005c3c:	d916      	bls.n	8005c6c <UART_SetConfig+0x920>
 8005c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c44:	d212      	bcs.n	8005c6c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	f023 030f 	bic.w	r3, r3, #15
 8005c4e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c52:	085b      	lsrs	r3, r3, #1
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	f003 0307 	and.w	r3, r3, #7
 8005c5a:	b29a      	uxth	r2, r3
 8005c5c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005c68:	60da      	str	r2, [r3, #12]
 8005c6a:	e0b9      	b.n	8005de0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005c72:	e0b5      	b.n	8005de0 <UART_SetConfig+0xa94>
 8005c74:	03d09000 	.word	0x03d09000
 8005c78:	003d0900 	.word	0x003d0900
 8005c7c:	0800640c 	.word	0x0800640c
 8005c80:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005c84:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005c88:	2b20      	cmp	r3, #32
 8005c8a:	dc49      	bgt.n	8005d20 <UART_SetConfig+0x9d4>
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	db7c      	blt.n	8005d8a <UART_SetConfig+0xa3e>
 8005c90:	2b20      	cmp	r3, #32
 8005c92:	d87a      	bhi.n	8005d8a <UART_SetConfig+0xa3e>
 8005c94:	a201      	add	r2, pc, #4	; (adr r2, 8005c9c <UART_SetConfig+0x950>)
 8005c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c9a:	bf00      	nop
 8005c9c:	08005d27 	.word	0x08005d27
 8005ca0:	08005d2f 	.word	0x08005d2f
 8005ca4:	08005d8b 	.word	0x08005d8b
 8005ca8:	08005d8b 	.word	0x08005d8b
 8005cac:	08005d37 	.word	0x08005d37
 8005cb0:	08005d8b 	.word	0x08005d8b
 8005cb4:	08005d8b 	.word	0x08005d8b
 8005cb8:	08005d8b 	.word	0x08005d8b
 8005cbc:	08005d47 	.word	0x08005d47
 8005cc0:	08005d8b 	.word	0x08005d8b
 8005cc4:	08005d8b 	.word	0x08005d8b
 8005cc8:	08005d8b 	.word	0x08005d8b
 8005ccc:	08005d8b 	.word	0x08005d8b
 8005cd0:	08005d8b 	.word	0x08005d8b
 8005cd4:	08005d8b 	.word	0x08005d8b
 8005cd8:	08005d8b 	.word	0x08005d8b
 8005cdc:	08005d57 	.word	0x08005d57
 8005ce0:	08005d8b 	.word	0x08005d8b
 8005ce4:	08005d8b 	.word	0x08005d8b
 8005ce8:	08005d8b 	.word	0x08005d8b
 8005cec:	08005d8b 	.word	0x08005d8b
 8005cf0:	08005d8b 	.word	0x08005d8b
 8005cf4:	08005d8b 	.word	0x08005d8b
 8005cf8:	08005d8b 	.word	0x08005d8b
 8005cfc:	08005d8b 	.word	0x08005d8b
 8005d00:	08005d8b 	.word	0x08005d8b
 8005d04:	08005d8b 	.word	0x08005d8b
 8005d08:	08005d8b 	.word	0x08005d8b
 8005d0c:	08005d8b 	.word	0x08005d8b
 8005d10:	08005d8b 	.word	0x08005d8b
 8005d14:	08005d8b 	.word	0x08005d8b
 8005d18:	08005d8b 	.word	0x08005d8b
 8005d1c:	08005d7d 	.word	0x08005d7d
 8005d20:	2b40      	cmp	r3, #64	; 0x40
 8005d22:	d02e      	beq.n	8005d82 <UART_SetConfig+0xa36>
 8005d24:	e031      	b.n	8005d8a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d26:	f7fd f923 	bl	8002f70 <HAL_RCC_GetPCLK1Freq>
 8005d2a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005d2c:	e033      	b.n	8005d96 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d2e:	f7fd f935 	bl	8002f9c <HAL_RCC_GetPCLK2Freq>
 8005d32:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005d34:	e02f      	b.n	8005d96 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f7fe f8a0 	bl	8003e80 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d44:	e027      	b.n	8005d96 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d46:	f107 0318 	add.w	r3, r7, #24
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f7fe f9ec 	bl	8004128 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005d50:	69fb      	ldr	r3, [r7, #28]
 8005d52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d54:	e01f      	b.n	8005d96 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d56:	4b2d      	ldr	r3, [pc, #180]	; (8005e0c <UART_SetConfig+0xac0>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f003 0320 	and.w	r3, r3, #32
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d009      	beq.n	8005d76 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005d62:	4b2a      	ldr	r3, [pc, #168]	; (8005e0c <UART_SetConfig+0xac0>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	08db      	lsrs	r3, r3, #3
 8005d68:	f003 0303 	and.w	r3, r3, #3
 8005d6c:	4a28      	ldr	r2, [pc, #160]	; (8005e10 <UART_SetConfig+0xac4>)
 8005d6e:	fa22 f303 	lsr.w	r3, r2, r3
 8005d72:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005d74:	e00f      	b.n	8005d96 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005d76:	4b26      	ldr	r3, [pc, #152]	; (8005e10 <UART_SetConfig+0xac4>)
 8005d78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d7a:	e00c      	b.n	8005d96 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005d7c:	4b25      	ldr	r3, [pc, #148]	; (8005e14 <UART_SetConfig+0xac8>)
 8005d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d80:	e009      	b.n	8005d96 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d88:	e005      	b.n	8005d96 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005d94:	bf00      	nop
    }

    if (pclk != 0U)
 8005d96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d021      	beq.n	8005de0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da0:	4a1d      	ldr	r2, [pc, #116]	; (8005e18 <UART_SetConfig+0xacc>)
 8005da2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005da6:	461a      	mov	r2, r3
 8005da8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005daa:	fbb3 f2f2 	udiv	r2, r3, r2
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	085b      	lsrs	r3, r3, #1
 8005db4:	441a      	add	r2, r3
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dbe:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dc2:	2b0f      	cmp	r3, #15
 8005dc4:	d909      	bls.n	8005dda <UART_SetConfig+0xa8e>
 8005dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dcc:	d205      	bcs.n	8005dda <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dd0:	b29a      	uxth	r2, r3
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	60da      	str	r2, [r3, #12]
 8005dd8:	e002      	b.n	8005de0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	2201      	movs	r2, #1
 8005de4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	2201      	movs	r2, #1
 8005dec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	2200      	movs	r2, #0
 8005df4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005dfc:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3748      	adds	r7, #72	; 0x48
 8005e04:	46bd      	mov	sp, r7
 8005e06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e0a:	bf00      	nop
 8005e0c:	58024400 	.word	0x58024400
 8005e10:	03d09000 	.word	0x03d09000
 8005e14:	003d0900 	.word	0x003d0900
 8005e18:	0800640c 	.word	0x0800640c

08005e1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b083      	sub	sp, #12
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e28:	f003 0301 	and.w	r3, r3, #1
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d00a      	beq.n	8005e46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	430a      	orrs	r2, r1
 8005e44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e4a:	f003 0302 	and.w	r3, r3, #2
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d00a      	beq.n	8005e68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	430a      	orrs	r2, r1
 8005e66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e6c:	f003 0304 	and.w	r3, r3, #4
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d00a      	beq.n	8005e8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	430a      	orrs	r2, r1
 8005e88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e8e:	f003 0308 	and.w	r3, r3, #8
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d00a      	beq.n	8005eac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	430a      	orrs	r2, r1
 8005eaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eb0:	f003 0310 	and.w	r3, r3, #16
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d00a      	beq.n	8005ece <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	430a      	orrs	r2, r1
 8005ecc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ed2:	f003 0320 	and.w	r3, r3, #32
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d00a      	beq.n	8005ef0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	430a      	orrs	r2, r1
 8005eee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d01a      	beq.n	8005f32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	430a      	orrs	r2, r1
 8005f10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f1a:	d10a      	bne.n	8005f32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	430a      	orrs	r2, r1
 8005f30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d00a      	beq.n	8005f54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	430a      	orrs	r2, r1
 8005f52:	605a      	str	r2, [r3, #4]
  }
}
 8005f54:	bf00      	nop
 8005f56:	370c      	adds	r7, #12
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr

08005f60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b086      	sub	sp, #24
 8005f64:	af02      	add	r7, sp, #8
 8005f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f70:	f7fb fd06 	bl	8001980 <HAL_GetTick>
 8005f74:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f003 0308 	and.w	r3, r3, #8
 8005f80:	2b08      	cmp	r3, #8
 8005f82:	d10e      	bne.n	8005fa2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f88:	9300      	str	r3, [sp, #0]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f000 f82f 	bl	8005ff6 <UART_WaitOnFlagUntilTimeout>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d001      	beq.n	8005fa2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f9e:	2303      	movs	r3, #3
 8005fa0:	e025      	b.n	8005fee <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f003 0304 	and.w	r3, r3, #4
 8005fac:	2b04      	cmp	r3, #4
 8005fae:	d10e      	bne.n	8005fce <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fb0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005fb4:	9300      	str	r3, [sp, #0]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f000 f819 	bl	8005ff6 <UART_WaitOnFlagUntilTimeout>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d001      	beq.n	8005fce <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fca:	2303      	movs	r3, #3
 8005fcc:	e00f      	b.n	8005fee <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2220      	movs	r2, #32
 8005fd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2220      	movs	r2, #32
 8005fda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005fec:	2300      	movs	r3, #0
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3710      	adds	r7, #16
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}

08005ff6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ff6:	b580      	push	{r7, lr}
 8005ff8:	b09c      	sub	sp, #112	; 0x70
 8005ffa:	af00      	add	r7, sp, #0
 8005ffc:	60f8      	str	r0, [r7, #12]
 8005ffe:	60b9      	str	r1, [r7, #8]
 8006000:	603b      	str	r3, [r7, #0]
 8006002:	4613      	mov	r3, r2
 8006004:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006006:	e0a9      	b.n	800615c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006008:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800600a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800600e:	f000 80a5 	beq.w	800615c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006012:	f7fb fcb5 	bl	8001980 <HAL_GetTick>
 8006016:	4602      	mov	r2, r0
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	1ad3      	subs	r3, r2, r3
 800601c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800601e:	429a      	cmp	r2, r3
 8006020:	d302      	bcc.n	8006028 <UART_WaitOnFlagUntilTimeout+0x32>
 8006022:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006024:	2b00      	cmp	r3, #0
 8006026:	d140      	bne.n	80060aa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800602e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006030:	e853 3f00 	ldrex	r3, [r3]
 8006034:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006036:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006038:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800603c:	667b      	str	r3, [r7, #100]	; 0x64
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	461a      	mov	r2, r3
 8006044:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006046:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006048:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800604a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800604c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800604e:	e841 2300 	strex	r3, r2, [r1]
 8006052:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006054:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006056:	2b00      	cmp	r3, #0
 8006058:	d1e6      	bne.n	8006028 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	3308      	adds	r3, #8
 8006060:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006062:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006064:	e853 3f00 	ldrex	r3, [r3]
 8006068:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800606a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800606c:	f023 0301 	bic.w	r3, r3, #1
 8006070:	663b      	str	r3, [r7, #96]	; 0x60
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	3308      	adds	r3, #8
 8006078:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800607a:	64ba      	str	r2, [r7, #72]	; 0x48
 800607c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800607e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006080:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006082:	e841 2300 	strex	r3, r2, [r1]
 8006086:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006088:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800608a:	2b00      	cmp	r3, #0
 800608c:	d1e5      	bne.n	800605a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2220      	movs	r2, #32
 8006092:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2220      	movs	r2, #32
 800609a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2200      	movs	r2, #0
 80060a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80060a6:	2303      	movs	r3, #3
 80060a8:	e069      	b.n	800617e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f003 0304 	and.w	r3, r3, #4
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d051      	beq.n	800615c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	69db      	ldr	r3, [r3, #28]
 80060be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060c6:	d149      	bne.n	800615c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80060d0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060da:	e853 3f00 	ldrex	r3, [r3]
 80060de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80060e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80060e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	461a      	mov	r2, r3
 80060ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060f0:	637b      	str	r3, [r7, #52]	; 0x34
 80060f2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80060f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80060f8:	e841 2300 	strex	r3, r2, [r1]
 80060fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80060fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006100:	2b00      	cmp	r3, #0
 8006102:	d1e6      	bne.n	80060d2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	3308      	adds	r3, #8
 800610a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	e853 3f00 	ldrex	r3, [r3]
 8006112:	613b      	str	r3, [r7, #16]
   return(result);
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	f023 0301 	bic.w	r3, r3, #1
 800611a:	66bb      	str	r3, [r7, #104]	; 0x68
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	3308      	adds	r3, #8
 8006122:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006124:	623a      	str	r2, [r7, #32]
 8006126:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006128:	69f9      	ldr	r1, [r7, #28]
 800612a:	6a3a      	ldr	r2, [r7, #32]
 800612c:	e841 2300 	strex	r3, r2, [r1]
 8006130:	61bb      	str	r3, [r7, #24]
   return(result);
 8006132:	69bb      	ldr	r3, [r7, #24]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d1e5      	bne.n	8006104 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2220      	movs	r2, #32
 800613c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2220      	movs	r2, #32
 8006144:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2220      	movs	r2, #32
 800614c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2200      	movs	r2, #0
 8006154:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006158:	2303      	movs	r3, #3
 800615a:	e010      	b.n	800617e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	69da      	ldr	r2, [r3, #28]
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	4013      	ands	r3, r2
 8006166:	68ba      	ldr	r2, [r7, #8]
 8006168:	429a      	cmp	r2, r3
 800616a:	bf0c      	ite	eq
 800616c:	2301      	moveq	r3, #1
 800616e:	2300      	movne	r3, #0
 8006170:	b2db      	uxtb	r3, r3
 8006172:	461a      	mov	r2, r3
 8006174:	79fb      	ldrb	r3, [r7, #7]
 8006176:	429a      	cmp	r2, r3
 8006178:	f43f af46 	beq.w	8006008 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800617c:	2300      	movs	r3, #0
}
 800617e:	4618      	mov	r0, r3
 8006180:	3770      	adds	r7, #112	; 0x70
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}

08006186 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006186:	b480      	push	{r7}
 8006188:	b085      	sub	sp, #20
 800618a:	af00      	add	r7, sp, #0
 800618c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006194:	2b01      	cmp	r3, #1
 8006196:	d101      	bne.n	800619c <HAL_UARTEx_DisableFifoMode+0x16>
 8006198:	2302      	movs	r3, #2
 800619a:	e027      	b.n	80061ec <HAL_UARTEx_DisableFifoMode+0x66>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2201      	movs	r2, #1
 80061a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2224      	movs	r2, #36	; 0x24
 80061a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	681a      	ldr	r2, [r3, #0]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f022 0201 	bic.w	r2, r2, #1
 80061c2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80061ca:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2200      	movs	r2, #0
 80061d0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	68fa      	ldr	r2, [r7, #12]
 80061d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2220      	movs	r2, #32
 80061de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2200      	movs	r2, #0
 80061e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80061ea:	2300      	movs	r3, #0
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3714      	adds	r7, #20
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr

080061f8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b084      	sub	sp, #16
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
 8006200:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006208:	2b01      	cmp	r3, #1
 800620a:	d101      	bne.n	8006210 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800620c:	2302      	movs	r3, #2
 800620e:	e02d      	b.n	800626c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2224      	movs	r2, #36	; 0x24
 800621c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f022 0201 	bic.w	r2, r2, #1
 8006236:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	683a      	ldr	r2, [r7, #0]
 8006248:	430a      	orrs	r2, r1
 800624a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f000 f84f 	bl	80062f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	68fa      	ldr	r2, [r7, #12]
 8006258:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2220      	movs	r2, #32
 800625e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2200      	movs	r2, #0
 8006266:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800626a:	2300      	movs	r3, #0
}
 800626c:	4618      	mov	r0, r3
 800626e:	3710      	adds	r7, #16
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}

08006274 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b084      	sub	sp, #16
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006284:	2b01      	cmp	r3, #1
 8006286:	d101      	bne.n	800628c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006288:	2302      	movs	r3, #2
 800628a:	e02d      	b.n	80062e8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2201      	movs	r2, #1
 8006290:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2224      	movs	r2, #36	; 0x24
 8006298:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	681a      	ldr	r2, [r3, #0]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f022 0201 	bic.w	r2, r2, #1
 80062b2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	683a      	ldr	r2, [r7, #0]
 80062c4:	430a      	orrs	r2, r1
 80062c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f000 f811 	bl	80062f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	68fa      	ldr	r2, [r7, #12]
 80062d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2220      	movs	r2, #32
 80062da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2200      	movs	r2, #0
 80062e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80062e6:	2300      	movs	r3, #0
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	3710      	adds	r7, #16
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}

080062f0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b085      	sub	sp, #20
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d108      	bne.n	8006312 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2201      	movs	r2, #1
 8006304:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2201      	movs	r2, #1
 800630c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006310:	e031      	b.n	8006376 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006312:	2310      	movs	r3, #16
 8006314:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006316:	2310      	movs	r3, #16
 8006318:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	0e5b      	lsrs	r3, r3, #25
 8006322:	b2db      	uxtb	r3, r3
 8006324:	f003 0307 	and.w	r3, r3, #7
 8006328:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	0f5b      	lsrs	r3, r3, #29
 8006332:	b2db      	uxtb	r3, r3
 8006334:	f003 0307 	and.w	r3, r3, #7
 8006338:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800633a:	7bbb      	ldrb	r3, [r7, #14]
 800633c:	7b3a      	ldrb	r2, [r7, #12]
 800633e:	4911      	ldr	r1, [pc, #68]	; (8006384 <UARTEx_SetNbDataToProcess+0x94>)
 8006340:	5c8a      	ldrb	r2, [r1, r2]
 8006342:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006346:	7b3a      	ldrb	r2, [r7, #12]
 8006348:	490f      	ldr	r1, [pc, #60]	; (8006388 <UARTEx_SetNbDataToProcess+0x98>)
 800634a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800634c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006350:	b29a      	uxth	r2, r3
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006358:	7bfb      	ldrb	r3, [r7, #15]
 800635a:	7b7a      	ldrb	r2, [r7, #13]
 800635c:	4909      	ldr	r1, [pc, #36]	; (8006384 <UARTEx_SetNbDataToProcess+0x94>)
 800635e:	5c8a      	ldrb	r2, [r1, r2]
 8006360:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006364:	7b7a      	ldrb	r2, [r7, #13]
 8006366:	4908      	ldr	r1, [pc, #32]	; (8006388 <UARTEx_SetNbDataToProcess+0x98>)
 8006368:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800636a:	fb93 f3f2 	sdiv	r3, r3, r2
 800636e:	b29a      	uxth	r2, r3
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006376:	bf00      	nop
 8006378:	3714      	adds	r7, #20
 800637a:	46bd      	mov	sp, r7
 800637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006380:	4770      	bx	lr
 8006382:	bf00      	nop
 8006384:	08006424 	.word	0x08006424
 8006388:	0800642c 	.word	0x0800642c

0800638c <__libc_init_array>:
 800638c:	b570      	push	{r4, r5, r6, lr}
 800638e:	4d0d      	ldr	r5, [pc, #52]	; (80063c4 <__libc_init_array+0x38>)
 8006390:	4c0d      	ldr	r4, [pc, #52]	; (80063c8 <__libc_init_array+0x3c>)
 8006392:	1b64      	subs	r4, r4, r5
 8006394:	10a4      	asrs	r4, r4, #2
 8006396:	2600      	movs	r6, #0
 8006398:	42a6      	cmp	r6, r4
 800639a:	d109      	bne.n	80063b0 <__libc_init_array+0x24>
 800639c:	4d0b      	ldr	r5, [pc, #44]	; (80063cc <__libc_init_array+0x40>)
 800639e:	4c0c      	ldr	r4, [pc, #48]	; (80063d0 <__libc_init_array+0x44>)
 80063a0:	f000 f820 	bl	80063e4 <_init>
 80063a4:	1b64      	subs	r4, r4, r5
 80063a6:	10a4      	asrs	r4, r4, #2
 80063a8:	2600      	movs	r6, #0
 80063aa:	42a6      	cmp	r6, r4
 80063ac:	d105      	bne.n	80063ba <__libc_init_array+0x2e>
 80063ae:	bd70      	pop	{r4, r5, r6, pc}
 80063b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80063b4:	4798      	blx	r3
 80063b6:	3601      	adds	r6, #1
 80063b8:	e7ee      	b.n	8006398 <__libc_init_array+0xc>
 80063ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80063be:	4798      	blx	r3
 80063c0:	3601      	adds	r6, #1
 80063c2:	e7f2      	b.n	80063aa <__libc_init_array+0x1e>
 80063c4:	0800643c 	.word	0x0800643c
 80063c8:	0800643c 	.word	0x0800643c
 80063cc:	0800643c 	.word	0x0800643c
 80063d0:	08006440 	.word	0x08006440

080063d4 <memset>:
 80063d4:	4402      	add	r2, r0
 80063d6:	4603      	mov	r3, r0
 80063d8:	4293      	cmp	r3, r2
 80063da:	d100      	bne.n	80063de <memset+0xa>
 80063dc:	4770      	bx	lr
 80063de:	f803 1b01 	strb.w	r1, [r3], #1
 80063e2:	e7f9      	b.n	80063d8 <memset+0x4>

080063e4 <_init>:
 80063e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063e6:	bf00      	nop
 80063e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063ea:	bc08      	pop	{r3}
 80063ec:	469e      	mov	lr, r3
 80063ee:	4770      	bx	lr

080063f0 <_fini>:
 80063f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063f2:	bf00      	nop
 80063f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063f6:	bc08      	pop	{r3}
 80063f8:	469e      	mov	lr, r3
 80063fa:	4770      	bx	lr
