
STM32H743VIT6_SWD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000549c  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08005734  08005734  00015734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080057f4  080057f4  000157f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080057fc  080057fc  000157fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005800  08005800  00015800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  24000000  08005804  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000c4  24000074  08005878  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000138  08005878  00020138  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   000100da  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001e82  00000000  00000000  0003017c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000ac8  00000000  00000000  00032000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000a10  00000000  00000000  00032ac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00036361  00000000  00000000  000334d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000e3db  00000000  00000000  00069839  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00157ac7  00000000  00000000  00077c14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001cf6db  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003230  00000000  00000000  001cf72c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000074 	.word	0x24000074
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800571c 	.word	0x0800571c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000078 	.word	0x24000078
 80002d4:	0800571c 	.word	0x0800571c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005e4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005e8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80005ec:	f003 0301 	and.w	r3, r3, #1
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d013      	beq.n	800061c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005f4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005f8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005fc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000600:	2b00      	cmp	r3, #0
 8000602:	d00b      	beq.n	800061c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000604:	e000      	b.n	8000608 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000606:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000608:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d0f9      	beq.n	8000606 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000612:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000616:	687a      	ldr	r2, [r7, #4]
 8000618:	b2d2      	uxtb	r2, r2
 800061a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800061c:	687b      	ldr	r3, [r7, #4]
}
 800061e:	4618      	mov	r0, r3
 8000620:	370c      	adds	r7, #12
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr

0800062a <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 800062a:	b580      	push	{r7, lr}
 800062c:	b082      	sub	sp, #8
 800062e:	af00      	add	r7, sp, #0
 8000630:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	4618      	mov	r0, r3
 8000636:	f7ff ffd1 	bl	80005dc <ITM_SendChar>
	return(ch);
 800063a:	687b      	ldr	r3, [r7, #4]
}
 800063c:	4618      	mov	r0, r3
 800063e:	3708      	adds	r7, #8
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}

08000644 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000644:	b5b0      	push	{r4, r5, r7, lr}
 8000646:	b086      	sub	sp, #24
 8000648:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800064a:	f000 fb4b 	bl	8000ce4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800064e:	f000 f82b 	bl	80006a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000652:	f000 f8df 	bl	8000814 <MX_GPIO_Init>
  MX_UART7_Init();
 8000656:	f000 f891 	bl	800077c <MX_UART7_Init>
  /* USER CODE BEGIN 2 */
  PRINT("Led ON\n");
 800065a:	480e      	ldr	r0, [pc, #56]	; (8000694 <main+0x50>)
 800065c:	f004 fbce 	bl	8004dfc <puts>
  uint8_t tx[] = "Please wait...\r\n";
 8000660:	4b0d      	ldr	r3, [pc, #52]	; (8000698 <main+0x54>)
 8000662:	1d3c      	adds	r4, r7, #4
 8000664:	461d      	mov	r5, r3
 8000666:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000668:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800066a:	682b      	ldr	r3, [r5, #0]
 800066c:	7023      	strb	r3, [r4, #0]
  HAL_UART_Transmit(&huart7, tx, sizeof(tx), 1000 );
 800066e:	1d39      	adds	r1, r7, #4
 8000670:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000674:	2211      	movs	r2, #17
 8000676:	4809      	ldr	r0, [pc, #36]	; (800069c <main+0x58>)
 8000678:	f003 fa6a 	bl	8003b50 <HAL_UART_Transmit>
  HAL_Delay(5000);
 800067c:	f241 3088 	movw	r0, #5000	; 0x1388
 8000680:	f000 fbc2 	bl	8000e08 <HAL_Delay>
  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_0);		// turn led (PC0) off
 8000684:	2101      	movs	r1, #1
 8000686:	4806      	ldr	r0, [pc, #24]	; (80006a0 <main+0x5c>)
 8000688:	f000 fe9b 	bl	80013c2 <HAL_GPIO_TogglePin>
  PRINT("Led OFF\n");
 800068c:	4805      	ldr	r0, [pc, #20]	; (80006a4 <main+0x60>)
 800068e:	f004 fbb5 	bl	8004dfc <puts>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000692:	e7fe      	b.n	8000692 <main+0x4e>
 8000694:	08005734 	.word	0x08005734
 8000698:	08005744 	.word	0x08005744
 800069c:	24000090 	.word	0x24000090
 80006a0:	58020800 	.word	0x58020800
 80006a4:	0800573c 	.word	0x0800573c

080006a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b09c      	sub	sp, #112	; 0x70
 80006ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006b2:	224c      	movs	r2, #76	; 0x4c
 80006b4:	2100      	movs	r1, #0
 80006b6:	4618      	mov	r0, r3
 80006b8:	f004 fb2a 	bl	8004d10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006bc:	1d3b      	adds	r3, r7, #4
 80006be:	2220      	movs	r2, #32
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f004 fb24 	bl	8004d10 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80006c8:	2002      	movs	r0, #2
 80006ca:	f000 fe95 	bl	80013f8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006ce:	2300      	movs	r3, #0
 80006d0:	603b      	str	r3, [r7, #0]
 80006d2:	4b28      	ldr	r3, [pc, #160]	; (8000774 <SystemClock_Config+0xcc>)
 80006d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006d6:	4a27      	ldr	r2, [pc, #156]	; (8000774 <SystemClock_Config+0xcc>)
 80006d8:	f023 0301 	bic.w	r3, r3, #1
 80006dc:	62d3      	str	r3, [r2, #44]	; 0x2c
 80006de:	4b25      	ldr	r3, [pc, #148]	; (8000774 <SystemClock_Config+0xcc>)
 80006e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006e2:	f003 0301 	and.w	r3, r3, #1
 80006e6:	603b      	str	r3, [r7, #0]
 80006e8:	4b23      	ldr	r3, [pc, #140]	; (8000778 <SystemClock_Config+0xd0>)
 80006ea:	699b      	ldr	r3, [r3, #24]
 80006ec:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006f0:	4a21      	ldr	r2, [pc, #132]	; (8000778 <SystemClock_Config+0xd0>)
 80006f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006f6:	6193      	str	r3, [r2, #24]
 80006f8:	4b1f      	ldr	r3, [pc, #124]	; (8000778 <SystemClock_Config+0xd0>)
 80006fa:	699b      	ldr	r3, [r3, #24]
 80006fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000700:	603b      	str	r3, [r7, #0]
 8000702:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000704:	bf00      	nop
 8000706:	4b1c      	ldr	r3, [pc, #112]	; (8000778 <SystemClock_Config+0xd0>)
 8000708:	699b      	ldr	r3, [r3, #24]
 800070a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800070e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000712:	d1f8      	bne.n	8000706 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000714:	2302      	movs	r3, #2
 8000716:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000718:	2301      	movs	r3, #1
 800071a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800071c:	2340      	movs	r3, #64	; 0x40
 800071e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000720:	2300      	movs	r3, #0
 8000722:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000724:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000728:	4618      	mov	r0, r3
 800072a:	f000 fe9f 	bl	800146c <HAL_RCC_OscConfig>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000734:	f000 f8d0 	bl	80008d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000738:	233f      	movs	r3, #63	; 0x3f
 800073a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800073c:	2300      	movs	r3, #0
 800073e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000740:	2300      	movs	r3, #0
 8000742:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000744:	2300      	movs	r3, #0
 8000746:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000748:	2300      	movs	r3, #0
 800074a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800074c:	2340      	movs	r3, #64	; 0x40
 800074e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000750:	2300      	movs	r3, #0
 8000752:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000754:	2300      	movs	r3, #0
 8000756:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000758:	1d3b      	adds	r3, r7, #4
 800075a:	2101      	movs	r1, #1
 800075c:	4618      	mov	r0, r3
 800075e:	f001 fab3 	bl	8001cc8 <HAL_RCC_ClockConfig>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000768:	f000 f8b6 	bl	80008d8 <Error_Handler>
  }
}
 800076c:	bf00      	nop
 800076e:	3770      	adds	r7, #112	; 0x70
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	58000400 	.word	0x58000400
 8000778:	58024800 	.word	0x58024800

0800077c <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8000780:	4b22      	ldr	r3, [pc, #136]	; (800080c <MX_UART7_Init+0x90>)
 8000782:	4a23      	ldr	r2, [pc, #140]	; (8000810 <MX_UART7_Init+0x94>)
 8000784:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8000786:	4b21      	ldr	r3, [pc, #132]	; (800080c <MX_UART7_Init+0x90>)
 8000788:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800078c:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800078e:	4b1f      	ldr	r3, [pc, #124]	; (800080c <MX_UART7_Init+0x90>)
 8000790:	2200      	movs	r2, #0
 8000792:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000794:	4b1d      	ldr	r3, [pc, #116]	; (800080c <MX_UART7_Init+0x90>)
 8000796:	2200      	movs	r2, #0
 8000798:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800079a:	4b1c      	ldr	r3, [pc, #112]	; (800080c <MX_UART7_Init+0x90>)
 800079c:	2200      	movs	r2, #0
 800079e:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80007a0:	4b1a      	ldr	r3, [pc, #104]	; (800080c <MX_UART7_Init+0x90>)
 80007a2:	220c      	movs	r2, #12
 80007a4:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007a6:	4b19      	ldr	r3, [pc, #100]	; (800080c <MX_UART7_Init+0x90>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80007ac:	4b17      	ldr	r3, [pc, #92]	; (800080c <MX_UART7_Init+0x90>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007b2:	4b16      	ldr	r3, [pc, #88]	; (800080c <MX_UART7_Init+0x90>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007b8:	4b14      	ldr	r3, [pc, #80]	; (800080c <MX_UART7_Init+0x90>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007be:	4b13      	ldr	r3, [pc, #76]	; (800080c <MX_UART7_Init+0x90>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80007c4:	4811      	ldr	r0, [pc, #68]	; (800080c <MX_UART7_Init+0x90>)
 80007c6:	f003 f973 	bl	8003ab0 <HAL_UART_Init>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 80007d0:	f000 f882 	bl	80008d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007d4:	2100      	movs	r1, #0
 80007d6:	480d      	ldr	r0, [pc, #52]	; (800080c <MX_UART7_Init+0x90>)
 80007d8:	f004 f9a6 	bl	8004b28 <HAL_UARTEx_SetTxFifoThreshold>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 80007e2:	f000 f879 	bl	80008d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007e6:	2100      	movs	r1, #0
 80007e8:	4808      	ldr	r0, [pc, #32]	; (800080c <MX_UART7_Init+0x90>)
 80007ea:	f004 f9db 	bl	8004ba4 <HAL_UARTEx_SetRxFifoThreshold>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 80007f4:	f000 f870 	bl	80008d8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 80007f8:	4804      	ldr	r0, [pc, #16]	; (800080c <MX_UART7_Init+0x90>)
 80007fa:	f004 f95c 	bl	8004ab6 <HAL_UARTEx_DisableFifoMode>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8000804:	f000 f868 	bl	80008d8 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}
 800080c:	24000090 	.word	0x24000090
 8000810:	40007800 	.word	0x40007800

08000814 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08a      	sub	sp, #40	; 0x28
 8000818:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081a:	f107 0314 	add.w	r3, r7, #20
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]
 8000826:	60da      	str	r2, [r3, #12]
 8000828:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800082a:	4b29      	ldr	r3, [pc, #164]	; (80008d0 <MX_GPIO_Init+0xbc>)
 800082c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000830:	4a27      	ldr	r2, [pc, #156]	; (80008d0 <MX_GPIO_Init+0xbc>)
 8000832:	f043 0304 	orr.w	r3, r3, #4
 8000836:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800083a:	4b25      	ldr	r3, [pc, #148]	; (80008d0 <MX_GPIO_Init+0xbc>)
 800083c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000840:	f003 0304 	and.w	r3, r3, #4
 8000844:	613b      	str	r3, [r7, #16]
 8000846:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000848:	4b21      	ldr	r3, [pc, #132]	; (80008d0 <MX_GPIO_Init+0xbc>)
 800084a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800084e:	4a20      	ldr	r2, [pc, #128]	; (80008d0 <MX_GPIO_Init+0xbc>)
 8000850:	f043 0310 	orr.w	r3, r3, #16
 8000854:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000858:	4b1d      	ldr	r3, [pc, #116]	; (80008d0 <MX_GPIO_Init+0xbc>)
 800085a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800085e:	f003 0310 	and.w	r3, r3, #16
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000866:	4b1a      	ldr	r3, [pc, #104]	; (80008d0 <MX_GPIO_Init+0xbc>)
 8000868:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800086c:	4a18      	ldr	r2, [pc, #96]	; (80008d0 <MX_GPIO_Init+0xbc>)
 800086e:	f043 0301 	orr.w	r3, r3, #1
 8000872:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000876:	4b16      	ldr	r3, [pc, #88]	; (80008d0 <MX_GPIO_Init+0xbc>)
 8000878:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800087c:	f003 0301 	and.w	r3, r3, #1
 8000880:	60bb      	str	r3, [r7, #8]
 8000882:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000884:	4b12      	ldr	r3, [pc, #72]	; (80008d0 <MX_GPIO_Init+0xbc>)
 8000886:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800088a:	4a11      	ldr	r2, [pc, #68]	; (80008d0 <MX_GPIO_Init+0xbc>)
 800088c:	f043 0302 	orr.w	r3, r3, #2
 8000890:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000894:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <MX_GPIO_Init+0xbc>)
 8000896:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800089a:	f003 0302 	and.w	r3, r3, #2
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 80008a2:	2201      	movs	r2, #1
 80008a4:	2101      	movs	r1, #1
 80008a6:	480b      	ldr	r0, [pc, #44]	; (80008d4 <MX_GPIO_Init+0xc0>)
 80008a8:	f000 fd72 	bl	8001390 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008ac:	2301      	movs	r3, #1
 80008ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b0:	2301      	movs	r3, #1
 80008b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b8:	2300      	movs	r3, #0
 80008ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008bc:	f107 0314 	add.w	r3, r7, #20
 80008c0:	4619      	mov	r1, r3
 80008c2:	4804      	ldr	r0, [pc, #16]	; (80008d4 <MX_GPIO_Init+0xc0>)
 80008c4:	f000 fbb4 	bl	8001030 <HAL_GPIO_Init>

}
 80008c8:	bf00      	nop
 80008ca:	3728      	adds	r7, #40	; 0x28
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	58024400 	.word	0x58024400
 80008d4:	58020800 	.word	0x58020800

080008d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008dc:	b672      	cpsid	i
}
 80008de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e0:	e7fe      	b.n	80008e0 <Error_Handler+0x8>
	...

080008e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ea:	4b0a      	ldr	r3, [pc, #40]	; (8000914 <HAL_MspInit+0x30>)
 80008ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80008f0:	4a08      	ldr	r2, [pc, #32]	; (8000914 <HAL_MspInit+0x30>)
 80008f2:	f043 0302 	orr.w	r3, r3, #2
 80008f6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80008fa:	4b06      	ldr	r3, [pc, #24]	; (8000914 <HAL_MspInit+0x30>)
 80008fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000900:	f003 0302 	and.w	r3, r3, #2
 8000904:	607b      	str	r3, [r7, #4]
 8000906:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000908:	bf00      	nop
 800090a:	370c      	adds	r7, #12
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr
 8000914:	58024400 	.word	0x58024400

08000918 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b0b8      	sub	sp, #224	; 0xe0
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000920:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
 8000928:	605a      	str	r2, [r3, #4]
 800092a:	609a      	str	r2, [r3, #8]
 800092c:	60da      	str	r2, [r3, #12]
 800092e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000930:	f107 0310 	add.w	r3, r7, #16
 8000934:	22bc      	movs	r2, #188	; 0xbc
 8000936:	2100      	movs	r1, #0
 8000938:	4618      	mov	r0, r3
 800093a:	f004 f9e9 	bl	8004d10 <memset>
  if(huart->Instance==UART7)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	4a25      	ldr	r2, [pc, #148]	; (80009d8 <HAL_UART_MspInit+0xc0>)
 8000944:	4293      	cmp	r3, r2
 8000946:	d142      	bne.n	80009ce <HAL_UART_MspInit+0xb6>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8000948:	2302      	movs	r3, #2
 800094a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800094c:	2300      	movs	r3, #0
 800094e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000952:	f107 0310 	add.w	r3, r7, #16
 8000956:	4618      	mov	r0, r3
 8000958:	f001 fd42 	bl	80023e0 <HAL_RCCEx_PeriphCLKConfig>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000962:	f7ff ffb9 	bl	80008d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8000966:	4b1d      	ldr	r3, [pc, #116]	; (80009dc <HAL_UART_MspInit+0xc4>)
 8000968:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800096c:	4a1b      	ldr	r2, [pc, #108]	; (80009dc <HAL_UART_MspInit+0xc4>)
 800096e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000972:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000976:	4b19      	ldr	r3, [pc, #100]	; (80009dc <HAL_UART_MspInit+0xc4>)
 8000978:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800097c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000980:	60fb      	str	r3, [r7, #12]
 8000982:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000984:	4b15      	ldr	r3, [pc, #84]	; (80009dc <HAL_UART_MspInit+0xc4>)
 8000986:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800098a:	4a14      	ldr	r2, [pc, #80]	; (80009dc <HAL_UART_MspInit+0xc4>)
 800098c:	f043 0310 	orr.w	r3, r3, #16
 8000990:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000994:	4b11      	ldr	r3, [pc, #68]	; (80009dc <HAL_UART_MspInit+0xc4>)
 8000996:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800099a:	f003 0310 	and.w	r3, r3, #16
 800099e:	60bb      	str	r3, [r7, #8]
 80009a0:	68bb      	ldr	r3, [r7, #8]
    /**UART7 GPIO Configuration
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80009a2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80009a6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009aa:	2302      	movs	r3, #2
 80009ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b6:	2300      	movs	r3, #0
 80009b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 80009bc:	2307      	movs	r3, #7
 80009be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009c2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80009c6:	4619      	mov	r1, r3
 80009c8:	4805      	ldr	r0, [pc, #20]	; (80009e0 <HAL_UART_MspInit+0xc8>)
 80009ca:	f000 fb31 	bl	8001030 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 80009ce:	bf00      	nop
 80009d0:	37e0      	adds	r7, #224	; 0xe0
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40007800 	.word	0x40007800
 80009dc:	58024400 	.word	0x58024400
 80009e0:	58021000 	.word	0x58021000

080009e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009e8:	e7fe      	b.n	80009e8 <NMI_Handler+0x4>

080009ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ea:	b480      	push	{r7}
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ee:	e7fe      	b.n	80009ee <HardFault_Handler+0x4>

080009f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009f4:	e7fe      	b.n	80009f4 <MemManage_Handler+0x4>

080009f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009f6:	b480      	push	{r7}
 80009f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009fa:	e7fe      	b.n	80009fa <BusFault_Handler+0x4>

080009fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a00:	e7fe      	b.n	8000a00 <UsageFault_Handler+0x4>

08000a02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a02:	b480      	push	{r7}
 8000a04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a06:	bf00      	nop
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr

08000a10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a14:	bf00      	nop
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr

08000a1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a22:	bf00      	nop
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr

08000a2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a30:	f000 f9ca 	bl	8000dc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a34:	bf00      	nop
 8000a36:	bd80      	pop	{r7, pc}

08000a38 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b086      	sub	sp, #24
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	60f8      	str	r0, [r7, #12]
 8000a40:	60b9      	str	r1, [r7, #8]
 8000a42:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a44:	2300      	movs	r3, #0
 8000a46:	617b      	str	r3, [r7, #20]
 8000a48:	e00a      	b.n	8000a60 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a4a:	f3af 8000 	nop.w
 8000a4e:	4601      	mov	r1, r0
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	1c5a      	adds	r2, r3, #1
 8000a54:	60ba      	str	r2, [r7, #8]
 8000a56:	b2ca      	uxtb	r2, r1
 8000a58:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a5a:	697b      	ldr	r3, [r7, #20]
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	617b      	str	r3, [r7, #20]
 8000a60:	697a      	ldr	r2, [r7, #20]
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	429a      	cmp	r2, r3
 8000a66:	dbf0      	blt.n	8000a4a <_read+0x12>
	}

return len;
 8000a68:	687b      	ldr	r3, [r7, #4]
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3718      	adds	r7, #24
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}

08000a72 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a72:	b580      	push	{r7, lr}
 8000a74:	b086      	sub	sp, #24
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	60f8      	str	r0, [r7, #12]
 8000a7a:	60b9      	str	r1, [r7, #8]
 8000a7c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a7e:	2300      	movs	r3, #0
 8000a80:	617b      	str	r3, [r7, #20]
 8000a82:	e009      	b.n	8000a98 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	1c5a      	adds	r2, r3, #1
 8000a88:	60ba      	str	r2, [r7, #8]
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f7ff fdcc 	bl	800062a <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	3301      	adds	r3, #1
 8000a96:	617b      	str	r3, [r7, #20]
 8000a98:	697a      	ldr	r2, [r7, #20]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	dbf1      	blt.n	8000a84 <_write+0x12>
	}
	return len;
 8000aa0:	687b      	ldr	r3, [r7, #4]
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3718      	adds	r7, #24
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}

08000aaa <_close>:

int _close(int file)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	b083      	sub	sp, #12
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	6078      	str	r0, [r7, #4]
	return -1;
 8000ab2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	370c      	adds	r7, #12
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr

08000ac2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	b083      	sub	sp, #12
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	6078      	str	r0, [r7, #4]
 8000aca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ad2:	605a      	str	r2, [r3, #4]
	return 0;
 8000ad4:	2300      	movs	r3, #0
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	370c      	adds	r7, #12
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr

08000ae2 <_isatty>:

int _isatty(int file)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	b083      	sub	sp, #12
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	6078      	str	r0, [r7, #4]
	return 1;
 8000aea:	2301      	movs	r3, #1
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	370c      	adds	r7, #12
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr

08000af8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b085      	sub	sp, #20
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	60f8      	str	r0, [r7, #12]
 8000b00:	60b9      	str	r1, [r7, #8]
 8000b02:	607a      	str	r2, [r7, #4]
	return 0;
 8000b04:	2300      	movs	r3, #0
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3714      	adds	r7, #20
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
	...

08000b14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b086      	sub	sp, #24
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b1c:	4a14      	ldr	r2, [pc, #80]	; (8000b70 <_sbrk+0x5c>)
 8000b1e:	4b15      	ldr	r3, [pc, #84]	; (8000b74 <_sbrk+0x60>)
 8000b20:	1ad3      	subs	r3, r2, r3
 8000b22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b28:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <_sbrk+0x64>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d102      	bne.n	8000b36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b30:	4b11      	ldr	r3, [pc, #68]	; (8000b78 <_sbrk+0x64>)
 8000b32:	4a12      	ldr	r2, [pc, #72]	; (8000b7c <_sbrk+0x68>)
 8000b34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b36:	4b10      	ldr	r3, [pc, #64]	; (8000b78 <_sbrk+0x64>)
 8000b38:	681a      	ldr	r2, [r3, #0]
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	4413      	add	r3, r2
 8000b3e:	693a      	ldr	r2, [r7, #16]
 8000b40:	429a      	cmp	r2, r3
 8000b42:	d207      	bcs.n	8000b54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b44:	f004 f8ba 	bl	8004cbc <__errno>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	220c      	movs	r2, #12
 8000b4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b52:	e009      	b.n	8000b68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b54:	4b08      	ldr	r3, [pc, #32]	; (8000b78 <_sbrk+0x64>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b5a:	4b07      	ldr	r3, [pc, #28]	; (8000b78 <_sbrk+0x64>)
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	4413      	add	r3, r2
 8000b62:	4a05      	ldr	r2, [pc, #20]	; (8000b78 <_sbrk+0x64>)
 8000b64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b66:	68fb      	ldr	r3, [r7, #12]
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	3718      	adds	r7, #24
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	24080000 	.word	0x24080000
 8000b74:	00000400 	.word	0x00000400
 8000b78:	24000120 	.word	0x24000120
 8000b7c:	24000138 	.word	0x24000138

08000b80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b84:	4b37      	ldr	r3, [pc, #220]	; (8000c64 <SystemInit+0xe4>)
 8000b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b8a:	4a36      	ldr	r2, [pc, #216]	; (8000c64 <SystemInit+0xe4>)
 8000b8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b94:	4b34      	ldr	r3, [pc, #208]	; (8000c68 <SystemInit+0xe8>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	f003 030f 	and.w	r3, r3, #15
 8000b9c:	2b06      	cmp	r3, #6
 8000b9e:	d807      	bhi.n	8000bb0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ba0:	4b31      	ldr	r3, [pc, #196]	; (8000c68 <SystemInit+0xe8>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f023 030f 	bic.w	r3, r3, #15
 8000ba8:	4a2f      	ldr	r2, [pc, #188]	; (8000c68 <SystemInit+0xe8>)
 8000baa:	f043 0307 	orr.w	r3, r3, #7
 8000bae:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000bb0:	4b2e      	ldr	r3, [pc, #184]	; (8000c6c <SystemInit+0xec>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a2d      	ldr	r2, [pc, #180]	; (8000c6c <SystemInit+0xec>)
 8000bb6:	f043 0301 	orr.w	r3, r3, #1
 8000bba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000bbc:	4b2b      	ldr	r3, [pc, #172]	; (8000c6c <SystemInit+0xec>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000bc2:	4b2a      	ldr	r3, [pc, #168]	; (8000c6c <SystemInit+0xec>)
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	4929      	ldr	r1, [pc, #164]	; (8000c6c <SystemInit+0xec>)
 8000bc8:	4b29      	ldr	r3, [pc, #164]	; (8000c70 <SystemInit+0xf0>)
 8000bca:	4013      	ands	r3, r2
 8000bcc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000bce:	4b26      	ldr	r3, [pc, #152]	; (8000c68 <SystemInit+0xe8>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f003 0308 	and.w	r3, r3, #8
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d007      	beq.n	8000bea <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000bda:	4b23      	ldr	r3, [pc, #140]	; (8000c68 <SystemInit+0xe8>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f023 030f 	bic.w	r3, r3, #15
 8000be2:	4a21      	ldr	r2, [pc, #132]	; (8000c68 <SystemInit+0xe8>)
 8000be4:	f043 0307 	orr.w	r3, r3, #7
 8000be8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000bea:	4b20      	ldr	r3, [pc, #128]	; (8000c6c <SystemInit+0xec>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000bf0:	4b1e      	ldr	r3, [pc, #120]	; (8000c6c <SystemInit+0xec>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000bf6:	4b1d      	ldr	r3, [pc, #116]	; (8000c6c <SystemInit+0xec>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000bfc:	4b1b      	ldr	r3, [pc, #108]	; (8000c6c <SystemInit+0xec>)
 8000bfe:	4a1d      	ldr	r2, [pc, #116]	; (8000c74 <SystemInit+0xf4>)
 8000c00:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000c02:	4b1a      	ldr	r3, [pc, #104]	; (8000c6c <SystemInit+0xec>)
 8000c04:	4a1c      	ldr	r2, [pc, #112]	; (8000c78 <SystemInit+0xf8>)
 8000c06:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000c08:	4b18      	ldr	r3, [pc, #96]	; (8000c6c <SystemInit+0xec>)
 8000c0a:	4a1c      	ldr	r2, [pc, #112]	; (8000c7c <SystemInit+0xfc>)
 8000c0c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000c0e:	4b17      	ldr	r3, [pc, #92]	; (8000c6c <SystemInit+0xec>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000c14:	4b15      	ldr	r3, [pc, #84]	; (8000c6c <SystemInit+0xec>)
 8000c16:	4a19      	ldr	r2, [pc, #100]	; (8000c7c <SystemInit+0xfc>)
 8000c18:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000c1a:	4b14      	ldr	r3, [pc, #80]	; (8000c6c <SystemInit+0xec>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000c20:	4b12      	ldr	r3, [pc, #72]	; (8000c6c <SystemInit+0xec>)
 8000c22:	4a16      	ldr	r2, [pc, #88]	; (8000c7c <SystemInit+0xfc>)
 8000c24:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000c26:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <SystemInit+0xec>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c2c:	4b0f      	ldr	r3, [pc, #60]	; (8000c6c <SystemInit+0xec>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a0e      	ldr	r2, [pc, #56]	; (8000c6c <SystemInit+0xec>)
 8000c32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c36:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000c38:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <SystemInit+0xec>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000c3e:	4b10      	ldr	r3, [pc, #64]	; (8000c80 <SystemInit+0x100>)
 8000c40:	681a      	ldr	r2, [r3, #0]
 8000c42:	4b10      	ldr	r3, [pc, #64]	; (8000c84 <SystemInit+0x104>)
 8000c44:	4013      	ands	r3, r2
 8000c46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000c4a:	d202      	bcs.n	8000c52 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000c4c:	4b0e      	ldr	r3, [pc, #56]	; (8000c88 <SystemInit+0x108>)
 8000c4e:	2201      	movs	r2, #1
 8000c50:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000c52:	4b0e      	ldr	r3, [pc, #56]	; (8000c8c <SystemInit+0x10c>)
 8000c54:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000c58:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000c5a:	bf00      	nop
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr
 8000c64:	e000ed00 	.word	0xe000ed00
 8000c68:	52002000 	.word	0x52002000
 8000c6c:	58024400 	.word	0x58024400
 8000c70:	eaf6ed7f 	.word	0xeaf6ed7f
 8000c74:	02020200 	.word	0x02020200
 8000c78:	01ff0000 	.word	0x01ff0000
 8000c7c:	01010280 	.word	0x01010280
 8000c80:	5c001000 	.word	0x5c001000
 8000c84:	ffff0000 	.word	0xffff0000
 8000c88:	51008108 	.word	0x51008108
 8000c8c:	52004000 	.word	0x52004000

08000c90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000c90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cc8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c94:	f7ff ff74 	bl	8000b80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c98:	480c      	ldr	r0, [pc, #48]	; (8000ccc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c9a:	490d      	ldr	r1, [pc, #52]	; (8000cd0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c9c:	4a0d      	ldr	r2, [pc, #52]	; (8000cd4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ca0:	e002      	b.n	8000ca8 <LoopCopyDataInit>

08000ca2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ca2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ca4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ca6:	3304      	adds	r3, #4

08000ca8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ca8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000caa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cac:	d3f9      	bcc.n	8000ca2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cae:	4a0a      	ldr	r2, [pc, #40]	; (8000cd8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cb0:	4c0a      	ldr	r4, [pc, #40]	; (8000cdc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cb4:	e001      	b.n	8000cba <LoopFillZerobss>

08000cb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cb8:	3204      	adds	r2, #4

08000cba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cbc:	d3fb      	bcc.n	8000cb6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cbe:	f004 f803 	bl	8004cc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cc2:	f7ff fcbf 	bl	8000644 <main>
  bx  lr
 8000cc6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cc8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000ccc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000cd0:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8000cd4:	08005804 	.word	0x08005804
  ldr r2, =_sbss
 8000cd8:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 8000cdc:	24000138 	.word	0x24000138

08000ce0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ce0:	e7fe      	b.n	8000ce0 <ADC3_IRQHandler>
	...

08000ce4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cea:	2003      	movs	r0, #3
 8000cec:	f000 f96e 	bl	8000fcc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000cf0:	f001 f9a0 	bl	8002034 <HAL_RCC_GetSysClockFreq>
 8000cf4:	4602      	mov	r2, r0
 8000cf6:	4b15      	ldr	r3, [pc, #84]	; (8000d4c <HAL_Init+0x68>)
 8000cf8:	699b      	ldr	r3, [r3, #24]
 8000cfa:	0a1b      	lsrs	r3, r3, #8
 8000cfc:	f003 030f 	and.w	r3, r3, #15
 8000d00:	4913      	ldr	r1, [pc, #76]	; (8000d50 <HAL_Init+0x6c>)
 8000d02:	5ccb      	ldrb	r3, [r1, r3]
 8000d04:	f003 031f 	and.w	r3, r3, #31
 8000d08:	fa22 f303 	lsr.w	r3, r2, r3
 8000d0c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000d0e:	4b0f      	ldr	r3, [pc, #60]	; (8000d4c <HAL_Init+0x68>)
 8000d10:	699b      	ldr	r3, [r3, #24]
 8000d12:	f003 030f 	and.w	r3, r3, #15
 8000d16:	4a0e      	ldr	r2, [pc, #56]	; (8000d50 <HAL_Init+0x6c>)
 8000d18:	5cd3      	ldrb	r3, [r2, r3]
 8000d1a:	f003 031f 	and.w	r3, r3, #31
 8000d1e:	687a      	ldr	r2, [r7, #4]
 8000d20:	fa22 f303 	lsr.w	r3, r2, r3
 8000d24:	4a0b      	ldr	r2, [pc, #44]	; (8000d54 <HAL_Init+0x70>)
 8000d26:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000d28:	4a0b      	ldr	r2, [pc, #44]	; (8000d58 <HAL_Init+0x74>)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d2e:	200f      	movs	r0, #15
 8000d30:	f000 f814 	bl	8000d5c <HAL_InitTick>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	e002      	b.n	8000d44 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000d3e:	f7ff fdd1 	bl	80008e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d42:	2300      	movs	r3, #0
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	3708      	adds	r7, #8
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	58024400 	.word	0x58024400
 8000d50:	08005758 	.word	0x08005758
 8000d54:	24000004 	.word	0x24000004
 8000d58:	24000000 	.word	0x24000000

08000d5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000d64:	4b15      	ldr	r3, [pc, #84]	; (8000dbc <HAL_InitTick+0x60>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d101      	bne.n	8000d70 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	e021      	b.n	8000db4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000d70:	4b13      	ldr	r3, [pc, #76]	; (8000dc0 <HAL_InitTick+0x64>)
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	4b11      	ldr	r3, [pc, #68]	; (8000dbc <HAL_InitTick+0x60>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	4619      	mov	r1, r3
 8000d7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d86:	4618      	mov	r0, r3
 8000d88:	f000 f945 	bl	8001016 <HAL_SYSTICK_Config>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000d92:	2301      	movs	r3, #1
 8000d94:	e00e      	b.n	8000db4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2b0f      	cmp	r3, #15
 8000d9a:	d80a      	bhi.n	8000db2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	6879      	ldr	r1, [r7, #4]
 8000da0:	f04f 30ff 	mov.w	r0, #4294967295
 8000da4:	f000 f91d 	bl	8000fe2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000da8:	4a06      	ldr	r2, [pc, #24]	; (8000dc4 <HAL_InitTick+0x68>)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dae:	2300      	movs	r3, #0
 8000db0:	e000      	b.n	8000db4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000db2:	2301      	movs	r3, #1
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3708      	adds	r7, #8
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	2400000c 	.word	0x2400000c
 8000dc0:	24000000 	.word	0x24000000
 8000dc4:	24000008 	.word	0x24000008

08000dc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000dcc:	4b06      	ldr	r3, [pc, #24]	; (8000de8 <HAL_IncTick+0x20>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	4b06      	ldr	r3, [pc, #24]	; (8000dec <HAL_IncTick+0x24>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4413      	add	r3, r2
 8000dd8:	4a04      	ldr	r2, [pc, #16]	; (8000dec <HAL_IncTick+0x24>)
 8000dda:	6013      	str	r3, [r2, #0]
}
 8000ddc:	bf00      	nop
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	2400000c 	.word	0x2400000c
 8000dec:	24000124 	.word	0x24000124

08000df0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  return uwTick;
 8000df4:	4b03      	ldr	r3, [pc, #12]	; (8000e04 <HAL_GetTick+0x14>)
 8000df6:	681b      	ldr	r3, [r3, #0]
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	24000124 	.word	0x24000124

08000e08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e10:	f7ff ffee 	bl	8000df0 <HAL_GetTick>
 8000e14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e20:	d005      	beq.n	8000e2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e22:	4b0a      	ldr	r3, [pc, #40]	; (8000e4c <HAL_Delay+0x44>)
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	461a      	mov	r2, r3
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	4413      	add	r3, r2
 8000e2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e2e:	bf00      	nop
 8000e30:	f7ff ffde 	bl	8000df0 <HAL_GetTick>
 8000e34:	4602      	mov	r2, r0
 8000e36:	68bb      	ldr	r3, [r7, #8]
 8000e38:	1ad3      	subs	r3, r2, r3
 8000e3a:	68fa      	ldr	r2, [r7, #12]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d8f7      	bhi.n	8000e30 <HAL_Delay+0x28>
  {
  }
}
 8000e40:	bf00      	nop
 8000e42:	bf00      	nop
 8000e44:	3710      	adds	r7, #16
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	2400000c 	.word	0x2400000c

08000e50 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000e54:	4b03      	ldr	r3, [pc, #12]	; (8000e64 <HAL_GetREVID+0x14>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	0c1b      	lsrs	r3, r3, #16
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	5c001000 	.word	0x5c001000

08000e68 <__NVIC_SetPriorityGrouping>:
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	f003 0307 	and.w	r3, r3, #7
 8000e76:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e78:	4b0b      	ldr	r3, [pc, #44]	; (8000ea8 <__NVIC_SetPriorityGrouping+0x40>)
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e7e:	68ba      	ldr	r2, [r7, #8]
 8000e80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e84:	4013      	ands	r3, r2
 8000e86:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000e90:	4b06      	ldr	r3, [pc, #24]	; (8000eac <__NVIC_SetPriorityGrouping+0x44>)
 8000e92:	4313      	orrs	r3, r2
 8000e94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e96:	4a04      	ldr	r2, [pc, #16]	; (8000ea8 <__NVIC_SetPriorityGrouping+0x40>)
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	60d3      	str	r3, [r2, #12]
}
 8000e9c:	bf00      	nop
 8000e9e:	3714      	adds	r7, #20
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	e000ed00 	.word	0xe000ed00
 8000eac:	05fa0000 	.word	0x05fa0000

08000eb0 <__NVIC_GetPriorityGrouping>:
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eb4:	4b04      	ldr	r3, [pc, #16]	; (8000ec8 <__NVIC_GetPriorityGrouping+0x18>)
 8000eb6:	68db      	ldr	r3, [r3, #12]
 8000eb8:	0a1b      	lsrs	r3, r3, #8
 8000eba:	f003 0307 	and.w	r3, r3, #7
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr
 8000ec8:	e000ed00 	.word	0xe000ed00

08000ecc <__NVIC_SetPriority>:
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	6039      	str	r1, [r7, #0]
 8000ed6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000ed8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	db0a      	blt.n	8000ef6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	b2da      	uxtb	r2, r3
 8000ee4:	490c      	ldr	r1, [pc, #48]	; (8000f18 <__NVIC_SetPriority+0x4c>)
 8000ee6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000eea:	0112      	lsls	r2, r2, #4
 8000eec:	b2d2      	uxtb	r2, r2
 8000eee:	440b      	add	r3, r1
 8000ef0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000ef4:	e00a      	b.n	8000f0c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	b2da      	uxtb	r2, r3
 8000efa:	4908      	ldr	r1, [pc, #32]	; (8000f1c <__NVIC_SetPriority+0x50>)
 8000efc:	88fb      	ldrh	r3, [r7, #6]
 8000efe:	f003 030f 	and.w	r3, r3, #15
 8000f02:	3b04      	subs	r3, #4
 8000f04:	0112      	lsls	r2, r2, #4
 8000f06:	b2d2      	uxtb	r2, r2
 8000f08:	440b      	add	r3, r1
 8000f0a:	761a      	strb	r2, [r3, #24]
}
 8000f0c:	bf00      	nop
 8000f0e:	370c      	adds	r7, #12
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr
 8000f18:	e000e100 	.word	0xe000e100
 8000f1c:	e000ed00 	.word	0xe000ed00

08000f20 <NVIC_EncodePriority>:
{
 8000f20:	b480      	push	{r7}
 8000f22:	b089      	sub	sp, #36	; 0x24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	60f8      	str	r0, [r7, #12]
 8000f28:	60b9      	str	r1, [r7, #8]
 8000f2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	f003 0307 	and.w	r3, r3, #7
 8000f32:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	f1c3 0307 	rsb	r3, r3, #7
 8000f3a:	2b04      	cmp	r3, #4
 8000f3c:	bf28      	it	cs
 8000f3e:	2304      	movcs	r3, #4
 8000f40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	3304      	adds	r3, #4
 8000f46:	2b06      	cmp	r3, #6
 8000f48:	d902      	bls.n	8000f50 <NVIC_EncodePriority+0x30>
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	3b03      	subs	r3, #3
 8000f4e:	e000      	b.n	8000f52 <NVIC_EncodePriority+0x32>
 8000f50:	2300      	movs	r3, #0
 8000f52:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f54:	f04f 32ff 	mov.w	r2, #4294967295
 8000f58:	69bb      	ldr	r3, [r7, #24]
 8000f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5e:	43da      	mvns	r2, r3
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	401a      	ands	r2, r3
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f68:	f04f 31ff 	mov.w	r1, #4294967295
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f72:	43d9      	mvns	r1, r3
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f78:	4313      	orrs	r3, r2
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3724      	adds	r7, #36	; 0x24
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
	...

08000f88 <SysTick_Config>:
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	3b01      	subs	r3, #1
 8000f94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f98:	d301      	bcc.n	8000f9e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e00f      	b.n	8000fbe <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f9e:	4a0a      	ldr	r2, [pc, #40]	; (8000fc8 <SysTick_Config+0x40>)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	3b01      	subs	r3, #1
 8000fa4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fa6:	210f      	movs	r1, #15
 8000fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fac:	f7ff ff8e 	bl	8000ecc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fb0:	4b05      	ldr	r3, [pc, #20]	; (8000fc8 <SysTick_Config+0x40>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fb6:	4b04      	ldr	r3, [pc, #16]	; (8000fc8 <SysTick_Config+0x40>)
 8000fb8:	2207      	movs	r2, #7
 8000fba:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000fbc:	2300      	movs	r3, #0
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	e000e010 	.word	0xe000e010

08000fcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f7ff ff47 	bl	8000e68 <__NVIC_SetPriorityGrouping>
}
 8000fda:	bf00      	nop
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}

08000fe2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	b086      	sub	sp, #24
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	4603      	mov	r3, r0
 8000fea:	60b9      	str	r1, [r7, #8]
 8000fec:	607a      	str	r2, [r7, #4]
 8000fee:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ff0:	f7ff ff5e 	bl	8000eb0 <__NVIC_GetPriorityGrouping>
 8000ff4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	68b9      	ldr	r1, [r7, #8]
 8000ffa:	6978      	ldr	r0, [r7, #20]
 8000ffc:	f7ff ff90 	bl	8000f20 <NVIC_EncodePriority>
 8001000:	4602      	mov	r2, r0
 8001002:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001006:	4611      	mov	r1, r2
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff ff5f 	bl	8000ecc <__NVIC_SetPriority>
}
 800100e:	bf00      	nop
 8001010:	3718      	adds	r7, #24
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	b082      	sub	sp, #8
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f7ff ffb2 	bl	8000f88 <SysTick_Config>
 8001024:	4603      	mov	r3, r0
}
 8001026:	4618      	mov	r0, r3
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
	...

08001030 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001030:	b480      	push	{r7}
 8001032:	b089      	sub	sp, #36	; 0x24
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800103a:	2300      	movs	r3, #0
 800103c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800103e:	4b89      	ldr	r3, [pc, #548]	; (8001264 <HAL_GPIO_Init+0x234>)
 8001040:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001042:	e194      	b.n	800136e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	2101      	movs	r1, #1
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	fa01 f303 	lsl.w	r3, r1, r3
 8001050:	4013      	ands	r3, r2
 8001052:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	2b00      	cmp	r3, #0
 8001058:	f000 8186 	beq.w	8001368 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f003 0303 	and.w	r3, r3, #3
 8001064:	2b01      	cmp	r3, #1
 8001066:	d005      	beq.n	8001074 <HAL_GPIO_Init+0x44>
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f003 0303 	and.w	r3, r3, #3
 8001070:	2b02      	cmp	r3, #2
 8001072:	d130      	bne.n	80010d6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	2203      	movs	r2, #3
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	43db      	mvns	r3, r3
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	4013      	ands	r3, r2
 800108a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	68da      	ldr	r2, [r3, #12]
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	4313      	orrs	r3, r2
 800109c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010aa:	2201      	movs	r2, #1
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	43db      	mvns	r3, r3
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	4013      	ands	r3, r2
 80010b8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	091b      	lsrs	r3, r3, #4
 80010c0:	f003 0201 	and.w	r2, r3, #1
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f003 0303 	and.w	r3, r3, #3
 80010de:	2b03      	cmp	r3, #3
 80010e0:	d017      	beq.n	8001112 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	68db      	ldr	r3, [r3, #12]
 80010e6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	2203      	movs	r2, #3
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	43db      	mvns	r3, r3
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	4013      	ands	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	689a      	ldr	r2, [r3, #8]
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	4313      	orrs	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	f003 0303 	and.w	r3, r3, #3
 800111a:	2b02      	cmp	r3, #2
 800111c:	d123      	bne.n	8001166 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	08da      	lsrs	r2, r3, #3
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	3208      	adds	r2, #8
 8001126:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800112a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	f003 0307 	and.w	r3, r3, #7
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	220f      	movs	r2, #15
 8001136:	fa02 f303 	lsl.w	r3, r2, r3
 800113a:	43db      	mvns	r3, r3
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	4013      	ands	r3, r2
 8001140:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	691a      	ldr	r2, [r3, #16]
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	f003 0307 	and.w	r3, r3, #7
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	fa02 f303 	lsl.w	r3, r2, r3
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	4313      	orrs	r3, r2
 8001156:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	08da      	lsrs	r2, r3, #3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	3208      	adds	r2, #8
 8001160:	69b9      	ldr	r1, [r7, #24]
 8001162:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	2203      	movs	r2, #3
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	43db      	mvns	r3, r3
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	4013      	ands	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f003 0203 	and.w	r2, r3, #3
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	4313      	orrs	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	f000 80e0 	beq.w	8001368 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011a8:	4b2f      	ldr	r3, [pc, #188]	; (8001268 <HAL_GPIO_Init+0x238>)
 80011aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80011ae:	4a2e      	ldr	r2, [pc, #184]	; (8001268 <HAL_GPIO_Init+0x238>)
 80011b0:	f043 0302 	orr.w	r3, r3, #2
 80011b4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80011b8:	4b2b      	ldr	r3, [pc, #172]	; (8001268 <HAL_GPIO_Init+0x238>)
 80011ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80011be:	f003 0302 	and.w	r3, r3, #2
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011c6:	4a29      	ldr	r2, [pc, #164]	; (800126c <HAL_GPIO_Init+0x23c>)
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	089b      	lsrs	r3, r3, #2
 80011cc:	3302      	adds	r3, #2
 80011ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	f003 0303 	and.w	r3, r3, #3
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	220f      	movs	r2, #15
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	43db      	mvns	r3, r3
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	4013      	ands	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a20      	ldr	r2, [pc, #128]	; (8001270 <HAL_GPIO_Init+0x240>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d052      	beq.n	8001298 <HAL_GPIO_Init+0x268>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a1f      	ldr	r2, [pc, #124]	; (8001274 <HAL_GPIO_Init+0x244>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d031      	beq.n	800125e <HAL_GPIO_Init+0x22e>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a1e      	ldr	r2, [pc, #120]	; (8001278 <HAL_GPIO_Init+0x248>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d02b      	beq.n	800125a <HAL_GPIO_Init+0x22a>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a1d      	ldr	r2, [pc, #116]	; (800127c <HAL_GPIO_Init+0x24c>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d025      	beq.n	8001256 <HAL_GPIO_Init+0x226>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a1c      	ldr	r2, [pc, #112]	; (8001280 <HAL_GPIO_Init+0x250>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d01f      	beq.n	8001252 <HAL_GPIO_Init+0x222>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a1b      	ldr	r2, [pc, #108]	; (8001284 <HAL_GPIO_Init+0x254>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d019      	beq.n	800124e <HAL_GPIO_Init+0x21e>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a1a      	ldr	r2, [pc, #104]	; (8001288 <HAL_GPIO_Init+0x258>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d013      	beq.n	800124a <HAL_GPIO_Init+0x21a>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a19      	ldr	r2, [pc, #100]	; (800128c <HAL_GPIO_Init+0x25c>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d00d      	beq.n	8001246 <HAL_GPIO_Init+0x216>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a18      	ldr	r2, [pc, #96]	; (8001290 <HAL_GPIO_Init+0x260>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d007      	beq.n	8001242 <HAL_GPIO_Init+0x212>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a17      	ldr	r2, [pc, #92]	; (8001294 <HAL_GPIO_Init+0x264>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d101      	bne.n	800123e <HAL_GPIO_Init+0x20e>
 800123a:	2309      	movs	r3, #9
 800123c:	e02d      	b.n	800129a <HAL_GPIO_Init+0x26a>
 800123e:	230a      	movs	r3, #10
 8001240:	e02b      	b.n	800129a <HAL_GPIO_Init+0x26a>
 8001242:	2308      	movs	r3, #8
 8001244:	e029      	b.n	800129a <HAL_GPIO_Init+0x26a>
 8001246:	2307      	movs	r3, #7
 8001248:	e027      	b.n	800129a <HAL_GPIO_Init+0x26a>
 800124a:	2306      	movs	r3, #6
 800124c:	e025      	b.n	800129a <HAL_GPIO_Init+0x26a>
 800124e:	2305      	movs	r3, #5
 8001250:	e023      	b.n	800129a <HAL_GPIO_Init+0x26a>
 8001252:	2304      	movs	r3, #4
 8001254:	e021      	b.n	800129a <HAL_GPIO_Init+0x26a>
 8001256:	2303      	movs	r3, #3
 8001258:	e01f      	b.n	800129a <HAL_GPIO_Init+0x26a>
 800125a:	2302      	movs	r3, #2
 800125c:	e01d      	b.n	800129a <HAL_GPIO_Init+0x26a>
 800125e:	2301      	movs	r3, #1
 8001260:	e01b      	b.n	800129a <HAL_GPIO_Init+0x26a>
 8001262:	bf00      	nop
 8001264:	58000080 	.word	0x58000080
 8001268:	58024400 	.word	0x58024400
 800126c:	58000400 	.word	0x58000400
 8001270:	58020000 	.word	0x58020000
 8001274:	58020400 	.word	0x58020400
 8001278:	58020800 	.word	0x58020800
 800127c:	58020c00 	.word	0x58020c00
 8001280:	58021000 	.word	0x58021000
 8001284:	58021400 	.word	0x58021400
 8001288:	58021800 	.word	0x58021800
 800128c:	58021c00 	.word	0x58021c00
 8001290:	58022000 	.word	0x58022000
 8001294:	58022400 	.word	0x58022400
 8001298:	2300      	movs	r3, #0
 800129a:	69fa      	ldr	r2, [r7, #28]
 800129c:	f002 0203 	and.w	r2, r2, #3
 80012a0:	0092      	lsls	r2, r2, #2
 80012a2:	4093      	lsls	r3, r2
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012aa:	4938      	ldr	r1, [pc, #224]	; (800138c <HAL_GPIO_Init+0x35c>)
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	089b      	lsrs	r3, r3, #2
 80012b0:	3302      	adds	r3, #2
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	43db      	mvns	r3, r3
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	4013      	ands	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d003      	beq.n	80012de <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	4313      	orrs	r3, r2
 80012dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80012de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80012e2:	69bb      	ldr	r3, [r7, #24]
 80012e4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80012e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	43db      	mvns	r3, r3
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	4013      	ands	r3, r2
 80012f6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001300:	2b00      	cmp	r3, #0
 8001302:	d003      	beq.n	800130c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	4313      	orrs	r3, r2
 800130a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800130c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	43db      	mvns	r3, r3
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	4013      	ands	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800132c:	2b00      	cmp	r3, #0
 800132e:	d003      	beq.n	8001338 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	4313      	orrs	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	69ba      	ldr	r2, [r7, #24]
 800133c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	43db      	mvns	r3, r3
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	4013      	ands	r3, r2
 800134c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d003      	beq.n	8001362 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	4313      	orrs	r3, r2
 8001360:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	3301      	adds	r3, #1
 800136c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	fa22 f303 	lsr.w	r3, r2, r3
 8001378:	2b00      	cmp	r3, #0
 800137a:	f47f ae63 	bne.w	8001044 <HAL_GPIO_Init+0x14>
  }
}
 800137e:	bf00      	nop
 8001380:	bf00      	nop
 8001382:	3724      	adds	r7, #36	; 0x24
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr
 800138c:	58000400 	.word	0x58000400

08001390 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	460b      	mov	r3, r1
 800139a:	807b      	strh	r3, [r7, #2]
 800139c:	4613      	mov	r3, r2
 800139e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013a0:	787b      	ldrb	r3, [r7, #1]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d003      	beq.n	80013ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013a6:	887a      	ldrh	r2, [r7, #2]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80013ac:	e003      	b.n	80013b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80013ae:	887b      	ldrh	r3, [r7, #2]
 80013b0:	041a      	lsls	r2, r3, #16
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	619a      	str	r2, [r3, #24]
}
 80013b6:	bf00      	nop
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr

080013c2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80013c2:	b480      	push	{r7}
 80013c4:	b085      	sub	sp, #20
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]
 80013ca:	460b      	mov	r3, r1
 80013cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	695b      	ldr	r3, [r3, #20]
 80013d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013d4:	887a      	ldrh	r2, [r7, #2]
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	4013      	ands	r3, r2
 80013da:	041a      	lsls	r2, r3, #16
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	43d9      	mvns	r1, r3
 80013e0:	887b      	ldrh	r3, [r7, #2]
 80013e2:	400b      	ands	r3, r1
 80013e4:	431a      	orrs	r2, r3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	619a      	str	r2, [r3, #24]
}
 80013ea:	bf00      	nop
 80013ec:	3714      	adds	r7, #20
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
	...

080013f8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001400:	4b19      	ldr	r3, [pc, #100]	; (8001468 <HAL_PWREx_ConfigSupply+0x70>)
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	f003 0304 	and.w	r3, r3, #4
 8001408:	2b04      	cmp	r3, #4
 800140a:	d00a      	beq.n	8001422 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800140c:	4b16      	ldr	r3, [pc, #88]	; (8001468 <HAL_PWREx_ConfigSupply+0x70>)
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	f003 0307 	and.w	r3, r3, #7
 8001414:	687a      	ldr	r2, [r7, #4]
 8001416:	429a      	cmp	r2, r3
 8001418:	d001      	beq.n	800141e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e01f      	b.n	800145e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800141e:	2300      	movs	r3, #0
 8001420:	e01d      	b.n	800145e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001422:	4b11      	ldr	r3, [pc, #68]	; (8001468 <HAL_PWREx_ConfigSupply+0x70>)
 8001424:	68db      	ldr	r3, [r3, #12]
 8001426:	f023 0207 	bic.w	r2, r3, #7
 800142a:	490f      	ldr	r1, [pc, #60]	; (8001468 <HAL_PWREx_ConfigSupply+0x70>)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	4313      	orrs	r3, r2
 8001430:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001432:	f7ff fcdd 	bl	8000df0 <HAL_GetTick>
 8001436:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001438:	e009      	b.n	800144e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800143a:	f7ff fcd9 	bl	8000df0 <HAL_GetTick>
 800143e:	4602      	mov	r2, r0
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001448:	d901      	bls.n	800144e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e007      	b.n	800145e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800144e:	4b06      	ldr	r3, [pc, #24]	; (8001468 <HAL_PWREx_ConfigSupply+0x70>)
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001456:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800145a:	d1ee      	bne.n	800143a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800145c:	2300      	movs	r3, #0
}
 800145e:	4618      	mov	r0, r3
 8001460:	3710      	adds	r7, #16
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	58024800 	.word	0x58024800

0800146c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b08c      	sub	sp, #48	; 0x30
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d102      	bne.n	8001480 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	f000 bc1d 	b.w	8001cba <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 0301 	and.w	r3, r3, #1
 8001488:	2b00      	cmp	r3, #0
 800148a:	f000 8087 	beq.w	800159c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800148e:	4b99      	ldr	r3, [pc, #612]	; (80016f4 <HAL_RCC_OscConfig+0x288>)
 8001490:	691b      	ldr	r3, [r3, #16]
 8001492:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001496:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001498:	4b96      	ldr	r3, [pc, #600]	; (80016f4 <HAL_RCC_OscConfig+0x288>)
 800149a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800149c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800149e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014a0:	2b10      	cmp	r3, #16
 80014a2:	d007      	beq.n	80014b4 <HAL_RCC_OscConfig+0x48>
 80014a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014a6:	2b18      	cmp	r3, #24
 80014a8:	d110      	bne.n	80014cc <HAL_RCC_OscConfig+0x60>
 80014aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014ac:	f003 0303 	and.w	r3, r3, #3
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d10b      	bne.n	80014cc <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014b4:	4b8f      	ldr	r3, [pc, #572]	; (80016f4 <HAL_RCC_OscConfig+0x288>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d06c      	beq.n	800159a <HAL_RCC_OscConfig+0x12e>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d168      	bne.n	800159a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e3f6      	b.n	8001cba <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014d4:	d106      	bne.n	80014e4 <HAL_RCC_OscConfig+0x78>
 80014d6:	4b87      	ldr	r3, [pc, #540]	; (80016f4 <HAL_RCC_OscConfig+0x288>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a86      	ldr	r2, [pc, #536]	; (80016f4 <HAL_RCC_OscConfig+0x288>)
 80014dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014e0:	6013      	str	r3, [r2, #0]
 80014e2:	e02e      	b.n	8001542 <HAL_RCC_OscConfig+0xd6>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d10c      	bne.n	8001506 <HAL_RCC_OscConfig+0x9a>
 80014ec:	4b81      	ldr	r3, [pc, #516]	; (80016f4 <HAL_RCC_OscConfig+0x288>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a80      	ldr	r2, [pc, #512]	; (80016f4 <HAL_RCC_OscConfig+0x288>)
 80014f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014f6:	6013      	str	r3, [r2, #0]
 80014f8:	4b7e      	ldr	r3, [pc, #504]	; (80016f4 <HAL_RCC_OscConfig+0x288>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a7d      	ldr	r2, [pc, #500]	; (80016f4 <HAL_RCC_OscConfig+0x288>)
 80014fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001502:	6013      	str	r3, [r2, #0]
 8001504:	e01d      	b.n	8001542 <HAL_RCC_OscConfig+0xd6>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800150e:	d10c      	bne.n	800152a <HAL_RCC_OscConfig+0xbe>
 8001510:	4b78      	ldr	r3, [pc, #480]	; (80016f4 <HAL_RCC_OscConfig+0x288>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a77      	ldr	r2, [pc, #476]	; (80016f4 <HAL_RCC_OscConfig+0x288>)
 8001516:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800151a:	6013      	str	r3, [r2, #0]
 800151c:	4b75      	ldr	r3, [pc, #468]	; (80016f4 <HAL_RCC_OscConfig+0x288>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a74      	ldr	r2, [pc, #464]	; (80016f4 <HAL_RCC_OscConfig+0x288>)
 8001522:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001526:	6013      	str	r3, [r2, #0]
 8001528:	e00b      	b.n	8001542 <HAL_RCC_OscConfig+0xd6>
 800152a:	4b72      	ldr	r3, [pc, #456]	; (80016f4 <HAL_RCC_OscConfig+0x288>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a71      	ldr	r2, [pc, #452]	; (80016f4 <HAL_RCC_OscConfig+0x288>)
 8001530:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001534:	6013      	str	r3, [r2, #0]
 8001536:	4b6f      	ldr	r3, [pc, #444]	; (80016f4 <HAL_RCC_OscConfig+0x288>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a6e      	ldr	r2, [pc, #440]	; (80016f4 <HAL_RCC_OscConfig+0x288>)
 800153c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001540:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d013      	beq.n	8001572 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800154a:	f7ff fc51 	bl	8000df0 <HAL_GetTick>
 800154e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001550:	e008      	b.n	8001564 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001552:	f7ff fc4d 	bl	8000df0 <HAL_GetTick>
 8001556:	4602      	mov	r2, r0
 8001558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	2b64      	cmp	r3, #100	; 0x64
 800155e:	d901      	bls.n	8001564 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001560:	2303      	movs	r3, #3
 8001562:	e3aa      	b.n	8001cba <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001564:	4b63      	ldr	r3, [pc, #396]	; (80016f4 <HAL_RCC_OscConfig+0x288>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800156c:	2b00      	cmp	r3, #0
 800156e:	d0f0      	beq.n	8001552 <HAL_RCC_OscConfig+0xe6>
 8001570:	e014      	b.n	800159c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001572:	f7ff fc3d 	bl	8000df0 <HAL_GetTick>
 8001576:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001578:	e008      	b.n	800158c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800157a:	f7ff fc39 	bl	8000df0 <HAL_GetTick>
 800157e:	4602      	mov	r2, r0
 8001580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	2b64      	cmp	r3, #100	; 0x64
 8001586:	d901      	bls.n	800158c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8001588:	2303      	movs	r3, #3
 800158a:	e396      	b.n	8001cba <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800158c:	4b59      	ldr	r3, [pc, #356]	; (80016f4 <HAL_RCC_OscConfig+0x288>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001594:	2b00      	cmp	r3, #0
 8001596:	d1f0      	bne.n	800157a <HAL_RCC_OscConfig+0x10e>
 8001598:	e000      	b.n	800159c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800159a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0302 	and.w	r3, r3, #2
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	f000 80cb 	beq.w	8001740 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015aa:	4b52      	ldr	r3, [pc, #328]	; (80016f4 <HAL_RCC_OscConfig+0x288>)
 80015ac:	691b      	ldr	r3, [r3, #16]
 80015ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80015b2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80015b4:	4b4f      	ldr	r3, [pc, #316]	; (80016f4 <HAL_RCC_OscConfig+0x288>)
 80015b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b8:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80015ba:	6a3b      	ldr	r3, [r7, #32]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d007      	beq.n	80015d0 <HAL_RCC_OscConfig+0x164>
 80015c0:	6a3b      	ldr	r3, [r7, #32]
 80015c2:	2b18      	cmp	r3, #24
 80015c4:	d156      	bne.n	8001674 <HAL_RCC_OscConfig+0x208>
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	f003 0303 	and.w	r3, r3, #3
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d151      	bne.n	8001674 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015d0:	4b48      	ldr	r3, [pc, #288]	; (80016f4 <HAL_RCC_OscConfig+0x288>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f003 0304 	and.w	r3, r3, #4
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d005      	beq.n	80015e8 <HAL_RCC_OscConfig+0x17c>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d101      	bne.n	80015e8 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e368      	b.n	8001cba <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80015e8:	4b42      	ldr	r3, [pc, #264]	; (80016f4 <HAL_RCC_OscConfig+0x288>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f023 0219 	bic.w	r2, r3, #25
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	493f      	ldr	r1, [pc, #252]	; (80016f4 <HAL_RCC_OscConfig+0x288>)
 80015f6:	4313      	orrs	r3, r2
 80015f8:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80015fa:	f7ff fbf9 	bl	8000df0 <HAL_GetTick>
 80015fe:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001600:	e008      	b.n	8001614 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001602:	f7ff fbf5 	bl	8000df0 <HAL_GetTick>
 8001606:	4602      	mov	r2, r0
 8001608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	2b02      	cmp	r3, #2
 800160e:	d901      	bls.n	8001614 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8001610:	2303      	movs	r3, #3
 8001612:	e352      	b.n	8001cba <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001614:	4b37      	ldr	r3, [pc, #220]	; (80016f4 <HAL_RCC_OscConfig+0x288>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 0304 	and.w	r3, r3, #4
 800161c:	2b00      	cmp	r3, #0
 800161e:	d0f0      	beq.n	8001602 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001620:	f7ff fc16 	bl	8000e50 <HAL_GetREVID>
 8001624:	4603      	mov	r3, r0
 8001626:	f241 0203 	movw	r2, #4099	; 0x1003
 800162a:	4293      	cmp	r3, r2
 800162c:	d817      	bhi.n	800165e <HAL_RCC_OscConfig+0x1f2>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	691b      	ldr	r3, [r3, #16]
 8001632:	2b40      	cmp	r3, #64	; 0x40
 8001634:	d108      	bne.n	8001648 <HAL_RCC_OscConfig+0x1dc>
 8001636:	4b2f      	ldr	r3, [pc, #188]	; (80016f4 <HAL_RCC_OscConfig+0x288>)
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800163e:	4a2d      	ldr	r2, [pc, #180]	; (80016f4 <HAL_RCC_OscConfig+0x288>)
 8001640:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001644:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001646:	e07b      	b.n	8001740 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001648:	4b2a      	ldr	r3, [pc, #168]	; (80016f4 <HAL_RCC_OscConfig+0x288>)
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	691b      	ldr	r3, [r3, #16]
 8001654:	031b      	lsls	r3, r3, #12
 8001656:	4927      	ldr	r1, [pc, #156]	; (80016f4 <HAL_RCC_OscConfig+0x288>)
 8001658:	4313      	orrs	r3, r2
 800165a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800165c:	e070      	b.n	8001740 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800165e:	4b25      	ldr	r3, [pc, #148]	; (80016f4 <HAL_RCC_OscConfig+0x288>)
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	691b      	ldr	r3, [r3, #16]
 800166a:	061b      	lsls	r3, r3, #24
 800166c:	4921      	ldr	r1, [pc, #132]	; (80016f4 <HAL_RCC_OscConfig+0x288>)
 800166e:	4313      	orrs	r3, r2
 8001670:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001672:	e065      	b.n	8001740 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d048      	beq.n	800170e <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800167c:	4b1d      	ldr	r3, [pc, #116]	; (80016f4 <HAL_RCC_OscConfig+0x288>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f023 0219 	bic.w	r2, r3, #25
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	491a      	ldr	r1, [pc, #104]	; (80016f4 <HAL_RCC_OscConfig+0x288>)
 800168a:	4313      	orrs	r3, r2
 800168c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800168e:	f7ff fbaf 	bl	8000df0 <HAL_GetTick>
 8001692:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001694:	e008      	b.n	80016a8 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001696:	f7ff fbab 	bl	8000df0 <HAL_GetTick>
 800169a:	4602      	mov	r2, r0
 800169c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d901      	bls.n	80016a8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80016a4:	2303      	movs	r3, #3
 80016a6:	e308      	b.n	8001cba <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80016a8:	4b12      	ldr	r3, [pc, #72]	; (80016f4 <HAL_RCC_OscConfig+0x288>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0304 	and.w	r3, r3, #4
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d0f0      	beq.n	8001696 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016b4:	f7ff fbcc 	bl	8000e50 <HAL_GetREVID>
 80016b8:	4603      	mov	r3, r0
 80016ba:	f241 0203 	movw	r2, #4099	; 0x1003
 80016be:	4293      	cmp	r3, r2
 80016c0:	d81a      	bhi.n	80016f8 <HAL_RCC_OscConfig+0x28c>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	691b      	ldr	r3, [r3, #16]
 80016c6:	2b40      	cmp	r3, #64	; 0x40
 80016c8:	d108      	bne.n	80016dc <HAL_RCC_OscConfig+0x270>
 80016ca:	4b0a      	ldr	r3, [pc, #40]	; (80016f4 <HAL_RCC_OscConfig+0x288>)
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80016d2:	4a08      	ldr	r2, [pc, #32]	; (80016f4 <HAL_RCC_OscConfig+0x288>)
 80016d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016d8:	6053      	str	r3, [r2, #4]
 80016da:	e031      	b.n	8001740 <HAL_RCC_OscConfig+0x2d4>
 80016dc:	4b05      	ldr	r3, [pc, #20]	; (80016f4 <HAL_RCC_OscConfig+0x288>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	691b      	ldr	r3, [r3, #16]
 80016e8:	031b      	lsls	r3, r3, #12
 80016ea:	4902      	ldr	r1, [pc, #8]	; (80016f4 <HAL_RCC_OscConfig+0x288>)
 80016ec:	4313      	orrs	r3, r2
 80016ee:	604b      	str	r3, [r1, #4]
 80016f0:	e026      	b.n	8001740 <HAL_RCC_OscConfig+0x2d4>
 80016f2:	bf00      	nop
 80016f4:	58024400 	.word	0x58024400
 80016f8:	4b9a      	ldr	r3, [pc, #616]	; (8001964 <HAL_RCC_OscConfig+0x4f8>)
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	691b      	ldr	r3, [r3, #16]
 8001704:	061b      	lsls	r3, r3, #24
 8001706:	4997      	ldr	r1, [pc, #604]	; (8001964 <HAL_RCC_OscConfig+0x4f8>)
 8001708:	4313      	orrs	r3, r2
 800170a:	604b      	str	r3, [r1, #4]
 800170c:	e018      	b.n	8001740 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800170e:	4b95      	ldr	r3, [pc, #596]	; (8001964 <HAL_RCC_OscConfig+0x4f8>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a94      	ldr	r2, [pc, #592]	; (8001964 <HAL_RCC_OscConfig+0x4f8>)
 8001714:	f023 0301 	bic.w	r3, r3, #1
 8001718:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800171a:	f7ff fb69 	bl	8000df0 <HAL_GetTick>
 800171e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001720:	e008      	b.n	8001734 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001722:	f7ff fb65 	bl	8000df0 <HAL_GetTick>
 8001726:	4602      	mov	r2, r0
 8001728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	2b02      	cmp	r3, #2
 800172e:	d901      	bls.n	8001734 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001730:	2303      	movs	r3, #3
 8001732:	e2c2      	b.n	8001cba <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001734:	4b8b      	ldr	r3, [pc, #556]	; (8001964 <HAL_RCC_OscConfig+0x4f8>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0304 	and.w	r3, r3, #4
 800173c:	2b00      	cmp	r3, #0
 800173e:	d1f0      	bne.n	8001722 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 0310 	and.w	r3, r3, #16
 8001748:	2b00      	cmp	r3, #0
 800174a:	f000 80a9 	beq.w	80018a0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800174e:	4b85      	ldr	r3, [pc, #532]	; (8001964 <HAL_RCC_OscConfig+0x4f8>)
 8001750:	691b      	ldr	r3, [r3, #16]
 8001752:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001756:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001758:	4b82      	ldr	r3, [pc, #520]	; (8001964 <HAL_RCC_OscConfig+0x4f8>)
 800175a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800175c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800175e:	69bb      	ldr	r3, [r7, #24]
 8001760:	2b08      	cmp	r3, #8
 8001762:	d007      	beq.n	8001774 <HAL_RCC_OscConfig+0x308>
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	2b18      	cmp	r3, #24
 8001768:	d13a      	bne.n	80017e0 <HAL_RCC_OscConfig+0x374>
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	f003 0303 	and.w	r3, r3, #3
 8001770:	2b01      	cmp	r3, #1
 8001772:	d135      	bne.n	80017e0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001774:	4b7b      	ldr	r3, [pc, #492]	; (8001964 <HAL_RCC_OscConfig+0x4f8>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800177c:	2b00      	cmp	r3, #0
 800177e:	d005      	beq.n	800178c <HAL_RCC_OscConfig+0x320>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	69db      	ldr	r3, [r3, #28]
 8001784:	2b80      	cmp	r3, #128	; 0x80
 8001786:	d001      	beq.n	800178c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e296      	b.n	8001cba <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800178c:	f7ff fb60 	bl	8000e50 <HAL_GetREVID>
 8001790:	4603      	mov	r3, r0
 8001792:	f241 0203 	movw	r2, #4099	; 0x1003
 8001796:	4293      	cmp	r3, r2
 8001798:	d817      	bhi.n	80017ca <HAL_RCC_OscConfig+0x35e>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6a1b      	ldr	r3, [r3, #32]
 800179e:	2b20      	cmp	r3, #32
 80017a0:	d108      	bne.n	80017b4 <HAL_RCC_OscConfig+0x348>
 80017a2:	4b70      	ldr	r3, [pc, #448]	; (8001964 <HAL_RCC_OscConfig+0x4f8>)
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80017aa:	4a6e      	ldr	r2, [pc, #440]	; (8001964 <HAL_RCC_OscConfig+0x4f8>)
 80017ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80017b0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80017b2:	e075      	b.n	80018a0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80017b4:	4b6b      	ldr	r3, [pc, #428]	; (8001964 <HAL_RCC_OscConfig+0x4f8>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6a1b      	ldr	r3, [r3, #32]
 80017c0:	069b      	lsls	r3, r3, #26
 80017c2:	4968      	ldr	r1, [pc, #416]	; (8001964 <HAL_RCC_OscConfig+0x4f8>)
 80017c4:	4313      	orrs	r3, r2
 80017c6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80017c8:	e06a      	b.n	80018a0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80017ca:	4b66      	ldr	r3, [pc, #408]	; (8001964 <HAL_RCC_OscConfig+0x4f8>)
 80017cc:	68db      	ldr	r3, [r3, #12]
 80017ce:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6a1b      	ldr	r3, [r3, #32]
 80017d6:	061b      	lsls	r3, r3, #24
 80017d8:	4962      	ldr	r1, [pc, #392]	; (8001964 <HAL_RCC_OscConfig+0x4f8>)
 80017da:	4313      	orrs	r3, r2
 80017dc:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80017de:	e05f      	b.n	80018a0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	69db      	ldr	r3, [r3, #28]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d042      	beq.n	800186e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80017e8:	4b5e      	ldr	r3, [pc, #376]	; (8001964 <HAL_RCC_OscConfig+0x4f8>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a5d      	ldr	r2, [pc, #372]	; (8001964 <HAL_RCC_OscConfig+0x4f8>)
 80017ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f4:	f7ff fafc 	bl	8000df0 <HAL_GetTick>
 80017f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80017fa:	e008      	b.n	800180e <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80017fc:	f7ff faf8 	bl	8000df0 <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	2b02      	cmp	r3, #2
 8001808:	d901      	bls.n	800180e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e255      	b.n	8001cba <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800180e:	4b55      	ldr	r3, [pc, #340]	; (8001964 <HAL_RCC_OscConfig+0x4f8>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001816:	2b00      	cmp	r3, #0
 8001818:	d0f0      	beq.n	80017fc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800181a:	f7ff fb19 	bl	8000e50 <HAL_GetREVID>
 800181e:	4603      	mov	r3, r0
 8001820:	f241 0203 	movw	r2, #4099	; 0x1003
 8001824:	4293      	cmp	r3, r2
 8001826:	d817      	bhi.n	8001858 <HAL_RCC_OscConfig+0x3ec>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6a1b      	ldr	r3, [r3, #32]
 800182c:	2b20      	cmp	r3, #32
 800182e:	d108      	bne.n	8001842 <HAL_RCC_OscConfig+0x3d6>
 8001830:	4b4c      	ldr	r3, [pc, #304]	; (8001964 <HAL_RCC_OscConfig+0x4f8>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001838:	4a4a      	ldr	r2, [pc, #296]	; (8001964 <HAL_RCC_OscConfig+0x4f8>)
 800183a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800183e:	6053      	str	r3, [r2, #4]
 8001840:	e02e      	b.n	80018a0 <HAL_RCC_OscConfig+0x434>
 8001842:	4b48      	ldr	r3, [pc, #288]	; (8001964 <HAL_RCC_OscConfig+0x4f8>)
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6a1b      	ldr	r3, [r3, #32]
 800184e:	069b      	lsls	r3, r3, #26
 8001850:	4944      	ldr	r1, [pc, #272]	; (8001964 <HAL_RCC_OscConfig+0x4f8>)
 8001852:	4313      	orrs	r3, r2
 8001854:	604b      	str	r3, [r1, #4]
 8001856:	e023      	b.n	80018a0 <HAL_RCC_OscConfig+0x434>
 8001858:	4b42      	ldr	r3, [pc, #264]	; (8001964 <HAL_RCC_OscConfig+0x4f8>)
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6a1b      	ldr	r3, [r3, #32]
 8001864:	061b      	lsls	r3, r3, #24
 8001866:	493f      	ldr	r1, [pc, #252]	; (8001964 <HAL_RCC_OscConfig+0x4f8>)
 8001868:	4313      	orrs	r3, r2
 800186a:	60cb      	str	r3, [r1, #12]
 800186c:	e018      	b.n	80018a0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800186e:	4b3d      	ldr	r3, [pc, #244]	; (8001964 <HAL_RCC_OscConfig+0x4f8>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a3c      	ldr	r2, [pc, #240]	; (8001964 <HAL_RCC_OscConfig+0x4f8>)
 8001874:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001878:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800187a:	f7ff fab9 	bl	8000df0 <HAL_GetTick>
 800187e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001880:	e008      	b.n	8001894 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001882:	f7ff fab5 	bl	8000df0 <HAL_GetTick>
 8001886:	4602      	mov	r2, r0
 8001888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	2b02      	cmp	r3, #2
 800188e:	d901      	bls.n	8001894 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001890:	2303      	movs	r3, #3
 8001892:	e212      	b.n	8001cba <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001894:	4b33      	ldr	r3, [pc, #204]	; (8001964 <HAL_RCC_OscConfig+0x4f8>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800189c:	2b00      	cmp	r3, #0
 800189e:	d1f0      	bne.n	8001882 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0308 	and.w	r3, r3, #8
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d036      	beq.n	800191a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	695b      	ldr	r3, [r3, #20]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d019      	beq.n	80018e8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018b4:	4b2b      	ldr	r3, [pc, #172]	; (8001964 <HAL_RCC_OscConfig+0x4f8>)
 80018b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018b8:	4a2a      	ldr	r2, [pc, #168]	; (8001964 <HAL_RCC_OscConfig+0x4f8>)
 80018ba:	f043 0301 	orr.w	r3, r3, #1
 80018be:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018c0:	f7ff fa96 	bl	8000df0 <HAL_GetTick>
 80018c4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80018c6:	e008      	b.n	80018da <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018c8:	f7ff fa92 	bl	8000df0 <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d901      	bls.n	80018da <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e1ef      	b.n	8001cba <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80018da:	4b22      	ldr	r3, [pc, #136]	; (8001964 <HAL_RCC_OscConfig+0x4f8>)
 80018dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018de:	f003 0302 	and.w	r3, r3, #2
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d0f0      	beq.n	80018c8 <HAL_RCC_OscConfig+0x45c>
 80018e6:	e018      	b.n	800191a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018e8:	4b1e      	ldr	r3, [pc, #120]	; (8001964 <HAL_RCC_OscConfig+0x4f8>)
 80018ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018ec:	4a1d      	ldr	r2, [pc, #116]	; (8001964 <HAL_RCC_OscConfig+0x4f8>)
 80018ee:	f023 0301 	bic.w	r3, r3, #1
 80018f2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018f4:	f7ff fa7c 	bl	8000df0 <HAL_GetTick>
 80018f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80018fa:	e008      	b.n	800190e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018fc:	f7ff fa78 	bl	8000df0 <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	2b02      	cmp	r3, #2
 8001908:	d901      	bls.n	800190e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e1d5      	b.n	8001cba <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800190e:	4b15      	ldr	r3, [pc, #84]	; (8001964 <HAL_RCC_OscConfig+0x4f8>)
 8001910:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001912:	f003 0302 	and.w	r3, r3, #2
 8001916:	2b00      	cmp	r3, #0
 8001918:	d1f0      	bne.n	80018fc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0320 	and.w	r3, r3, #32
 8001922:	2b00      	cmp	r3, #0
 8001924:	d039      	beq.n	800199a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	699b      	ldr	r3, [r3, #24]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d01c      	beq.n	8001968 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800192e:	4b0d      	ldr	r3, [pc, #52]	; (8001964 <HAL_RCC_OscConfig+0x4f8>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a0c      	ldr	r2, [pc, #48]	; (8001964 <HAL_RCC_OscConfig+0x4f8>)
 8001934:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001938:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800193a:	f7ff fa59 	bl	8000df0 <HAL_GetTick>
 800193e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001940:	e008      	b.n	8001954 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001942:	f7ff fa55 	bl	8000df0 <HAL_GetTick>
 8001946:	4602      	mov	r2, r0
 8001948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	2b02      	cmp	r3, #2
 800194e:	d901      	bls.n	8001954 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001950:	2303      	movs	r3, #3
 8001952:	e1b2      	b.n	8001cba <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001954:	4b03      	ldr	r3, [pc, #12]	; (8001964 <HAL_RCC_OscConfig+0x4f8>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800195c:	2b00      	cmp	r3, #0
 800195e:	d0f0      	beq.n	8001942 <HAL_RCC_OscConfig+0x4d6>
 8001960:	e01b      	b.n	800199a <HAL_RCC_OscConfig+0x52e>
 8001962:	bf00      	nop
 8001964:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001968:	4b9b      	ldr	r3, [pc, #620]	; (8001bd8 <HAL_RCC_OscConfig+0x76c>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a9a      	ldr	r2, [pc, #616]	; (8001bd8 <HAL_RCC_OscConfig+0x76c>)
 800196e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001972:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001974:	f7ff fa3c 	bl	8000df0 <HAL_GetTick>
 8001978:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800197a:	e008      	b.n	800198e <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800197c:	f7ff fa38 	bl	8000df0 <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	2b02      	cmp	r3, #2
 8001988:	d901      	bls.n	800198e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e195      	b.n	8001cba <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800198e:	4b92      	ldr	r3, [pc, #584]	; (8001bd8 <HAL_RCC_OscConfig+0x76c>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d1f0      	bne.n	800197c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0304 	and.w	r3, r3, #4
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	f000 8081 	beq.w	8001aaa <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80019a8:	4b8c      	ldr	r3, [pc, #560]	; (8001bdc <HAL_RCC_OscConfig+0x770>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a8b      	ldr	r2, [pc, #556]	; (8001bdc <HAL_RCC_OscConfig+0x770>)
 80019ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019b2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80019b4:	f7ff fa1c 	bl	8000df0 <HAL_GetTick>
 80019b8:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80019ba:	e008      	b.n	80019ce <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80019bc:	f7ff fa18 	bl	8000df0 <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	2b64      	cmp	r3, #100	; 0x64
 80019c8:	d901      	bls.n	80019ce <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e175      	b.n	8001cba <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80019ce:	4b83      	ldr	r3, [pc, #524]	; (8001bdc <HAL_RCC_OscConfig+0x770>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d0f0      	beq.n	80019bc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d106      	bne.n	80019f0 <HAL_RCC_OscConfig+0x584>
 80019e2:	4b7d      	ldr	r3, [pc, #500]	; (8001bd8 <HAL_RCC_OscConfig+0x76c>)
 80019e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019e6:	4a7c      	ldr	r2, [pc, #496]	; (8001bd8 <HAL_RCC_OscConfig+0x76c>)
 80019e8:	f043 0301 	orr.w	r3, r3, #1
 80019ec:	6713      	str	r3, [r2, #112]	; 0x70
 80019ee:	e02d      	b.n	8001a4c <HAL_RCC_OscConfig+0x5e0>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d10c      	bne.n	8001a12 <HAL_RCC_OscConfig+0x5a6>
 80019f8:	4b77      	ldr	r3, [pc, #476]	; (8001bd8 <HAL_RCC_OscConfig+0x76c>)
 80019fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019fc:	4a76      	ldr	r2, [pc, #472]	; (8001bd8 <HAL_RCC_OscConfig+0x76c>)
 80019fe:	f023 0301 	bic.w	r3, r3, #1
 8001a02:	6713      	str	r3, [r2, #112]	; 0x70
 8001a04:	4b74      	ldr	r3, [pc, #464]	; (8001bd8 <HAL_RCC_OscConfig+0x76c>)
 8001a06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a08:	4a73      	ldr	r2, [pc, #460]	; (8001bd8 <HAL_RCC_OscConfig+0x76c>)
 8001a0a:	f023 0304 	bic.w	r3, r3, #4
 8001a0e:	6713      	str	r3, [r2, #112]	; 0x70
 8001a10:	e01c      	b.n	8001a4c <HAL_RCC_OscConfig+0x5e0>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	2b05      	cmp	r3, #5
 8001a18:	d10c      	bne.n	8001a34 <HAL_RCC_OscConfig+0x5c8>
 8001a1a:	4b6f      	ldr	r3, [pc, #444]	; (8001bd8 <HAL_RCC_OscConfig+0x76c>)
 8001a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a1e:	4a6e      	ldr	r2, [pc, #440]	; (8001bd8 <HAL_RCC_OscConfig+0x76c>)
 8001a20:	f043 0304 	orr.w	r3, r3, #4
 8001a24:	6713      	str	r3, [r2, #112]	; 0x70
 8001a26:	4b6c      	ldr	r3, [pc, #432]	; (8001bd8 <HAL_RCC_OscConfig+0x76c>)
 8001a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a2a:	4a6b      	ldr	r2, [pc, #428]	; (8001bd8 <HAL_RCC_OscConfig+0x76c>)
 8001a2c:	f043 0301 	orr.w	r3, r3, #1
 8001a30:	6713      	str	r3, [r2, #112]	; 0x70
 8001a32:	e00b      	b.n	8001a4c <HAL_RCC_OscConfig+0x5e0>
 8001a34:	4b68      	ldr	r3, [pc, #416]	; (8001bd8 <HAL_RCC_OscConfig+0x76c>)
 8001a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a38:	4a67      	ldr	r2, [pc, #412]	; (8001bd8 <HAL_RCC_OscConfig+0x76c>)
 8001a3a:	f023 0301 	bic.w	r3, r3, #1
 8001a3e:	6713      	str	r3, [r2, #112]	; 0x70
 8001a40:	4b65      	ldr	r3, [pc, #404]	; (8001bd8 <HAL_RCC_OscConfig+0x76c>)
 8001a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a44:	4a64      	ldr	r2, [pc, #400]	; (8001bd8 <HAL_RCC_OscConfig+0x76c>)
 8001a46:	f023 0304 	bic.w	r3, r3, #4
 8001a4a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d015      	beq.n	8001a80 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a54:	f7ff f9cc 	bl	8000df0 <HAL_GetTick>
 8001a58:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a5a:	e00a      	b.n	8001a72 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a5c:	f7ff f9c8 	bl	8000df0 <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d901      	bls.n	8001a72 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e123      	b.n	8001cba <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a72:	4b59      	ldr	r3, [pc, #356]	; (8001bd8 <HAL_RCC_OscConfig+0x76c>)
 8001a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d0ee      	beq.n	8001a5c <HAL_RCC_OscConfig+0x5f0>
 8001a7e:	e014      	b.n	8001aaa <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a80:	f7ff f9b6 	bl	8000df0 <HAL_GetTick>
 8001a84:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001a86:	e00a      	b.n	8001a9e <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a88:	f7ff f9b2 	bl	8000df0 <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d901      	bls.n	8001a9e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e10d      	b.n	8001cba <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001a9e:	4b4e      	ldr	r3, [pc, #312]	; (8001bd8 <HAL_RCC_OscConfig+0x76c>)
 8001aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aa2:	f003 0302 	and.w	r3, r3, #2
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d1ee      	bne.n	8001a88 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	f000 8102 	beq.w	8001cb8 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001ab4:	4b48      	ldr	r3, [pc, #288]	; (8001bd8 <HAL_RCC_OscConfig+0x76c>)
 8001ab6:	691b      	ldr	r3, [r3, #16]
 8001ab8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001abc:	2b18      	cmp	r3, #24
 8001abe:	f000 80bd 	beq.w	8001c3c <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	f040 809e 	bne.w	8001c08 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001acc:	4b42      	ldr	r3, [pc, #264]	; (8001bd8 <HAL_RCC_OscConfig+0x76c>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a41      	ldr	r2, [pc, #260]	; (8001bd8 <HAL_RCC_OscConfig+0x76c>)
 8001ad2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ad6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad8:	f7ff f98a 	bl	8000df0 <HAL_GetTick>
 8001adc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001ade:	e008      	b.n	8001af2 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ae0:	f7ff f986 	bl	8000df0 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e0e3      	b.n	8001cba <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001af2:	4b39      	ldr	r3, [pc, #228]	; (8001bd8 <HAL_RCC_OscConfig+0x76c>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d1f0      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001afe:	4b36      	ldr	r3, [pc, #216]	; (8001bd8 <HAL_RCC_OscConfig+0x76c>)
 8001b00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b02:	4b37      	ldr	r3, [pc, #220]	; (8001be0 <HAL_RCC_OscConfig+0x774>)
 8001b04:	4013      	ands	r3, r2
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001b0e:	0112      	lsls	r2, r2, #4
 8001b10:	430a      	orrs	r2, r1
 8001b12:	4931      	ldr	r1, [pc, #196]	; (8001bd8 <HAL_RCC_OscConfig+0x76c>)
 8001b14:	4313      	orrs	r3, r2
 8001b16:	628b      	str	r3, [r1, #40]	; 0x28
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1c:	3b01      	subs	r3, #1
 8001b1e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b26:	3b01      	subs	r3, #1
 8001b28:	025b      	lsls	r3, r3, #9
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	431a      	orrs	r2, r3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b32:	3b01      	subs	r3, #1
 8001b34:	041b      	lsls	r3, r3, #16
 8001b36:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001b3a:	431a      	orrs	r2, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b40:	3b01      	subs	r3, #1
 8001b42:	061b      	lsls	r3, r3, #24
 8001b44:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001b48:	4923      	ldr	r1, [pc, #140]	; (8001bd8 <HAL_RCC_OscConfig+0x76c>)
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001b4e:	4b22      	ldr	r3, [pc, #136]	; (8001bd8 <HAL_RCC_OscConfig+0x76c>)
 8001b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b52:	4a21      	ldr	r2, [pc, #132]	; (8001bd8 <HAL_RCC_OscConfig+0x76c>)
 8001b54:	f023 0301 	bic.w	r3, r3, #1
 8001b58:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001b5a:	4b1f      	ldr	r3, [pc, #124]	; (8001bd8 <HAL_RCC_OscConfig+0x76c>)
 8001b5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b5e:	4b21      	ldr	r3, [pc, #132]	; (8001be4 <HAL_RCC_OscConfig+0x778>)
 8001b60:	4013      	ands	r3, r2
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001b66:	00d2      	lsls	r2, r2, #3
 8001b68:	491b      	ldr	r1, [pc, #108]	; (8001bd8 <HAL_RCC_OscConfig+0x76c>)
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001b6e:	4b1a      	ldr	r3, [pc, #104]	; (8001bd8 <HAL_RCC_OscConfig+0x76c>)
 8001b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b72:	f023 020c 	bic.w	r2, r3, #12
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7a:	4917      	ldr	r1, [pc, #92]	; (8001bd8 <HAL_RCC_OscConfig+0x76c>)
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001b80:	4b15      	ldr	r3, [pc, #84]	; (8001bd8 <HAL_RCC_OscConfig+0x76c>)
 8001b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b84:	f023 0202 	bic.w	r2, r3, #2
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8c:	4912      	ldr	r1, [pc, #72]	; (8001bd8 <HAL_RCC_OscConfig+0x76c>)
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001b92:	4b11      	ldr	r3, [pc, #68]	; (8001bd8 <HAL_RCC_OscConfig+0x76c>)
 8001b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b96:	4a10      	ldr	r2, [pc, #64]	; (8001bd8 <HAL_RCC_OscConfig+0x76c>)
 8001b98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b9c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001b9e:	4b0e      	ldr	r3, [pc, #56]	; (8001bd8 <HAL_RCC_OscConfig+0x76c>)
 8001ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba2:	4a0d      	ldr	r2, [pc, #52]	; (8001bd8 <HAL_RCC_OscConfig+0x76c>)
 8001ba4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ba8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001baa:	4b0b      	ldr	r3, [pc, #44]	; (8001bd8 <HAL_RCC_OscConfig+0x76c>)
 8001bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bae:	4a0a      	ldr	r2, [pc, #40]	; (8001bd8 <HAL_RCC_OscConfig+0x76c>)
 8001bb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bb4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001bb6:	4b08      	ldr	r3, [pc, #32]	; (8001bd8 <HAL_RCC_OscConfig+0x76c>)
 8001bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bba:	4a07      	ldr	r2, [pc, #28]	; (8001bd8 <HAL_RCC_OscConfig+0x76c>)
 8001bbc:	f043 0301 	orr.w	r3, r3, #1
 8001bc0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bc2:	4b05      	ldr	r3, [pc, #20]	; (8001bd8 <HAL_RCC_OscConfig+0x76c>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a04      	ldr	r2, [pc, #16]	; (8001bd8 <HAL_RCC_OscConfig+0x76c>)
 8001bc8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bce:	f7ff f90f 	bl	8000df0 <HAL_GetTick>
 8001bd2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001bd4:	e011      	b.n	8001bfa <HAL_RCC_OscConfig+0x78e>
 8001bd6:	bf00      	nop
 8001bd8:	58024400 	.word	0x58024400
 8001bdc:	58024800 	.word	0x58024800
 8001be0:	fffffc0c 	.word	0xfffffc0c
 8001be4:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001be8:	f7ff f902 	bl	8000df0 <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e05f      	b.n	8001cba <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001bfa:	4b32      	ldr	r3, [pc, #200]	; (8001cc4 <HAL_RCC_OscConfig+0x858>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d0f0      	beq.n	8001be8 <HAL_RCC_OscConfig+0x77c>
 8001c06:	e057      	b.n	8001cb8 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c08:	4b2e      	ldr	r3, [pc, #184]	; (8001cc4 <HAL_RCC_OscConfig+0x858>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a2d      	ldr	r2, [pc, #180]	; (8001cc4 <HAL_RCC_OscConfig+0x858>)
 8001c0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c14:	f7ff f8ec 	bl	8000df0 <HAL_GetTick>
 8001c18:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c1a:	e008      	b.n	8001c2e <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c1c:	f7ff f8e8 	bl	8000df0 <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e045      	b.n	8001cba <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c2e:	4b25      	ldr	r3, [pc, #148]	; (8001cc4 <HAL_RCC_OscConfig+0x858>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d1f0      	bne.n	8001c1c <HAL_RCC_OscConfig+0x7b0>
 8001c3a:	e03d      	b.n	8001cb8 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001c3c:	4b21      	ldr	r3, [pc, #132]	; (8001cc4 <HAL_RCC_OscConfig+0x858>)
 8001c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c40:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001c42:	4b20      	ldr	r3, [pc, #128]	; (8001cc4 <HAL_RCC_OscConfig+0x858>)
 8001c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c46:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d031      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	f003 0203 	and.w	r2, r3, #3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d12a      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	091b      	lsrs	r3, r3, #4
 8001c62:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d122      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c78:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d11a      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	0a5b      	lsrs	r3, r3, #9
 8001c82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c8a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d111      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	0c1b      	lsrs	r3, r3, #16
 8001c94:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c9c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d108      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	0e1b      	lsrs	r3, r3, #24
 8001ca6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cae:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d001      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e000      	b.n	8001cba <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3730      	adds	r7, #48	; 0x30
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	58024400 	.word	0x58024400

08001cc8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b086      	sub	sp, #24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d101      	bne.n	8001cdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e19c      	b.n	8002016 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cdc:	4b8a      	ldr	r3, [pc, #552]	; (8001f08 <HAL_RCC_ClockConfig+0x240>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 030f 	and.w	r3, r3, #15
 8001ce4:	683a      	ldr	r2, [r7, #0]
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d910      	bls.n	8001d0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cea:	4b87      	ldr	r3, [pc, #540]	; (8001f08 <HAL_RCC_ClockConfig+0x240>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f023 020f 	bic.w	r2, r3, #15
 8001cf2:	4985      	ldr	r1, [pc, #532]	; (8001f08 <HAL_RCC_ClockConfig+0x240>)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cfa:	4b83      	ldr	r3, [pc, #524]	; (8001f08 <HAL_RCC_ClockConfig+0x240>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 030f 	and.w	r3, r3, #15
 8001d02:	683a      	ldr	r2, [r7, #0]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d001      	beq.n	8001d0c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e184      	b.n	8002016 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0304 	and.w	r3, r3, #4
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d010      	beq.n	8001d3a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	691a      	ldr	r2, [r3, #16]
 8001d1c:	4b7b      	ldr	r3, [pc, #492]	; (8001f0c <HAL_RCC_ClockConfig+0x244>)
 8001d1e:	699b      	ldr	r3, [r3, #24]
 8001d20:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d908      	bls.n	8001d3a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001d28:	4b78      	ldr	r3, [pc, #480]	; (8001f0c <HAL_RCC_ClockConfig+0x244>)
 8001d2a:	699b      	ldr	r3, [r3, #24]
 8001d2c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	691b      	ldr	r3, [r3, #16]
 8001d34:	4975      	ldr	r1, [pc, #468]	; (8001f0c <HAL_RCC_ClockConfig+0x244>)
 8001d36:	4313      	orrs	r3, r2
 8001d38:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0308 	and.w	r3, r3, #8
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d010      	beq.n	8001d68 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	695a      	ldr	r2, [r3, #20]
 8001d4a:	4b70      	ldr	r3, [pc, #448]	; (8001f0c <HAL_RCC_ClockConfig+0x244>)
 8001d4c:	69db      	ldr	r3, [r3, #28]
 8001d4e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d908      	bls.n	8001d68 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001d56:	4b6d      	ldr	r3, [pc, #436]	; (8001f0c <HAL_RCC_ClockConfig+0x244>)
 8001d58:	69db      	ldr	r3, [r3, #28]
 8001d5a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	695b      	ldr	r3, [r3, #20]
 8001d62:	496a      	ldr	r1, [pc, #424]	; (8001f0c <HAL_RCC_ClockConfig+0x244>)
 8001d64:	4313      	orrs	r3, r2
 8001d66:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0310 	and.w	r3, r3, #16
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d010      	beq.n	8001d96 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	699a      	ldr	r2, [r3, #24]
 8001d78:	4b64      	ldr	r3, [pc, #400]	; (8001f0c <HAL_RCC_ClockConfig+0x244>)
 8001d7a:	69db      	ldr	r3, [r3, #28]
 8001d7c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d908      	bls.n	8001d96 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001d84:	4b61      	ldr	r3, [pc, #388]	; (8001f0c <HAL_RCC_ClockConfig+0x244>)
 8001d86:	69db      	ldr	r3, [r3, #28]
 8001d88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	699b      	ldr	r3, [r3, #24]
 8001d90:	495e      	ldr	r1, [pc, #376]	; (8001f0c <HAL_RCC_ClockConfig+0x244>)
 8001d92:	4313      	orrs	r3, r2
 8001d94:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0320 	and.w	r3, r3, #32
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d010      	beq.n	8001dc4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	69da      	ldr	r2, [r3, #28]
 8001da6:	4b59      	ldr	r3, [pc, #356]	; (8001f0c <HAL_RCC_ClockConfig+0x244>)
 8001da8:	6a1b      	ldr	r3, [r3, #32]
 8001daa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d908      	bls.n	8001dc4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001db2:	4b56      	ldr	r3, [pc, #344]	; (8001f0c <HAL_RCC_ClockConfig+0x244>)
 8001db4:	6a1b      	ldr	r3, [r3, #32]
 8001db6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	69db      	ldr	r3, [r3, #28]
 8001dbe:	4953      	ldr	r1, [pc, #332]	; (8001f0c <HAL_RCC_ClockConfig+0x244>)
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0302 	and.w	r3, r3, #2
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d010      	beq.n	8001df2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	68da      	ldr	r2, [r3, #12]
 8001dd4:	4b4d      	ldr	r3, [pc, #308]	; (8001f0c <HAL_RCC_ClockConfig+0x244>)
 8001dd6:	699b      	ldr	r3, [r3, #24]
 8001dd8:	f003 030f 	and.w	r3, r3, #15
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d908      	bls.n	8001df2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001de0:	4b4a      	ldr	r3, [pc, #296]	; (8001f0c <HAL_RCC_ClockConfig+0x244>)
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	f023 020f 	bic.w	r2, r3, #15
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	4947      	ldr	r1, [pc, #284]	; (8001f0c <HAL_RCC_ClockConfig+0x244>)
 8001dee:	4313      	orrs	r3, r2
 8001df0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d055      	beq.n	8001eaa <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001dfe:	4b43      	ldr	r3, [pc, #268]	; (8001f0c <HAL_RCC_ClockConfig+0x244>)
 8001e00:	699b      	ldr	r3, [r3, #24]
 8001e02:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	4940      	ldr	r1, [pc, #256]	; (8001f0c <HAL_RCC_ClockConfig+0x244>)
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d107      	bne.n	8001e28 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e18:	4b3c      	ldr	r3, [pc, #240]	; (8001f0c <HAL_RCC_ClockConfig+0x244>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d121      	bne.n	8001e68 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e0f6      	b.n	8002016 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	2b03      	cmp	r3, #3
 8001e2e:	d107      	bne.n	8001e40 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e30:	4b36      	ldr	r3, [pc, #216]	; (8001f0c <HAL_RCC_ClockConfig+0x244>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d115      	bne.n	8001e68 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e0ea      	b.n	8002016 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d107      	bne.n	8001e58 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001e48:	4b30      	ldr	r3, [pc, #192]	; (8001f0c <HAL_RCC_ClockConfig+0x244>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d109      	bne.n	8001e68 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e0de      	b.n	8002016 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e58:	4b2c      	ldr	r3, [pc, #176]	; (8001f0c <HAL_RCC_ClockConfig+0x244>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0304 	and.w	r3, r3, #4
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d101      	bne.n	8001e68 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e0d6      	b.n	8002016 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e68:	4b28      	ldr	r3, [pc, #160]	; (8001f0c <HAL_RCC_ClockConfig+0x244>)
 8001e6a:	691b      	ldr	r3, [r3, #16]
 8001e6c:	f023 0207 	bic.w	r2, r3, #7
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	4925      	ldr	r1, [pc, #148]	; (8001f0c <HAL_RCC_ClockConfig+0x244>)
 8001e76:	4313      	orrs	r3, r2
 8001e78:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e7a:	f7fe ffb9 	bl	8000df0 <HAL_GetTick>
 8001e7e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e80:	e00a      	b.n	8001e98 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e82:	f7fe ffb5 	bl	8000df0 <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d901      	bls.n	8001e98 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001e94:	2303      	movs	r3, #3
 8001e96:	e0be      	b.n	8002016 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e98:	4b1c      	ldr	r3, [pc, #112]	; (8001f0c <HAL_RCC_ClockConfig+0x244>)
 8001e9a:	691b      	ldr	r3, [r3, #16]
 8001e9c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	00db      	lsls	r3, r3, #3
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d1eb      	bne.n	8001e82 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d010      	beq.n	8001ed8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	68da      	ldr	r2, [r3, #12]
 8001eba:	4b14      	ldr	r3, [pc, #80]	; (8001f0c <HAL_RCC_ClockConfig+0x244>)
 8001ebc:	699b      	ldr	r3, [r3, #24]
 8001ebe:	f003 030f 	and.w	r3, r3, #15
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d208      	bcs.n	8001ed8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ec6:	4b11      	ldr	r3, [pc, #68]	; (8001f0c <HAL_RCC_ClockConfig+0x244>)
 8001ec8:	699b      	ldr	r3, [r3, #24]
 8001eca:	f023 020f 	bic.w	r2, r3, #15
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	490e      	ldr	r1, [pc, #56]	; (8001f0c <HAL_RCC_ClockConfig+0x244>)
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ed8:	4b0b      	ldr	r3, [pc, #44]	; (8001f08 <HAL_RCC_ClockConfig+0x240>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 030f 	and.w	r3, r3, #15
 8001ee0:	683a      	ldr	r2, [r7, #0]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d214      	bcs.n	8001f10 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ee6:	4b08      	ldr	r3, [pc, #32]	; (8001f08 <HAL_RCC_ClockConfig+0x240>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f023 020f 	bic.w	r2, r3, #15
 8001eee:	4906      	ldr	r1, [pc, #24]	; (8001f08 <HAL_RCC_ClockConfig+0x240>)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ef6:	4b04      	ldr	r3, [pc, #16]	; (8001f08 <HAL_RCC_ClockConfig+0x240>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 030f 	and.w	r3, r3, #15
 8001efe:	683a      	ldr	r2, [r7, #0]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d005      	beq.n	8001f10 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e086      	b.n	8002016 <HAL_RCC_ClockConfig+0x34e>
 8001f08:	52002000 	.word	0x52002000
 8001f0c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0304 	and.w	r3, r3, #4
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d010      	beq.n	8001f3e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	691a      	ldr	r2, [r3, #16]
 8001f20:	4b3f      	ldr	r3, [pc, #252]	; (8002020 <HAL_RCC_ClockConfig+0x358>)
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d208      	bcs.n	8001f3e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001f2c:	4b3c      	ldr	r3, [pc, #240]	; (8002020 <HAL_RCC_ClockConfig+0x358>)
 8001f2e:	699b      	ldr	r3, [r3, #24]
 8001f30:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	691b      	ldr	r3, [r3, #16]
 8001f38:	4939      	ldr	r1, [pc, #228]	; (8002020 <HAL_RCC_ClockConfig+0x358>)
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0308 	and.w	r3, r3, #8
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d010      	beq.n	8001f6c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	695a      	ldr	r2, [r3, #20]
 8001f4e:	4b34      	ldr	r3, [pc, #208]	; (8002020 <HAL_RCC_ClockConfig+0x358>)
 8001f50:	69db      	ldr	r3, [r3, #28]
 8001f52:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d208      	bcs.n	8001f6c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001f5a:	4b31      	ldr	r3, [pc, #196]	; (8002020 <HAL_RCC_ClockConfig+0x358>)
 8001f5c:	69db      	ldr	r3, [r3, #28]
 8001f5e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	695b      	ldr	r3, [r3, #20]
 8001f66:	492e      	ldr	r1, [pc, #184]	; (8002020 <HAL_RCC_ClockConfig+0x358>)
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0310 	and.w	r3, r3, #16
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d010      	beq.n	8001f9a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	699a      	ldr	r2, [r3, #24]
 8001f7c:	4b28      	ldr	r3, [pc, #160]	; (8002020 <HAL_RCC_ClockConfig+0x358>)
 8001f7e:	69db      	ldr	r3, [r3, #28]
 8001f80:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d208      	bcs.n	8001f9a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001f88:	4b25      	ldr	r3, [pc, #148]	; (8002020 <HAL_RCC_ClockConfig+0x358>)
 8001f8a:	69db      	ldr	r3, [r3, #28]
 8001f8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	699b      	ldr	r3, [r3, #24]
 8001f94:	4922      	ldr	r1, [pc, #136]	; (8002020 <HAL_RCC_ClockConfig+0x358>)
 8001f96:	4313      	orrs	r3, r2
 8001f98:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0320 	and.w	r3, r3, #32
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d010      	beq.n	8001fc8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	69da      	ldr	r2, [r3, #28]
 8001faa:	4b1d      	ldr	r3, [pc, #116]	; (8002020 <HAL_RCC_ClockConfig+0x358>)
 8001fac:	6a1b      	ldr	r3, [r3, #32]
 8001fae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d208      	bcs.n	8001fc8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001fb6:	4b1a      	ldr	r3, [pc, #104]	; (8002020 <HAL_RCC_ClockConfig+0x358>)
 8001fb8:	6a1b      	ldr	r3, [r3, #32]
 8001fba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	69db      	ldr	r3, [r3, #28]
 8001fc2:	4917      	ldr	r1, [pc, #92]	; (8002020 <HAL_RCC_ClockConfig+0x358>)
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001fc8:	f000 f834 	bl	8002034 <HAL_RCC_GetSysClockFreq>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	4b14      	ldr	r3, [pc, #80]	; (8002020 <HAL_RCC_ClockConfig+0x358>)
 8001fd0:	699b      	ldr	r3, [r3, #24]
 8001fd2:	0a1b      	lsrs	r3, r3, #8
 8001fd4:	f003 030f 	and.w	r3, r3, #15
 8001fd8:	4912      	ldr	r1, [pc, #72]	; (8002024 <HAL_RCC_ClockConfig+0x35c>)
 8001fda:	5ccb      	ldrb	r3, [r1, r3]
 8001fdc:	f003 031f 	and.w	r3, r3, #31
 8001fe0:	fa22 f303 	lsr.w	r3, r2, r3
 8001fe4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001fe6:	4b0e      	ldr	r3, [pc, #56]	; (8002020 <HAL_RCC_ClockConfig+0x358>)
 8001fe8:	699b      	ldr	r3, [r3, #24]
 8001fea:	f003 030f 	and.w	r3, r3, #15
 8001fee:	4a0d      	ldr	r2, [pc, #52]	; (8002024 <HAL_RCC_ClockConfig+0x35c>)
 8001ff0:	5cd3      	ldrb	r3, [r2, r3]
 8001ff2:	f003 031f 	and.w	r3, r3, #31
 8001ff6:	693a      	ldr	r2, [r7, #16]
 8001ff8:	fa22 f303 	lsr.w	r3, r2, r3
 8001ffc:	4a0a      	ldr	r2, [pc, #40]	; (8002028 <HAL_RCC_ClockConfig+0x360>)
 8001ffe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002000:	4a0a      	ldr	r2, [pc, #40]	; (800202c <HAL_RCC_ClockConfig+0x364>)
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002006:	4b0a      	ldr	r3, [pc, #40]	; (8002030 <HAL_RCC_ClockConfig+0x368>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4618      	mov	r0, r3
 800200c:	f7fe fea6 	bl	8000d5c <HAL_InitTick>
 8002010:	4603      	mov	r3, r0
 8002012:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002014:	7bfb      	ldrb	r3, [r7, #15]
}
 8002016:	4618      	mov	r0, r3
 8002018:	3718      	adds	r7, #24
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	58024400 	.word	0x58024400
 8002024:	08005758 	.word	0x08005758
 8002028:	24000004 	.word	0x24000004
 800202c:	24000000 	.word	0x24000000
 8002030:	24000008 	.word	0x24000008

08002034 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002034:	b480      	push	{r7}
 8002036:	b089      	sub	sp, #36	; 0x24
 8002038:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800203a:	4bb3      	ldr	r3, [pc, #716]	; (8002308 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800203c:	691b      	ldr	r3, [r3, #16]
 800203e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002042:	2b18      	cmp	r3, #24
 8002044:	f200 8155 	bhi.w	80022f2 <HAL_RCC_GetSysClockFreq+0x2be>
 8002048:	a201      	add	r2, pc, #4	; (adr r2, 8002050 <HAL_RCC_GetSysClockFreq+0x1c>)
 800204a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800204e:	bf00      	nop
 8002050:	080020b5 	.word	0x080020b5
 8002054:	080022f3 	.word	0x080022f3
 8002058:	080022f3 	.word	0x080022f3
 800205c:	080022f3 	.word	0x080022f3
 8002060:	080022f3 	.word	0x080022f3
 8002064:	080022f3 	.word	0x080022f3
 8002068:	080022f3 	.word	0x080022f3
 800206c:	080022f3 	.word	0x080022f3
 8002070:	080020db 	.word	0x080020db
 8002074:	080022f3 	.word	0x080022f3
 8002078:	080022f3 	.word	0x080022f3
 800207c:	080022f3 	.word	0x080022f3
 8002080:	080022f3 	.word	0x080022f3
 8002084:	080022f3 	.word	0x080022f3
 8002088:	080022f3 	.word	0x080022f3
 800208c:	080022f3 	.word	0x080022f3
 8002090:	080020e1 	.word	0x080020e1
 8002094:	080022f3 	.word	0x080022f3
 8002098:	080022f3 	.word	0x080022f3
 800209c:	080022f3 	.word	0x080022f3
 80020a0:	080022f3 	.word	0x080022f3
 80020a4:	080022f3 	.word	0x080022f3
 80020a8:	080022f3 	.word	0x080022f3
 80020ac:	080022f3 	.word	0x080022f3
 80020b0:	080020e7 	.word	0x080020e7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80020b4:	4b94      	ldr	r3, [pc, #592]	; (8002308 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0320 	and.w	r3, r3, #32
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d009      	beq.n	80020d4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80020c0:	4b91      	ldr	r3, [pc, #580]	; (8002308 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	08db      	lsrs	r3, r3, #3
 80020c6:	f003 0303 	and.w	r3, r3, #3
 80020ca:	4a90      	ldr	r2, [pc, #576]	; (800230c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80020cc:	fa22 f303 	lsr.w	r3, r2, r3
 80020d0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80020d2:	e111      	b.n	80022f8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80020d4:	4b8d      	ldr	r3, [pc, #564]	; (800230c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80020d6:	61bb      	str	r3, [r7, #24]
    break;
 80020d8:	e10e      	b.n	80022f8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80020da:	4b8d      	ldr	r3, [pc, #564]	; (8002310 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80020dc:	61bb      	str	r3, [r7, #24]
    break;
 80020de:	e10b      	b.n	80022f8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80020e0:	4b8c      	ldr	r3, [pc, #560]	; (8002314 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80020e2:	61bb      	str	r3, [r7, #24]
    break;
 80020e4:	e108      	b.n	80022f8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80020e6:	4b88      	ldr	r3, [pc, #544]	; (8002308 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ea:	f003 0303 	and.w	r3, r3, #3
 80020ee:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80020f0:	4b85      	ldr	r3, [pc, #532]	; (8002308 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f4:	091b      	lsrs	r3, r3, #4
 80020f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020fa:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80020fc:	4b82      	ldr	r3, [pc, #520]	; (8002308 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002100:	f003 0301 	and.w	r3, r3, #1
 8002104:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002106:	4b80      	ldr	r3, [pc, #512]	; (8002308 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800210a:	08db      	lsrs	r3, r3, #3
 800210c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002110:	68fa      	ldr	r2, [r7, #12]
 8002112:	fb02 f303 	mul.w	r3, r2, r3
 8002116:	ee07 3a90 	vmov	s15, r3
 800211a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800211e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	2b00      	cmp	r3, #0
 8002126:	f000 80e1 	beq.w	80022ec <HAL_RCC_GetSysClockFreq+0x2b8>
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	2b02      	cmp	r3, #2
 800212e:	f000 8083 	beq.w	8002238 <HAL_RCC_GetSysClockFreq+0x204>
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	2b02      	cmp	r3, #2
 8002136:	f200 80a1 	bhi.w	800227c <HAL_RCC_GetSysClockFreq+0x248>
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d003      	beq.n	8002148 <HAL_RCC_GetSysClockFreq+0x114>
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	2b01      	cmp	r3, #1
 8002144:	d056      	beq.n	80021f4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002146:	e099      	b.n	800227c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002148:	4b6f      	ldr	r3, [pc, #444]	; (8002308 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0320 	and.w	r3, r3, #32
 8002150:	2b00      	cmp	r3, #0
 8002152:	d02d      	beq.n	80021b0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002154:	4b6c      	ldr	r3, [pc, #432]	; (8002308 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	08db      	lsrs	r3, r3, #3
 800215a:	f003 0303 	and.w	r3, r3, #3
 800215e:	4a6b      	ldr	r2, [pc, #428]	; (800230c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002160:	fa22 f303 	lsr.w	r3, r2, r3
 8002164:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	ee07 3a90 	vmov	s15, r3
 800216c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	ee07 3a90 	vmov	s15, r3
 8002176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800217a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800217e:	4b62      	ldr	r3, [pc, #392]	; (8002308 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002182:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002186:	ee07 3a90 	vmov	s15, r3
 800218a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800218e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002192:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002318 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002196:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800219a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800219e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80021a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80021a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021aa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80021ae:	e087      	b.n	80022c0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	ee07 3a90 	vmov	s15, r3
 80021b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021ba:	eddf 6a58 	vldr	s13, [pc, #352]	; 800231c <HAL_RCC_GetSysClockFreq+0x2e8>
 80021be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80021c2:	4b51      	ldr	r3, [pc, #324]	; (8002308 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021ca:	ee07 3a90 	vmov	s15, r3
 80021ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80021d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80021d6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002318 <HAL_RCC_GetSysClockFreq+0x2e4>
 80021da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80021de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80021e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80021e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80021ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80021f2:	e065      	b.n	80022c0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	ee07 3a90 	vmov	s15, r3
 80021fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021fe:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002320 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002202:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002206:	4b40      	ldr	r3, [pc, #256]	; (8002308 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800220e:	ee07 3a90 	vmov	s15, r3
 8002212:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002216:	ed97 6a02 	vldr	s12, [r7, #8]
 800221a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002318 <HAL_RCC_GetSysClockFreq+0x2e4>
 800221e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002222:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002226:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800222a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800222e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002232:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002236:	e043      	b.n	80022c0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	ee07 3a90 	vmov	s15, r3
 800223e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002242:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002324 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002246:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800224a:	4b2f      	ldr	r3, [pc, #188]	; (8002308 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800224c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002252:	ee07 3a90 	vmov	s15, r3
 8002256:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800225a:	ed97 6a02 	vldr	s12, [r7, #8]
 800225e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002318 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002262:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002266:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800226a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800226e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002272:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002276:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800227a:	e021      	b.n	80022c0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	ee07 3a90 	vmov	s15, r3
 8002282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002286:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002320 <HAL_RCC_GetSysClockFreq+0x2ec>
 800228a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800228e:	4b1e      	ldr	r3, [pc, #120]	; (8002308 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002292:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002296:	ee07 3a90 	vmov	s15, r3
 800229a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800229e:	ed97 6a02 	vldr	s12, [r7, #8]
 80022a2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002318 <HAL_RCC_GetSysClockFreq+0x2e4>
 80022a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80022aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80022ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80022b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80022b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80022be:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80022c0:	4b11      	ldr	r3, [pc, #68]	; (8002308 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c4:	0a5b      	lsrs	r3, r3, #9
 80022c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022ca:	3301      	adds	r3, #1
 80022cc:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	ee07 3a90 	vmov	s15, r3
 80022d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80022d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80022dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80022e4:	ee17 3a90 	vmov	r3, s15
 80022e8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80022ea:	e005      	b.n	80022f8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80022ec:	2300      	movs	r3, #0
 80022ee:	61bb      	str	r3, [r7, #24]
    break;
 80022f0:	e002      	b.n	80022f8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80022f2:	4b07      	ldr	r3, [pc, #28]	; (8002310 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80022f4:	61bb      	str	r3, [r7, #24]
    break;
 80022f6:	bf00      	nop
  }

  return sysclockfreq;
 80022f8:	69bb      	ldr	r3, [r7, #24]
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3724      	adds	r7, #36	; 0x24
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	58024400 	.word	0x58024400
 800230c:	03d09000 	.word	0x03d09000
 8002310:	003d0900 	.word	0x003d0900
 8002314:	017d7840 	.word	0x017d7840
 8002318:	46000000 	.word	0x46000000
 800231c:	4c742400 	.word	0x4c742400
 8002320:	4a742400 	.word	0x4a742400
 8002324:	4bbebc20 	.word	0x4bbebc20

08002328 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800232e:	f7ff fe81 	bl	8002034 <HAL_RCC_GetSysClockFreq>
 8002332:	4602      	mov	r2, r0
 8002334:	4b10      	ldr	r3, [pc, #64]	; (8002378 <HAL_RCC_GetHCLKFreq+0x50>)
 8002336:	699b      	ldr	r3, [r3, #24]
 8002338:	0a1b      	lsrs	r3, r3, #8
 800233a:	f003 030f 	and.w	r3, r3, #15
 800233e:	490f      	ldr	r1, [pc, #60]	; (800237c <HAL_RCC_GetHCLKFreq+0x54>)
 8002340:	5ccb      	ldrb	r3, [r1, r3]
 8002342:	f003 031f 	and.w	r3, r3, #31
 8002346:	fa22 f303 	lsr.w	r3, r2, r3
 800234a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800234c:	4b0a      	ldr	r3, [pc, #40]	; (8002378 <HAL_RCC_GetHCLKFreq+0x50>)
 800234e:	699b      	ldr	r3, [r3, #24]
 8002350:	f003 030f 	and.w	r3, r3, #15
 8002354:	4a09      	ldr	r2, [pc, #36]	; (800237c <HAL_RCC_GetHCLKFreq+0x54>)
 8002356:	5cd3      	ldrb	r3, [r2, r3]
 8002358:	f003 031f 	and.w	r3, r3, #31
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	fa22 f303 	lsr.w	r3, r2, r3
 8002362:	4a07      	ldr	r2, [pc, #28]	; (8002380 <HAL_RCC_GetHCLKFreq+0x58>)
 8002364:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002366:	4a07      	ldr	r2, [pc, #28]	; (8002384 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800236c:	4b04      	ldr	r3, [pc, #16]	; (8002380 <HAL_RCC_GetHCLKFreq+0x58>)
 800236e:	681b      	ldr	r3, [r3, #0]
}
 8002370:	4618      	mov	r0, r3
 8002372:	3708      	adds	r7, #8
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	58024400 	.word	0x58024400
 800237c:	08005758 	.word	0x08005758
 8002380:	24000004 	.word	0x24000004
 8002384:	24000000 	.word	0x24000000

08002388 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800238c:	f7ff ffcc 	bl	8002328 <HAL_RCC_GetHCLKFreq>
 8002390:	4602      	mov	r2, r0
 8002392:	4b06      	ldr	r3, [pc, #24]	; (80023ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8002394:	69db      	ldr	r3, [r3, #28]
 8002396:	091b      	lsrs	r3, r3, #4
 8002398:	f003 0307 	and.w	r3, r3, #7
 800239c:	4904      	ldr	r1, [pc, #16]	; (80023b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800239e:	5ccb      	ldrb	r3, [r1, r3]
 80023a0:	f003 031f 	and.w	r3, r3, #31
 80023a4:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	58024400 	.word	0x58024400
 80023b0:	08005758 	.word	0x08005758

080023b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80023b8:	f7ff ffb6 	bl	8002328 <HAL_RCC_GetHCLKFreq>
 80023bc:	4602      	mov	r2, r0
 80023be:	4b06      	ldr	r3, [pc, #24]	; (80023d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023c0:	69db      	ldr	r3, [r3, #28]
 80023c2:	0a1b      	lsrs	r3, r3, #8
 80023c4:	f003 0307 	and.w	r3, r3, #7
 80023c8:	4904      	ldr	r1, [pc, #16]	; (80023dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80023ca:	5ccb      	ldrb	r3, [r1, r3]
 80023cc:	f003 031f 	and.w	r3, r3, #31
 80023d0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	58024400 	.word	0x58024400
 80023dc:	08005758 	.word	0x08005758

080023e0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b086      	sub	sp, #24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80023e8:	2300      	movs	r3, #0
 80023ea:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80023ec:	2300      	movs	r3, #0
 80023ee:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d03f      	beq.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002400:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002404:	d02a      	beq.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002406:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800240a:	d824      	bhi.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800240c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002410:	d018      	beq.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002412:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002416:	d81e      	bhi.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002418:	2b00      	cmp	r3, #0
 800241a:	d003      	beq.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800241c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002420:	d007      	beq.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002422:	e018      	b.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002424:	4ba3      	ldr	r3, [pc, #652]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002428:	4aa2      	ldr	r2, [pc, #648]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800242a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800242e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002430:	e015      	b.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	3304      	adds	r3, #4
 8002436:	2102      	movs	r1, #2
 8002438:	4618      	mov	r0, r3
 800243a:	f001 f9d5 	bl	80037e8 <RCCEx_PLL2_Config>
 800243e:	4603      	mov	r3, r0
 8002440:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002442:	e00c      	b.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	3324      	adds	r3, #36	; 0x24
 8002448:	2102      	movs	r1, #2
 800244a:	4618      	mov	r0, r3
 800244c:	f001 fa7e 	bl	800394c <RCCEx_PLL3_Config>
 8002450:	4603      	mov	r3, r0
 8002452:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002454:	e003      	b.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	75fb      	strb	r3, [r7, #23]
      break;
 800245a:	e000      	b.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800245c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800245e:	7dfb      	ldrb	r3, [r7, #23]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d109      	bne.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002464:	4b93      	ldr	r3, [pc, #588]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002466:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002468:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002470:	4990      	ldr	r1, [pc, #576]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002472:	4313      	orrs	r3, r2
 8002474:	650b      	str	r3, [r1, #80]	; 0x50
 8002476:	e001      	b.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002478:	7dfb      	ldrb	r3, [r7, #23]
 800247a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002484:	2b00      	cmp	r3, #0
 8002486:	d03d      	beq.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800248c:	2b04      	cmp	r3, #4
 800248e:	d826      	bhi.n	80024de <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002490:	a201      	add	r2, pc, #4	; (adr r2, 8002498 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8002492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002496:	bf00      	nop
 8002498:	080024ad 	.word	0x080024ad
 800249c:	080024bb 	.word	0x080024bb
 80024a0:	080024cd 	.word	0x080024cd
 80024a4:	080024e5 	.word	0x080024e5
 80024a8:	080024e5 	.word	0x080024e5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80024ac:	4b81      	ldr	r3, [pc, #516]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80024ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b0:	4a80      	ldr	r2, [pc, #512]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80024b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024b6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80024b8:	e015      	b.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	3304      	adds	r3, #4
 80024be:	2100      	movs	r1, #0
 80024c0:	4618      	mov	r0, r3
 80024c2:	f001 f991 	bl	80037e8 <RCCEx_PLL2_Config>
 80024c6:	4603      	mov	r3, r0
 80024c8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80024ca:	e00c      	b.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	3324      	adds	r3, #36	; 0x24
 80024d0:	2100      	movs	r1, #0
 80024d2:	4618      	mov	r0, r3
 80024d4:	f001 fa3a 	bl	800394c <RCCEx_PLL3_Config>
 80024d8:	4603      	mov	r3, r0
 80024da:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80024dc:	e003      	b.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	75fb      	strb	r3, [r7, #23]
      break;
 80024e2:	e000      	b.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80024e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80024e6:	7dfb      	ldrb	r3, [r7, #23]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d109      	bne.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024ec:	4b71      	ldr	r3, [pc, #452]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80024ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024f0:	f023 0207 	bic.w	r2, r3, #7
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024f8:	496e      	ldr	r1, [pc, #440]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	650b      	str	r3, [r1, #80]	; 0x50
 80024fe:	e001      	b.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002500:	7dfb      	ldrb	r3, [r7, #23]
 8002502:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800250c:	2b00      	cmp	r3, #0
 800250e:	d042      	beq.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002514:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002518:	d02b      	beq.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800251a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800251e:	d825      	bhi.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002520:	2bc0      	cmp	r3, #192	; 0xc0
 8002522:	d028      	beq.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002524:	2bc0      	cmp	r3, #192	; 0xc0
 8002526:	d821      	bhi.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002528:	2b80      	cmp	r3, #128	; 0x80
 800252a:	d016      	beq.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800252c:	2b80      	cmp	r3, #128	; 0x80
 800252e:	d81d      	bhi.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002530:	2b00      	cmp	r3, #0
 8002532:	d002      	beq.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8002534:	2b40      	cmp	r3, #64	; 0x40
 8002536:	d007      	beq.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002538:	e018      	b.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800253a:	4b5e      	ldr	r3, [pc, #376]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800253c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800253e:	4a5d      	ldr	r2, [pc, #372]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002540:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002544:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002546:	e017      	b.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	3304      	adds	r3, #4
 800254c:	2100      	movs	r1, #0
 800254e:	4618      	mov	r0, r3
 8002550:	f001 f94a 	bl	80037e8 <RCCEx_PLL2_Config>
 8002554:	4603      	mov	r3, r0
 8002556:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002558:	e00e      	b.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	3324      	adds	r3, #36	; 0x24
 800255e:	2100      	movs	r1, #0
 8002560:	4618      	mov	r0, r3
 8002562:	f001 f9f3 	bl	800394c <RCCEx_PLL3_Config>
 8002566:	4603      	mov	r3, r0
 8002568:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800256a:	e005      	b.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	75fb      	strb	r3, [r7, #23]
      break;
 8002570:	e002      	b.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002572:	bf00      	nop
 8002574:	e000      	b.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002576:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002578:	7dfb      	ldrb	r3, [r7, #23]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d109      	bne.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800257e:	4b4d      	ldr	r3, [pc, #308]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002580:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002582:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800258a:	494a      	ldr	r1, [pc, #296]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800258c:	4313      	orrs	r3, r2
 800258e:	650b      	str	r3, [r1, #80]	; 0x50
 8002590:	e001      	b.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002592:	7dfb      	ldrb	r3, [r7, #23]
 8002594:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d049      	beq.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80025a8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80025ac:	d030      	beq.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80025ae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80025b2:	d82a      	bhi.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80025b4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80025b8:	d02c      	beq.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80025ba:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80025be:	d824      	bhi.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80025c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025c4:	d018      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80025c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025ca:	d81e      	bhi.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d003      	beq.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80025d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80025d4:	d007      	beq.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80025d6:	e018      	b.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80025d8:	4b36      	ldr	r3, [pc, #216]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80025da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025dc:	4a35      	ldr	r2, [pc, #212]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80025de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80025e4:	e017      	b.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	3304      	adds	r3, #4
 80025ea:	2100      	movs	r1, #0
 80025ec:	4618      	mov	r0, r3
 80025ee:	f001 f8fb 	bl	80037e8 <RCCEx_PLL2_Config>
 80025f2:	4603      	mov	r3, r0
 80025f4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80025f6:	e00e      	b.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	3324      	adds	r3, #36	; 0x24
 80025fc:	2100      	movs	r1, #0
 80025fe:	4618      	mov	r0, r3
 8002600:	f001 f9a4 	bl	800394c <RCCEx_PLL3_Config>
 8002604:	4603      	mov	r3, r0
 8002606:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002608:	e005      	b.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	75fb      	strb	r3, [r7, #23]
      break;
 800260e:	e002      	b.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002610:	bf00      	nop
 8002612:	e000      	b.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002614:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002616:	7dfb      	ldrb	r3, [r7, #23]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d10a      	bne.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800261c:	4b25      	ldr	r3, [pc, #148]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800261e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002620:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800262a:	4922      	ldr	r1, [pc, #136]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800262c:	4313      	orrs	r3, r2
 800262e:	658b      	str	r3, [r1, #88]	; 0x58
 8002630:	e001      	b.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002632:	7dfb      	ldrb	r3, [r7, #23]
 8002634:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800263e:	2b00      	cmp	r3, #0
 8002640:	d04b      	beq.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002648:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800264c:	d030      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800264e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002652:	d82a      	bhi.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002654:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002658:	d02e      	beq.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800265a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800265e:	d824      	bhi.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002660:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002664:	d018      	beq.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8002666:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800266a:	d81e      	bhi.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800266c:	2b00      	cmp	r3, #0
 800266e:	d003      	beq.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002670:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002674:	d007      	beq.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8002676:	e018      	b.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002678:	4b0e      	ldr	r3, [pc, #56]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800267a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800267c:	4a0d      	ldr	r2, [pc, #52]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800267e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002682:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002684:	e019      	b.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	3304      	adds	r3, #4
 800268a:	2100      	movs	r1, #0
 800268c:	4618      	mov	r0, r3
 800268e:	f001 f8ab 	bl	80037e8 <RCCEx_PLL2_Config>
 8002692:	4603      	mov	r3, r0
 8002694:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002696:	e010      	b.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	3324      	adds	r3, #36	; 0x24
 800269c:	2100      	movs	r1, #0
 800269e:	4618      	mov	r0, r3
 80026a0:	f001 f954 	bl	800394c <RCCEx_PLL3_Config>
 80026a4:	4603      	mov	r3, r0
 80026a6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80026a8:	e007      	b.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	75fb      	strb	r3, [r7, #23]
      break;
 80026ae:	e004      	b.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80026b0:	bf00      	nop
 80026b2:	e002      	b.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80026b4:	58024400 	.word	0x58024400
      break;
 80026b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026ba:	7dfb      	ldrb	r3, [r7, #23]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d10a      	bne.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80026c0:	4b99      	ldr	r3, [pc, #612]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80026c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026c4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80026ce:	4996      	ldr	r1, [pc, #600]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80026d0:	4313      	orrs	r3, r2
 80026d2:	658b      	str	r3, [r1, #88]	; 0x58
 80026d4:	e001      	b.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026d6:	7dfb      	ldrb	r3, [r7, #23]
 80026d8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d032      	beq.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026ea:	2b30      	cmp	r3, #48	; 0x30
 80026ec:	d01c      	beq.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80026ee:	2b30      	cmp	r3, #48	; 0x30
 80026f0:	d817      	bhi.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80026f2:	2b20      	cmp	r3, #32
 80026f4:	d00c      	beq.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x330>
 80026f6:	2b20      	cmp	r3, #32
 80026f8:	d813      	bhi.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d016      	beq.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80026fe:	2b10      	cmp	r3, #16
 8002700:	d10f      	bne.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002702:	4b89      	ldr	r3, [pc, #548]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002706:	4a88      	ldr	r2, [pc, #544]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002708:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800270c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800270e:	e00e      	b.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	3304      	adds	r3, #4
 8002714:	2102      	movs	r1, #2
 8002716:	4618      	mov	r0, r3
 8002718:	f001 f866 	bl	80037e8 <RCCEx_PLL2_Config>
 800271c:	4603      	mov	r3, r0
 800271e:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002720:	e005      	b.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	75fb      	strb	r3, [r7, #23]
      break;
 8002726:	e002      	b.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8002728:	bf00      	nop
 800272a:	e000      	b.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800272c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800272e:	7dfb      	ldrb	r3, [r7, #23]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d109      	bne.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002734:	4b7c      	ldr	r3, [pc, #496]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002736:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002738:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002740:	4979      	ldr	r1, [pc, #484]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002742:	4313      	orrs	r3, r2
 8002744:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002746:	e001      	b.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002748:	7dfb      	ldrb	r3, [r7, #23]
 800274a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d047      	beq.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800275c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002760:	d030      	beq.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002762:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002766:	d82a      	bhi.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002768:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800276c:	d02c      	beq.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800276e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002772:	d824      	bhi.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002774:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002778:	d018      	beq.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800277a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800277e:	d81e      	bhi.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002780:	2b00      	cmp	r3, #0
 8002782:	d003      	beq.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8002784:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002788:	d007      	beq.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800278a:	e018      	b.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800278c:	4b66      	ldr	r3, [pc, #408]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800278e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002790:	4a65      	ldr	r2, [pc, #404]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002792:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002796:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002798:	e017      	b.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	3304      	adds	r3, #4
 800279e:	2100      	movs	r1, #0
 80027a0:	4618      	mov	r0, r3
 80027a2:	f001 f821 	bl	80037e8 <RCCEx_PLL2_Config>
 80027a6:	4603      	mov	r3, r0
 80027a8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80027aa:	e00e      	b.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	3324      	adds	r3, #36	; 0x24
 80027b0:	2100      	movs	r1, #0
 80027b2:	4618      	mov	r0, r3
 80027b4:	f001 f8ca 	bl	800394c <RCCEx_PLL3_Config>
 80027b8:	4603      	mov	r3, r0
 80027ba:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80027bc:	e005      	b.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	75fb      	strb	r3, [r7, #23]
      break;
 80027c2:	e002      	b.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80027c4:	bf00      	nop
 80027c6:	e000      	b.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80027c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027ca:	7dfb      	ldrb	r3, [r7, #23]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d109      	bne.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80027d0:	4b55      	ldr	r3, [pc, #340]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80027d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027d4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027dc:	4952      	ldr	r1, [pc, #328]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	650b      	str	r3, [r1, #80]	; 0x50
 80027e2:	e001      	b.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027e4:	7dfb      	ldrb	r3, [r7, #23]
 80027e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d049      	beq.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027fc:	d02e      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80027fe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002802:	d828      	bhi.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002804:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002808:	d02a      	beq.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800280a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800280e:	d822      	bhi.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002810:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002814:	d026      	beq.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8002816:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800281a:	d81c      	bhi.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800281c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002820:	d010      	beq.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8002822:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002826:	d816      	bhi.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002828:	2b00      	cmp	r3, #0
 800282a:	d01d      	beq.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x488>
 800282c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002830:	d111      	bne.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	3304      	adds	r3, #4
 8002836:	2101      	movs	r1, #1
 8002838:	4618      	mov	r0, r3
 800283a:	f000 ffd5 	bl	80037e8 <RCCEx_PLL2_Config>
 800283e:	4603      	mov	r3, r0
 8002840:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002842:	e012      	b.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	3324      	adds	r3, #36	; 0x24
 8002848:	2101      	movs	r1, #1
 800284a:	4618      	mov	r0, r3
 800284c:	f001 f87e 	bl	800394c <RCCEx_PLL3_Config>
 8002850:	4603      	mov	r3, r0
 8002852:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002854:	e009      	b.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	75fb      	strb	r3, [r7, #23]
      break;
 800285a:	e006      	b.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800285c:	bf00      	nop
 800285e:	e004      	b.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002860:	bf00      	nop
 8002862:	e002      	b.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002864:	bf00      	nop
 8002866:	e000      	b.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002868:	bf00      	nop
    }

    if(ret == HAL_OK)
 800286a:	7dfb      	ldrb	r3, [r7, #23]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d109      	bne.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002870:	4b2d      	ldr	r3, [pc, #180]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002872:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002874:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800287c:	492a      	ldr	r1, [pc, #168]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800287e:	4313      	orrs	r3, r2
 8002880:	650b      	str	r3, [r1, #80]	; 0x50
 8002882:	e001      	b.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002884:	7dfb      	ldrb	r3, [r7, #23]
 8002886:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d04d      	beq.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800289a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800289e:	d02e      	beq.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80028a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028a4:	d828      	bhi.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80028a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028aa:	d02a      	beq.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x522>
 80028ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028b0:	d822      	bhi.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80028b2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80028b6:	d026      	beq.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x526>
 80028b8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80028bc:	d81c      	bhi.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80028be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028c2:	d010      	beq.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80028c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028c8:	d816      	bhi.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d01d      	beq.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80028ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80028d2:	d111      	bne.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	3304      	adds	r3, #4
 80028d8:	2101      	movs	r1, #1
 80028da:	4618      	mov	r0, r3
 80028dc:	f000 ff84 	bl	80037e8 <RCCEx_PLL2_Config>
 80028e0:	4603      	mov	r3, r0
 80028e2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80028e4:	e012      	b.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	3324      	adds	r3, #36	; 0x24
 80028ea:	2101      	movs	r1, #1
 80028ec:	4618      	mov	r0, r3
 80028ee:	f001 f82d 	bl	800394c <RCCEx_PLL3_Config>
 80028f2:	4603      	mov	r3, r0
 80028f4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80028f6:	e009      	b.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	75fb      	strb	r3, [r7, #23]
      break;
 80028fc:	e006      	b.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80028fe:	bf00      	nop
 8002900:	e004      	b.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002902:	bf00      	nop
 8002904:	e002      	b.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002906:	bf00      	nop
 8002908:	e000      	b.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800290a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800290c:	7dfb      	ldrb	r3, [r7, #23]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d10c      	bne.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002912:	4b05      	ldr	r3, [pc, #20]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002916:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002920:	4901      	ldr	r1, [pc, #4]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002922:	4313      	orrs	r3, r2
 8002924:	658b      	str	r3, [r1, #88]	; 0x58
 8002926:	e003      	b.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8002928:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800292c:	7dfb      	ldrb	r3, [r7, #23]
 800292e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d02f      	beq.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002940:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002944:	d00e      	beq.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8002946:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800294a:	d814      	bhi.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x596>
 800294c:	2b00      	cmp	r3, #0
 800294e:	d015      	beq.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8002950:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002954:	d10f      	bne.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002956:	4baf      	ldr	r3, [pc, #700]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800295a:	4aae      	ldr	r2, [pc, #696]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800295c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002960:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002962:	e00c      	b.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	3304      	adds	r3, #4
 8002968:	2101      	movs	r1, #1
 800296a:	4618      	mov	r0, r3
 800296c:	f000 ff3c 	bl	80037e8 <RCCEx_PLL2_Config>
 8002970:	4603      	mov	r3, r0
 8002972:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002974:	e003      	b.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	75fb      	strb	r3, [r7, #23]
      break;
 800297a:	e000      	b.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 800297c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800297e:	7dfb      	ldrb	r3, [r7, #23]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d109      	bne.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002984:	4ba3      	ldr	r3, [pc, #652]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002986:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002988:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002990:	49a0      	ldr	r1, [pc, #640]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002992:	4313      	orrs	r3, r2
 8002994:	650b      	str	r3, [r1, #80]	; 0x50
 8002996:	e001      	b.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002998:	7dfb      	ldrb	r3, [r7, #23]
 800299a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d032      	beq.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ac:	2b03      	cmp	r3, #3
 80029ae:	d81b      	bhi.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80029b0:	a201      	add	r2, pc, #4	; (adr r2, 80029b8 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80029b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029b6:	bf00      	nop
 80029b8:	080029ef 	.word	0x080029ef
 80029bc:	080029c9 	.word	0x080029c9
 80029c0:	080029d7 	.word	0x080029d7
 80029c4:	080029ef 	.word	0x080029ef
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029c8:	4b92      	ldr	r3, [pc, #584]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80029ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029cc:	4a91      	ldr	r2, [pc, #580]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80029ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80029d4:	e00c      	b.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	3304      	adds	r3, #4
 80029da:	2102      	movs	r1, #2
 80029dc:	4618      	mov	r0, r3
 80029de:	f000 ff03 	bl	80037e8 <RCCEx_PLL2_Config>
 80029e2:	4603      	mov	r3, r0
 80029e4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80029e6:	e003      	b.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	75fb      	strb	r3, [r7, #23]
      break;
 80029ec:	e000      	b.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80029ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029f0:	7dfb      	ldrb	r3, [r7, #23]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d109      	bne.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80029f6:	4b87      	ldr	r3, [pc, #540]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80029f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029fa:	f023 0203 	bic.w	r2, r3, #3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a02:	4984      	ldr	r1, [pc, #528]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002a04:	4313      	orrs	r3, r2
 8002a06:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002a08:	e001      	b.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a0a:	7dfb      	ldrb	r3, [r7, #23]
 8002a0c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	f000 8086 	beq.w	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a1c:	4b7e      	ldr	r3, [pc, #504]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a7d      	ldr	r2, [pc, #500]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002a22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a26:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a28:	f7fe f9e2 	bl	8000df0 <HAL_GetTick>
 8002a2c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a2e:	e009      	b.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a30:	f7fe f9de 	bl	8000df0 <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	2b64      	cmp	r3, #100	; 0x64
 8002a3c:	d902      	bls.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	75fb      	strb	r3, [r7, #23]
        break;
 8002a42:	e005      	b.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a44:	4b74      	ldr	r3, [pc, #464]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d0ef      	beq.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8002a50:	7dfb      	ldrb	r3, [r7, #23]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d166      	bne.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002a56:	4b6f      	ldr	r3, [pc, #444]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002a58:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002a60:	4053      	eors	r3, r2
 8002a62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d013      	beq.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a6a:	4b6a      	ldr	r3, [pc, #424]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a72:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a74:	4b67      	ldr	r3, [pc, #412]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002a76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a78:	4a66      	ldr	r2, [pc, #408]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002a7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a7e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a80:	4b64      	ldr	r3, [pc, #400]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a84:	4a63      	ldr	r2, [pc, #396]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002a86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a8a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002a8c:	4a61      	ldr	r2, [pc, #388]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002a98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a9c:	d115      	bne.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a9e:	f7fe f9a7 	bl	8000df0 <HAL_GetTick>
 8002aa2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002aa4:	e00b      	b.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aa6:	f7fe f9a3 	bl	8000df0 <HAL_GetTick>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d902      	bls.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	75fb      	strb	r3, [r7, #23]
            break;
 8002abc:	e005      	b.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002abe:	4b55      	ldr	r3, [pc, #340]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac2:	f003 0302 	and.w	r3, r3, #2
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d0ed      	beq.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8002aca:	7dfb      	ldrb	r3, [r7, #23]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d126      	bne.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002ad6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ada:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ade:	d10d      	bne.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8002ae0:	4b4c      	ldr	r3, [pc, #304]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002ae2:	691b      	ldr	r3, [r3, #16]
 8002ae4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002aee:	0919      	lsrs	r1, r3, #4
 8002af0:	4b4a      	ldr	r3, [pc, #296]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8002af2:	400b      	ands	r3, r1
 8002af4:	4947      	ldr	r1, [pc, #284]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	610b      	str	r3, [r1, #16]
 8002afa:	e005      	b.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8002afc:	4b45      	ldr	r3, [pc, #276]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002afe:	691b      	ldr	r3, [r3, #16]
 8002b00:	4a44      	ldr	r2, [pc, #272]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002b02:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002b06:	6113      	str	r3, [r2, #16]
 8002b08:	4b42      	ldr	r3, [pc, #264]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002b0a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002b12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b16:	493f      	ldr	r1, [pc, #252]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	670b      	str	r3, [r1, #112]	; 0x70
 8002b1c:	e004      	b.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002b1e:	7dfb      	ldrb	r3, [r7, #23]
 8002b20:	75bb      	strb	r3, [r7, #22]
 8002b22:	e001      	b.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b24:	7dfb      	ldrb	r3, [r7, #23]
 8002b26:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0301 	and.w	r3, r3, #1
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	f000 8085 	beq.w	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b3a:	2b28      	cmp	r3, #40	; 0x28
 8002b3c:	d866      	bhi.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8002b3e:	a201      	add	r2, pc, #4	; (adr r2, 8002b44 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8002b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b44:	08002c21 	.word	0x08002c21
 8002b48:	08002c0d 	.word	0x08002c0d
 8002b4c:	08002c0d 	.word	0x08002c0d
 8002b50:	08002c0d 	.word	0x08002c0d
 8002b54:	08002c0d 	.word	0x08002c0d
 8002b58:	08002c0d 	.word	0x08002c0d
 8002b5c:	08002c0d 	.word	0x08002c0d
 8002b60:	08002c0d 	.word	0x08002c0d
 8002b64:	08002be9 	.word	0x08002be9
 8002b68:	08002c0d 	.word	0x08002c0d
 8002b6c:	08002c0d 	.word	0x08002c0d
 8002b70:	08002c0d 	.word	0x08002c0d
 8002b74:	08002c0d 	.word	0x08002c0d
 8002b78:	08002c0d 	.word	0x08002c0d
 8002b7c:	08002c0d 	.word	0x08002c0d
 8002b80:	08002c0d 	.word	0x08002c0d
 8002b84:	08002bfb 	.word	0x08002bfb
 8002b88:	08002c0d 	.word	0x08002c0d
 8002b8c:	08002c0d 	.word	0x08002c0d
 8002b90:	08002c0d 	.word	0x08002c0d
 8002b94:	08002c0d 	.word	0x08002c0d
 8002b98:	08002c0d 	.word	0x08002c0d
 8002b9c:	08002c0d 	.word	0x08002c0d
 8002ba0:	08002c0d 	.word	0x08002c0d
 8002ba4:	08002c21 	.word	0x08002c21
 8002ba8:	08002c0d 	.word	0x08002c0d
 8002bac:	08002c0d 	.word	0x08002c0d
 8002bb0:	08002c0d 	.word	0x08002c0d
 8002bb4:	08002c0d 	.word	0x08002c0d
 8002bb8:	08002c0d 	.word	0x08002c0d
 8002bbc:	08002c0d 	.word	0x08002c0d
 8002bc0:	08002c0d 	.word	0x08002c0d
 8002bc4:	08002c21 	.word	0x08002c21
 8002bc8:	08002c0d 	.word	0x08002c0d
 8002bcc:	08002c0d 	.word	0x08002c0d
 8002bd0:	08002c0d 	.word	0x08002c0d
 8002bd4:	08002c0d 	.word	0x08002c0d
 8002bd8:	08002c0d 	.word	0x08002c0d
 8002bdc:	08002c0d 	.word	0x08002c0d
 8002be0:	08002c0d 	.word	0x08002c0d
 8002be4:	08002c21 	.word	0x08002c21
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	3304      	adds	r3, #4
 8002bec:	2101      	movs	r1, #1
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f000 fdfa 	bl	80037e8 <RCCEx_PLL2_Config>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002bf8:	e013      	b.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	3324      	adds	r3, #36	; 0x24
 8002bfe:	2101      	movs	r1, #1
 8002c00:	4618      	mov	r0, r3
 8002c02:	f000 fea3 	bl	800394c <RCCEx_PLL3_Config>
 8002c06:	4603      	mov	r3, r0
 8002c08:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002c0a:	e00a      	b.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	75fb      	strb	r3, [r7, #23]
      break;
 8002c10:	e007      	b.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002c12:	bf00      	nop
 8002c14:	58024400 	.word	0x58024400
 8002c18:	58024800 	.word	0x58024800
 8002c1c:	00ffffcf 	.word	0x00ffffcf
      break;
 8002c20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c22:	7dfb      	ldrb	r3, [r7, #23]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d109      	bne.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002c28:	4b96      	ldr	r3, [pc, #600]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c2c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c34:	4993      	ldr	r1, [pc, #588]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002c36:	4313      	orrs	r3, r2
 8002c38:	654b      	str	r3, [r1, #84]	; 0x54
 8002c3a:	e001      	b.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c3c:	7dfb      	ldrb	r3, [r7, #23]
 8002c3e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0302 	and.w	r3, r3, #2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d038      	beq.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c50:	2b05      	cmp	r3, #5
 8002c52:	d821      	bhi.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8002c54:	a201      	add	r2, pc, #4	; (adr r2, 8002c5c <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8002c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c5a:	bf00      	nop
 8002c5c:	08002c9f 	.word	0x08002c9f
 8002c60:	08002c75 	.word	0x08002c75
 8002c64:	08002c87 	.word	0x08002c87
 8002c68:	08002c9f 	.word	0x08002c9f
 8002c6c:	08002c9f 	.word	0x08002c9f
 8002c70:	08002c9f 	.word	0x08002c9f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	3304      	adds	r3, #4
 8002c78:	2101      	movs	r1, #1
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f000 fdb4 	bl	80037e8 <RCCEx_PLL2_Config>
 8002c80:	4603      	mov	r3, r0
 8002c82:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002c84:	e00c      	b.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	3324      	adds	r3, #36	; 0x24
 8002c8a:	2101      	movs	r1, #1
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f000 fe5d 	bl	800394c <RCCEx_PLL3_Config>
 8002c92:	4603      	mov	r3, r0
 8002c94:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002c96:	e003      	b.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	75fb      	strb	r3, [r7, #23]
      break;
 8002c9c:	e000      	b.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8002c9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ca0:	7dfb      	ldrb	r3, [r7, #23]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d109      	bne.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002ca6:	4b77      	ldr	r3, [pc, #476]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002ca8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002caa:	f023 0207 	bic.w	r2, r3, #7
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cb2:	4974      	ldr	r1, [pc, #464]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	654b      	str	r3, [r1, #84]	; 0x54
 8002cb8:	e001      	b.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cba:	7dfb      	ldrb	r3, [r7, #23]
 8002cbc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0304 	and.w	r3, r3, #4
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d03a      	beq.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cd0:	2b05      	cmp	r3, #5
 8002cd2:	d821      	bhi.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8002cd4:	a201      	add	r2, pc, #4	; (adr r2, 8002cdc <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8002cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cda:	bf00      	nop
 8002cdc:	08002d1f 	.word	0x08002d1f
 8002ce0:	08002cf5 	.word	0x08002cf5
 8002ce4:	08002d07 	.word	0x08002d07
 8002ce8:	08002d1f 	.word	0x08002d1f
 8002cec:	08002d1f 	.word	0x08002d1f
 8002cf0:	08002d1f 	.word	0x08002d1f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	3304      	adds	r3, #4
 8002cf8:	2101      	movs	r1, #1
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f000 fd74 	bl	80037e8 <RCCEx_PLL2_Config>
 8002d00:	4603      	mov	r3, r0
 8002d02:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002d04:	e00c      	b.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	3324      	adds	r3, #36	; 0x24
 8002d0a:	2101      	movs	r1, #1
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f000 fe1d 	bl	800394c <RCCEx_PLL3_Config>
 8002d12:	4603      	mov	r3, r0
 8002d14:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002d16:	e003      	b.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	75fb      	strb	r3, [r7, #23]
      break;
 8002d1c:	e000      	b.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8002d1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d20:	7dfb      	ldrb	r3, [r7, #23]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d10a      	bne.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d26:	4b57      	ldr	r3, [pc, #348]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d2a:	f023 0207 	bic.w	r2, r3, #7
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d34:	4953      	ldr	r1, [pc, #332]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	658b      	str	r3, [r1, #88]	; 0x58
 8002d3a:	e001      	b.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d3c:	7dfb      	ldrb	r3, [r7, #23]
 8002d3e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0320 	and.w	r3, r3, #32
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d04b      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d52:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d56:	d02e      	beq.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8002d58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d5c:	d828      	bhi.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8002d5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d62:	d02a      	beq.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8002d64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d68:	d822      	bhi.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8002d6a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002d6e:	d026      	beq.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8002d70:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002d74:	d81c      	bhi.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8002d76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d7a:	d010      	beq.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8002d7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d80:	d816      	bhi.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d01d      	beq.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8002d86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d8a:	d111      	bne.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	3304      	adds	r3, #4
 8002d90:	2100      	movs	r1, #0
 8002d92:	4618      	mov	r0, r3
 8002d94:	f000 fd28 	bl	80037e8 <RCCEx_PLL2_Config>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002d9c:	e012      	b.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	3324      	adds	r3, #36	; 0x24
 8002da2:	2102      	movs	r1, #2
 8002da4:	4618      	mov	r0, r3
 8002da6:	f000 fdd1 	bl	800394c <RCCEx_PLL3_Config>
 8002daa:	4603      	mov	r3, r0
 8002dac:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002dae:	e009      	b.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	75fb      	strb	r3, [r7, #23]
      break;
 8002db4:	e006      	b.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8002db6:	bf00      	nop
 8002db8:	e004      	b.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8002dba:	bf00      	nop
 8002dbc:	e002      	b.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8002dbe:	bf00      	nop
 8002dc0:	e000      	b.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8002dc2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002dc4:	7dfb      	ldrb	r3, [r7, #23]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d10a      	bne.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002dca:	4b2e      	ldr	r3, [pc, #184]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dce:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002dd8:	492a      	ldr	r1, [pc, #168]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	654b      	str	r3, [r1, #84]	; 0x54
 8002dde:	e001      	b.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002de0:	7dfb      	ldrb	r3, [r7, #23]
 8002de2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d04d      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002df6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002dfa:	d02e      	beq.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8002dfc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002e00:	d828      	bhi.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8002e02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e06:	d02a      	beq.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8002e08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e0c:	d822      	bhi.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8002e0e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002e12:	d026      	beq.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8002e14:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002e18:	d81c      	bhi.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8002e1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e1e:	d010      	beq.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8002e20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e24:	d816      	bhi.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d01d      	beq.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8002e2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e2e:	d111      	bne.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	3304      	adds	r3, #4
 8002e34:	2100      	movs	r1, #0
 8002e36:	4618      	mov	r0, r3
 8002e38:	f000 fcd6 	bl	80037e8 <RCCEx_PLL2_Config>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002e40:	e012      	b.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	3324      	adds	r3, #36	; 0x24
 8002e46:	2102      	movs	r1, #2
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f000 fd7f 	bl	800394c <RCCEx_PLL3_Config>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002e52:	e009      	b.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	75fb      	strb	r3, [r7, #23]
      break;
 8002e58:	e006      	b.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8002e5a:	bf00      	nop
 8002e5c:	e004      	b.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8002e5e:	bf00      	nop
 8002e60:	e002      	b.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8002e62:	bf00      	nop
 8002e64:	e000      	b.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8002e66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e68:	7dfb      	ldrb	r3, [r7, #23]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d10c      	bne.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002e6e:	4b05      	ldr	r3, [pc, #20]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e72:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e7c:	4901      	ldr	r1, [pc, #4]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	658b      	str	r3, [r1, #88]	; 0x58
 8002e82:	e003      	b.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8002e84:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e88:	7dfb      	ldrb	r3, [r7, #23]
 8002e8a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d04b      	beq.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e9e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002ea2:	d02e      	beq.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8002ea4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002ea8:	d828      	bhi.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8002eaa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002eae:	d02a      	beq.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8002eb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002eb4:	d822      	bhi.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8002eb6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002eba:	d026      	beq.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8002ebc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002ec0:	d81c      	bhi.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8002ec2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ec6:	d010      	beq.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8002ec8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ecc:	d816      	bhi.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d01d      	beq.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8002ed2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ed6:	d111      	bne.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	3304      	adds	r3, #4
 8002edc:	2100      	movs	r1, #0
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f000 fc82 	bl	80037e8 <RCCEx_PLL2_Config>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002ee8:	e012      	b.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	3324      	adds	r3, #36	; 0x24
 8002eee:	2102      	movs	r1, #2
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f000 fd2b 	bl	800394c <RCCEx_PLL3_Config>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002efa:	e009      	b.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	75fb      	strb	r3, [r7, #23]
      break;
 8002f00:	e006      	b.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8002f02:	bf00      	nop
 8002f04:	e004      	b.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8002f06:	bf00      	nop
 8002f08:	e002      	b.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8002f0a:	bf00      	nop
 8002f0c:	e000      	b.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8002f0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f10:	7dfb      	ldrb	r3, [r7, #23]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d10a      	bne.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8002f16:	4b9d      	ldr	r3, [pc, #628]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f24:	4999      	ldr	r1, [pc, #612]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002f26:	4313      	orrs	r3, r2
 8002f28:	658b      	str	r3, [r1, #88]	; 0x58
 8002f2a:	e001      	b.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f2c:	7dfb      	ldrb	r3, [r7, #23]
 8002f2e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0308 	and.w	r3, r3, #8
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d01a      	beq.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f46:	d10a      	bne.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	3324      	adds	r3, #36	; 0x24
 8002f4c:	2102      	movs	r1, #2
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f000 fcfc 	bl	800394c <RCCEx_PLL3_Config>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d001      	beq.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8002f5e:	4b8b      	ldr	r3, [pc, #556]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f62:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f6c:	4987      	ldr	r1, [pc, #540]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0310 	and.w	r3, r3, #16
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d01a      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f88:	d10a      	bne.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	3324      	adds	r3, #36	; 0x24
 8002f8e:	2102      	movs	r1, #2
 8002f90:	4618      	mov	r0, r3
 8002f92:	f000 fcdb 	bl	800394c <RCCEx_PLL3_Config>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d001      	beq.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002fa0:	4b7a      	ldr	r3, [pc, #488]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fae:	4977      	ldr	r1, [pc, #476]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d034      	beq.n	800302a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002fc6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002fca:	d01d      	beq.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8002fcc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002fd0:	d817      	bhi.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d003      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8002fd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fda:	d009      	beq.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8002fdc:	e011      	b.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	3304      	adds	r3, #4
 8002fe2:	2100      	movs	r1, #0
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f000 fbff 	bl	80037e8 <RCCEx_PLL2_Config>
 8002fea:	4603      	mov	r3, r0
 8002fec:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8002fee:	e00c      	b.n	800300a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	3324      	adds	r3, #36	; 0x24
 8002ff4:	2102      	movs	r1, #2
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f000 fca8 	bl	800394c <RCCEx_PLL3_Config>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003000:	e003      	b.n	800300a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	75fb      	strb	r3, [r7, #23]
      break;
 8003006:	e000      	b.n	800300a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8003008:	bf00      	nop
    }

    if(ret == HAL_OK)
 800300a:	7dfb      	ldrb	r3, [r7, #23]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d10a      	bne.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003010:	4b5e      	ldr	r3, [pc, #376]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003014:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800301e:	495b      	ldr	r1, [pc, #364]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003020:	4313      	orrs	r3, r2
 8003022:	658b      	str	r3, [r1, #88]	; 0x58
 8003024:	e001      	b.n	800302a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003026:	7dfb      	ldrb	r3, [r7, #23]
 8003028:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d033      	beq.n	800309e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800303c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003040:	d01c      	beq.n	800307c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8003042:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003046:	d816      	bhi.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8003048:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800304c:	d003      	beq.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800304e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003052:	d007      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8003054:	e00f      	b.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003056:	4b4d      	ldr	r3, [pc, #308]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800305a:	4a4c      	ldr	r2, [pc, #304]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800305c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003060:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003062:	e00c      	b.n	800307e <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	3324      	adds	r3, #36	; 0x24
 8003068:	2101      	movs	r1, #1
 800306a:	4618      	mov	r0, r3
 800306c:	f000 fc6e 	bl	800394c <RCCEx_PLL3_Config>
 8003070:	4603      	mov	r3, r0
 8003072:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003074:	e003      	b.n	800307e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	75fb      	strb	r3, [r7, #23]
      break;
 800307a:	e000      	b.n	800307e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 800307c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800307e:	7dfb      	ldrb	r3, [r7, #23]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d10a      	bne.n	800309a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003084:	4b41      	ldr	r3, [pc, #260]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003088:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003092:	493e      	ldr	r1, [pc, #248]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003094:	4313      	orrs	r3, r2
 8003096:	654b      	str	r3, [r1, #84]	; 0x54
 8003098:	e001      	b.n	800309e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800309a:	7dfb      	ldrb	r3, [r7, #23]
 800309c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d029      	beq.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d003      	beq.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0xcda>
 80030b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030b6:	d007      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80030b8:	e00f      	b.n	80030da <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030ba:	4b34      	ldr	r3, [pc, #208]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80030bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030be:	4a33      	ldr	r2, [pc, #204]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80030c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030c4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80030c6:	e00b      	b.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	3304      	adds	r3, #4
 80030cc:	2102      	movs	r1, #2
 80030ce:	4618      	mov	r0, r3
 80030d0:	f000 fb8a 	bl	80037e8 <RCCEx_PLL2_Config>
 80030d4:	4603      	mov	r3, r0
 80030d6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80030d8:	e002      	b.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	75fb      	strb	r3, [r7, #23]
      break;
 80030de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030e0:	7dfb      	ldrb	r3, [r7, #23]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d109      	bne.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80030e6:	4b29      	ldr	r3, [pc, #164]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80030e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030ea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030f2:	4926      	ldr	r1, [pc, #152]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80030f4:	4313      	orrs	r3, r2
 80030f6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80030f8:	e001      	b.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030fa:	7dfb      	ldrb	r3, [r7, #23]
 80030fc:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d00a      	beq.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	3324      	adds	r3, #36	; 0x24
 800310e:	2102      	movs	r1, #2
 8003110:	4618      	mov	r0, r3
 8003112:	f000 fc1b 	bl	800394c <RCCEx_PLL3_Config>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d001      	beq.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003128:	2b00      	cmp	r3, #0
 800312a:	d033      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003130:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003134:	d017      	beq.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8003136:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800313a:	d811      	bhi.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800313c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003140:	d013      	beq.n	800316a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8003142:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003146:	d80b      	bhi.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8003148:	2b00      	cmp	r3, #0
 800314a:	d010      	beq.n	800316e <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800314c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003150:	d106      	bne.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003152:	4b0e      	ldr	r3, [pc, #56]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003156:	4a0d      	ldr	r2, [pc, #52]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003158:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800315c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800315e:	e007      	b.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	75fb      	strb	r3, [r7, #23]
      break;
 8003164:	e004      	b.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8003166:	bf00      	nop
 8003168:	e002      	b.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800316a:	bf00      	nop
 800316c:	e000      	b.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800316e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003170:	7dfb      	ldrb	r3, [r7, #23]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d10c      	bne.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003176:	4b05      	ldr	r3, [pc, #20]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800317a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003182:	4902      	ldr	r1, [pc, #8]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003184:	4313      	orrs	r3, r2
 8003186:	654b      	str	r3, [r1, #84]	; 0x54
 8003188:	e004      	b.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800318a:	bf00      	nop
 800318c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003190:	7dfb      	ldrb	r3, [r7, #23]
 8003192:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d008      	beq.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80031a0:	4b31      	ldr	r3, [pc, #196]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80031a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031a4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ac:	492e      	ldr	r1, [pc, #184]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d009      	beq.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80031be:	4b2a      	ldr	r3, [pc, #168]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80031cc:	4926      	ldr	r1, [pc, #152]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80031ce:	4313      	orrs	r3, r2
 80031d0:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d008      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80031de:	4b22      	ldr	r3, [pc, #136]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80031e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031e2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031ea:	491f      	ldr	r1, [pc, #124]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80031ec:	4313      	orrs	r3, r2
 80031ee:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d00d      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80031fc:	4b1a      	ldr	r3, [pc, #104]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80031fe:	691b      	ldr	r3, [r3, #16]
 8003200:	4a19      	ldr	r2, [pc, #100]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003202:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003206:	6113      	str	r3, [r2, #16]
 8003208:	4b17      	ldr	r3, [pc, #92]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800320a:	691a      	ldr	r2, [r3, #16]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003212:	4915      	ldr	r1, [pc, #84]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003214:	4313      	orrs	r3, r2
 8003216:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	2b00      	cmp	r3, #0
 800321e:	da08      	bge.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003220:	4b11      	ldr	r3, [pc, #68]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003222:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003224:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800322c:	490e      	ldr	r1, [pc, #56]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800322e:	4313      	orrs	r3, r2
 8003230:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d009      	beq.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800323e:	4b0a      	ldr	r3, [pc, #40]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003242:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800324c:	4906      	ldr	r1, [pc, #24]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800324e:	4313      	orrs	r3, r2
 8003250:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8003252:	7dbb      	ldrb	r3, [r7, #22]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d101      	bne.n	800325c <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8003258:	2300      	movs	r3, #0
 800325a:	e000      	b.n	800325e <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
}
 800325e:	4618      	mov	r0, r3
 8003260:	3718      	adds	r7, #24
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	58024400 	.word	0x58024400

0800326c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003270:	f7ff f85a 	bl	8002328 <HAL_RCC_GetHCLKFreq>
 8003274:	4602      	mov	r2, r0
 8003276:	4b06      	ldr	r3, [pc, #24]	; (8003290 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003278:	6a1b      	ldr	r3, [r3, #32]
 800327a:	091b      	lsrs	r3, r3, #4
 800327c:	f003 0307 	and.w	r3, r3, #7
 8003280:	4904      	ldr	r1, [pc, #16]	; (8003294 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003282:	5ccb      	ldrb	r3, [r1, r3]
 8003284:	f003 031f 	and.w	r3, r3, #31
 8003288:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800328c:	4618      	mov	r0, r3
 800328e:	bd80      	pop	{r7, pc}
 8003290:	58024400 	.word	0x58024400
 8003294:	08005758 	.word	0x08005758

08003298 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8003298:	b480      	push	{r7}
 800329a:	b089      	sub	sp, #36	; 0x24
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80032a0:	4ba1      	ldr	r3, [pc, #644]	; (8003528 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80032a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a4:	f003 0303 	and.w	r3, r3, #3
 80032a8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80032aa:	4b9f      	ldr	r3, [pc, #636]	; (8003528 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80032ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ae:	0b1b      	lsrs	r3, r3, #12
 80032b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032b4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80032b6:	4b9c      	ldr	r3, [pc, #624]	; (8003528 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80032b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ba:	091b      	lsrs	r3, r3, #4
 80032bc:	f003 0301 	and.w	r3, r3, #1
 80032c0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80032c2:	4b99      	ldr	r3, [pc, #612]	; (8003528 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80032c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032c6:	08db      	lsrs	r3, r3, #3
 80032c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80032cc:	693a      	ldr	r2, [r7, #16]
 80032ce:	fb02 f303 	mul.w	r3, r2, r3
 80032d2:	ee07 3a90 	vmov	s15, r3
 80032d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032da:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	f000 8111 	beq.w	8003508 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	f000 8083 	beq.w	80033f4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	f200 80a1 	bhi.w	8003438 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d003      	beq.n	8003304 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d056      	beq.n	80033b0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003302:	e099      	b.n	8003438 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003304:	4b88      	ldr	r3, [pc, #544]	; (8003528 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0320 	and.w	r3, r3, #32
 800330c:	2b00      	cmp	r3, #0
 800330e:	d02d      	beq.n	800336c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003310:	4b85      	ldr	r3, [pc, #532]	; (8003528 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	08db      	lsrs	r3, r3, #3
 8003316:	f003 0303 	and.w	r3, r3, #3
 800331a:	4a84      	ldr	r2, [pc, #528]	; (800352c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800331c:	fa22 f303 	lsr.w	r3, r2, r3
 8003320:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	ee07 3a90 	vmov	s15, r3
 8003328:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	ee07 3a90 	vmov	s15, r3
 8003332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003336:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800333a:	4b7b      	ldr	r3, [pc, #492]	; (8003528 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800333c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800333e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003342:	ee07 3a90 	vmov	s15, r3
 8003346:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800334a:	ed97 6a03 	vldr	s12, [r7, #12]
 800334e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003530 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003352:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003356:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800335a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800335e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003362:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003366:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800336a:	e087      	b.n	800347c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	ee07 3a90 	vmov	s15, r3
 8003372:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003376:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003534 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800337a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800337e:	4b6a      	ldr	r3, [pc, #424]	; (8003528 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003382:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003386:	ee07 3a90 	vmov	s15, r3
 800338a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800338e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003392:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003530 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003396:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800339a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800339e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80033ae:	e065      	b.n	800347c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	ee07 3a90 	vmov	s15, r3
 80033b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033ba:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003538 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80033be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033c2:	4b59      	ldr	r3, [pc, #356]	; (8003528 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80033c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033ca:	ee07 3a90 	vmov	s15, r3
 80033ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80033d6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003530 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80033da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80033f2:	e043      	b.n	800347c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	ee07 3a90 	vmov	s15, r3
 80033fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033fe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800353c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003402:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003406:	4b48      	ldr	r3, [pc, #288]	; (8003528 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800340a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800340e:	ee07 3a90 	vmov	s15, r3
 8003412:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003416:	ed97 6a03 	vldr	s12, [r7, #12]
 800341a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003530 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800341e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003422:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003426:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800342a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800342e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003432:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003436:	e021      	b.n	800347c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	ee07 3a90 	vmov	s15, r3
 800343e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003442:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003538 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003446:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800344a:	4b37      	ldr	r3, [pc, #220]	; (8003528 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800344c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800344e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003452:	ee07 3a90 	vmov	s15, r3
 8003456:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800345a:	ed97 6a03 	vldr	s12, [r7, #12]
 800345e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003530 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003462:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003466:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800346a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800346e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003472:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003476:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800347a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800347c:	4b2a      	ldr	r3, [pc, #168]	; (8003528 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800347e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003480:	0a5b      	lsrs	r3, r3, #9
 8003482:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003486:	ee07 3a90 	vmov	s15, r3
 800348a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800348e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003492:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003496:	edd7 6a07 	vldr	s13, [r7, #28]
 800349a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800349e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034a2:	ee17 2a90 	vmov	r2, s15
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80034aa:	4b1f      	ldr	r3, [pc, #124]	; (8003528 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80034ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ae:	0c1b      	lsrs	r3, r3, #16
 80034b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034b4:	ee07 3a90 	vmov	s15, r3
 80034b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80034c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80034c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80034c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034d0:	ee17 2a90 	vmov	r2, s15
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80034d8:	4b13      	ldr	r3, [pc, #76]	; (8003528 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80034da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034dc:	0e1b      	lsrs	r3, r3, #24
 80034de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034e2:	ee07 3a90 	vmov	s15, r3
 80034e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80034ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80034f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80034f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034fe:	ee17 2a90 	vmov	r2, s15
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003506:	e008      	b.n	800351a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	609a      	str	r2, [r3, #8]
}
 800351a:	bf00      	nop
 800351c:	3724      	adds	r7, #36	; 0x24
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop
 8003528:	58024400 	.word	0x58024400
 800352c:	03d09000 	.word	0x03d09000
 8003530:	46000000 	.word	0x46000000
 8003534:	4c742400 	.word	0x4c742400
 8003538:	4a742400 	.word	0x4a742400
 800353c:	4bbebc20 	.word	0x4bbebc20

08003540 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8003540:	b480      	push	{r7}
 8003542:	b089      	sub	sp, #36	; 0x24
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003548:	4ba1      	ldr	r3, [pc, #644]	; (80037d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800354a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800354c:	f003 0303 	and.w	r3, r3, #3
 8003550:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8003552:	4b9f      	ldr	r3, [pc, #636]	; (80037d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003556:	0d1b      	lsrs	r3, r3, #20
 8003558:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800355c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800355e:	4b9c      	ldr	r3, [pc, #624]	; (80037d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003562:	0a1b      	lsrs	r3, r3, #8
 8003564:	f003 0301 	and.w	r3, r3, #1
 8003568:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800356a:	4b99      	ldr	r3, [pc, #612]	; (80037d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800356c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800356e:	08db      	lsrs	r3, r3, #3
 8003570:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003574:	693a      	ldr	r2, [r7, #16]
 8003576:	fb02 f303 	mul.w	r3, r2, r3
 800357a:	ee07 3a90 	vmov	s15, r3
 800357e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003582:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	2b00      	cmp	r3, #0
 800358a:	f000 8111 	beq.w	80037b0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	2b02      	cmp	r3, #2
 8003592:	f000 8083 	beq.w	800369c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	2b02      	cmp	r3, #2
 800359a:	f200 80a1 	bhi.w	80036e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d003      	beq.n	80035ac <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80035a4:	69bb      	ldr	r3, [r7, #24]
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d056      	beq.n	8003658 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80035aa:	e099      	b.n	80036e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80035ac:	4b88      	ldr	r3, [pc, #544]	; (80037d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0320 	and.w	r3, r3, #32
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d02d      	beq.n	8003614 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80035b8:	4b85      	ldr	r3, [pc, #532]	; (80037d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	08db      	lsrs	r3, r3, #3
 80035be:	f003 0303 	and.w	r3, r3, #3
 80035c2:	4a84      	ldr	r2, [pc, #528]	; (80037d4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80035c4:	fa22 f303 	lsr.w	r3, r2, r3
 80035c8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	ee07 3a90 	vmov	s15, r3
 80035d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	ee07 3a90 	vmov	s15, r3
 80035da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035e2:	4b7b      	ldr	r3, [pc, #492]	; (80037d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80035e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035ea:	ee07 3a90 	vmov	s15, r3
 80035ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80035f6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80037d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80035fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003602:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003606:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800360a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800360e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003612:	e087      	b.n	8003724 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	ee07 3a90 	vmov	s15, r3
 800361a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800361e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80037dc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003622:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003626:	4b6a      	ldr	r3, [pc, #424]	; (80037d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800362e:	ee07 3a90 	vmov	s15, r3
 8003632:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003636:	ed97 6a03 	vldr	s12, [r7, #12]
 800363a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80037d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800363e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003642:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003646:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800364a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800364e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003652:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003656:	e065      	b.n	8003724 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	ee07 3a90 	vmov	s15, r3
 800365e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003662:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80037e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003666:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800366a:	4b59      	ldr	r3, [pc, #356]	; (80037d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800366c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003672:	ee07 3a90 	vmov	s15, r3
 8003676:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800367a:	ed97 6a03 	vldr	s12, [r7, #12]
 800367e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80037d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003682:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003686:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800368a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800368e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003692:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003696:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800369a:	e043      	b.n	8003724 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	ee07 3a90 	vmov	s15, r3
 80036a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036a6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80037e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80036aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036ae:	4b48      	ldr	r3, [pc, #288]	; (80037d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80036b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036b6:	ee07 3a90 	vmov	s15, r3
 80036ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036be:	ed97 6a03 	vldr	s12, [r7, #12]
 80036c2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80037d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80036c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80036de:	e021      	b.n	8003724 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	ee07 3a90 	vmov	s15, r3
 80036e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036ea:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80037e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80036ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036f2:	4b37      	ldr	r3, [pc, #220]	; (80037d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80036f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036fa:	ee07 3a90 	vmov	s15, r3
 80036fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003702:	ed97 6a03 	vldr	s12, [r7, #12]
 8003706:	eddf 5a34 	vldr	s11, [pc, #208]	; 80037d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800370a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800370e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003712:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003716:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800371a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800371e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003722:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003724:	4b2a      	ldr	r3, [pc, #168]	; (80037d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003728:	0a5b      	lsrs	r3, r3, #9
 800372a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800372e:	ee07 3a90 	vmov	s15, r3
 8003732:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003736:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800373a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800373e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003742:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003746:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800374a:	ee17 2a90 	vmov	r2, s15
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8003752:	4b1f      	ldr	r3, [pc, #124]	; (80037d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003756:	0c1b      	lsrs	r3, r3, #16
 8003758:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800375c:	ee07 3a90 	vmov	s15, r3
 8003760:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003764:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003768:	ee37 7a87 	vadd.f32	s14, s15, s14
 800376c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003770:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003774:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003778:	ee17 2a90 	vmov	r2, s15
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8003780:	4b13      	ldr	r3, [pc, #76]	; (80037d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003784:	0e1b      	lsrs	r3, r3, #24
 8003786:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800378a:	ee07 3a90 	vmov	s15, r3
 800378e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003792:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003796:	ee37 7a87 	vadd.f32	s14, s15, s14
 800379a:	edd7 6a07 	vldr	s13, [r7, #28]
 800379e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037a6:	ee17 2a90 	vmov	r2, s15
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80037ae:	e008      	b.n	80037c2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	609a      	str	r2, [r3, #8]
}
 80037c2:	bf00      	nop
 80037c4:	3724      	adds	r7, #36	; 0x24
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr
 80037ce:	bf00      	nop
 80037d0:	58024400 	.word	0x58024400
 80037d4:	03d09000 	.word	0x03d09000
 80037d8:	46000000 	.word	0x46000000
 80037dc:	4c742400 	.word	0x4c742400
 80037e0:	4a742400 	.word	0x4a742400
 80037e4:	4bbebc20 	.word	0x4bbebc20

080037e8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80037f2:	2300      	movs	r3, #0
 80037f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80037f6:	4b53      	ldr	r3, [pc, #332]	; (8003944 <RCCEx_PLL2_Config+0x15c>)
 80037f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037fa:	f003 0303 	and.w	r3, r3, #3
 80037fe:	2b03      	cmp	r3, #3
 8003800:	d101      	bne.n	8003806 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e099      	b.n	800393a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003806:	4b4f      	ldr	r3, [pc, #316]	; (8003944 <RCCEx_PLL2_Config+0x15c>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a4e      	ldr	r2, [pc, #312]	; (8003944 <RCCEx_PLL2_Config+0x15c>)
 800380c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003810:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003812:	f7fd faed 	bl	8000df0 <HAL_GetTick>
 8003816:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003818:	e008      	b.n	800382c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800381a:	f7fd fae9 	bl	8000df0 <HAL_GetTick>
 800381e:	4602      	mov	r2, r0
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	2b02      	cmp	r3, #2
 8003826:	d901      	bls.n	800382c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003828:	2303      	movs	r3, #3
 800382a:	e086      	b.n	800393a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800382c:	4b45      	ldr	r3, [pc, #276]	; (8003944 <RCCEx_PLL2_Config+0x15c>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d1f0      	bne.n	800381a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003838:	4b42      	ldr	r3, [pc, #264]	; (8003944 <RCCEx_PLL2_Config+0x15c>)
 800383a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800383c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	031b      	lsls	r3, r3, #12
 8003846:	493f      	ldr	r1, [pc, #252]	; (8003944 <RCCEx_PLL2_Config+0x15c>)
 8003848:	4313      	orrs	r3, r2
 800384a:	628b      	str	r3, [r1, #40]	; 0x28
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	3b01      	subs	r3, #1
 8003852:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	3b01      	subs	r3, #1
 800385c:	025b      	lsls	r3, r3, #9
 800385e:	b29b      	uxth	r3, r3
 8003860:	431a      	orrs	r2, r3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	3b01      	subs	r3, #1
 8003868:	041b      	lsls	r3, r3, #16
 800386a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800386e:	431a      	orrs	r2, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	691b      	ldr	r3, [r3, #16]
 8003874:	3b01      	subs	r3, #1
 8003876:	061b      	lsls	r3, r3, #24
 8003878:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800387c:	4931      	ldr	r1, [pc, #196]	; (8003944 <RCCEx_PLL2_Config+0x15c>)
 800387e:	4313      	orrs	r3, r2
 8003880:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003882:	4b30      	ldr	r3, [pc, #192]	; (8003944 <RCCEx_PLL2_Config+0x15c>)
 8003884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003886:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	695b      	ldr	r3, [r3, #20]
 800388e:	492d      	ldr	r1, [pc, #180]	; (8003944 <RCCEx_PLL2_Config+0x15c>)
 8003890:	4313      	orrs	r3, r2
 8003892:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003894:	4b2b      	ldr	r3, [pc, #172]	; (8003944 <RCCEx_PLL2_Config+0x15c>)
 8003896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003898:	f023 0220 	bic.w	r2, r3, #32
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	699b      	ldr	r3, [r3, #24]
 80038a0:	4928      	ldr	r1, [pc, #160]	; (8003944 <RCCEx_PLL2_Config+0x15c>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80038a6:	4b27      	ldr	r3, [pc, #156]	; (8003944 <RCCEx_PLL2_Config+0x15c>)
 80038a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038aa:	4a26      	ldr	r2, [pc, #152]	; (8003944 <RCCEx_PLL2_Config+0x15c>)
 80038ac:	f023 0310 	bic.w	r3, r3, #16
 80038b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80038b2:	4b24      	ldr	r3, [pc, #144]	; (8003944 <RCCEx_PLL2_Config+0x15c>)
 80038b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038b6:	4b24      	ldr	r3, [pc, #144]	; (8003948 <RCCEx_PLL2_Config+0x160>)
 80038b8:	4013      	ands	r3, r2
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	69d2      	ldr	r2, [r2, #28]
 80038be:	00d2      	lsls	r2, r2, #3
 80038c0:	4920      	ldr	r1, [pc, #128]	; (8003944 <RCCEx_PLL2_Config+0x15c>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80038c6:	4b1f      	ldr	r3, [pc, #124]	; (8003944 <RCCEx_PLL2_Config+0x15c>)
 80038c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ca:	4a1e      	ldr	r2, [pc, #120]	; (8003944 <RCCEx_PLL2_Config+0x15c>)
 80038cc:	f043 0310 	orr.w	r3, r3, #16
 80038d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d106      	bne.n	80038e6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80038d8:	4b1a      	ldr	r3, [pc, #104]	; (8003944 <RCCEx_PLL2_Config+0x15c>)
 80038da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038dc:	4a19      	ldr	r2, [pc, #100]	; (8003944 <RCCEx_PLL2_Config+0x15c>)
 80038de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80038e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80038e4:	e00f      	b.n	8003906 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d106      	bne.n	80038fa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80038ec:	4b15      	ldr	r3, [pc, #84]	; (8003944 <RCCEx_PLL2_Config+0x15c>)
 80038ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f0:	4a14      	ldr	r2, [pc, #80]	; (8003944 <RCCEx_PLL2_Config+0x15c>)
 80038f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80038f8:	e005      	b.n	8003906 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80038fa:	4b12      	ldr	r3, [pc, #72]	; (8003944 <RCCEx_PLL2_Config+0x15c>)
 80038fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038fe:	4a11      	ldr	r2, [pc, #68]	; (8003944 <RCCEx_PLL2_Config+0x15c>)
 8003900:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003904:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003906:	4b0f      	ldr	r3, [pc, #60]	; (8003944 <RCCEx_PLL2_Config+0x15c>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a0e      	ldr	r2, [pc, #56]	; (8003944 <RCCEx_PLL2_Config+0x15c>)
 800390c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003910:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003912:	f7fd fa6d 	bl	8000df0 <HAL_GetTick>
 8003916:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003918:	e008      	b.n	800392c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800391a:	f7fd fa69 	bl	8000df0 <HAL_GetTick>
 800391e:	4602      	mov	r2, r0
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	2b02      	cmp	r3, #2
 8003926:	d901      	bls.n	800392c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003928:	2303      	movs	r3, #3
 800392a:	e006      	b.n	800393a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800392c:	4b05      	ldr	r3, [pc, #20]	; (8003944 <RCCEx_PLL2_Config+0x15c>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d0f0      	beq.n	800391a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003938:	7bfb      	ldrb	r3, [r7, #15]
}
 800393a:	4618      	mov	r0, r3
 800393c:	3710      	adds	r7, #16
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	58024400 	.word	0x58024400
 8003948:	ffff0007 	.word	0xffff0007

0800394c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003956:	2300      	movs	r3, #0
 8003958:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800395a:	4b53      	ldr	r3, [pc, #332]	; (8003aa8 <RCCEx_PLL3_Config+0x15c>)
 800395c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800395e:	f003 0303 	and.w	r3, r3, #3
 8003962:	2b03      	cmp	r3, #3
 8003964:	d101      	bne.n	800396a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e099      	b.n	8003a9e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800396a:	4b4f      	ldr	r3, [pc, #316]	; (8003aa8 <RCCEx_PLL3_Config+0x15c>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a4e      	ldr	r2, [pc, #312]	; (8003aa8 <RCCEx_PLL3_Config+0x15c>)
 8003970:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003974:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003976:	f7fd fa3b 	bl	8000df0 <HAL_GetTick>
 800397a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800397c:	e008      	b.n	8003990 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800397e:	f7fd fa37 	bl	8000df0 <HAL_GetTick>
 8003982:	4602      	mov	r2, r0
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	2b02      	cmp	r3, #2
 800398a:	d901      	bls.n	8003990 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800398c:	2303      	movs	r3, #3
 800398e:	e086      	b.n	8003a9e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003990:	4b45      	ldr	r3, [pc, #276]	; (8003aa8 <RCCEx_PLL3_Config+0x15c>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d1f0      	bne.n	800397e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800399c:	4b42      	ldr	r3, [pc, #264]	; (8003aa8 <RCCEx_PLL3_Config+0x15c>)
 800399e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	051b      	lsls	r3, r3, #20
 80039aa:	493f      	ldr	r1, [pc, #252]	; (8003aa8 <RCCEx_PLL3_Config+0x15c>)
 80039ac:	4313      	orrs	r3, r2
 80039ae:	628b      	str	r3, [r1, #40]	; 0x28
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	3b01      	subs	r3, #1
 80039b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	3b01      	subs	r3, #1
 80039c0:	025b      	lsls	r3, r3, #9
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	431a      	orrs	r2, r3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	3b01      	subs	r3, #1
 80039cc:	041b      	lsls	r3, r3, #16
 80039ce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80039d2:	431a      	orrs	r2, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	691b      	ldr	r3, [r3, #16]
 80039d8:	3b01      	subs	r3, #1
 80039da:	061b      	lsls	r3, r3, #24
 80039dc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80039e0:	4931      	ldr	r1, [pc, #196]	; (8003aa8 <RCCEx_PLL3_Config+0x15c>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80039e6:	4b30      	ldr	r3, [pc, #192]	; (8003aa8 <RCCEx_PLL3_Config+0x15c>)
 80039e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	695b      	ldr	r3, [r3, #20]
 80039f2:	492d      	ldr	r1, [pc, #180]	; (8003aa8 <RCCEx_PLL3_Config+0x15c>)
 80039f4:	4313      	orrs	r3, r2
 80039f6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80039f8:	4b2b      	ldr	r3, [pc, #172]	; (8003aa8 <RCCEx_PLL3_Config+0x15c>)
 80039fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039fc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	699b      	ldr	r3, [r3, #24]
 8003a04:	4928      	ldr	r1, [pc, #160]	; (8003aa8 <RCCEx_PLL3_Config+0x15c>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003a0a:	4b27      	ldr	r3, [pc, #156]	; (8003aa8 <RCCEx_PLL3_Config+0x15c>)
 8003a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a0e:	4a26      	ldr	r2, [pc, #152]	; (8003aa8 <RCCEx_PLL3_Config+0x15c>)
 8003a10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a14:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003a16:	4b24      	ldr	r3, [pc, #144]	; (8003aa8 <RCCEx_PLL3_Config+0x15c>)
 8003a18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a1a:	4b24      	ldr	r3, [pc, #144]	; (8003aac <RCCEx_PLL3_Config+0x160>)
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	69d2      	ldr	r2, [r2, #28]
 8003a22:	00d2      	lsls	r2, r2, #3
 8003a24:	4920      	ldr	r1, [pc, #128]	; (8003aa8 <RCCEx_PLL3_Config+0x15c>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003a2a:	4b1f      	ldr	r3, [pc, #124]	; (8003aa8 <RCCEx_PLL3_Config+0x15c>)
 8003a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a2e:	4a1e      	ldr	r2, [pc, #120]	; (8003aa8 <RCCEx_PLL3_Config+0x15c>)
 8003a30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a34:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d106      	bne.n	8003a4a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003a3c:	4b1a      	ldr	r3, [pc, #104]	; (8003aa8 <RCCEx_PLL3_Config+0x15c>)
 8003a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a40:	4a19      	ldr	r2, [pc, #100]	; (8003aa8 <RCCEx_PLL3_Config+0x15c>)
 8003a42:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003a46:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003a48:	e00f      	b.n	8003a6a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d106      	bne.n	8003a5e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003a50:	4b15      	ldr	r3, [pc, #84]	; (8003aa8 <RCCEx_PLL3_Config+0x15c>)
 8003a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a54:	4a14      	ldr	r2, [pc, #80]	; (8003aa8 <RCCEx_PLL3_Config+0x15c>)
 8003a56:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003a5a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003a5c:	e005      	b.n	8003a6a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003a5e:	4b12      	ldr	r3, [pc, #72]	; (8003aa8 <RCCEx_PLL3_Config+0x15c>)
 8003a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a62:	4a11      	ldr	r2, [pc, #68]	; (8003aa8 <RCCEx_PLL3_Config+0x15c>)
 8003a64:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a68:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003a6a:	4b0f      	ldr	r3, [pc, #60]	; (8003aa8 <RCCEx_PLL3_Config+0x15c>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a0e      	ldr	r2, [pc, #56]	; (8003aa8 <RCCEx_PLL3_Config+0x15c>)
 8003a70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a76:	f7fd f9bb 	bl	8000df0 <HAL_GetTick>
 8003a7a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003a7c:	e008      	b.n	8003a90 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003a7e:	f7fd f9b7 	bl	8000df0 <HAL_GetTick>
 8003a82:	4602      	mov	r2, r0
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d901      	bls.n	8003a90 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	e006      	b.n	8003a9e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003a90:	4b05      	ldr	r3, [pc, #20]	; (8003aa8 <RCCEx_PLL3_Config+0x15c>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d0f0      	beq.n	8003a7e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3710      	adds	r7, #16
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	58024400 	.word	0x58024400
 8003aac:	ffff0007 	.word	0xffff0007

08003ab0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d101      	bne.n	8003ac2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e042      	b.n	8003b48 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d106      	bne.n	8003ada <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f7fc ff1f 	bl	8000918 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2224      	movs	r2, #36	; 0x24
 8003ade:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f022 0201 	bic.w	r2, r2, #1
 8003af0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f000 f8c2 	bl	8003c7c <UART_SetConfig>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d101      	bne.n	8003b02 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e022      	b.n	8003b48 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d002      	beq.n	8003b10 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f000 fe1e 	bl	800474c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	685a      	ldr	r2, [r3, #4]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b1e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	689a      	ldr	r2, [r3, #8]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b2e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f042 0201 	orr.w	r2, r2, #1
 8003b3e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f000 fea5 	bl	8004890 <UART_CheckIdleState>
 8003b46:	4603      	mov	r3, r0
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3708      	adds	r7, #8
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b08a      	sub	sp, #40	; 0x28
 8003b54:	af02      	add	r7, sp, #8
 8003b56:	60f8      	str	r0, [r7, #12]
 8003b58:	60b9      	str	r1, [r7, #8]
 8003b5a:	603b      	str	r3, [r7, #0]
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b66:	2b20      	cmp	r3, #32
 8003b68:	f040 8083 	bne.w	8003c72 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d002      	beq.n	8003b78 <HAL_UART_Transmit+0x28>
 8003b72:	88fb      	ldrh	r3, [r7, #6]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d101      	bne.n	8003b7c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e07b      	b.n	8003c74 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d101      	bne.n	8003b8a <HAL_UART_Transmit+0x3a>
 8003b86:	2302      	movs	r3, #2
 8003b88:	e074      	b.n	8003c74 <HAL_UART_Transmit+0x124>
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2221      	movs	r2, #33	; 0x21
 8003b9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ba2:	f7fd f925 	bl	8000df0 <HAL_GetTick>
 8003ba6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	88fa      	ldrh	r2, [r7, #6]
 8003bac:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	88fa      	ldrh	r2, [r7, #6]
 8003bb4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bc0:	d108      	bne.n	8003bd4 <HAL_UART_Transmit+0x84>
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d104      	bne.n	8003bd4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	61bb      	str	r3, [r7, #24]
 8003bd2:	e003      	b.n	8003bdc <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2200      	movs	r2, #0
 8003be0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8003be4:	e02c      	b.n	8003c40 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	9300      	str	r3, [sp, #0]
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	2200      	movs	r2, #0
 8003bee:	2180      	movs	r1, #128	; 0x80
 8003bf0:	68f8      	ldr	r0, [r7, #12]
 8003bf2:	f000 fe98 	bl	8004926 <UART_WaitOnFlagUntilTimeout>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d001      	beq.n	8003c00 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	e039      	b.n	8003c74 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d10b      	bne.n	8003c1e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c06:	69bb      	ldr	r3, [r7, #24]
 8003c08:	881b      	ldrh	r3, [r3, #0]
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c14:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003c16:	69bb      	ldr	r3, [r7, #24]
 8003c18:	3302      	adds	r3, #2
 8003c1a:	61bb      	str	r3, [r7, #24]
 8003c1c:	e007      	b.n	8003c2e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	781a      	ldrb	r2, [r3, #0]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	3b01      	subs	r3, #1
 8003c38:	b29a      	uxth	r2, r3
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d1cc      	bne.n	8003be6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	9300      	str	r3, [sp, #0]
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	2200      	movs	r2, #0
 8003c54:	2140      	movs	r1, #64	; 0x40
 8003c56:	68f8      	ldr	r0, [r7, #12]
 8003c58:	f000 fe65 	bl	8004926 <UART_WaitOnFlagUntilTimeout>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d001      	beq.n	8003c66 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e006      	b.n	8003c74 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2220      	movs	r2, #32
 8003c6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	e000      	b.n	8003c74 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8003c72:	2302      	movs	r3, #2
  }
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3720      	adds	r7, #32
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c80:	b092      	sub	sp, #72	; 0x48
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c86:	2300      	movs	r3, #0
 8003c88:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	689a      	ldr	r2, [r3, #8]
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	691b      	ldr	r3, [r3, #16]
 8003c94:	431a      	orrs	r2, r3
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	695b      	ldr	r3, [r3, #20]
 8003c9a:	431a      	orrs	r2, r3
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	69db      	ldr	r3, [r3, #28]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	4bbe      	ldr	r3, [pc, #760]	; (8003fa4 <UART_SetConfig+0x328>)
 8003cac:	4013      	ands	r3, r2
 8003cae:	697a      	ldr	r2, [r7, #20]
 8003cb0:	6812      	ldr	r2, [r2, #0]
 8003cb2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003cb4:	430b      	orrs	r3, r1
 8003cb6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	68da      	ldr	r2, [r3, #12]
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	430a      	orrs	r2, r1
 8003ccc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	699b      	ldr	r3, [r3, #24]
 8003cd2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4ab3      	ldr	r2, [pc, #716]	; (8003fa8 <UART_SetConfig+0x32c>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d004      	beq.n	8003ce8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	6a1b      	ldr	r3, [r3, #32]
 8003ce2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	689a      	ldr	r2, [r3, #8]
 8003cee:	4baf      	ldr	r3, [pc, #700]	; (8003fac <UART_SetConfig+0x330>)
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	697a      	ldr	r2, [r7, #20]
 8003cf4:	6812      	ldr	r2, [r2, #0]
 8003cf6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003cf8:	430b      	orrs	r3, r1
 8003cfa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d02:	f023 010f 	bic.w	r1, r3, #15
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	430a      	orrs	r2, r1
 8003d10:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4aa6      	ldr	r2, [pc, #664]	; (8003fb0 <UART_SetConfig+0x334>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d177      	bne.n	8003e0c <UART_SetConfig+0x190>
 8003d1c:	4ba5      	ldr	r3, [pc, #660]	; (8003fb4 <UART_SetConfig+0x338>)
 8003d1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d20:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d24:	2b28      	cmp	r3, #40	; 0x28
 8003d26:	d86d      	bhi.n	8003e04 <UART_SetConfig+0x188>
 8003d28:	a201      	add	r2, pc, #4	; (adr r2, 8003d30 <UART_SetConfig+0xb4>)
 8003d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d2e:	bf00      	nop
 8003d30:	08003dd5 	.word	0x08003dd5
 8003d34:	08003e05 	.word	0x08003e05
 8003d38:	08003e05 	.word	0x08003e05
 8003d3c:	08003e05 	.word	0x08003e05
 8003d40:	08003e05 	.word	0x08003e05
 8003d44:	08003e05 	.word	0x08003e05
 8003d48:	08003e05 	.word	0x08003e05
 8003d4c:	08003e05 	.word	0x08003e05
 8003d50:	08003ddd 	.word	0x08003ddd
 8003d54:	08003e05 	.word	0x08003e05
 8003d58:	08003e05 	.word	0x08003e05
 8003d5c:	08003e05 	.word	0x08003e05
 8003d60:	08003e05 	.word	0x08003e05
 8003d64:	08003e05 	.word	0x08003e05
 8003d68:	08003e05 	.word	0x08003e05
 8003d6c:	08003e05 	.word	0x08003e05
 8003d70:	08003de5 	.word	0x08003de5
 8003d74:	08003e05 	.word	0x08003e05
 8003d78:	08003e05 	.word	0x08003e05
 8003d7c:	08003e05 	.word	0x08003e05
 8003d80:	08003e05 	.word	0x08003e05
 8003d84:	08003e05 	.word	0x08003e05
 8003d88:	08003e05 	.word	0x08003e05
 8003d8c:	08003e05 	.word	0x08003e05
 8003d90:	08003ded 	.word	0x08003ded
 8003d94:	08003e05 	.word	0x08003e05
 8003d98:	08003e05 	.word	0x08003e05
 8003d9c:	08003e05 	.word	0x08003e05
 8003da0:	08003e05 	.word	0x08003e05
 8003da4:	08003e05 	.word	0x08003e05
 8003da8:	08003e05 	.word	0x08003e05
 8003dac:	08003e05 	.word	0x08003e05
 8003db0:	08003df5 	.word	0x08003df5
 8003db4:	08003e05 	.word	0x08003e05
 8003db8:	08003e05 	.word	0x08003e05
 8003dbc:	08003e05 	.word	0x08003e05
 8003dc0:	08003e05 	.word	0x08003e05
 8003dc4:	08003e05 	.word	0x08003e05
 8003dc8:	08003e05 	.word	0x08003e05
 8003dcc:	08003e05 	.word	0x08003e05
 8003dd0:	08003dfd 	.word	0x08003dfd
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003dda:	e222      	b.n	8004222 <UART_SetConfig+0x5a6>
 8003ddc:	2304      	movs	r3, #4
 8003dde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003de2:	e21e      	b.n	8004222 <UART_SetConfig+0x5a6>
 8003de4:	2308      	movs	r3, #8
 8003de6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003dea:	e21a      	b.n	8004222 <UART_SetConfig+0x5a6>
 8003dec:	2310      	movs	r3, #16
 8003dee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003df2:	e216      	b.n	8004222 <UART_SetConfig+0x5a6>
 8003df4:	2320      	movs	r3, #32
 8003df6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003dfa:	e212      	b.n	8004222 <UART_SetConfig+0x5a6>
 8003dfc:	2340      	movs	r3, #64	; 0x40
 8003dfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003e02:	e20e      	b.n	8004222 <UART_SetConfig+0x5a6>
 8003e04:	2380      	movs	r3, #128	; 0x80
 8003e06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003e0a:	e20a      	b.n	8004222 <UART_SetConfig+0x5a6>
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a69      	ldr	r2, [pc, #420]	; (8003fb8 <UART_SetConfig+0x33c>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d130      	bne.n	8003e78 <UART_SetConfig+0x1fc>
 8003e16:	4b67      	ldr	r3, [pc, #412]	; (8003fb4 <UART_SetConfig+0x338>)
 8003e18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e1a:	f003 0307 	and.w	r3, r3, #7
 8003e1e:	2b05      	cmp	r3, #5
 8003e20:	d826      	bhi.n	8003e70 <UART_SetConfig+0x1f4>
 8003e22:	a201      	add	r2, pc, #4	; (adr r2, 8003e28 <UART_SetConfig+0x1ac>)
 8003e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e28:	08003e41 	.word	0x08003e41
 8003e2c:	08003e49 	.word	0x08003e49
 8003e30:	08003e51 	.word	0x08003e51
 8003e34:	08003e59 	.word	0x08003e59
 8003e38:	08003e61 	.word	0x08003e61
 8003e3c:	08003e69 	.word	0x08003e69
 8003e40:	2300      	movs	r3, #0
 8003e42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003e46:	e1ec      	b.n	8004222 <UART_SetConfig+0x5a6>
 8003e48:	2304      	movs	r3, #4
 8003e4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003e4e:	e1e8      	b.n	8004222 <UART_SetConfig+0x5a6>
 8003e50:	2308      	movs	r3, #8
 8003e52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003e56:	e1e4      	b.n	8004222 <UART_SetConfig+0x5a6>
 8003e58:	2310      	movs	r3, #16
 8003e5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003e5e:	e1e0      	b.n	8004222 <UART_SetConfig+0x5a6>
 8003e60:	2320      	movs	r3, #32
 8003e62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003e66:	e1dc      	b.n	8004222 <UART_SetConfig+0x5a6>
 8003e68:	2340      	movs	r3, #64	; 0x40
 8003e6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003e6e:	e1d8      	b.n	8004222 <UART_SetConfig+0x5a6>
 8003e70:	2380      	movs	r3, #128	; 0x80
 8003e72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003e76:	e1d4      	b.n	8004222 <UART_SetConfig+0x5a6>
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a4f      	ldr	r2, [pc, #316]	; (8003fbc <UART_SetConfig+0x340>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d130      	bne.n	8003ee4 <UART_SetConfig+0x268>
 8003e82:	4b4c      	ldr	r3, [pc, #304]	; (8003fb4 <UART_SetConfig+0x338>)
 8003e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e86:	f003 0307 	and.w	r3, r3, #7
 8003e8a:	2b05      	cmp	r3, #5
 8003e8c:	d826      	bhi.n	8003edc <UART_SetConfig+0x260>
 8003e8e:	a201      	add	r2, pc, #4	; (adr r2, 8003e94 <UART_SetConfig+0x218>)
 8003e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e94:	08003ead 	.word	0x08003ead
 8003e98:	08003eb5 	.word	0x08003eb5
 8003e9c:	08003ebd 	.word	0x08003ebd
 8003ea0:	08003ec5 	.word	0x08003ec5
 8003ea4:	08003ecd 	.word	0x08003ecd
 8003ea8:	08003ed5 	.word	0x08003ed5
 8003eac:	2300      	movs	r3, #0
 8003eae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003eb2:	e1b6      	b.n	8004222 <UART_SetConfig+0x5a6>
 8003eb4:	2304      	movs	r3, #4
 8003eb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003eba:	e1b2      	b.n	8004222 <UART_SetConfig+0x5a6>
 8003ebc:	2308      	movs	r3, #8
 8003ebe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003ec2:	e1ae      	b.n	8004222 <UART_SetConfig+0x5a6>
 8003ec4:	2310      	movs	r3, #16
 8003ec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003eca:	e1aa      	b.n	8004222 <UART_SetConfig+0x5a6>
 8003ecc:	2320      	movs	r3, #32
 8003ece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003ed2:	e1a6      	b.n	8004222 <UART_SetConfig+0x5a6>
 8003ed4:	2340      	movs	r3, #64	; 0x40
 8003ed6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003eda:	e1a2      	b.n	8004222 <UART_SetConfig+0x5a6>
 8003edc:	2380      	movs	r3, #128	; 0x80
 8003ede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003ee2:	e19e      	b.n	8004222 <UART_SetConfig+0x5a6>
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a35      	ldr	r2, [pc, #212]	; (8003fc0 <UART_SetConfig+0x344>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d130      	bne.n	8003f50 <UART_SetConfig+0x2d4>
 8003eee:	4b31      	ldr	r3, [pc, #196]	; (8003fb4 <UART_SetConfig+0x338>)
 8003ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ef2:	f003 0307 	and.w	r3, r3, #7
 8003ef6:	2b05      	cmp	r3, #5
 8003ef8:	d826      	bhi.n	8003f48 <UART_SetConfig+0x2cc>
 8003efa:	a201      	add	r2, pc, #4	; (adr r2, 8003f00 <UART_SetConfig+0x284>)
 8003efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f00:	08003f19 	.word	0x08003f19
 8003f04:	08003f21 	.word	0x08003f21
 8003f08:	08003f29 	.word	0x08003f29
 8003f0c:	08003f31 	.word	0x08003f31
 8003f10:	08003f39 	.word	0x08003f39
 8003f14:	08003f41 	.word	0x08003f41
 8003f18:	2300      	movs	r3, #0
 8003f1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f1e:	e180      	b.n	8004222 <UART_SetConfig+0x5a6>
 8003f20:	2304      	movs	r3, #4
 8003f22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f26:	e17c      	b.n	8004222 <UART_SetConfig+0x5a6>
 8003f28:	2308      	movs	r3, #8
 8003f2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f2e:	e178      	b.n	8004222 <UART_SetConfig+0x5a6>
 8003f30:	2310      	movs	r3, #16
 8003f32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f36:	e174      	b.n	8004222 <UART_SetConfig+0x5a6>
 8003f38:	2320      	movs	r3, #32
 8003f3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f3e:	e170      	b.n	8004222 <UART_SetConfig+0x5a6>
 8003f40:	2340      	movs	r3, #64	; 0x40
 8003f42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f46:	e16c      	b.n	8004222 <UART_SetConfig+0x5a6>
 8003f48:	2380      	movs	r3, #128	; 0x80
 8003f4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f4e:	e168      	b.n	8004222 <UART_SetConfig+0x5a6>
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a1b      	ldr	r2, [pc, #108]	; (8003fc4 <UART_SetConfig+0x348>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d142      	bne.n	8003fe0 <UART_SetConfig+0x364>
 8003f5a:	4b16      	ldr	r3, [pc, #88]	; (8003fb4 <UART_SetConfig+0x338>)
 8003f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f5e:	f003 0307 	and.w	r3, r3, #7
 8003f62:	2b05      	cmp	r3, #5
 8003f64:	d838      	bhi.n	8003fd8 <UART_SetConfig+0x35c>
 8003f66:	a201      	add	r2, pc, #4	; (adr r2, 8003f6c <UART_SetConfig+0x2f0>)
 8003f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f6c:	08003f85 	.word	0x08003f85
 8003f70:	08003f8d 	.word	0x08003f8d
 8003f74:	08003f95 	.word	0x08003f95
 8003f78:	08003f9d 	.word	0x08003f9d
 8003f7c:	08003fc9 	.word	0x08003fc9
 8003f80:	08003fd1 	.word	0x08003fd1
 8003f84:	2300      	movs	r3, #0
 8003f86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f8a:	e14a      	b.n	8004222 <UART_SetConfig+0x5a6>
 8003f8c:	2304      	movs	r3, #4
 8003f8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f92:	e146      	b.n	8004222 <UART_SetConfig+0x5a6>
 8003f94:	2308      	movs	r3, #8
 8003f96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f9a:	e142      	b.n	8004222 <UART_SetConfig+0x5a6>
 8003f9c:	2310      	movs	r3, #16
 8003f9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003fa2:	e13e      	b.n	8004222 <UART_SetConfig+0x5a6>
 8003fa4:	cfff69f3 	.word	0xcfff69f3
 8003fa8:	58000c00 	.word	0x58000c00
 8003fac:	11fff4ff 	.word	0x11fff4ff
 8003fb0:	40011000 	.word	0x40011000
 8003fb4:	58024400 	.word	0x58024400
 8003fb8:	40004400 	.word	0x40004400
 8003fbc:	40004800 	.word	0x40004800
 8003fc0:	40004c00 	.word	0x40004c00
 8003fc4:	40005000 	.word	0x40005000
 8003fc8:	2320      	movs	r3, #32
 8003fca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003fce:	e128      	b.n	8004222 <UART_SetConfig+0x5a6>
 8003fd0:	2340      	movs	r3, #64	; 0x40
 8003fd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003fd6:	e124      	b.n	8004222 <UART_SetConfig+0x5a6>
 8003fd8:	2380      	movs	r3, #128	; 0x80
 8003fda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003fde:	e120      	b.n	8004222 <UART_SetConfig+0x5a6>
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4acb      	ldr	r2, [pc, #812]	; (8004314 <UART_SetConfig+0x698>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d176      	bne.n	80040d8 <UART_SetConfig+0x45c>
 8003fea:	4bcb      	ldr	r3, [pc, #812]	; (8004318 <UART_SetConfig+0x69c>)
 8003fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ff2:	2b28      	cmp	r3, #40	; 0x28
 8003ff4:	d86c      	bhi.n	80040d0 <UART_SetConfig+0x454>
 8003ff6:	a201      	add	r2, pc, #4	; (adr r2, 8003ffc <UART_SetConfig+0x380>)
 8003ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ffc:	080040a1 	.word	0x080040a1
 8004000:	080040d1 	.word	0x080040d1
 8004004:	080040d1 	.word	0x080040d1
 8004008:	080040d1 	.word	0x080040d1
 800400c:	080040d1 	.word	0x080040d1
 8004010:	080040d1 	.word	0x080040d1
 8004014:	080040d1 	.word	0x080040d1
 8004018:	080040d1 	.word	0x080040d1
 800401c:	080040a9 	.word	0x080040a9
 8004020:	080040d1 	.word	0x080040d1
 8004024:	080040d1 	.word	0x080040d1
 8004028:	080040d1 	.word	0x080040d1
 800402c:	080040d1 	.word	0x080040d1
 8004030:	080040d1 	.word	0x080040d1
 8004034:	080040d1 	.word	0x080040d1
 8004038:	080040d1 	.word	0x080040d1
 800403c:	080040b1 	.word	0x080040b1
 8004040:	080040d1 	.word	0x080040d1
 8004044:	080040d1 	.word	0x080040d1
 8004048:	080040d1 	.word	0x080040d1
 800404c:	080040d1 	.word	0x080040d1
 8004050:	080040d1 	.word	0x080040d1
 8004054:	080040d1 	.word	0x080040d1
 8004058:	080040d1 	.word	0x080040d1
 800405c:	080040b9 	.word	0x080040b9
 8004060:	080040d1 	.word	0x080040d1
 8004064:	080040d1 	.word	0x080040d1
 8004068:	080040d1 	.word	0x080040d1
 800406c:	080040d1 	.word	0x080040d1
 8004070:	080040d1 	.word	0x080040d1
 8004074:	080040d1 	.word	0x080040d1
 8004078:	080040d1 	.word	0x080040d1
 800407c:	080040c1 	.word	0x080040c1
 8004080:	080040d1 	.word	0x080040d1
 8004084:	080040d1 	.word	0x080040d1
 8004088:	080040d1 	.word	0x080040d1
 800408c:	080040d1 	.word	0x080040d1
 8004090:	080040d1 	.word	0x080040d1
 8004094:	080040d1 	.word	0x080040d1
 8004098:	080040d1 	.word	0x080040d1
 800409c:	080040c9 	.word	0x080040c9
 80040a0:	2301      	movs	r3, #1
 80040a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80040a6:	e0bc      	b.n	8004222 <UART_SetConfig+0x5a6>
 80040a8:	2304      	movs	r3, #4
 80040aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80040ae:	e0b8      	b.n	8004222 <UART_SetConfig+0x5a6>
 80040b0:	2308      	movs	r3, #8
 80040b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80040b6:	e0b4      	b.n	8004222 <UART_SetConfig+0x5a6>
 80040b8:	2310      	movs	r3, #16
 80040ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80040be:	e0b0      	b.n	8004222 <UART_SetConfig+0x5a6>
 80040c0:	2320      	movs	r3, #32
 80040c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80040c6:	e0ac      	b.n	8004222 <UART_SetConfig+0x5a6>
 80040c8:	2340      	movs	r3, #64	; 0x40
 80040ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80040ce:	e0a8      	b.n	8004222 <UART_SetConfig+0x5a6>
 80040d0:	2380      	movs	r3, #128	; 0x80
 80040d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80040d6:	e0a4      	b.n	8004222 <UART_SetConfig+0x5a6>
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a8f      	ldr	r2, [pc, #572]	; (800431c <UART_SetConfig+0x6a0>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d130      	bne.n	8004144 <UART_SetConfig+0x4c8>
 80040e2:	4b8d      	ldr	r3, [pc, #564]	; (8004318 <UART_SetConfig+0x69c>)
 80040e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040e6:	f003 0307 	and.w	r3, r3, #7
 80040ea:	2b05      	cmp	r3, #5
 80040ec:	d826      	bhi.n	800413c <UART_SetConfig+0x4c0>
 80040ee:	a201      	add	r2, pc, #4	; (adr r2, 80040f4 <UART_SetConfig+0x478>)
 80040f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040f4:	0800410d 	.word	0x0800410d
 80040f8:	08004115 	.word	0x08004115
 80040fc:	0800411d 	.word	0x0800411d
 8004100:	08004125 	.word	0x08004125
 8004104:	0800412d 	.word	0x0800412d
 8004108:	08004135 	.word	0x08004135
 800410c:	2300      	movs	r3, #0
 800410e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004112:	e086      	b.n	8004222 <UART_SetConfig+0x5a6>
 8004114:	2304      	movs	r3, #4
 8004116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800411a:	e082      	b.n	8004222 <UART_SetConfig+0x5a6>
 800411c:	2308      	movs	r3, #8
 800411e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004122:	e07e      	b.n	8004222 <UART_SetConfig+0x5a6>
 8004124:	2310      	movs	r3, #16
 8004126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800412a:	e07a      	b.n	8004222 <UART_SetConfig+0x5a6>
 800412c:	2320      	movs	r3, #32
 800412e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004132:	e076      	b.n	8004222 <UART_SetConfig+0x5a6>
 8004134:	2340      	movs	r3, #64	; 0x40
 8004136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800413a:	e072      	b.n	8004222 <UART_SetConfig+0x5a6>
 800413c:	2380      	movs	r3, #128	; 0x80
 800413e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004142:	e06e      	b.n	8004222 <UART_SetConfig+0x5a6>
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a75      	ldr	r2, [pc, #468]	; (8004320 <UART_SetConfig+0x6a4>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d130      	bne.n	80041b0 <UART_SetConfig+0x534>
 800414e:	4b72      	ldr	r3, [pc, #456]	; (8004318 <UART_SetConfig+0x69c>)
 8004150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004152:	f003 0307 	and.w	r3, r3, #7
 8004156:	2b05      	cmp	r3, #5
 8004158:	d826      	bhi.n	80041a8 <UART_SetConfig+0x52c>
 800415a:	a201      	add	r2, pc, #4	; (adr r2, 8004160 <UART_SetConfig+0x4e4>)
 800415c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004160:	08004179 	.word	0x08004179
 8004164:	08004181 	.word	0x08004181
 8004168:	08004189 	.word	0x08004189
 800416c:	08004191 	.word	0x08004191
 8004170:	08004199 	.word	0x08004199
 8004174:	080041a1 	.word	0x080041a1
 8004178:	2300      	movs	r3, #0
 800417a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800417e:	e050      	b.n	8004222 <UART_SetConfig+0x5a6>
 8004180:	2304      	movs	r3, #4
 8004182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004186:	e04c      	b.n	8004222 <UART_SetConfig+0x5a6>
 8004188:	2308      	movs	r3, #8
 800418a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800418e:	e048      	b.n	8004222 <UART_SetConfig+0x5a6>
 8004190:	2310      	movs	r3, #16
 8004192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004196:	e044      	b.n	8004222 <UART_SetConfig+0x5a6>
 8004198:	2320      	movs	r3, #32
 800419a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800419e:	e040      	b.n	8004222 <UART_SetConfig+0x5a6>
 80041a0:	2340      	movs	r3, #64	; 0x40
 80041a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041a6:	e03c      	b.n	8004222 <UART_SetConfig+0x5a6>
 80041a8:	2380      	movs	r3, #128	; 0x80
 80041aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041ae:	e038      	b.n	8004222 <UART_SetConfig+0x5a6>
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a5b      	ldr	r2, [pc, #364]	; (8004324 <UART_SetConfig+0x6a8>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d130      	bne.n	800421c <UART_SetConfig+0x5a0>
 80041ba:	4b57      	ldr	r3, [pc, #348]	; (8004318 <UART_SetConfig+0x69c>)
 80041bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041be:	f003 0307 	and.w	r3, r3, #7
 80041c2:	2b05      	cmp	r3, #5
 80041c4:	d826      	bhi.n	8004214 <UART_SetConfig+0x598>
 80041c6:	a201      	add	r2, pc, #4	; (adr r2, 80041cc <UART_SetConfig+0x550>)
 80041c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041cc:	080041e5 	.word	0x080041e5
 80041d0:	080041ed 	.word	0x080041ed
 80041d4:	080041f5 	.word	0x080041f5
 80041d8:	080041fd 	.word	0x080041fd
 80041dc:	08004205 	.word	0x08004205
 80041e0:	0800420d 	.word	0x0800420d
 80041e4:	2302      	movs	r3, #2
 80041e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041ea:	e01a      	b.n	8004222 <UART_SetConfig+0x5a6>
 80041ec:	2304      	movs	r3, #4
 80041ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041f2:	e016      	b.n	8004222 <UART_SetConfig+0x5a6>
 80041f4:	2308      	movs	r3, #8
 80041f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041fa:	e012      	b.n	8004222 <UART_SetConfig+0x5a6>
 80041fc:	2310      	movs	r3, #16
 80041fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004202:	e00e      	b.n	8004222 <UART_SetConfig+0x5a6>
 8004204:	2320      	movs	r3, #32
 8004206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800420a:	e00a      	b.n	8004222 <UART_SetConfig+0x5a6>
 800420c:	2340      	movs	r3, #64	; 0x40
 800420e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004212:	e006      	b.n	8004222 <UART_SetConfig+0x5a6>
 8004214:	2380      	movs	r3, #128	; 0x80
 8004216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800421a:	e002      	b.n	8004222 <UART_SetConfig+0x5a6>
 800421c:	2380      	movs	r3, #128	; 0x80
 800421e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a3f      	ldr	r2, [pc, #252]	; (8004324 <UART_SetConfig+0x6a8>)
 8004228:	4293      	cmp	r3, r2
 800422a:	f040 80f8 	bne.w	800441e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800422e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004232:	2b20      	cmp	r3, #32
 8004234:	dc46      	bgt.n	80042c4 <UART_SetConfig+0x648>
 8004236:	2b02      	cmp	r3, #2
 8004238:	f2c0 8082 	blt.w	8004340 <UART_SetConfig+0x6c4>
 800423c:	3b02      	subs	r3, #2
 800423e:	2b1e      	cmp	r3, #30
 8004240:	d87e      	bhi.n	8004340 <UART_SetConfig+0x6c4>
 8004242:	a201      	add	r2, pc, #4	; (adr r2, 8004248 <UART_SetConfig+0x5cc>)
 8004244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004248:	080042cb 	.word	0x080042cb
 800424c:	08004341 	.word	0x08004341
 8004250:	080042d3 	.word	0x080042d3
 8004254:	08004341 	.word	0x08004341
 8004258:	08004341 	.word	0x08004341
 800425c:	08004341 	.word	0x08004341
 8004260:	080042e3 	.word	0x080042e3
 8004264:	08004341 	.word	0x08004341
 8004268:	08004341 	.word	0x08004341
 800426c:	08004341 	.word	0x08004341
 8004270:	08004341 	.word	0x08004341
 8004274:	08004341 	.word	0x08004341
 8004278:	08004341 	.word	0x08004341
 800427c:	08004341 	.word	0x08004341
 8004280:	080042f3 	.word	0x080042f3
 8004284:	08004341 	.word	0x08004341
 8004288:	08004341 	.word	0x08004341
 800428c:	08004341 	.word	0x08004341
 8004290:	08004341 	.word	0x08004341
 8004294:	08004341 	.word	0x08004341
 8004298:	08004341 	.word	0x08004341
 800429c:	08004341 	.word	0x08004341
 80042a0:	08004341 	.word	0x08004341
 80042a4:	08004341 	.word	0x08004341
 80042a8:	08004341 	.word	0x08004341
 80042ac:	08004341 	.word	0x08004341
 80042b0:	08004341 	.word	0x08004341
 80042b4:	08004341 	.word	0x08004341
 80042b8:	08004341 	.word	0x08004341
 80042bc:	08004341 	.word	0x08004341
 80042c0:	08004333 	.word	0x08004333
 80042c4:	2b40      	cmp	r3, #64	; 0x40
 80042c6:	d037      	beq.n	8004338 <UART_SetConfig+0x6bc>
 80042c8:	e03a      	b.n	8004340 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80042ca:	f7fe ffcf 	bl	800326c <HAL_RCCEx_GetD3PCLK1Freq>
 80042ce:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80042d0:	e03c      	b.n	800434c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80042d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042d6:	4618      	mov	r0, r3
 80042d8:	f7fe ffde 	bl	8003298 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80042dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80042e0:	e034      	b.n	800434c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80042e2:	f107 0318 	add.w	r3, r7, #24
 80042e6:	4618      	mov	r0, r3
 80042e8:	f7ff f92a 	bl	8003540 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80042f0:	e02c      	b.n	800434c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80042f2:	4b09      	ldr	r3, [pc, #36]	; (8004318 <UART_SetConfig+0x69c>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 0320 	and.w	r3, r3, #32
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d016      	beq.n	800432c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80042fe:	4b06      	ldr	r3, [pc, #24]	; (8004318 <UART_SetConfig+0x69c>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	08db      	lsrs	r3, r3, #3
 8004304:	f003 0303 	and.w	r3, r3, #3
 8004308:	4a07      	ldr	r2, [pc, #28]	; (8004328 <UART_SetConfig+0x6ac>)
 800430a:	fa22 f303 	lsr.w	r3, r2, r3
 800430e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004310:	e01c      	b.n	800434c <UART_SetConfig+0x6d0>
 8004312:	bf00      	nop
 8004314:	40011400 	.word	0x40011400
 8004318:	58024400 	.word	0x58024400
 800431c:	40007800 	.word	0x40007800
 8004320:	40007c00 	.word	0x40007c00
 8004324:	58000c00 	.word	0x58000c00
 8004328:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800432c:	4b9d      	ldr	r3, [pc, #628]	; (80045a4 <UART_SetConfig+0x928>)
 800432e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004330:	e00c      	b.n	800434c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004332:	4b9d      	ldr	r3, [pc, #628]	; (80045a8 <UART_SetConfig+0x92c>)
 8004334:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004336:	e009      	b.n	800434c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004338:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800433c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800433e:	e005      	b.n	800434c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8004340:	2300      	movs	r3, #0
 8004342:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800434a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800434c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800434e:	2b00      	cmp	r3, #0
 8004350:	f000 81de 	beq.w	8004710 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004358:	4a94      	ldr	r2, [pc, #592]	; (80045ac <UART_SetConfig+0x930>)
 800435a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800435e:	461a      	mov	r2, r3
 8004360:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004362:	fbb3 f3f2 	udiv	r3, r3, r2
 8004366:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	685a      	ldr	r2, [r3, #4]
 800436c:	4613      	mov	r3, r2
 800436e:	005b      	lsls	r3, r3, #1
 8004370:	4413      	add	r3, r2
 8004372:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004374:	429a      	cmp	r2, r3
 8004376:	d305      	bcc.n	8004384 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800437e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004380:	429a      	cmp	r2, r3
 8004382:	d903      	bls.n	800438c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800438a:	e1c1      	b.n	8004710 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800438c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800438e:	2200      	movs	r2, #0
 8004390:	60bb      	str	r3, [r7, #8]
 8004392:	60fa      	str	r2, [r7, #12]
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004398:	4a84      	ldr	r2, [pc, #528]	; (80045ac <UART_SetConfig+0x930>)
 800439a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800439e:	b29b      	uxth	r3, r3
 80043a0:	2200      	movs	r2, #0
 80043a2:	603b      	str	r3, [r7, #0]
 80043a4:	607a      	str	r2, [r7, #4]
 80043a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80043aa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80043ae:	f7fb ff93 	bl	80002d8 <__aeabi_uldivmod>
 80043b2:	4602      	mov	r2, r0
 80043b4:	460b      	mov	r3, r1
 80043b6:	4610      	mov	r0, r2
 80043b8:	4619      	mov	r1, r3
 80043ba:	f04f 0200 	mov.w	r2, #0
 80043be:	f04f 0300 	mov.w	r3, #0
 80043c2:	020b      	lsls	r3, r1, #8
 80043c4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80043c8:	0202      	lsls	r2, r0, #8
 80043ca:	6979      	ldr	r1, [r7, #20]
 80043cc:	6849      	ldr	r1, [r1, #4]
 80043ce:	0849      	lsrs	r1, r1, #1
 80043d0:	2000      	movs	r0, #0
 80043d2:	460c      	mov	r4, r1
 80043d4:	4605      	mov	r5, r0
 80043d6:	eb12 0804 	adds.w	r8, r2, r4
 80043da:	eb43 0905 	adc.w	r9, r3, r5
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	469a      	mov	sl, r3
 80043e6:	4693      	mov	fp, r2
 80043e8:	4652      	mov	r2, sl
 80043ea:	465b      	mov	r3, fp
 80043ec:	4640      	mov	r0, r8
 80043ee:	4649      	mov	r1, r9
 80043f0:	f7fb ff72 	bl	80002d8 <__aeabi_uldivmod>
 80043f4:	4602      	mov	r2, r0
 80043f6:	460b      	mov	r3, r1
 80043f8:	4613      	mov	r3, r2
 80043fa:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80043fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004402:	d308      	bcc.n	8004416 <UART_SetConfig+0x79a>
 8004404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004406:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800440a:	d204      	bcs.n	8004416 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004412:	60da      	str	r2, [r3, #12]
 8004414:	e17c      	b.n	8004710 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800441c:	e178      	b.n	8004710 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	69db      	ldr	r3, [r3, #28]
 8004422:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004426:	f040 80c5 	bne.w	80045b4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800442a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800442e:	2b20      	cmp	r3, #32
 8004430:	dc48      	bgt.n	80044c4 <UART_SetConfig+0x848>
 8004432:	2b00      	cmp	r3, #0
 8004434:	db7b      	blt.n	800452e <UART_SetConfig+0x8b2>
 8004436:	2b20      	cmp	r3, #32
 8004438:	d879      	bhi.n	800452e <UART_SetConfig+0x8b2>
 800443a:	a201      	add	r2, pc, #4	; (adr r2, 8004440 <UART_SetConfig+0x7c4>)
 800443c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004440:	080044cb 	.word	0x080044cb
 8004444:	080044d3 	.word	0x080044d3
 8004448:	0800452f 	.word	0x0800452f
 800444c:	0800452f 	.word	0x0800452f
 8004450:	080044db 	.word	0x080044db
 8004454:	0800452f 	.word	0x0800452f
 8004458:	0800452f 	.word	0x0800452f
 800445c:	0800452f 	.word	0x0800452f
 8004460:	080044eb 	.word	0x080044eb
 8004464:	0800452f 	.word	0x0800452f
 8004468:	0800452f 	.word	0x0800452f
 800446c:	0800452f 	.word	0x0800452f
 8004470:	0800452f 	.word	0x0800452f
 8004474:	0800452f 	.word	0x0800452f
 8004478:	0800452f 	.word	0x0800452f
 800447c:	0800452f 	.word	0x0800452f
 8004480:	080044fb 	.word	0x080044fb
 8004484:	0800452f 	.word	0x0800452f
 8004488:	0800452f 	.word	0x0800452f
 800448c:	0800452f 	.word	0x0800452f
 8004490:	0800452f 	.word	0x0800452f
 8004494:	0800452f 	.word	0x0800452f
 8004498:	0800452f 	.word	0x0800452f
 800449c:	0800452f 	.word	0x0800452f
 80044a0:	0800452f 	.word	0x0800452f
 80044a4:	0800452f 	.word	0x0800452f
 80044a8:	0800452f 	.word	0x0800452f
 80044ac:	0800452f 	.word	0x0800452f
 80044b0:	0800452f 	.word	0x0800452f
 80044b4:	0800452f 	.word	0x0800452f
 80044b8:	0800452f 	.word	0x0800452f
 80044bc:	0800452f 	.word	0x0800452f
 80044c0:	08004521 	.word	0x08004521
 80044c4:	2b40      	cmp	r3, #64	; 0x40
 80044c6:	d02e      	beq.n	8004526 <UART_SetConfig+0x8aa>
 80044c8:	e031      	b.n	800452e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044ca:	f7fd ff5d 	bl	8002388 <HAL_RCC_GetPCLK1Freq>
 80044ce:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80044d0:	e033      	b.n	800453a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044d2:	f7fd ff6f 	bl	80023b4 <HAL_RCC_GetPCLK2Freq>
 80044d6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80044d8:	e02f      	b.n	800453a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80044da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044de:	4618      	mov	r0, r3
 80044e0:	f7fe feda 	bl	8003298 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80044e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80044e8:	e027      	b.n	800453a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80044ea:	f107 0318 	add.w	r3, r7, #24
 80044ee:	4618      	mov	r0, r3
 80044f0:	f7ff f826 	bl	8003540 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80044f8:	e01f      	b.n	800453a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80044fa:	4b2d      	ldr	r3, [pc, #180]	; (80045b0 <UART_SetConfig+0x934>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0320 	and.w	r3, r3, #32
 8004502:	2b00      	cmp	r3, #0
 8004504:	d009      	beq.n	800451a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004506:	4b2a      	ldr	r3, [pc, #168]	; (80045b0 <UART_SetConfig+0x934>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	08db      	lsrs	r3, r3, #3
 800450c:	f003 0303 	and.w	r3, r3, #3
 8004510:	4a24      	ldr	r2, [pc, #144]	; (80045a4 <UART_SetConfig+0x928>)
 8004512:	fa22 f303 	lsr.w	r3, r2, r3
 8004516:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004518:	e00f      	b.n	800453a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800451a:	4b22      	ldr	r3, [pc, #136]	; (80045a4 <UART_SetConfig+0x928>)
 800451c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800451e:	e00c      	b.n	800453a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004520:	4b21      	ldr	r3, [pc, #132]	; (80045a8 <UART_SetConfig+0x92c>)
 8004522:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004524:	e009      	b.n	800453a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004526:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800452a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800452c:	e005      	b.n	800453a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800452e:	2300      	movs	r3, #0
 8004530:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004538:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800453a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800453c:	2b00      	cmp	r3, #0
 800453e:	f000 80e7 	beq.w	8004710 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004546:	4a19      	ldr	r2, [pc, #100]	; (80045ac <UART_SetConfig+0x930>)
 8004548:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800454c:	461a      	mov	r2, r3
 800454e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004550:	fbb3 f3f2 	udiv	r3, r3, r2
 8004554:	005a      	lsls	r2, r3, #1
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	085b      	lsrs	r3, r3, #1
 800455c:	441a      	add	r2, r3
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	fbb2 f3f3 	udiv	r3, r2, r3
 8004566:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800456a:	2b0f      	cmp	r3, #15
 800456c:	d916      	bls.n	800459c <UART_SetConfig+0x920>
 800456e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004570:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004574:	d212      	bcs.n	800459c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004578:	b29b      	uxth	r3, r3
 800457a:	f023 030f 	bic.w	r3, r3, #15
 800457e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004582:	085b      	lsrs	r3, r3, #1
 8004584:	b29b      	uxth	r3, r3
 8004586:	f003 0307 	and.w	r3, r3, #7
 800458a:	b29a      	uxth	r2, r3
 800458c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800458e:	4313      	orrs	r3, r2
 8004590:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004598:	60da      	str	r2, [r3, #12]
 800459a:	e0b9      	b.n	8004710 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80045a2:	e0b5      	b.n	8004710 <UART_SetConfig+0xa94>
 80045a4:	03d09000 	.word	0x03d09000
 80045a8:	003d0900 	.word	0x003d0900
 80045ac:	08005768 	.word	0x08005768
 80045b0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80045b4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80045b8:	2b20      	cmp	r3, #32
 80045ba:	dc49      	bgt.n	8004650 <UART_SetConfig+0x9d4>
 80045bc:	2b00      	cmp	r3, #0
 80045be:	db7c      	blt.n	80046ba <UART_SetConfig+0xa3e>
 80045c0:	2b20      	cmp	r3, #32
 80045c2:	d87a      	bhi.n	80046ba <UART_SetConfig+0xa3e>
 80045c4:	a201      	add	r2, pc, #4	; (adr r2, 80045cc <UART_SetConfig+0x950>)
 80045c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ca:	bf00      	nop
 80045cc:	08004657 	.word	0x08004657
 80045d0:	0800465f 	.word	0x0800465f
 80045d4:	080046bb 	.word	0x080046bb
 80045d8:	080046bb 	.word	0x080046bb
 80045dc:	08004667 	.word	0x08004667
 80045e0:	080046bb 	.word	0x080046bb
 80045e4:	080046bb 	.word	0x080046bb
 80045e8:	080046bb 	.word	0x080046bb
 80045ec:	08004677 	.word	0x08004677
 80045f0:	080046bb 	.word	0x080046bb
 80045f4:	080046bb 	.word	0x080046bb
 80045f8:	080046bb 	.word	0x080046bb
 80045fc:	080046bb 	.word	0x080046bb
 8004600:	080046bb 	.word	0x080046bb
 8004604:	080046bb 	.word	0x080046bb
 8004608:	080046bb 	.word	0x080046bb
 800460c:	08004687 	.word	0x08004687
 8004610:	080046bb 	.word	0x080046bb
 8004614:	080046bb 	.word	0x080046bb
 8004618:	080046bb 	.word	0x080046bb
 800461c:	080046bb 	.word	0x080046bb
 8004620:	080046bb 	.word	0x080046bb
 8004624:	080046bb 	.word	0x080046bb
 8004628:	080046bb 	.word	0x080046bb
 800462c:	080046bb 	.word	0x080046bb
 8004630:	080046bb 	.word	0x080046bb
 8004634:	080046bb 	.word	0x080046bb
 8004638:	080046bb 	.word	0x080046bb
 800463c:	080046bb 	.word	0x080046bb
 8004640:	080046bb 	.word	0x080046bb
 8004644:	080046bb 	.word	0x080046bb
 8004648:	080046bb 	.word	0x080046bb
 800464c:	080046ad 	.word	0x080046ad
 8004650:	2b40      	cmp	r3, #64	; 0x40
 8004652:	d02e      	beq.n	80046b2 <UART_SetConfig+0xa36>
 8004654:	e031      	b.n	80046ba <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004656:	f7fd fe97 	bl	8002388 <HAL_RCC_GetPCLK1Freq>
 800465a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800465c:	e033      	b.n	80046c6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800465e:	f7fd fea9 	bl	80023b4 <HAL_RCC_GetPCLK2Freq>
 8004662:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004664:	e02f      	b.n	80046c6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004666:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800466a:	4618      	mov	r0, r3
 800466c:	f7fe fe14 	bl	8003298 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004672:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004674:	e027      	b.n	80046c6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004676:	f107 0318 	add.w	r3, r7, #24
 800467a:	4618      	mov	r0, r3
 800467c:	f7fe ff60 	bl	8003540 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004684:	e01f      	b.n	80046c6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004686:	4b2d      	ldr	r3, [pc, #180]	; (800473c <UART_SetConfig+0xac0>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 0320 	and.w	r3, r3, #32
 800468e:	2b00      	cmp	r3, #0
 8004690:	d009      	beq.n	80046a6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004692:	4b2a      	ldr	r3, [pc, #168]	; (800473c <UART_SetConfig+0xac0>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	08db      	lsrs	r3, r3, #3
 8004698:	f003 0303 	and.w	r3, r3, #3
 800469c:	4a28      	ldr	r2, [pc, #160]	; (8004740 <UART_SetConfig+0xac4>)
 800469e:	fa22 f303 	lsr.w	r3, r2, r3
 80046a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80046a4:	e00f      	b.n	80046c6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80046a6:	4b26      	ldr	r3, [pc, #152]	; (8004740 <UART_SetConfig+0xac4>)
 80046a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80046aa:	e00c      	b.n	80046c6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80046ac:	4b25      	ldr	r3, [pc, #148]	; (8004744 <UART_SetConfig+0xac8>)
 80046ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80046b0:	e009      	b.n	80046c6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80046b8:	e005      	b.n	80046c6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80046ba:	2300      	movs	r3, #0
 80046bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80046c4:	bf00      	nop
    }

    if (pclk != 0U)
 80046c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d021      	beq.n	8004710 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d0:	4a1d      	ldr	r2, [pc, #116]	; (8004748 <UART_SetConfig+0xacc>)
 80046d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80046d6:	461a      	mov	r2, r3
 80046d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046da:	fbb3 f2f2 	udiv	r2, r3, r2
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	085b      	lsrs	r3, r3, #1
 80046e4:	441a      	add	r2, r3
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ee:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046f2:	2b0f      	cmp	r3, #15
 80046f4:	d909      	bls.n	800470a <UART_SetConfig+0xa8e>
 80046f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046fc:	d205      	bcs.n	800470a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80046fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004700:	b29a      	uxth	r2, r3
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	60da      	str	r2, [r3, #12]
 8004708:	e002      	b.n	8004710 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	2201      	movs	r2, #1
 8004714:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	2201      	movs	r2, #1
 800471c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	2200      	movs	r2, #0
 8004724:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	2200      	movs	r2, #0
 800472a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800472c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8004730:	4618      	mov	r0, r3
 8004732:	3748      	adds	r7, #72	; 0x48
 8004734:	46bd      	mov	sp, r7
 8004736:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800473a:	bf00      	nop
 800473c:	58024400 	.word	0x58024400
 8004740:	03d09000 	.word	0x03d09000
 8004744:	003d0900 	.word	0x003d0900
 8004748:	08005768 	.word	0x08005768

0800474c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004758:	f003 0301 	and.w	r3, r3, #1
 800475c:	2b00      	cmp	r3, #0
 800475e:	d00a      	beq.n	8004776 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	430a      	orrs	r2, r1
 8004774:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800477a:	f003 0302 	and.w	r3, r3, #2
 800477e:	2b00      	cmp	r3, #0
 8004780:	d00a      	beq.n	8004798 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	430a      	orrs	r2, r1
 8004796:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800479c:	f003 0304 	and.w	r3, r3, #4
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d00a      	beq.n	80047ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	430a      	orrs	r2, r1
 80047b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047be:	f003 0308 	and.w	r3, r3, #8
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d00a      	beq.n	80047dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	430a      	orrs	r2, r1
 80047da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e0:	f003 0310 	and.w	r3, r3, #16
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d00a      	beq.n	80047fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	430a      	orrs	r2, r1
 80047fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004802:	f003 0320 	and.w	r3, r3, #32
 8004806:	2b00      	cmp	r3, #0
 8004808:	d00a      	beq.n	8004820 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	430a      	orrs	r2, r1
 800481e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004824:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004828:	2b00      	cmp	r3, #0
 800482a:	d01a      	beq.n	8004862 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	430a      	orrs	r2, r1
 8004840:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004846:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800484a:	d10a      	bne.n	8004862 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	430a      	orrs	r2, r1
 8004860:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800486a:	2b00      	cmp	r3, #0
 800486c:	d00a      	beq.n	8004884 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	430a      	orrs	r2, r1
 8004882:	605a      	str	r2, [r3, #4]
  }
}
 8004884:	bf00      	nop
 8004886:	370c      	adds	r7, #12
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b086      	sub	sp, #24
 8004894:	af02      	add	r7, sp, #8
 8004896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80048a0:	f7fc faa6 	bl	8000df0 <HAL_GetTick>
 80048a4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0308 	and.w	r3, r3, #8
 80048b0:	2b08      	cmp	r3, #8
 80048b2:	d10e      	bne.n	80048d2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80048b8:	9300      	str	r3, [sp, #0]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2200      	movs	r2, #0
 80048be:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 f82f 	bl	8004926 <UART_WaitOnFlagUntilTimeout>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d001      	beq.n	80048d2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048ce:	2303      	movs	r3, #3
 80048d0:	e025      	b.n	800491e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 0304 	and.w	r3, r3, #4
 80048dc:	2b04      	cmp	r3, #4
 80048de:	d10e      	bne.n	80048fe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80048e4:	9300      	str	r3, [sp, #0]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2200      	movs	r2, #0
 80048ea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 f819 	bl	8004926 <UART_WaitOnFlagUntilTimeout>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d001      	beq.n	80048fe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	e00f      	b.n	800491e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2220      	movs	r2, #32
 8004902:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2220      	movs	r2, #32
 800490a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800491c:	2300      	movs	r3, #0
}
 800491e:	4618      	mov	r0, r3
 8004920:	3710      	adds	r7, #16
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}

08004926 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004926:	b580      	push	{r7, lr}
 8004928:	b09c      	sub	sp, #112	; 0x70
 800492a:	af00      	add	r7, sp, #0
 800492c:	60f8      	str	r0, [r7, #12]
 800492e:	60b9      	str	r1, [r7, #8]
 8004930:	603b      	str	r3, [r7, #0]
 8004932:	4613      	mov	r3, r2
 8004934:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004936:	e0a9      	b.n	8004a8c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004938:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800493a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800493e:	f000 80a5 	beq.w	8004a8c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004942:	f7fc fa55 	bl	8000df0 <HAL_GetTick>
 8004946:	4602      	mov	r2, r0
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	1ad3      	subs	r3, r2, r3
 800494c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800494e:	429a      	cmp	r2, r3
 8004950:	d302      	bcc.n	8004958 <UART_WaitOnFlagUntilTimeout+0x32>
 8004952:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004954:	2b00      	cmp	r3, #0
 8004956:	d140      	bne.n	80049da <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800495e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004960:	e853 3f00 	ldrex	r3, [r3]
 8004964:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004966:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004968:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800496c:	667b      	str	r3, [r7, #100]	; 0x64
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	461a      	mov	r2, r3
 8004974:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004976:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004978:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800497a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800497c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800497e:	e841 2300 	strex	r3, r2, [r1]
 8004982:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004984:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004986:	2b00      	cmp	r3, #0
 8004988:	d1e6      	bne.n	8004958 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	3308      	adds	r3, #8
 8004990:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004992:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004994:	e853 3f00 	ldrex	r3, [r3]
 8004998:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800499a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800499c:	f023 0301 	bic.w	r3, r3, #1
 80049a0:	663b      	str	r3, [r7, #96]	; 0x60
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	3308      	adds	r3, #8
 80049a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80049aa:	64ba      	str	r2, [r7, #72]	; 0x48
 80049ac:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80049b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049b2:	e841 2300 	strex	r3, r2, [r1]
 80049b6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80049b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d1e5      	bne.n	800498a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2220      	movs	r2, #32
 80049c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2220      	movs	r2, #32
 80049ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2200      	movs	r2, #0
 80049d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	e069      	b.n	8004aae <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 0304 	and.w	r3, r3, #4
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d051      	beq.n	8004a8c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	69db      	ldr	r3, [r3, #28]
 80049ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049f6:	d149      	bne.n	8004a8c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a00:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a0a:	e853 3f00 	ldrex	r3, [r3]
 8004a0e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a12:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a16:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a20:	637b      	str	r3, [r7, #52]	; 0x34
 8004a22:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a24:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a28:	e841 2300 	strex	r3, r2, [r1]
 8004a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d1e6      	bne.n	8004a02 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	3308      	adds	r3, #8
 8004a3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	e853 3f00 	ldrex	r3, [r3]
 8004a42:	613b      	str	r3, [r7, #16]
   return(result);
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	f023 0301 	bic.w	r3, r3, #1
 8004a4a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	3308      	adds	r3, #8
 8004a52:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004a54:	623a      	str	r2, [r7, #32]
 8004a56:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a58:	69f9      	ldr	r1, [r7, #28]
 8004a5a:	6a3a      	ldr	r2, [r7, #32]
 8004a5c:	e841 2300 	strex	r3, r2, [r1]
 8004a60:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d1e5      	bne.n	8004a34 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2220      	movs	r2, #32
 8004a6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2220      	movs	r2, #32
 8004a74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2220      	movs	r2, #32
 8004a7c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2200      	movs	r2, #0
 8004a84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	e010      	b.n	8004aae <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	69da      	ldr	r2, [r3, #28]
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	4013      	ands	r3, r2
 8004a96:	68ba      	ldr	r2, [r7, #8]
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	bf0c      	ite	eq
 8004a9c:	2301      	moveq	r3, #1
 8004a9e:	2300      	movne	r3, #0
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	79fb      	ldrb	r3, [r7, #7]
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	f43f af46 	beq.w	8004938 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004aac:	2300      	movs	r3, #0
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3770      	adds	r7, #112	; 0x70
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}

08004ab6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004ab6:	b480      	push	{r7}
 8004ab8:	b085      	sub	sp, #20
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d101      	bne.n	8004acc <HAL_UARTEx_DisableFifoMode+0x16>
 8004ac8:	2302      	movs	r3, #2
 8004aca:	e027      	b.n	8004b1c <HAL_UARTEx_DisableFifoMode+0x66>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2224      	movs	r2, #36	; 0x24
 8004ad8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f022 0201 	bic.w	r2, r2, #1
 8004af2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004afa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	68fa      	ldr	r2, [r7, #12]
 8004b08:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2220      	movs	r2, #32
 8004b0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004b1a:	2300      	movs	r3, #0
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3714      	adds	r7, #20
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr

08004b28 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b084      	sub	sp, #16
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d101      	bne.n	8004b40 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004b3c:	2302      	movs	r3, #2
 8004b3e:	e02d      	b.n	8004b9c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2201      	movs	r2, #1
 8004b44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2224      	movs	r2, #36	; 0x24
 8004b4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f022 0201 	bic.w	r2, r2, #1
 8004b66:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	683a      	ldr	r2, [r7, #0]
 8004b78:	430a      	orrs	r2, r1
 8004b7a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f000 f84f 	bl	8004c20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	68fa      	ldr	r2, [r7, #12]
 8004b88:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2220      	movs	r2, #32
 8004b8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004b9a:	2300      	movs	r3, #0
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3710      	adds	r7, #16
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b084      	sub	sp, #16
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d101      	bne.n	8004bbc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004bb8:	2302      	movs	r3, #2
 8004bba:	e02d      	b.n	8004c18 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2224      	movs	r2, #36	; 0x24
 8004bc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f022 0201 	bic.w	r2, r2, #1
 8004be2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	683a      	ldr	r2, [r7, #0]
 8004bf4:	430a      	orrs	r2, r1
 8004bf6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	f000 f811 	bl	8004c20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	68fa      	ldr	r2, [r7, #12]
 8004c04:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2220      	movs	r2, #32
 8004c0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004c16:	2300      	movs	r3, #0
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3710      	adds	r7, #16
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b085      	sub	sp, #20
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d108      	bne.n	8004c42 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004c40:	e031      	b.n	8004ca6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004c42:	2310      	movs	r3, #16
 8004c44:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004c46:	2310      	movs	r3, #16
 8004c48:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	0e5b      	lsrs	r3, r3, #25
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	f003 0307 	and.w	r3, r3, #7
 8004c58:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	0f5b      	lsrs	r3, r3, #29
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	f003 0307 	and.w	r3, r3, #7
 8004c68:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004c6a:	7bbb      	ldrb	r3, [r7, #14]
 8004c6c:	7b3a      	ldrb	r2, [r7, #12]
 8004c6e:	4911      	ldr	r1, [pc, #68]	; (8004cb4 <UARTEx_SetNbDataToProcess+0x94>)
 8004c70:	5c8a      	ldrb	r2, [r1, r2]
 8004c72:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004c76:	7b3a      	ldrb	r2, [r7, #12]
 8004c78:	490f      	ldr	r1, [pc, #60]	; (8004cb8 <UARTEx_SetNbDataToProcess+0x98>)
 8004c7a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004c7c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004c80:	b29a      	uxth	r2, r3
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004c88:	7bfb      	ldrb	r3, [r7, #15]
 8004c8a:	7b7a      	ldrb	r2, [r7, #13]
 8004c8c:	4909      	ldr	r1, [pc, #36]	; (8004cb4 <UARTEx_SetNbDataToProcess+0x94>)
 8004c8e:	5c8a      	ldrb	r2, [r1, r2]
 8004c90:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004c94:	7b7a      	ldrb	r2, [r7, #13]
 8004c96:	4908      	ldr	r1, [pc, #32]	; (8004cb8 <UARTEx_SetNbDataToProcess+0x98>)
 8004c98:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004c9a:	fb93 f3f2 	sdiv	r3, r3, r2
 8004c9e:	b29a      	uxth	r2, r3
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004ca6:	bf00      	nop
 8004ca8:	3714      	adds	r7, #20
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr
 8004cb2:	bf00      	nop
 8004cb4:	08005780 	.word	0x08005780
 8004cb8:	08005788 	.word	0x08005788

08004cbc <__errno>:
 8004cbc:	4b01      	ldr	r3, [pc, #4]	; (8004cc4 <__errno+0x8>)
 8004cbe:	6818      	ldr	r0, [r3, #0]
 8004cc0:	4770      	bx	lr
 8004cc2:	bf00      	nop
 8004cc4:	24000010 	.word	0x24000010

08004cc8 <__libc_init_array>:
 8004cc8:	b570      	push	{r4, r5, r6, lr}
 8004cca:	4d0d      	ldr	r5, [pc, #52]	; (8004d00 <__libc_init_array+0x38>)
 8004ccc:	4c0d      	ldr	r4, [pc, #52]	; (8004d04 <__libc_init_array+0x3c>)
 8004cce:	1b64      	subs	r4, r4, r5
 8004cd0:	10a4      	asrs	r4, r4, #2
 8004cd2:	2600      	movs	r6, #0
 8004cd4:	42a6      	cmp	r6, r4
 8004cd6:	d109      	bne.n	8004cec <__libc_init_array+0x24>
 8004cd8:	4d0b      	ldr	r5, [pc, #44]	; (8004d08 <__libc_init_array+0x40>)
 8004cda:	4c0c      	ldr	r4, [pc, #48]	; (8004d0c <__libc_init_array+0x44>)
 8004cdc:	f000 fd1e 	bl	800571c <_init>
 8004ce0:	1b64      	subs	r4, r4, r5
 8004ce2:	10a4      	asrs	r4, r4, #2
 8004ce4:	2600      	movs	r6, #0
 8004ce6:	42a6      	cmp	r6, r4
 8004ce8:	d105      	bne.n	8004cf6 <__libc_init_array+0x2e>
 8004cea:	bd70      	pop	{r4, r5, r6, pc}
 8004cec:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cf0:	4798      	blx	r3
 8004cf2:	3601      	adds	r6, #1
 8004cf4:	e7ee      	b.n	8004cd4 <__libc_init_array+0xc>
 8004cf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cfa:	4798      	blx	r3
 8004cfc:	3601      	adds	r6, #1
 8004cfe:	e7f2      	b.n	8004ce6 <__libc_init_array+0x1e>
 8004d00:	080057fc 	.word	0x080057fc
 8004d04:	080057fc 	.word	0x080057fc
 8004d08:	080057fc 	.word	0x080057fc
 8004d0c:	08005800 	.word	0x08005800

08004d10 <memset>:
 8004d10:	4402      	add	r2, r0
 8004d12:	4603      	mov	r3, r0
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d100      	bne.n	8004d1a <memset+0xa>
 8004d18:	4770      	bx	lr
 8004d1a:	f803 1b01 	strb.w	r1, [r3], #1
 8004d1e:	e7f9      	b.n	8004d14 <memset+0x4>

08004d20 <_puts_r>:
 8004d20:	b570      	push	{r4, r5, r6, lr}
 8004d22:	460e      	mov	r6, r1
 8004d24:	4605      	mov	r5, r0
 8004d26:	b118      	cbz	r0, 8004d30 <_puts_r+0x10>
 8004d28:	6983      	ldr	r3, [r0, #24]
 8004d2a:	b90b      	cbnz	r3, 8004d30 <_puts_r+0x10>
 8004d2c:	f000 fa48 	bl	80051c0 <__sinit>
 8004d30:	69ab      	ldr	r3, [r5, #24]
 8004d32:	68ac      	ldr	r4, [r5, #8]
 8004d34:	b913      	cbnz	r3, 8004d3c <_puts_r+0x1c>
 8004d36:	4628      	mov	r0, r5
 8004d38:	f000 fa42 	bl	80051c0 <__sinit>
 8004d3c:	4b2c      	ldr	r3, [pc, #176]	; (8004df0 <_puts_r+0xd0>)
 8004d3e:	429c      	cmp	r4, r3
 8004d40:	d120      	bne.n	8004d84 <_puts_r+0x64>
 8004d42:	686c      	ldr	r4, [r5, #4]
 8004d44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004d46:	07db      	lsls	r3, r3, #31
 8004d48:	d405      	bmi.n	8004d56 <_puts_r+0x36>
 8004d4a:	89a3      	ldrh	r3, [r4, #12]
 8004d4c:	0598      	lsls	r0, r3, #22
 8004d4e:	d402      	bmi.n	8004d56 <_puts_r+0x36>
 8004d50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d52:	f000 fad3 	bl	80052fc <__retarget_lock_acquire_recursive>
 8004d56:	89a3      	ldrh	r3, [r4, #12]
 8004d58:	0719      	lsls	r1, r3, #28
 8004d5a:	d51d      	bpl.n	8004d98 <_puts_r+0x78>
 8004d5c:	6923      	ldr	r3, [r4, #16]
 8004d5e:	b1db      	cbz	r3, 8004d98 <_puts_r+0x78>
 8004d60:	3e01      	subs	r6, #1
 8004d62:	68a3      	ldr	r3, [r4, #8]
 8004d64:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004d68:	3b01      	subs	r3, #1
 8004d6a:	60a3      	str	r3, [r4, #8]
 8004d6c:	bb39      	cbnz	r1, 8004dbe <_puts_r+0x9e>
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	da38      	bge.n	8004de4 <_puts_r+0xc4>
 8004d72:	4622      	mov	r2, r4
 8004d74:	210a      	movs	r1, #10
 8004d76:	4628      	mov	r0, r5
 8004d78:	f000 f848 	bl	8004e0c <__swbuf_r>
 8004d7c:	3001      	adds	r0, #1
 8004d7e:	d011      	beq.n	8004da4 <_puts_r+0x84>
 8004d80:	250a      	movs	r5, #10
 8004d82:	e011      	b.n	8004da8 <_puts_r+0x88>
 8004d84:	4b1b      	ldr	r3, [pc, #108]	; (8004df4 <_puts_r+0xd4>)
 8004d86:	429c      	cmp	r4, r3
 8004d88:	d101      	bne.n	8004d8e <_puts_r+0x6e>
 8004d8a:	68ac      	ldr	r4, [r5, #8]
 8004d8c:	e7da      	b.n	8004d44 <_puts_r+0x24>
 8004d8e:	4b1a      	ldr	r3, [pc, #104]	; (8004df8 <_puts_r+0xd8>)
 8004d90:	429c      	cmp	r4, r3
 8004d92:	bf08      	it	eq
 8004d94:	68ec      	ldreq	r4, [r5, #12]
 8004d96:	e7d5      	b.n	8004d44 <_puts_r+0x24>
 8004d98:	4621      	mov	r1, r4
 8004d9a:	4628      	mov	r0, r5
 8004d9c:	f000 f888 	bl	8004eb0 <__swsetup_r>
 8004da0:	2800      	cmp	r0, #0
 8004da2:	d0dd      	beq.n	8004d60 <_puts_r+0x40>
 8004da4:	f04f 35ff 	mov.w	r5, #4294967295
 8004da8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004daa:	07da      	lsls	r2, r3, #31
 8004dac:	d405      	bmi.n	8004dba <_puts_r+0x9a>
 8004dae:	89a3      	ldrh	r3, [r4, #12]
 8004db0:	059b      	lsls	r3, r3, #22
 8004db2:	d402      	bmi.n	8004dba <_puts_r+0x9a>
 8004db4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004db6:	f000 faa2 	bl	80052fe <__retarget_lock_release_recursive>
 8004dba:	4628      	mov	r0, r5
 8004dbc:	bd70      	pop	{r4, r5, r6, pc}
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	da04      	bge.n	8004dcc <_puts_r+0xac>
 8004dc2:	69a2      	ldr	r2, [r4, #24]
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	dc06      	bgt.n	8004dd6 <_puts_r+0xb6>
 8004dc8:	290a      	cmp	r1, #10
 8004dca:	d004      	beq.n	8004dd6 <_puts_r+0xb6>
 8004dcc:	6823      	ldr	r3, [r4, #0]
 8004dce:	1c5a      	adds	r2, r3, #1
 8004dd0:	6022      	str	r2, [r4, #0]
 8004dd2:	7019      	strb	r1, [r3, #0]
 8004dd4:	e7c5      	b.n	8004d62 <_puts_r+0x42>
 8004dd6:	4622      	mov	r2, r4
 8004dd8:	4628      	mov	r0, r5
 8004dda:	f000 f817 	bl	8004e0c <__swbuf_r>
 8004dde:	3001      	adds	r0, #1
 8004de0:	d1bf      	bne.n	8004d62 <_puts_r+0x42>
 8004de2:	e7df      	b.n	8004da4 <_puts_r+0x84>
 8004de4:	6823      	ldr	r3, [r4, #0]
 8004de6:	250a      	movs	r5, #10
 8004de8:	1c5a      	adds	r2, r3, #1
 8004dea:	6022      	str	r2, [r4, #0]
 8004dec:	701d      	strb	r5, [r3, #0]
 8004dee:	e7db      	b.n	8004da8 <_puts_r+0x88>
 8004df0:	080057b4 	.word	0x080057b4
 8004df4:	080057d4 	.word	0x080057d4
 8004df8:	08005794 	.word	0x08005794

08004dfc <puts>:
 8004dfc:	4b02      	ldr	r3, [pc, #8]	; (8004e08 <puts+0xc>)
 8004dfe:	4601      	mov	r1, r0
 8004e00:	6818      	ldr	r0, [r3, #0]
 8004e02:	f7ff bf8d 	b.w	8004d20 <_puts_r>
 8004e06:	bf00      	nop
 8004e08:	24000010 	.word	0x24000010

08004e0c <__swbuf_r>:
 8004e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e0e:	460e      	mov	r6, r1
 8004e10:	4614      	mov	r4, r2
 8004e12:	4605      	mov	r5, r0
 8004e14:	b118      	cbz	r0, 8004e1e <__swbuf_r+0x12>
 8004e16:	6983      	ldr	r3, [r0, #24]
 8004e18:	b90b      	cbnz	r3, 8004e1e <__swbuf_r+0x12>
 8004e1a:	f000 f9d1 	bl	80051c0 <__sinit>
 8004e1e:	4b21      	ldr	r3, [pc, #132]	; (8004ea4 <__swbuf_r+0x98>)
 8004e20:	429c      	cmp	r4, r3
 8004e22:	d12b      	bne.n	8004e7c <__swbuf_r+0x70>
 8004e24:	686c      	ldr	r4, [r5, #4]
 8004e26:	69a3      	ldr	r3, [r4, #24]
 8004e28:	60a3      	str	r3, [r4, #8]
 8004e2a:	89a3      	ldrh	r3, [r4, #12]
 8004e2c:	071a      	lsls	r2, r3, #28
 8004e2e:	d52f      	bpl.n	8004e90 <__swbuf_r+0x84>
 8004e30:	6923      	ldr	r3, [r4, #16]
 8004e32:	b36b      	cbz	r3, 8004e90 <__swbuf_r+0x84>
 8004e34:	6923      	ldr	r3, [r4, #16]
 8004e36:	6820      	ldr	r0, [r4, #0]
 8004e38:	1ac0      	subs	r0, r0, r3
 8004e3a:	6963      	ldr	r3, [r4, #20]
 8004e3c:	b2f6      	uxtb	r6, r6
 8004e3e:	4283      	cmp	r3, r0
 8004e40:	4637      	mov	r7, r6
 8004e42:	dc04      	bgt.n	8004e4e <__swbuf_r+0x42>
 8004e44:	4621      	mov	r1, r4
 8004e46:	4628      	mov	r0, r5
 8004e48:	f000 f926 	bl	8005098 <_fflush_r>
 8004e4c:	bb30      	cbnz	r0, 8004e9c <__swbuf_r+0x90>
 8004e4e:	68a3      	ldr	r3, [r4, #8]
 8004e50:	3b01      	subs	r3, #1
 8004e52:	60a3      	str	r3, [r4, #8]
 8004e54:	6823      	ldr	r3, [r4, #0]
 8004e56:	1c5a      	adds	r2, r3, #1
 8004e58:	6022      	str	r2, [r4, #0]
 8004e5a:	701e      	strb	r6, [r3, #0]
 8004e5c:	6963      	ldr	r3, [r4, #20]
 8004e5e:	3001      	adds	r0, #1
 8004e60:	4283      	cmp	r3, r0
 8004e62:	d004      	beq.n	8004e6e <__swbuf_r+0x62>
 8004e64:	89a3      	ldrh	r3, [r4, #12]
 8004e66:	07db      	lsls	r3, r3, #31
 8004e68:	d506      	bpl.n	8004e78 <__swbuf_r+0x6c>
 8004e6a:	2e0a      	cmp	r6, #10
 8004e6c:	d104      	bne.n	8004e78 <__swbuf_r+0x6c>
 8004e6e:	4621      	mov	r1, r4
 8004e70:	4628      	mov	r0, r5
 8004e72:	f000 f911 	bl	8005098 <_fflush_r>
 8004e76:	b988      	cbnz	r0, 8004e9c <__swbuf_r+0x90>
 8004e78:	4638      	mov	r0, r7
 8004e7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e7c:	4b0a      	ldr	r3, [pc, #40]	; (8004ea8 <__swbuf_r+0x9c>)
 8004e7e:	429c      	cmp	r4, r3
 8004e80:	d101      	bne.n	8004e86 <__swbuf_r+0x7a>
 8004e82:	68ac      	ldr	r4, [r5, #8]
 8004e84:	e7cf      	b.n	8004e26 <__swbuf_r+0x1a>
 8004e86:	4b09      	ldr	r3, [pc, #36]	; (8004eac <__swbuf_r+0xa0>)
 8004e88:	429c      	cmp	r4, r3
 8004e8a:	bf08      	it	eq
 8004e8c:	68ec      	ldreq	r4, [r5, #12]
 8004e8e:	e7ca      	b.n	8004e26 <__swbuf_r+0x1a>
 8004e90:	4621      	mov	r1, r4
 8004e92:	4628      	mov	r0, r5
 8004e94:	f000 f80c 	bl	8004eb0 <__swsetup_r>
 8004e98:	2800      	cmp	r0, #0
 8004e9a:	d0cb      	beq.n	8004e34 <__swbuf_r+0x28>
 8004e9c:	f04f 37ff 	mov.w	r7, #4294967295
 8004ea0:	e7ea      	b.n	8004e78 <__swbuf_r+0x6c>
 8004ea2:	bf00      	nop
 8004ea4:	080057b4 	.word	0x080057b4
 8004ea8:	080057d4 	.word	0x080057d4
 8004eac:	08005794 	.word	0x08005794

08004eb0 <__swsetup_r>:
 8004eb0:	4b32      	ldr	r3, [pc, #200]	; (8004f7c <__swsetup_r+0xcc>)
 8004eb2:	b570      	push	{r4, r5, r6, lr}
 8004eb4:	681d      	ldr	r5, [r3, #0]
 8004eb6:	4606      	mov	r6, r0
 8004eb8:	460c      	mov	r4, r1
 8004eba:	b125      	cbz	r5, 8004ec6 <__swsetup_r+0x16>
 8004ebc:	69ab      	ldr	r3, [r5, #24]
 8004ebe:	b913      	cbnz	r3, 8004ec6 <__swsetup_r+0x16>
 8004ec0:	4628      	mov	r0, r5
 8004ec2:	f000 f97d 	bl	80051c0 <__sinit>
 8004ec6:	4b2e      	ldr	r3, [pc, #184]	; (8004f80 <__swsetup_r+0xd0>)
 8004ec8:	429c      	cmp	r4, r3
 8004eca:	d10f      	bne.n	8004eec <__swsetup_r+0x3c>
 8004ecc:	686c      	ldr	r4, [r5, #4]
 8004ece:	89a3      	ldrh	r3, [r4, #12]
 8004ed0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004ed4:	0719      	lsls	r1, r3, #28
 8004ed6:	d42c      	bmi.n	8004f32 <__swsetup_r+0x82>
 8004ed8:	06dd      	lsls	r5, r3, #27
 8004eda:	d411      	bmi.n	8004f00 <__swsetup_r+0x50>
 8004edc:	2309      	movs	r3, #9
 8004ede:	6033      	str	r3, [r6, #0]
 8004ee0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004ee4:	81a3      	strh	r3, [r4, #12]
 8004ee6:	f04f 30ff 	mov.w	r0, #4294967295
 8004eea:	e03e      	b.n	8004f6a <__swsetup_r+0xba>
 8004eec:	4b25      	ldr	r3, [pc, #148]	; (8004f84 <__swsetup_r+0xd4>)
 8004eee:	429c      	cmp	r4, r3
 8004ef0:	d101      	bne.n	8004ef6 <__swsetup_r+0x46>
 8004ef2:	68ac      	ldr	r4, [r5, #8]
 8004ef4:	e7eb      	b.n	8004ece <__swsetup_r+0x1e>
 8004ef6:	4b24      	ldr	r3, [pc, #144]	; (8004f88 <__swsetup_r+0xd8>)
 8004ef8:	429c      	cmp	r4, r3
 8004efa:	bf08      	it	eq
 8004efc:	68ec      	ldreq	r4, [r5, #12]
 8004efe:	e7e6      	b.n	8004ece <__swsetup_r+0x1e>
 8004f00:	0758      	lsls	r0, r3, #29
 8004f02:	d512      	bpl.n	8004f2a <__swsetup_r+0x7a>
 8004f04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f06:	b141      	cbz	r1, 8004f1a <__swsetup_r+0x6a>
 8004f08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004f0c:	4299      	cmp	r1, r3
 8004f0e:	d002      	beq.n	8004f16 <__swsetup_r+0x66>
 8004f10:	4630      	mov	r0, r6
 8004f12:	f000 fa5b 	bl	80053cc <_free_r>
 8004f16:	2300      	movs	r3, #0
 8004f18:	6363      	str	r3, [r4, #52]	; 0x34
 8004f1a:	89a3      	ldrh	r3, [r4, #12]
 8004f1c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004f20:	81a3      	strh	r3, [r4, #12]
 8004f22:	2300      	movs	r3, #0
 8004f24:	6063      	str	r3, [r4, #4]
 8004f26:	6923      	ldr	r3, [r4, #16]
 8004f28:	6023      	str	r3, [r4, #0]
 8004f2a:	89a3      	ldrh	r3, [r4, #12]
 8004f2c:	f043 0308 	orr.w	r3, r3, #8
 8004f30:	81a3      	strh	r3, [r4, #12]
 8004f32:	6923      	ldr	r3, [r4, #16]
 8004f34:	b94b      	cbnz	r3, 8004f4a <__swsetup_r+0x9a>
 8004f36:	89a3      	ldrh	r3, [r4, #12]
 8004f38:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004f3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f40:	d003      	beq.n	8004f4a <__swsetup_r+0x9a>
 8004f42:	4621      	mov	r1, r4
 8004f44:	4630      	mov	r0, r6
 8004f46:	f000 fa01 	bl	800534c <__smakebuf_r>
 8004f4a:	89a0      	ldrh	r0, [r4, #12]
 8004f4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004f50:	f010 0301 	ands.w	r3, r0, #1
 8004f54:	d00a      	beq.n	8004f6c <__swsetup_r+0xbc>
 8004f56:	2300      	movs	r3, #0
 8004f58:	60a3      	str	r3, [r4, #8]
 8004f5a:	6963      	ldr	r3, [r4, #20]
 8004f5c:	425b      	negs	r3, r3
 8004f5e:	61a3      	str	r3, [r4, #24]
 8004f60:	6923      	ldr	r3, [r4, #16]
 8004f62:	b943      	cbnz	r3, 8004f76 <__swsetup_r+0xc6>
 8004f64:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004f68:	d1ba      	bne.n	8004ee0 <__swsetup_r+0x30>
 8004f6a:	bd70      	pop	{r4, r5, r6, pc}
 8004f6c:	0781      	lsls	r1, r0, #30
 8004f6e:	bf58      	it	pl
 8004f70:	6963      	ldrpl	r3, [r4, #20]
 8004f72:	60a3      	str	r3, [r4, #8]
 8004f74:	e7f4      	b.n	8004f60 <__swsetup_r+0xb0>
 8004f76:	2000      	movs	r0, #0
 8004f78:	e7f7      	b.n	8004f6a <__swsetup_r+0xba>
 8004f7a:	bf00      	nop
 8004f7c:	24000010 	.word	0x24000010
 8004f80:	080057b4 	.word	0x080057b4
 8004f84:	080057d4 	.word	0x080057d4
 8004f88:	08005794 	.word	0x08005794

08004f8c <__sflush_r>:
 8004f8c:	898a      	ldrh	r2, [r1, #12]
 8004f8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f92:	4605      	mov	r5, r0
 8004f94:	0710      	lsls	r0, r2, #28
 8004f96:	460c      	mov	r4, r1
 8004f98:	d458      	bmi.n	800504c <__sflush_r+0xc0>
 8004f9a:	684b      	ldr	r3, [r1, #4]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	dc05      	bgt.n	8004fac <__sflush_r+0x20>
 8004fa0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	dc02      	bgt.n	8004fac <__sflush_r+0x20>
 8004fa6:	2000      	movs	r0, #0
 8004fa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004fae:	2e00      	cmp	r6, #0
 8004fb0:	d0f9      	beq.n	8004fa6 <__sflush_r+0x1a>
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004fb8:	682f      	ldr	r7, [r5, #0]
 8004fba:	602b      	str	r3, [r5, #0]
 8004fbc:	d032      	beq.n	8005024 <__sflush_r+0x98>
 8004fbe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004fc0:	89a3      	ldrh	r3, [r4, #12]
 8004fc2:	075a      	lsls	r2, r3, #29
 8004fc4:	d505      	bpl.n	8004fd2 <__sflush_r+0x46>
 8004fc6:	6863      	ldr	r3, [r4, #4]
 8004fc8:	1ac0      	subs	r0, r0, r3
 8004fca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004fcc:	b10b      	cbz	r3, 8004fd2 <__sflush_r+0x46>
 8004fce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004fd0:	1ac0      	subs	r0, r0, r3
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004fd8:	6a21      	ldr	r1, [r4, #32]
 8004fda:	4628      	mov	r0, r5
 8004fdc:	47b0      	blx	r6
 8004fde:	1c43      	adds	r3, r0, #1
 8004fe0:	89a3      	ldrh	r3, [r4, #12]
 8004fe2:	d106      	bne.n	8004ff2 <__sflush_r+0x66>
 8004fe4:	6829      	ldr	r1, [r5, #0]
 8004fe6:	291d      	cmp	r1, #29
 8004fe8:	d82c      	bhi.n	8005044 <__sflush_r+0xb8>
 8004fea:	4a2a      	ldr	r2, [pc, #168]	; (8005094 <__sflush_r+0x108>)
 8004fec:	40ca      	lsrs	r2, r1
 8004fee:	07d6      	lsls	r6, r2, #31
 8004ff0:	d528      	bpl.n	8005044 <__sflush_r+0xb8>
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	6062      	str	r2, [r4, #4]
 8004ff6:	04d9      	lsls	r1, r3, #19
 8004ff8:	6922      	ldr	r2, [r4, #16]
 8004ffa:	6022      	str	r2, [r4, #0]
 8004ffc:	d504      	bpl.n	8005008 <__sflush_r+0x7c>
 8004ffe:	1c42      	adds	r2, r0, #1
 8005000:	d101      	bne.n	8005006 <__sflush_r+0x7a>
 8005002:	682b      	ldr	r3, [r5, #0]
 8005004:	b903      	cbnz	r3, 8005008 <__sflush_r+0x7c>
 8005006:	6560      	str	r0, [r4, #84]	; 0x54
 8005008:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800500a:	602f      	str	r7, [r5, #0]
 800500c:	2900      	cmp	r1, #0
 800500e:	d0ca      	beq.n	8004fa6 <__sflush_r+0x1a>
 8005010:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005014:	4299      	cmp	r1, r3
 8005016:	d002      	beq.n	800501e <__sflush_r+0x92>
 8005018:	4628      	mov	r0, r5
 800501a:	f000 f9d7 	bl	80053cc <_free_r>
 800501e:	2000      	movs	r0, #0
 8005020:	6360      	str	r0, [r4, #52]	; 0x34
 8005022:	e7c1      	b.n	8004fa8 <__sflush_r+0x1c>
 8005024:	6a21      	ldr	r1, [r4, #32]
 8005026:	2301      	movs	r3, #1
 8005028:	4628      	mov	r0, r5
 800502a:	47b0      	blx	r6
 800502c:	1c41      	adds	r1, r0, #1
 800502e:	d1c7      	bne.n	8004fc0 <__sflush_r+0x34>
 8005030:	682b      	ldr	r3, [r5, #0]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d0c4      	beq.n	8004fc0 <__sflush_r+0x34>
 8005036:	2b1d      	cmp	r3, #29
 8005038:	d001      	beq.n	800503e <__sflush_r+0xb2>
 800503a:	2b16      	cmp	r3, #22
 800503c:	d101      	bne.n	8005042 <__sflush_r+0xb6>
 800503e:	602f      	str	r7, [r5, #0]
 8005040:	e7b1      	b.n	8004fa6 <__sflush_r+0x1a>
 8005042:	89a3      	ldrh	r3, [r4, #12]
 8005044:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005048:	81a3      	strh	r3, [r4, #12]
 800504a:	e7ad      	b.n	8004fa8 <__sflush_r+0x1c>
 800504c:	690f      	ldr	r7, [r1, #16]
 800504e:	2f00      	cmp	r7, #0
 8005050:	d0a9      	beq.n	8004fa6 <__sflush_r+0x1a>
 8005052:	0793      	lsls	r3, r2, #30
 8005054:	680e      	ldr	r6, [r1, #0]
 8005056:	bf08      	it	eq
 8005058:	694b      	ldreq	r3, [r1, #20]
 800505a:	600f      	str	r7, [r1, #0]
 800505c:	bf18      	it	ne
 800505e:	2300      	movne	r3, #0
 8005060:	eba6 0807 	sub.w	r8, r6, r7
 8005064:	608b      	str	r3, [r1, #8]
 8005066:	f1b8 0f00 	cmp.w	r8, #0
 800506a:	dd9c      	ble.n	8004fa6 <__sflush_r+0x1a>
 800506c:	6a21      	ldr	r1, [r4, #32]
 800506e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005070:	4643      	mov	r3, r8
 8005072:	463a      	mov	r2, r7
 8005074:	4628      	mov	r0, r5
 8005076:	47b0      	blx	r6
 8005078:	2800      	cmp	r0, #0
 800507a:	dc06      	bgt.n	800508a <__sflush_r+0xfe>
 800507c:	89a3      	ldrh	r3, [r4, #12]
 800507e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005082:	81a3      	strh	r3, [r4, #12]
 8005084:	f04f 30ff 	mov.w	r0, #4294967295
 8005088:	e78e      	b.n	8004fa8 <__sflush_r+0x1c>
 800508a:	4407      	add	r7, r0
 800508c:	eba8 0800 	sub.w	r8, r8, r0
 8005090:	e7e9      	b.n	8005066 <__sflush_r+0xda>
 8005092:	bf00      	nop
 8005094:	20400001 	.word	0x20400001

08005098 <_fflush_r>:
 8005098:	b538      	push	{r3, r4, r5, lr}
 800509a:	690b      	ldr	r3, [r1, #16]
 800509c:	4605      	mov	r5, r0
 800509e:	460c      	mov	r4, r1
 80050a0:	b913      	cbnz	r3, 80050a8 <_fflush_r+0x10>
 80050a2:	2500      	movs	r5, #0
 80050a4:	4628      	mov	r0, r5
 80050a6:	bd38      	pop	{r3, r4, r5, pc}
 80050a8:	b118      	cbz	r0, 80050b2 <_fflush_r+0x1a>
 80050aa:	6983      	ldr	r3, [r0, #24]
 80050ac:	b90b      	cbnz	r3, 80050b2 <_fflush_r+0x1a>
 80050ae:	f000 f887 	bl	80051c0 <__sinit>
 80050b2:	4b14      	ldr	r3, [pc, #80]	; (8005104 <_fflush_r+0x6c>)
 80050b4:	429c      	cmp	r4, r3
 80050b6:	d11b      	bne.n	80050f0 <_fflush_r+0x58>
 80050b8:	686c      	ldr	r4, [r5, #4]
 80050ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d0ef      	beq.n	80050a2 <_fflush_r+0xa>
 80050c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80050c4:	07d0      	lsls	r0, r2, #31
 80050c6:	d404      	bmi.n	80050d2 <_fflush_r+0x3a>
 80050c8:	0599      	lsls	r1, r3, #22
 80050ca:	d402      	bmi.n	80050d2 <_fflush_r+0x3a>
 80050cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80050ce:	f000 f915 	bl	80052fc <__retarget_lock_acquire_recursive>
 80050d2:	4628      	mov	r0, r5
 80050d4:	4621      	mov	r1, r4
 80050d6:	f7ff ff59 	bl	8004f8c <__sflush_r>
 80050da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80050dc:	07da      	lsls	r2, r3, #31
 80050de:	4605      	mov	r5, r0
 80050e0:	d4e0      	bmi.n	80050a4 <_fflush_r+0xc>
 80050e2:	89a3      	ldrh	r3, [r4, #12]
 80050e4:	059b      	lsls	r3, r3, #22
 80050e6:	d4dd      	bmi.n	80050a4 <_fflush_r+0xc>
 80050e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80050ea:	f000 f908 	bl	80052fe <__retarget_lock_release_recursive>
 80050ee:	e7d9      	b.n	80050a4 <_fflush_r+0xc>
 80050f0:	4b05      	ldr	r3, [pc, #20]	; (8005108 <_fflush_r+0x70>)
 80050f2:	429c      	cmp	r4, r3
 80050f4:	d101      	bne.n	80050fa <_fflush_r+0x62>
 80050f6:	68ac      	ldr	r4, [r5, #8]
 80050f8:	e7df      	b.n	80050ba <_fflush_r+0x22>
 80050fa:	4b04      	ldr	r3, [pc, #16]	; (800510c <_fflush_r+0x74>)
 80050fc:	429c      	cmp	r4, r3
 80050fe:	bf08      	it	eq
 8005100:	68ec      	ldreq	r4, [r5, #12]
 8005102:	e7da      	b.n	80050ba <_fflush_r+0x22>
 8005104:	080057b4 	.word	0x080057b4
 8005108:	080057d4 	.word	0x080057d4
 800510c:	08005794 	.word	0x08005794

08005110 <std>:
 8005110:	2300      	movs	r3, #0
 8005112:	b510      	push	{r4, lr}
 8005114:	4604      	mov	r4, r0
 8005116:	e9c0 3300 	strd	r3, r3, [r0]
 800511a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800511e:	6083      	str	r3, [r0, #8]
 8005120:	8181      	strh	r1, [r0, #12]
 8005122:	6643      	str	r3, [r0, #100]	; 0x64
 8005124:	81c2      	strh	r2, [r0, #14]
 8005126:	6183      	str	r3, [r0, #24]
 8005128:	4619      	mov	r1, r3
 800512a:	2208      	movs	r2, #8
 800512c:	305c      	adds	r0, #92	; 0x5c
 800512e:	f7ff fdef 	bl	8004d10 <memset>
 8005132:	4b05      	ldr	r3, [pc, #20]	; (8005148 <std+0x38>)
 8005134:	6263      	str	r3, [r4, #36]	; 0x24
 8005136:	4b05      	ldr	r3, [pc, #20]	; (800514c <std+0x3c>)
 8005138:	62a3      	str	r3, [r4, #40]	; 0x28
 800513a:	4b05      	ldr	r3, [pc, #20]	; (8005150 <std+0x40>)
 800513c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800513e:	4b05      	ldr	r3, [pc, #20]	; (8005154 <std+0x44>)
 8005140:	6224      	str	r4, [r4, #32]
 8005142:	6323      	str	r3, [r4, #48]	; 0x30
 8005144:	bd10      	pop	{r4, pc}
 8005146:	bf00      	nop
 8005148:	080055ad 	.word	0x080055ad
 800514c:	080055cf 	.word	0x080055cf
 8005150:	08005607 	.word	0x08005607
 8005154:	0800562b 	.word	0x0800562b

08005158 <_cleanup_r>:
 8005158:	4901      	ldr	r1, [pc, #4]	; (8005160 <_cleanup_r+0x8>)
 800515a:	f000 b8af 	b.w	80052bc <_fwalk_reent>
 800515e:	bf00      	nop
 8005160:	08005099 	.word	0x08005099

08005164 <__sfmoreglue>:
 8005164:	b570      	push	{r4, r5, r6, lr}
 8005166:	2268      	movs	r2, #104	; 0x68
 8005168:	1e4d      	subs	r5, r1, #1
 800516a:	4355      	muls	r5, r2
 800516c:	460e      	mov	r6, r1
 800516e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005172:	f000 f997 	bl	80054a4 <_malloc_r>
 8005176:	4604      	mov	r4, r0
 8005178:	b140      	cbz	r0, 800518c <__sfmoreglue+0x28>
 800517a:	2100      	movs	r1, #0
 800517c:	e9c0 1600 	strd	r1, r6, [r0]
 8005180:	300c      	adds	r0, #12
 8005182:	60a0      	str	r0, [r4, #8]
 8005184:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005188:	f7ff fdc2 	bl	8004d10 <memset>
 800518c:	4620      	mov	r0, r4
 800518e:	bd70      	pop	{r4, r5, r6, pc}

08005190 <__sfp_lock_acquire>:
 8005190:	4801      	ldr	r0, [pc, #4]	; (8005198 <__sfp_lock_acquire+0x8>)
 8005192:	f000 b8b3 	b.w	80052fc <__retarget_lock_acquire_recursive>
 8005196:	bf00      	nop
 8005198:	24000129 	.word	0x24000129

0800519c <__sfp_lock_release>:
 800519c:	4801      	ldr	r0, [pc, #4]	; (80051a4 <__sfp_lock_release+0x8>)
 800519e:	f000 b8ae 	b.w	80052fe <__retarget_lock_release_recursive>
 80051a2:	bf00      	nop
 80051a4:	24000129 	.word	0x24000129

080051a8 <__sinit_lock_acquire>:
 80051a8:	4801      	ldr	r0, [pc, #4]	; (80051b0 <__sinit_lock_acquire+0x8>)
 80051aa:	f000 b8a7 	b.w	80052fc <__retarget_lock_acquire_recursive>
 80051ae:	bf00      	nop
 80051b0:	2400012a 	.word	0x2400012a

080051b4 <__sinit_lock_release>:
 80051b4:	4801      	ldr	r0, [pc, #4]	; (80051bc <__sinit_lock_release+0x8>)
 80051b6:	f000 b8a2 	b.w	80052fe <__retarget_lock_release_recursive>
 80051ba:	bf00      	nop
 80051bc:	2400012a 	.word	0x2400012a

080051c0 <__sinit>:
 80051c0:	b510      	push	{r4, lr}
 80051c2:	4604      	mov	r4, r0
 80051c4:	f7ff fff0 	bl	80051a8 <__sinit_lock_acquire>
 80051c8:	69a3      	ldr	r3, [r4, #24]
 80051ca:	b11b      	cbz	r3, 80051d4 <__sinit+0x14>
 80051cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051d0:	f7ff bff0 	b.w	80051b4 <__sinit_lock_release>
 80051d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80051d8:	6523      	str	r3, [r4, #80]	; 0x50
 80051da:	4b13      	ldr	r3, [pc, #76]	; (8005228 <__sinit+0x68>)
 80051dc:	4a13      	ldr	r2, [pc, #76]	; (800522c <__sinit+0x6c>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	62a2      	str	r2, [r4, #40]	; 0x28
 80051e2:	42a3      	cmp	r3, r4
 80051e4:	bf04      	itt	eq
 80051e6:	2301      	moveq	r3, #1
 80051e8:	61a3      	streq	r3, [r4, #24]
 80051ea:	4620      	mov	r0, r4
 80051ec:	f000 f820 	bl	8005230 <__sfp>
 80051f0:	6060      	str	r0, [r4, #4]
 80051f2:	4620      	mov	r0, r4
 80051f4:	f000 f81c 	bl	8005230 <__sfp>
 80051f8:	60a0      	str	r0, [r4, #8]
 80051fa:	4620      	mov	r0, r4
 80051fc:	f000 f818 	bl	8005230 <__sfp>
 8005200:	2200      	movs	r2, #0
 8005202:	60e0      	str	r0, [r4, #12]
 8005204:	2104      	movs	r1, #4
 8005206:	6860      	ldr	r0, [r4, #4]
 8005208:	f7ff ff82 	bl	8005110 <std>
 800520c:	68a0      	ldr	r0, [r4, #8]
 800520e:	2201      	movs	r2, #1
 8005210:	2109      	movs	r1, #9
 8005212:	f7ff ff7d 	bl	8005110 <std>
 8005216:	68e0      	ldr	r0, [r4, #12]
 8005218:	2202      	movs	r2, #2
 800521a:	2112      	movs	r1, #18
 800521c:	f7ff ff78 	bl	8005110 <std>
 8005220:	2301      	movs	r3, #1
 8005222:	61a3      	str	r3, [r4, #24]
 8005224:	e7d2      	b.n	80051cc <__sinit+0xc>
 8005226:	bf00      	nop
 8005228:	08005790 	.word	0x08005790
 800522c:	08005159 	.word	0x08005159

08005230 <__sfp>:
 8005230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005232:	4607      	mov	r7, r0
 8005234:	f7ff ffac 	bl	8005190 <__sfp_lock_acquire>
 8005238:	4b1e      	ldr	r3, [pc, #120]	; (80052b4 <__sfp+0x84>)
 800523a:	681e      	ldr	r6, [r3, #0]
 800523c:	69b3      	ldr	r3, [r6, #24]
 800523e:	b913      	cbnz	r3, 8005246 <__sfp+0x16>
 8005240:	4630      	mov	r0, r6
 8005242:	f7ff ffbd 	bl	80051c0 <__sinit>
 8005246:	3648      	adds	r6, #72	; 0x48
 8005248:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800524c:	3b01      	subs	r3, #1
 800524e:	d503      	bpl.n	8005258 <__sfp+0x28>
 8005250:	6833      	ldr	r3, [r6, #0]
 8005252:	b30b      	cbz	r3, 8005298 <__sfp+0x68>
 8005254:	6836      	ldr	r6, [r6, #0]
 8005256:	e7f7      	b.n	8005248 <__sfp+0x18>
 8005258:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800525c:	b9d5      	cbnz	r5, 8005294 <__sfp+0x64>
 800525e:	4b16      	ldr	r3, [pc, #88]	; (80052b8 <__sfp+0x88>)
 8005260:	60e3      	str	r3, [r4, #12]
 8005262:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005266:	6665      	str	r5, [r4, #100]	; 0x64
 8005268:	f000 f847 	bl	80052fa <__retarget_lock_init_recursive>
 800526c:	f7ff ff96 	bl	800519c <__sfp_lock_release>
 8005270:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005274:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005278:	6025      	str	r5, [r4, #0]
 800527a:	61a5      	str	r5, [r4, #24]
 800527c:	2208      	movs	r2, #8
 800527e:	4629      	mov	r1, r5
 8005280:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005284:	f7ff fd44 	bl	8004d10 <memset>
 8005288:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800528c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005290:	4620      	mov	r0, r4
 8005292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005294:	3468      	adds	r4, #104	; 0x68
 8005296:	e7d9      	b.n	800524c <__sfp+0x1c>
 8005298:	2104      	movs	r1, #4
 800529a:	4638      	mov	r0, r7
 800529c:	f7ff ff62 	bl	8005164 <__sfmoreglue>
 80052a0:	4604      	mov	r4, r0
 80052a2:	6030      	str	r0, [r6, #0]
 80052a4:	2800      	cmp	r0, #0
 80052a6:	d1d5      	bne.n	8005254 <__sfp+0x24>
 80052a8:	f7ff ff78 	bl	800519c <__sfp_lock_release>
 80052ac:	230c      	movs	r3, #12
 80052ae:	603b      	str	r3, [r7, #0]
 80052b0:	e7ee      	b.n	8005290 <__sfp+0x60>
 80052b2:	bf00      	nop
 80052b4:	08005790 	.word	0x08005790
 80052b8:	ffff0001 	.word	0xffff0001

080052bc <_fwalk_reent>:
 80052bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052c0:	4606      	mov	r6, r0
 80052c2:	4688      	mov	r8, r1
 80052c4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80052c8:	2700      	movs	r7, #0
 80052ca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80052ce:	f1b9 0901 	subs.w	r9, r9, #1
 80052d2:	d505      	bpl.n	80052e0 <_fwalk_reent+0x24>
 80052d4:	6824      	ldr	r4, [r4, #0]
 80052d6:	2c00      	cmp	r4, #0
 80052d8:	d1f7      	bne.n	80052ca <_fwalk_reent+0xe>
 80052da:	4638      	mov	r0, r7
 80052dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052e0:	89ab      	ldrh	r3, [r5, #12]
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d907      	bls.n	80052f6 <_fwalk_reent+0x3a>
 80052e6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80052ea:	3301      	adds	r3, #1
 80052ec:	d003      	beq.n	80052f6 <_fwalk_reent+0x3a>
 80052ee:	4629      	mov	r1, r5
 80052f0:	4630      	mov	r0, r6
 80052f2:	47c0      	blx	r8
 80052f4:	4307      	orrs	r7, r0
 80052f6:	3568      	adds	r5, #104	; 0x68
 80052f8:	e7e9      	b.n	80052ce <_fwalk_reent+0x12>

080052fa <__retarget_lock_init_recursive>:
 80052fa:	4770      	bx	lr

080052fc <__retarget_lock_acquire_recursive>:
 80052fc:	4770      	bx	lr

080052fe <__retarget_lock_release_recursive>:
 80052fe:	4770      	bx	lr

08005300 <__swhatbuf_r>:
 8005300:	b570      	push	{r4, r5, r6, lr}
 8005302:	460e      	mov	r6, r1
 8005304:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005308:	2900      	cmp	r1, #0
 800530a:	b096      	sub	sp, #88	; 0x58
 800530c:	4614      	mov	r4, r2
 800530e:	461d      	mov	r5, r3
 8005310:	da08      	bge.n	8005324 <__swhatbuf_r+0x24>
 8005312:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005316:	2200      	movs	r2, #0
 8005318:	602a      	str	r2, [r5, #0]
 800531a:	061a      	lsls	r2, r3, #24
 800531c:	d410      	bmi.n	8005340 <__swhatbuf_r+0x40>
 800531e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005322:	e00e      	b.n	8005342 <__swhatbuf_r+0x42>
 8005324:	466a      	mov	r2, sp
 8005326:	f000 f9a7 	bl	8005678 <_fstat_r>
 800532a:	2800      	cmp	r0, #0
 800532c:	dbf1      	blt.n	8005312 <__swhatbuf_r+0x12>
 800532e:	9a01      	ldr	r2, [sp, #4]
 8005330:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005334:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005338:	425a      	negs	r2, r3
 800533a:	415a      	adcs	r2, r3
 800533c:	602a      	str	r2, [r5, #0]
 800533e:	e7ee      	b.n	800531e <__swhatbuf_r+0x1e>
 8005340:	2340      	movs	r3, #64	; 0x40
 8005342:	2000      	movs	r0, #0
 8005344:	6023      	str	r3, [r4, #0]
 8005346:	b016      	add	sp, #88	; 0x58
 8005348:	bd70      	pop	{r4, r5, r6, pc}
	...

0800534c <__smakebuf_r>:
 800534c:	898b      	ldrh	r3, [r1, #12]
 800534e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005350:	079d      	lsls	r5, r3, #30
 8005352:	4606      	mov	r6, r0
 8005354:	460c      	mov	r4, r1
 8005356:	d507      	bpl.n	8005368 <__smakebuf_r+0x1c>
 8005358:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800535c:	6023      	str	r3, [r4, #0]
 800535e:	6123      	str	r3, [r4, #16]
 8005360:	2301      	movs	r3, #1
 8005362:	6163      	str	r3, [r4, #20]
 8005364:	b002      	add	sp, #8
 8005366:	bd70      	pop	{r4, r5, r6, pc}
 8005368:	ab01      	add	r3, sp, #4
 800536a:	466a      	mov	r2, sp
 800536c:	f7ff ffc8 	bl	8005300 <__swhatbuf_r>
 8005370:	9900      	ldr	r1, [sp, #0]
 8005372:	4605      	mov	r5, r0
 8005374:	4630      	mov	r0, r6
 8005376:	f000 f895 	bl	80054a4 <_malloc_r>
 800537a:	b948      	cbnz	r0, 8005390 <__smakebuf_r+0x44>
 800537c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005380:	059a      	lsls	r2, r3, #22
 8005382:	d4ef      	bmi.n	8005364 <__smakebuf_r+0x18>
 8005384:	f023 0303 	bic.w	r3, r3, #3
 8005388:	f043 0302 	orr.w	r3, r3, #2
 800538c:	81a3      	strh	r3, [r4, #12]
 800538e:	e7e3      	b.n	8005358 <__smakebuf_r+0xc>
 8005390:	4b0d      	ldr	r3, [pc, #52]	; (80053c8 <__smakebuf_r+0x7c>)
 8005392:	62b3      	str	r3, [r6, #40]	; 0x28
 8005394:	89a3      	ldrh	r3, [r4, #12]
 8005396:	6020      	str	r0, [r4, #0]
 8005398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800539c:	81a3      	strh	r3, [r4, #12]
 800539e:	9b00      	ldr	r3, [sp, #0]
 80053a0:	6163      	str	r3, [r4, #20]
 80053a2:	9b01      	ldr	r3, [sp, #4]
 80053a4:	6120      	str	r0, [r4, #16]
 80053a6:	b15b      	cbz	r3, 80053c0 <__smakebuf_r+0x74>
 80053a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80053ac:	4630      	mov	r0, r6
 80053ae:	f000 f975 	bl	800569c <_isatty_r>
 80053b2:	b128      	cbz	r0, 80053c0 <__smakebuf_r+0x74>
 80053b4:	89a3      	ldrh	r3, [r4, #12]
 80053b6:	f023 0303 	bic.w	r3, r3, #3
 80053ba:	f043 0301 	orr.w	r3, r3, #1
 80053be:	81a3      	strh	r3, [r4, #12]
 80053c0:	89a0      	ldrh	r0, [r4, #12]
 80053c2:	4305      	orrs	r5, r0
 80053c4:	81a5      	strh	r5, [r4, #12]
 80053c6:	e7cd      	b.n	8005364 <__smakebuf_r+0x18>
 80053c8:	08005159 	.word	0x08005159

080053cc <_free_r>:
 80053cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80053ce:	2900      	cmp	r1, #0
 80053d0:	d044      	beq.n	800545c <_free_r+0x90>
 80053d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053d6:	9001      	str	r0, [sp, #4]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	f1a1 0404 	sub.w	r4, r1, #4
 80053de:	bfb8      	it	lt
 80053e0:	18e4      	addlt	r4, r4, r3
 80053e2:	f000 f97d 	bl	80056e0 <__malloc_lock>
 80053e6:	4a1e      	ldr	r2, [pc, #120]	; (8005460 <_free_r+0x94>)
 80053e8:	9801      	ldr	r0, [sp, #4]
 80053ea:	6813      	ldr	r3, [r2, #0]
 80053ec:	b933      	cbnz	r3, 80053fc <_free_r+0x30>
 80053ee:	6063      	str	r3, [r4, #4]
 80053f0:	6014      	str	r4, [r2, #0]
 80053f2:	b003      	add	sp, #12
 80053f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80053f8:	f000 b978 	b.w	80056ec <__malloc_unlock>
 80053fc:	42a3      	cmp	r3, r4
 80053fe:	d908      	bls.n	8005412 <_free_r+0x46>
 8005400:	6825      	ldr	r5, [r4, #0]
 8005402:	1961      	adds	r1, r4, r5
 8005404:	428b      	cmp	r3, r1
 8005406:	bf01      	itttt	eq
 8005408:	6819      	ldreq	r1, [r3, #0]
 800540a:	685b      	ldreq	r3, [r3, #4]
 800540c:	1949      	addeq	r1, r1, r5
 800540e:	6021      	streq	r1, [r4, #0]
 8005410:	e7ed      	b.n	80053ee <_free_r+0x22>
 8005412:	461a      	mov	r2, r3
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	b10b      	cbz	r3, 800541c <_free_r+0x50>
 8005418:	42a3      	cmp	r3, r4
 800541a:	d9fa      	bls.n	8005412 <_free_r+0x46>
 800541c:	6811      	ldr	r1, [r2, #0]
 800541e:	1855      	adds	r5, r2, r1
 8005420:	42a5      	cmp	r5, r4
 8005422:	d10b      	bne.n	800543c <_free_r+0x70>
 8005424:	6824      	ldr	r4, [r4, #0]
 8005426:	4421      	add	r1, r4
 8005428:	1854      	adds	r4, r2, r1
 800542a:	42a3      	cmp	r3, r4
 800542c:	6011      	str	r1, [r2, #0]
 800542e:	d1e0      	bne.n	80053f2 <_free_r+0x26>
 8005430:	681c      	ldr	r4, [r3, #0]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	6053      	str	r3, [r2, #4]
 8005436:	4421      	add	r1, r4
 8005438:	6011      	str	r1, [r2, #0]
 800543a:	e7da      	b.n	80053f2 <_free_r+0x26>
 800543c:	d902      	bls.n	8005444 <_free_r+0x78>
 800543e:	230c      	movs	r3, #12
 8005440:	6003      	str	r3, [r0, #0]
 8005442:	e7d6      	b.n	80053f2 <_free_r+0x26>
 8005444:	6825      	ldr	r5, [r4, #0]
 8005446:	1961      	adds	r1, r4, r5
 8005448:	428b      	cmp	r3, r1
 800544a:	bf04      	itt	eq
 800544c:	6819      	ldreq	r1, [r3, #0]
 800544e:	685b      	ldreq	r3, [r3, #4]
 8005450:	6063      	str	r3, [r4, #4]
 8005452:	bf04      	itt	eq
 8005454:	1949      	addeq	r1, r1, r5
 8005456:	6021      	streq	r1, [r4, #0]
 8005458:	6054      	str	r4, [r2, #4]
 800545a:	e7ca      	b.n	80053f2 <_free_r+0x26>
 800545c:	b003      	add	sp, #12
 800545e:	bd30      	pop	{r4, r5, pc}
 8005460:	2400012c 	.word	0x2400012c

08005464 <sbrk_aligned>:
 8005464:	b570      	push	{r4, r5, r6, lr}
 8005466:	4e0e      	ldr	r6, [pc, #56]	; (80054a0 <sbrk_aligned+0x3c>)
 8005468:	460c      	mov	r4, r1
 800546a:	6831      	ldr	r1, [r6, #0]
 800546c:	4605      	mov	r5, r0
 800546e:	b911      	cbnz	r1, 8005476 <sbrk_aligned+0x12>
 8005470:	f000 f88c 	bl	800558c <_sbrk_r>
 8005474:	6030      	str	r0, [r6, #0]
 8005476:	4621      	mov	r1, r4
 8005478:	4628      	mov	r0, r5
 800547a:	f000 f887 	bl	800558c <_sbrk_r>
 800547e:	1c43      	adds	r3, r0, #1
 8005480:	d00a      	beq.n	8005498 <sbrk_aligned+0x34>
 8005482:	1cc4      	adds	r4, r0, #3
 8005484:	f024 0403 	bic.w	r4, r4, #3
 8005488:	42a0      	cmp	r0, r4
 800548a:	d007      	beq.n	800549c <sbrk_aligned+0x38>
 800548c:	1a21      	subs	r1, r4, r0
 800548e:	4628      	mov	r0, r5
 8005490:	f000 f87c 	bl	800558c <_sbrk_r>
 8005494:	3001      	adds	r0, #1
 8005496:	d101      	bne.n	800549c <sbrk_aligned+0x38>
 8005498:	f04f 34ff 	mov.w	r4, #4294967295
 800549c:	4620      	mov	r0, r4
 800549e:	bd70      	pop	{r4, r5, r6, pc}
 80054a0:	24000130 	.word	0x24000130

080054a4 <_malloc_r>:
 80054a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054a8:	1ccd      	adds	r5, r1, #3
 80054aa:	f025 0503 	bic.w	r5, r5, #3
 80054ae:	3508      	adds	r5, #8
 80054b0:	2d0c      	cmp	r5, #12
 80054b2:	bf38      	it	cc
 80054b4:	250c      	movcc	r5, #12
 80054b6:	2d00      	cmp	r5, #0
 80054b8:	4607      	mov	r7, r0
 80054ba:	db01      	blt.n	80054c0 <_malloc_r+0x1c>
 80054bc:	42a9      	cmp	r1, r5
 80054be:	d905      	bls.n	80054cc <_malloc_r+0x28>
 80054c0:	230c      	movs	r3, #12
 80054c2:	603b      	str	r3, [r7, #0]
 80054c4:	2600      	movs	r6, #0
 80054c6:	4630      	mov	r0, r6
 80054c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054cc:	4e2e      	ldr	r6, [pc, #184]	; (8005588 <_malloc_r+0xe4>)
 80054ce:	f000 f907 	bl	80056e0 <__malloc_lock>
 80054d2:	6833      	ldr	r3, [r6, #0]
 80054d4:	461c      	mov	r4, r3
 80054d6:	bb34      	cbnz	r4, 8005526 <_malloc_r+0x82>
 80054d8:	4629      	mov	r1, r5
 80054da:	4638      	mov	r0, r7
 80054dc:	f7ff ffc2 	bl	8005464 <sbrk_aligned>
 80054e0:	1c43      	adds	r3, r0, #1
 80054e2:	4604      	mov	r4, r0
 80054e4:	d14d      	bne.n	8005582 <_malloc_r+0xde>
 80054e6:	6834      	ldr	r4, [r6, #0]
 80054e8:	4626      	mov	r6, r4
 80054ea:	2e00      	cmp	r6, #0
 80054ec:	d140      	bne.n	8005570 <_malloc_r+0xcc>
 80054ee:	6823      	ldr	r3, [r4, #0]
 80054f0:	4631      	mov	r1, r6
 80054f2:	4638      	mov	r0, r7
 80054f4:	eb04 0803 	add.w	r8, r4, r3
 80054f8:	f000 f848 	bl	800558c <_sbrk_r>
 80054fc:	4580      	cmp	r8, r0
 80054fe:	d13a      	bne.n	8005576 <_malloc_r+0xd2>
 8005500:	6821      	ldr	r1, [r4, #0]
 8005502:	3503      	adds	r5, #3
 8005504:	1a6d      	subs	r5, r5, r1
 8005506:	f025 0503 	bic.w	r5, r5, #3
 800550a:	3508      	adds	r5, #8
 800550c:	2d0c      	cmp	r5, #12
 800550e:	bf38      	it	cc
 8005510:	250c      	movcc	r5, #12
 8005512:	4629      	mov	r1, r5
 8005514:	4638      	mov	r0, r7
 8005516:	f7ff ffa5 	bl	8005464 <sbrk_aligned>
 800551a:	3001      	adds	r0, #1
 800551c:	d02b      	beq.n	8005576 <_malloc_r+0xd2>
 800551e:	6823      	ldr	r3, [r4, #0]
 8005520:	442b      	add	r3, r5
 8005522:	6023      	str	r3, [r4, #0]
 8005524:	e00e      	b.n	8005544 <_malloc_r+0xa0>
 8005526:	6822      	ldr	r2, [r4, #0]
 8005528:	1b52      	subs	r2, r2, r5
 800552a:	d41e      	bmi.n	800556a <_malloc_r+0xc6>
 800552c:	2a0b      	cmp	r2, #11
 800552e:	d916      	bls.n	800555e <_malloc_r+0xba>
 8005530:	1961      	adds	r1, r4, r5
 8005532:	42a3      	cmp	r3, r4
 8005534:	6025      	str	r5, [r4, #0]
 8005536:	bf18      	it	ne
 8005538:	6059      	strne	r1, [r3, #4]
 800553a:	6863      	ldr	r3, [r4, #4]
 800553c:	bf08      	it	eq
 800553e:	6031      	streq	r1, [r6, #0]
 8005540:	5162      	str	r2, [r4, r5]
 8005542:	604b      	str	r3, [r1, #4]
 8005544:	4638      	mov	r0, r7
 8005546:	f104 060b 	add.w	r6, r4, #11
 800554a:	f000 f8cf 	bl	80056ec <__malloc_unlock>
 800554e:	f026 0607 	bic.w	r6, r6, #7
 8005552:	1d23      	adds	r3, r4, #4
 8005554:	1af2      	subs	r2, r6, r3
 8005556:	d0b6      	beq.n	80054c6 <_malloc_r+0x22>
 8005558:	1b9b      	subs	r3, r3, r6
 800555a:	50a3      	str	r3, [r4, r2]
 800555c:	e7b3      	b.n	80054c6 <_malloc_r+0x22>
 800555e:	6862      	ldr	r2, [r4, #4]
 8005560:	42a3      	cmp	r3, r4
 8005562:	bf0c      	ite	eq
 8005564:	6032      	streq	r2, [r6, #0]
 8005566:	605a      	strne	r2, [r3, #4]
 8005568:	e7ec      	b.n	8005544 <_malloc_r+0xa0>
 800556a:	4623      	mov	r3, r4
 800556c:	6864      	ldr	r4, [r4, #4]
 800556e:	e7b2      	b.n	80054d6 <_malloc_r+0x32>
 8005570:	4634      	mov	r4, r6
 8005572:	6876      	ldr	r6, [r6, #4]
 8005574:	e7b9      	b.n	80054ea <_malloc_r+0x46>
 8005576:	230c      	movs	r3, #12
 8005578:	603b      	str	r3, [r7, #0]
 800557a:	4638      	mov	r0, r7
 800557c:	f000 f8b6 	bl	80056ec <__malloc_unlock>
 8005580:	e7a1      	b.n	80054c6 <_malloc_r+0x22>
 8005582:	6025      	str	r5, [r4, #0]
 8005584:	e7de      	b.n	8005544 <_malloc_r+0xa0>
 8005586:	bf00      	nop
 8005588:	2400012c 	.word	0x2400012c

0800558c <_sbrk_r>:
 800558c:	b538      	push	{r3, r4, r5, lr}
 800558e:	4d06      	ldr	r5, [pc, #24]	; (80055a8 <_sbrk_r+0x1c>)
 8005590:	2300      	movs	r3, #0
 8005592:	4604      	mov	r4, r0
 8005594:	4608      	mov	r0, r1
 8005596:	602b      	str	r3, [r5, #0]
 8005598:	f7fb fabc 	bl	8000b14 <_sbrk>
 800559c:	1c43      	adds	r3, r0, #1
 800559e:	d102      	bne.n	80055a6 <_sbrk_r+0x1a>
 80055a0:	682b      	ldr	r3, [r5, #0]
 80055a2:	b103      	cbz	r3, 80055a6 <_sbrk_r+0x1a>
 80055a4:	6023      	str	r3, [r4, #0]
 80055a6:	bd38      	pop	{r3, r4, r5, pc}
 80055a8:	24000134 	.word	0x24000134

080055ac <__sread>:
 80055ac:	b510      	push	{r4, lr}
 80055ae:	460c      	mov	r4, r1
 80055b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055b4:	f000 f8a0 	bl	80056f8 <_read_r>
 80055b8:	2800      	cmp	r0, #0
 80055ba:	bfab      	itete	ge
 80055bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80055be:	89a3      	ldrhlt	r3, [r4, #12]
 80055c0:	181b      	addge	r3, r3, r0
 80055c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80055c6:	bfac      	ite	ge
 80055c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80055ca:	81a3      	strhlt	r3, [r4, #12]
 80055cc:	bd10      	pop	{r4, pc}

080055ce <__swrite>:
 80055ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055d2:	461f      	mov	r7, r3
 80055d4:	898b      	ldrh	r3, [r1, #12]
 80055d6:	05db      	lsls	r3, r3, #23
 80055d8:	4605      	mov	r5, r0
 80055da:	460c      	mov	r4, r1
 80055dc:	4616      	mov	r6, r2
 80055de:	d505      	bpl.n	80055ec <__swrite+0x1e>
 80055e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055e4:	2302      	movs	r3, #2
 80055e6:	2200      	movs	r2, #0
 80055e8:	f000 f868 	bl	80056bc <_lseek_r>
 80055ec:	89a3      	ldrh	r3, [r4, #12]
 80055ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80055f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055f6:	81a3      	strh	r3, [r4, #12]
 80055f8:	4632      	mov	r2, r6
 80055fa:	463b      	mov	r3, r7
 80055fc:	4628      	mov	r0, r5
 80055fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005602:	f000 b817 	b.w	8005634 <_write_r>

08005606 <__sseek>:
 8005606:	b510      	push	{r4, lr}
 8005608:	460c      	mov	r4, r1
 800560a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800560e:	f000 f855 	bl	80056bc <_lseek_r>
 8005612:	1c43      	adds	r3, r0, #1
 8005614:	89a3      	ldrh	r3, [r4, #12]
 8005616:	bf15      	itete	ne
 8005618:	6560      	strne	r0, [r4, #84]	; 0x54
 800561a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800561e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005622:	81a3      	strheq	r3, [r4, #12]
 8005624:	bf18      	it	ne
 8005626:	81a3      	strhne	r3, [r4, #12]
 8005628:	bd10      	pop	{r4, pc}

0800562a <__sclose>:
 800562a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800562e:	f000 b813 	b.w	8005658 <_close_r>
	...

08005634 <_write_r>:
 8005634:	b538      	push	{r3, r4, r5, lr}
 8005636:	4d07      	ldr	r5, [pc, #28]	; (8005654 <_write_r+0x20>)
 8005638:	4604      	mov	r4, r0
 800563a:	4608      	mov	r0, r1
 800563c:	4611      	mov	r1, r2
 800563e:	2200      	movs	r2, #0
 8005640:	602a      	str	r2, [r5, #0]
 8005642:	461a      	mov	r2, r3
 8005644:	f7fb fa15 	bl	8000a72 <_write>
 8005648:	1c43      	adds	r3, r0, #1
 800564a:	d102      	bne.n	8005652 <_write_r+0x1e>
 800564c:	682b      	ldr	r3, [r5, #0]
 800564e:	b103      	cbz	r3, 8005652 <_write_r+0x1e>
 8005650:	6023      	str	r3, [r4, #0]
 8005652:	bd38      	pop	{r3, r4, r5, pc}
 8005654:	24000134 	.word	0x24000134

08005658 <_close_r>:
 8005658:	b538      	push	{r3, r4, r5, lr}
 800565a:	4d06      	ldr	r5, [pc, #24]	; (8005674 <_close_r+0x1c>)
 800565c:	2300      	movs	r3, #0
 800565e:	4604      	mov	r4, r0
 8005660:	4608      	mov	r0, r1
 8005662:	602b      	str	r3, [r5, #0]
 8005664:	f7fb fa21 	bl	8000aaa <_close>
 8005668:	1c43      	adds	r3, r0, #1
 800566a:	d102      	bne.n	8005672 <_close_r+0x1a>
 800566c:	682b      	ldr	r3, [r5, #0]
 800566e:	b103      	cbz	r3, 8005672 <_close_r+0x1a>
 8005670:	6023      	str	r3, [r4, #0]
 8005672:	bd38      	pop	{r3, r4, r5, pc}
 8005674:	24000134 	.word	0x24000134

08005678 <_fstat_r>:
 8005678:	b538      	push	{r3, r4, r5, lr}
 800567a:	4d07      	ldr	r5, [pc, #28]	; (8005698 <_fstat_r+0x20>)
 800567c:	2300      	movs	r3, #0
 800567e:	4604      	mov	r4, r0
 8005680:	4608      	mov	r0, r1
 8005682:	4611      	mov	r1, r2
 8005684:	602b      	str	r3, [r5, #0]
 8005686:	f7fb fa1c 	bl	8000ac2 <_fstat>
 800568a:	1c43      	adds	r3, r0, #1
 800568c:	d102      	bne.n	8005694 <_fstat_r+0x1c>
 800568e:	682b      	ldr	r3, [r5, #0]
 8005690:	b103      	cbz	r3, 8005694 <_fstat_r+0x1c>
 8005692:	6023      	str	r3, [r4, #0]
 8005694:	bd38      	pop	{r3, r4, r5, pc}
 8005696:	bf00      	nop
 8005698:	24000134 	.word	0x24000134

0800569c <_isatty_r>:
 800569c:	b538      	push	{r3, r4, r5, lr}
 800569e:	4d06      	ldr	r5, [pc, #24]	; (80056b8 <_isatty_r+0x1c>)
 80056a0:	2300      	movs	r3, #0
 80056a2:	4604      	mov	r4, r0
 80056a4:	4608      	mov	r0, r1
 80056a6:	602b      	str	r3, [r5, #0]
 80056a8:	f7fb fa1b 	bl	8000ae2 <_isatty>
 80056ac:	1c43      	adds	r3, r0, #1
 80056ae:	d102      	bne.n	80056b6 <_isatty_r+0x1a>
 80056b0:	682b      	ldr	r3, [r5, #0]
 80056b2:	b103      	cbz	r3, 80056b6 <_isatty_r+0x1a>
 80056b4:	6023      	str	r3, [r4, #0]
 80056b6:	bd38      	pop	{r3, r4, r5, pc}
 80056b8:	24000134 	.word	0x24000134

080056bc <_lseek_r>:
 80056bc:	b538      	push	{r3, r4, r5, lr}
 80056be:	4d07      	ldr	r5, [pc, #28]	; (80056dc <_lseek_r+0x20>)
 80056c0:	4604      	mov	r4, r0
 80056c2:	4608      	mov	r0, r1
 80056c4:	4611      	mov	r1, r2
 80056c6:	2200      	movs	r2, #0
 80056c8:	602a      	str	r2, [r5, #0]
 80056ca:	461a      	mov	r2, r3
 80056cc:	f7fb fa14 	bl	8000af8 <_lseek>
 80056d0:	1c43      	adds	r3, r0, #1
 80056d2:	d102      	bne.n	80056da <_lseek_r+0x1e>
 80056d4:	682b      	ldr	r3, [r5, #0]
 80056d6:	b103      	cbz	r3, 80056da <_lseek_r+0x1e>
 80056d8:	6023      	str	r3, [r4, #0]
 80056da:	bd38      	pop	{r3, r4, r5, pc}
 80056dc:	24000134 	.word	0x24000134

080056e0 <__malloc_lock>:
 80056e0:	4801      	ldr	r0, [pc, #4]	; (80056e8 <__malloc_lock+0x8>)
 80056e2:	f7ff be0b 	b.w	80052fc <__retarget_lock_acquire_recursive>
 80056e6:	bf00      	nop
 80056e8:	24000128 	.word	0x24000128

080056ec <__malloc_unlock>:
 80056ec:	4801      	ldr	r0, [pc, #4]	; (80056f4 <__malloc_unlock+0x8>)
 80056ee:	f7ff be06 	b.w	80052fe <__retarget_lock_release_recursive>
 80056f2:	bf00      	nop
 80056f4:	24000128 	.word	0x24000128

080056f8 <_read_r>:
 80056f8:	b538      	push	{r3, r4, r5, lr}
 80056fa:	4d07      	ldr	r5, [pc, #28]	; (8005718 <_read_r+0x20>)
 80056fc:	4604      	mov	r4, r0
 80056fe:	4608      	mov	r0, r1
 8005700:	4611      	mov	r1, r2
 8005702:	2200      	movs	r2, #0
 8005704:	602a      	str	r2, [r5, #0]
 8005706:	461a      	mov	r2, r3
 8005708:	f7fb f996 	bl	8000a38 <_read>
 800570c:	1c43      	adds	r3, r0, #1
 800570e:	d102      	bne.n	8005716 <_read_r+0x1e>
 8005710:	682b      	ldr	r3, [r5, #0]
 8005712:	b103      	cbz	r3, 8005716 <_read_r+0x1e>
 8005714:	6023      	str	r3, [r4, #0]
 8005716:	bd38      	pop	{r3, r4, r5, pc}
 8005718:	24000134 	.word	0x24000134

0800571c <_init>:
 800571c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800571e:	bf00      	nop
 8005720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005722:	bc08      	pop	{r3}
 8005724:	469e      	mov	lr, r3
 8005726:	4770      	bx	lr

08005728 <_fini>:
 8005728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800572a:	bf00      	nop
 800572c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800572e:	bc08      	pop	{r3}
 8005730:	469e      	mov	lr, r3
 8005732:	4770      	bx	lr
