
STM32H743VIT6_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000477c  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08004a14  08004a14  00014a14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08004a60  08004a60  00014a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08004a68  08004a68  00014a68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08004a6c  08004a6c  00014a6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  08004a70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000b0  24000010  08004a80  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240000c0  08004a80  000200c0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000f3f5  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001b60  00000000  00000000  0002f433  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000009f0  00000000  00000000  00030f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000958  00000000  00000000  00031988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000351fe  00000000  00000000  000322e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000d66d  00000000  00000000  000674de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001552e1  00000000  00000000  00074b4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001c9e2c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002870  00000000  00000000  001c9e7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080049fc 	.word	0x080049fc

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	080049fc 	.word	0x080049fc

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b5b0      	push	{r4, r5, r7, lr}
 80005de:	b086      	sub	sp, #24
 80005e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e2:	f000 fa4b 	bl	8000a7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e6:	f000 f817 	bl	8000618 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ea:	f000 f8cb 	bl	8000784 <MX_GPIO_Init>
  MX_UART7_Init();
 80005ee:	f000 f87d 	bl	80006ec <MX_UART7_Init>
  /* USER CODE BEGIN 2 */
  uint8_t tx[] = "Please wait...\r\n";
 80005f2:	4b07      	ldr	r3, [pc, #28]	; (8000610 <main+0x34>)
 80005f4:	1d3c      	adds	r4, r7, #4
 80005f6:	461d      	mov	r5, r3
 80005f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005fc:	682b      	ldr	r3, [r5, #0]
 80005fe:	7023      	strb	r3, [r4, #0]
  HAL_UART_Transmit(&huart7, tx, sizeof(tx), 1000 );
 8000600:	1d39      	adds	r1, r7, #4
 8000602:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000606:	2211      	movs	r2, #17
 8000608:	4802      	ldr	r0, [pc, #8]	; (8000614 <main+0x38>)
 800060a:	f003 f915 	bl	8003838 <HAL_UART_Transmit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800060e:	e7fe      	b.n	800060e <main+0x32>
 8000610:	08004a14 	.word	0x08004a14
 8000614:	2400002c 	.word	0x2400002c

08000618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b09c      	sub	sp, #112	; 0x70
 800061c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000622:	224c      	movs	r2, #76	; 0x4c
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f004 f9e0 	bl	80049ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800062c:	1d3b      	adds	r3, r7, #4
 800062e:	2220      	movs	r2, #32
 8000630:	2100      	movs	r1, #0
 8000632:	4618      	mov	r0, r3
 8000634:	f004 f9da 	bl	80049ec <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000638:	2002      	movs	r0, #2
 800063a:	f000 fd51 	bl	80010e0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800063e:	2300      	movs	r3, #0
 8000640:	603b      	str	r3, [r7, #0]
 8000642:	4b28      	ldr	r3, [pc, #160]	; (80006e4 <SystemClock_Config+0xcc>)
 8000644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000646:	4a27      	ldr	r2, [pc, #156]	; (80006e4 <SystemClock_Config+0xcc>)
 8000648:	f023 0301 	bic.w	r3, r3, #1
 800064c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800064e:	4b25      	ldr	r3, [pc, #148]	; (80006e4 <SystemClock_Config+0xcc>)
 8000650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000652:	f003 0301 	and.w	r3, r3, #1
 8000656:	603b      	str	r3, [r7, #0]
 8000658:	4b23      	ldr	r3, [pc, #140]	; (80006e8 <SystemClock_Config+0xd0>)
 800065a:	699b      	ldr	r3, [r3, #24]
 800065c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000660:	4a21      	ldr	r2, [pc, #132]	; (80006e8 <SystemClock_Config+0xd0>)
 8000662:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000666:	6193      	str	r3, [r2, #24]
 8000668:	4b1f      	ldr	r3, [pc, #124]	; (80006e8 <SystemClock_Config+0xd0>)
 800066a:	699b      	ldr	r3, [r3, #24]
 800066c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000670:	603b      	str	r3, [r7, #0]
 8000672:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000674:	bf00      	nop
 8000676:	4b1c      	ldr	r3, [pc, #112]	; (80006e8 <SystemClock_Config+0xd0>)
 8000678:	699b      	ldr	r3, [r3, #24]
 800067a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800067e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000682:	d1f8      	bne.n	8000676 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000684:	2302      	movs	r3, #2
 8000686:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000688:	2301      	movs	r3, #1
 800068a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800068c:	2340      	movs	r3, #64	; 0x40
 800068e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000690:	2300      	movs	r3, #0
 8000692:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000694:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000698:	4618      	mov	r0, r3
 800069a:	f000 fd5b 	bl	8001154 <HAL_RCC_OscConfig>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80006a4:	f000 f888 	bl	80007b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a8:	233f      	movs	r3, #63	; 0x3f
 80006aa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006ac:	2300      	movs	r3, #0
 80006ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80006bc:	2340      	movs	r3, #64	; 0x40
 80006be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80006c0:	2300      	movs	r3, #0
 80006c2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006c8:	1d3b      	adds	r3, r7, #4
 80006ca:	2101      	movs	r1, #1
 80006cc:	4618      	mov	r0, r3
 80006ce:	f001 f96f 	bl	80019b0 <HAL_RCC_ClockConfig>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006d8:	f000 f86e 	bl	80007b8 <Error_Handler>
  }
}
 80006dc:	bf00      	nop
 80006de:	3770      	adds	r7, #112	; 0x70
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	58000400 	.word	0x58000400
 80006e8:	58024800 	.word	0x58024800

080006ec <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 80006f0:	4b22      	ldr	r3, [pc, #136]	; (800077c <MX_UART7_Init+0x90>)
 80006f2:	4a23      	ldr	r2, [pc, #140]	; (8000780 <MX_UART7_Init+0x94>)
 80006f4:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 80006f6:	4b21      	ldr	r3, [pc, #132]	; (800077c <MX_UART7_Init+0x90>)
 80006f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006fc:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80006fe:	4b1f      	ldr	r3, [pc, #124]	; (800077c <MX_UART7_Init+0x90>)
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000704:	4b1d      	ldr	r3, [pc, #116]	; (800077c <MX_UART7_Init+0x90>)
 8000706:	2200      	movs	r2, #0
 8000708:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800070a:	4b1c      	ldr	r3, [pc, #112]	; (800077c <MX_UART7_Init+0x90>)
 800070c:	2200      	movs	r2, #0
 800070e:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8000710:	4b1a      	ldr	r3, [pc, #104]	; (800077c <MX_UART7_Init+0x90>)
 8000712:	220c      	movs	r2, #12
 8000714:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000716:	4b19      	ldr	r3, [pc, #100]	; (800077c <MX_UART7_Init+0x90>)
 8000718:	2200      	movs	r2, #0
 800071a:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 800071c:	4b17      	ldr	r3, [pc, #92]	; (800077c <MX_UART7_Init+0x90>)
 800071e:	2200      	movs	r2, #0
 8000720:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000722:	4b16      	ldr	r3, [pc, #88]	; (800077c <MX_UART7_Init+0x90>)
 8000724:	2200      	movs	r2, #0
 8000726:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000728:	4b14      	ldr	r3, [pc, #80]	; (800077c <MX_UART7_Init+0x90>)
 800072a:	2200      	movs	r2, #0
 800072c:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800072e:	4b13      	ldr	r3, [pc, #76]	; (800077c <MX_UART7_Init+0x90>)
 8000730:	2200      	movs	r2, #0
 8000732:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8000734:	4811      	ldr	r0, [pc, #68]	; (800077c <MX_UART7_Init+0x90>)
 8000736:	f003 f82f 	bl	8003798 <HAL_UART_Init>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8000740:	f000 f83a 	bl	80007b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000744:	2100      	movs	r1, #0
 8000746:	480d      	ldr	r0, [pc, #52]	; (800077c <MX_UART7_Init+0x90>)
 8000748:	f004 f862 	bl	8004810 <HAL_UARTEx_SetTxFifoThreshold>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 8000752:	f000 f831 	bl	80007b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000756:	2100      	movs	r1, #0
 8000758:	4808      	ldr	r0, [pc, #32]	; (800077c <MX_UART7_Init+0x90>)
 800075a:	f004 f897 	bl	800488c <HAL_UARTEx_SetRxFifoThreshold>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8000764:	f000 f828 	bl	80007b8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8000768:	4804      	ldr	r0, [pc, #16]	; (800077c <MX_UART7_Init+0x90>)
 800076a:	f004 f818 	bl	800479e <HAL_UARTEx_DisableFifoMode>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8000774:	f000 f820 	bl	80007b8 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8000778:	bf00      	nop
 800077a:	bd80      	pop	{r7, pc}
 800077c:	2400002c 	.word	0x2400002c
 8000780:	40007800 	.word	0x40007800

08000784 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800078a:	4b0a      	ldr	r3, [pc, #40]	; (80007b4 <MX_GPIO_Init+0x30>)
 800078c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000790:	4a08      	ldr	r2, [pc, #32]	; (80007b4 <MX_GPIO_Init+0x30>)
 8000792:	f043 0310 	orr.w	r3, r3, #16
 8000796:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800079a:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <MX_GPIO_Init+0x30>)
 800079c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007a0:	f003 0310 	and.w	r3, r3, #16
 80007a4:	607b      	str	r3, [r7, #4]
 80007a6:	687b      	ldr	r3, [r7, #4]

}
 80007a8:	bf00      	nop
 80007aa:	370c      	adds	r7, #12
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr
 80007b4:	58024400 	.word	0x58024400

080007b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007bc:	b672      	cpsid	i
}
 80007be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007c0:	e7fe      	b.n	80007c0 <Error_Handler+0x8>
	...

080007c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ca:	4b0a      	ldr	r3, [pc, #40]	; (80007f4 <HAL_MspInit+0x30>)
 80007cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80007d0:	4a08      	ldr	r2, [pc, #32]	; (80007f4 <HAL_MspInit+0x30>)
 80007d2:	f043 0302 	orr.w	r3, r3, #2
 80007d6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80007da:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <HAL_MspInit+0x30>)
 80007dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80007e0:	f003 0302 	and.w	r3, r3, #2
 80007e4:	607b      	str	r3, [r7, #4]
 80007e6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007e8:	bf00      	nop
 80007ea:	370c      	adds	r7, #12
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr
 80007f4:	58024400 	.word	0x58024400

080007f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b0b8      	sub	sp, #224	; 0xe0
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000800:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000804:	2200      	movs	r2, #0
 8000806:	601a      	str	r2, [r3, #0]
 8000808:	605a      	str	r2, [r3, #4]
 800080a:	609a      	str	r2, [r3, #8]
 800080c:	60da      	str	r2, [r3, #12]
 800080e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000810:	f107 0310 	add.w	r3, r7, #16
 8000814:	22bc      	movs	r2, #188	; 0xbc
 8000816:	2100      	movs	r1, #0
 8000818:	4618      	mov	r0, r3
 800081a:	f004 f8e7 	bl	80049ec <memset>
  if(huart->Instance==UART7)
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	4a25      	ldr	r2, [pc, #148]	; (80008b8 <HAL_UART_MspInit+0xc0>)
 8000824:	4293      	cmp	r3, r2
 8000826:	d142      	bne.n	80008ae <HAL_UART_MspInit+0xb6>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8000828:	2302      	movs	r3, #2
 800082a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800082c:	2300      	movs	r3, #0
 800082e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000832:	f107 0310 	add.w	r3, r7, #16
 8000836:	4618      	mov	r0, r3
 8000838:	f001 fc46 	bl	80020c8 <HAL_RCCEx_PeriphCLKConfig>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000842:	f7ff ffb9 	bl	80007b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8000846:	4b1d      	ldr	r3, [pc, #116]	; (80008bc <HAL_UART_MspInit+0xc4>)
 8000848:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800084c:	4a1b      	ldr	r2, [pc, #108]	; (80008bc <HAL_UART_MspInit+0xc4>)
 800084e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000852:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000856:	4b19      	ldr	r3, [pc, #100]	; (80008bc <HAL_UART_MspInit+0xc4>)
 8000858:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800085c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000860:	60fb      	str	r3, [r7, #12]
 8000862:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000864:	4b15      	ldr	r3, [pc, #84]	; (80008bc <HAL_UART_MspInit+0xc4>)
 8000866:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800086a:	4a14      	ldr	r2, [pc, #80]	; (80008bc <HAL_UART_MspInit+0xc4>)
 800086c:	f043 0310 	orr.w	r3, r3, #16
 8000870:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000874:	4b11      	ldr	r3, [pc, #68]	; (80008bc <HAL_UART_MspInit+0xc4>)
 8000876:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800087a:	f003 0310 	and.w	r3, r3, #16
 800087e:	60bb      	str	r3, [r7, #8]
 8000880:	68bb      	ldr	r3, [r7, #8]
    /**UART7 GPIO Configuration
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000882:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000886:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088a:	2302      	movs	r3, #2
 800088c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000896:	2300      	movs	r3, #0
 8000898:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 800089c:	2307      	movs	r3, #7
 800089e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008a2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80008a6:	4619      	mov	r1, r3
 80008a8:	4805      	ldr	r0, [pc, #20]	; (80008c0 <HAL_UART_MspInit+0xc8>)
 80008aa:	f000 fa69 	bl	8000d80 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 80008ae:	bf00      	nop
 80008b0:	37e0      	adds	r7, #224	; 0xe0
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40007800 	.word	0x40007800
 80008bc:	58024400 	.word	0x58024400
 80008c0:	58021000 	.word	0x58021000

080008c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008c8:	e7fe      	b.n	80008c8 <NMI_Handler+0x4>

080008ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ca:	b480      	push	{r7}
 80008cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ce:	e7fe      	b.n	80008ce <HardFault_Handler+0x4>

080008d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008d4:	e7fe      	b.n	80008d4 <MemManage_Handler+0x4>

080008d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008d6:	b480      	push	{r7}
 80008d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008da:	e7fe      	b.n	80008da <BusFault_Handler+0x4>

080008dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008e0:	e7fe      	b.n	80008e0 <UsageFault_Handler+0x4>

080008e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008e2:	b480      	push	{r7}
 80008e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008e6:	bf00      	nop
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr

080008f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008f4:	bf00      	nop
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr

080008fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008fe:	b480      	push	{r7}
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000902:	bf00      	nop
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr

0800090c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000910:	f000 f926 	bl	8000b60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000914:	bf00      	nop
 8000916:	bd80      	pop	{r7, pc}

08000918 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800091c:	4b37      	ldr	r3, [pc, #220]	; (80009fc <SystemInit+0xe4>)
 800091e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000922:	4a36      	ldr	r2, [pc, #216]	; (80009fc <SystemInit+0xe4>)
 8000924:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000928:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800092c:	4b34      	ldr	r3, [pc, #208]	; (8000a00 <SystemInit+0xe8>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	f003 030f 	and.w	r3, r3, #15
 8000934:	2b06      	cmp	r3, #6
 8000936:	d807      	bhi.n	8000948 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000938:	4b31      	ldr	r3, [pc, #196]	; (8000a00 <SystemInit+0xe8>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	f023 030f 	bic.w	r3, r3, #15
 8000940:	4a2f      	ldr	r2, [pc, #188]	; (8000a00 <SystemInit+0xe8>)
 8000942:	f043 0307 	orr.w	r3, r3, #7
 8000946:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000948:	4b2e      	ldr	r3, [pc, #184]	; (8000a04 <SystemInit+0xec>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a2d      	ldr	r2, [pc, #180]	; (8000a04 <SystemInit+0xec>)
 800094e:	f043 0301 	orr.w	r3, r3, #1
 8000952:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000954:	4b2b      	ldr	r3, [pc, #172]	; (8000a04 <SystemInit+0xec>)
 8000956:	2200      	movs	r2, #0
 8000958:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800095a:	4b2a      	ldr	r3, [pc, #168]	; (8000a04 <SystemInit+0xec>)
 800095c:	681a      	ldr	r2, [r3, #0]
 800095e:	4929      	ldr	r1, [pc, #164]	; (8000a04 <SystemInit+0xec>)
 8000960:	4b29      	ldr	r3, [pc, #164]	; (8000a08 <SystemInit+0xf0>)
 8000962:	4013      	ands	r3, r2
 8000964:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000966:	4b26      	ldr	r3, [pc, #152]	; (8000a00 <SystemInit+0xe8>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	f003 0308 	and.w	r3, r3, #8
 800096e:	2b00      	cmp	r3, #0
 8000970:	d007      	beq.n	8000982 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000972:	4b23      	ldr	r3, [pc, #140]	; (8000a00 <SystemInit+0xe8>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	f023 030f 	bic.w	r3, r3, #15
 800097a:	4a21      	ldr	r2, [pc, #132]	; (8000a00 <SystemInit+0xe8>)
 800097c:	f043 0307 	orr.w	r3, r3, #7
 8000980:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000982:	4b20      	ldr	r3, [pc, #128]	; (8000a04 <SystemInit+0xec>)
 8000984:	2200      	movs	r2, #0
 8000986:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000988:	4b1e      	ldr	r3, [pc, #120]	; (8000a04 <SystemInit+0xec>)
 800098a:	2200      	movs	r2, #0
 800098c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800098e:	4b1d      	ldr	r3, [pc, #116]	; (8000a04 <SystemInit+0xec>)
 8000990:	2200      	movs	r2, #0
 8000992:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000994:	4b1b      	ldr	r3, [pc, #108]	; (8000a04 <SystemInit+0xec>)
 8000996:	4a1d      	ldr	r2, [pc, #116]	; (8000a0c <SystemInit+0xf4>)
 8000998:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800099a:	4b1a      	ldr	r3, [pc, #104]	; (8000a04 <SystemInit+0xec>)
 800099c:	4a1c      	ldr	r2, [pc, #112]	; (8000a10 <SystemInit+0xf8>)
 800099e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80009a0:	4b18      	ldr	r3, [pc, #96]	; (8000a04 <SystemInit+0xec>)
 80009a2:	4a1c      	ldr	r2, [pc, #112]	; (8000a14 <SystemInit+0xfc>)
 80009a4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80009a6:	4b17      	ldr	r3, [pc, #92]	; (8000a04 <SystemInit+0xec>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80009ac:	4b15      	ldr	r3, [pc, #84]	; (8000a04 <SystemInit+0xec>)
 80009ae:	4a19      	ldr	r2, [pc, #100]	; (8000a14 <SystemInit+0xfc>)
 80009b0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80009b2:	4b14      	ldr	r3, [pc, #80]	; (8000a04 <SystemInit+0xec>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80009b8:	4b12      	ldr	r3, [pc, #72]	; (8000a04 <SystemInit+0xec>)
 80009ba:	4a16      	ldr	r2, [pc, #88]	; (8000a14 <SystemInit+0xfc>)
 80009bc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80009be:	4b11      	ldr	r3, [pc, #68]	; (8000a04 <SystemInit+0xec>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80009c4:	4b0f      	ldr	r3, [pc, #60]	; (8000a04 <SystemInit+0xec>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a0e      	ldr	r2, [pc, #56]	; (8000a04 <SystemInit+0xec>)
 80009ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009ce:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80009d0:	4b0c      	ldr	r3, [pc, #48]	; (8000a04 <SystemInit+0xec>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80009d6:	4b10      	ldr	r3, [pc, #64]	; (8000a18 <SystemInit+0x100>)
 80009d8:	681a      	ldr	r2, [r3, #0]
 80009da:	4b10      	ldr	r3, [pc, #64]	; (8000a1c <SystemInit+0x104>)
 80009dc:	4013      	ands	r3, r2
 80009de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80009e2:	d202      	bcs.n	80009ea <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80009e4:	4b0e      	ldr	r3, [pc, #56]	; (8000a20 <SystemInit+0x108>)
 80009e6:	2201      	movs	r2, #1
 80009e8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80009ea:	4b0e      	ldr	r3, [pc, #56]	; (8000a24 <SystemInit+0x10c>)
 80009ec:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80009f0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80009f2:	bf00      	nop
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr
 80009fc:	e000ed00 	.word	0xe000ed00
 8000a00:	52002000 	.word	0x52002000
 8000a04:	58024400 	.word	0x58024400
 8000a08:	eaf6ed7f 	.word	0xeaf6ed7f
 8000a0c:	02020200 	.word	0x02020200
 8000a10:	01ff0000 	.word	0x01ff0000
 8000a14:	01010280 	.word	0x01010280
 8000a18:	5c001000 	.word	0x5c001000
 8000a1c:	ffff0000 	.word	0xffff0000
 8000a20:	51008108 	.word	0x51008108
 8000a24:	52004000 	.word	0x52004000

08000a28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000a28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a60 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a2c:	f7ff ff74 	bl	8000918 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a30:	480c      	ldr	r0, [pc, #48]	; (8000a64 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a32:	490d      	ldr	r1, [pc, #52]	; (8000a68 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a34:	4a0d      	ldr	r2, [pc, #52]	; (8000a6c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a38:	e002      	b.n	8000a40 <LoopCopyDataInit>

08000a3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a3e:	3304      	adds	r3, #4

08000a40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a44:	d3f9      	bcc.n	8000a3a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a46:	4a0a      	ldr	r2, [pc, #40]	; (8000a70 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a48:	4c0a      	ldr	r4, [pc, #40]	; (8000a74 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a4c:	e001      	b.n	8000a52 <LoopFillZerobss>

08000a4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a50:	3204      	adds	r2, #4

08000a52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a54:	d3fb      	bcc.n	8000a4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a56:	f003 ffa5 	bl	80049a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a5a:	f7ff fdbf 	bl	80005dc <main>
  bx  lr
 8000a5e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a60:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000a64:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000a68:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000a6c:	08004a70 	.word	0x08004a70
  ldr r2, =_sbss
 8000a70:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000a74:	240000c0 	.word	0x240000c0

08000a78 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a78:	e7fe      	b.n	8000a78 <ADC3_IRQHandler>
	...

08000a7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a82:	2003      	movs	r0, #3
 8000a84:	f000 f94a 	bl	8000d1c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000a88:	f001 f948 	bl	8001d1c <HAL_RCC_GetSysClockFreq>
 8000a8c:	4602      	mov	r2, r0
 8000a8e:	4b15      	ldr	r3, [pc, #84]	; (8000ae4 <HAL_Init+0x68>)
 8000a90:	699b      	ldr	r3, [r3, #24]
 8000a92:	0a1b      	lsrs	r3, r3, #8
 8000a94:	f003 030f 	and.w	r3, r3, #15
 8000a98:	4913      	ldr	r1, [pc, #76]	; (8000ae8 <HAL_Init+0x6c>)
 8000a9a:	5ccb      	ldrb	r3, [r1, r3]
 8000a9c:	f003 031f 	and.w	r3, r3, #31
 8000aa0:	fa22 f303 	lsr.w	r3, r2, r3
 8000aa4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000aa6:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <HAL_Init+0x68>)
 8000aa8:	699b      	ldr	r3, [r3, #24]
 8000aaa:	f003 030f 	and.w	r3, r3, #15
 8000aae:	4a0e      	ldr	r2, [pc, #56]	; (8000ae8 <HAL_Init+0x6c>)
 8000ab0:	5cd3      	ldrb	r3, [r2, r3]
 8000ab2:	f003 031f 	and.w	r3, r3, #31
 8000ab6:	687a      	ldr	r2, [r7, #4]
 8000ab8:	fa22 f303 	lsr.w	r3, r2, r3
 8000abc:	4a0b      	ldr	r2, [pc, #44]	; (8000aec <HAL_Init+0x70>)
 8000abe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000ac0:	4a0b      	ldr	r2, [pc, #44]	; (8000af0 <HAL_Init+0x74>)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ac6:	200f      	movs	r0, #15
 8000ac8:	f000 f814 	bl	8000af4 <HAL_InitTick>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	e002      	b.n	8000adc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000ad6:	f7ff fe75 	bl	80007c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ada:	2300      	movs	r3, #0
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	3708      	adds	r7, #8
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	58024400 	.word	0x58024400
 8000ae8:	08004a28 	.word	0x08004a28
 8000aec:	24000004 	.word	0x24000004
 8000af0:	24000000 	.word	0x24000000

08000af4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000afc:	4b15      	ldr	r3, [pc, #84]	; (8000b54 <HAL_InitTick+0x60>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d101      	bne.n	8000b08 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000b04:	2301      	movs	r3, #1
 8000b06:	e021      	b.n	8000b4c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000b08:	4b13      	ldr	r3, [pc, #76]	; (8000b58 <HAL_InitTick+0x64>)
 8000b0a:	681a      	ldr	r2, [r3, #0]
 8000b0c:	4b11      	ldr	r3, [pc, #68]	; (8000b54 <HAL_InitTick+0x60>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	4619      	mov	r1, r3
 8000b12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f000 f921 	bl	8000d66 <HAL_SYSTICK_Config>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	e00e      	b.n	8000b4c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	2b0f      	cmp	r3, #15
 8000b32:	d80a      	bhi.n	8000b4a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b34:	2200      	movs	r2, #0
 8000b36:	6879      	ldr	r1, [r7, #4]
 8000b38:	f04f 30ff 	mov.w	r0, #4294967295
 8000b3c:	f000 f8f9 	bl	8000d32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b40:	4a06      	ldr	r2, [pc, #24]	; (8000b5c <HAL_InitTick+0x68>)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b46:	2300      	movs	r3, #0
 8000b48:	e000      	b.n	8000b4c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000b4a:	2301      	movs	r3, #1
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	3708      	adds	r7, #8
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	2400000c 	.word	0x2400000c
 8000b58:	24000000 	.word	0x24000000
 8000b5c:	24000008 	.word	0x24000008

08000b60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b64:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <HAL_IncTick+0x20>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	461a      	mov	r2, r3
 8000b6a:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <HAL_IncTick+0x24>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4413      	add	r3, r2
 8000b70:	4a04      	ldr	r2, [pc, #16]	; (8000b84 <HAL_IncTick+0x24>)
 8000b72:	6013      	str	r3, [r2, #0]
}
 8000b74:	bf00      	nop
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	2400000c 	.word	0x2400000c
 8000b84:	240000bc 	.word	0x240000bc

08000b88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b8c:	4b03      	ldr	r3, [pc, #12]	; (8000b9c <HAL_GetTick+0x14>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	240000bc 	.word	0x240000bc

08000ba0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000ba4:	4b03      	ldr	r3, [pc, #12]	; (8000bb4 <HAL_GetREVID+0x14>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	0c1b      	lsrs	r3, r3, #16
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr
 8000bb4:	5c001000 	.word	0x5c001000

08000bb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	f003 0307 	and.w	r3, r3, #7
 8000bc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bc8:	4b0b      	ldr	r3, [pc, #44]	; (8000bf8 <__NVIC_SetPriorityGrouping+0x40>)
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bce:	68ba      	ldr	r2, [r7, #8]
 8000bd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000be0:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <__NVIC_SetPriorityGrouping+0x44>)
 8000be2:	4313      	orrs	r3, r2
 8000be4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000be6:	4a04      	ldr	r2, [pc, #16]	; (8000bf8 <__NVIC_SetPriorityGrouping+0x40>)
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	60d3      	str	r3, [r2, #12]
}
 8000bec:	bf00      	nop
 8000bee:	3714      	adds	r7, #20
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr
 8000bf8:	e000ed00 	.word	0xe000ed00
 8000bfc:	05fa0000 	.word	0x05fa0000

08000c00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c04:	4b04      	ldr	r3, [pc, #16]	; (8000c18 <__NVIC_GetPriorityGrouping+0x18>)
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	0a1b      	lsrs	r3, r3, #8
 8000c0a:	f003 0307 	and.w	r3, r3, #7
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	e000ed00 	.word	0xe000ed00

08000c1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	6039      	str	r1, [r7, #0]
 8000c26:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000c28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	db0a      	blt.n	8000c46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	b2da      	uxtb	r2, r3
 8000c34:	490c      	ldr	r1, [pc, #48]	; (8000c68 <__NVIC_SetPriority+0x4c>)
 8000c36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c3a:	0112      	lsls	r2, r2, #4
 8000c3c:	b2d2      	uxtb	r2, r2
 8000c3e:	440b      	add	r3, r1
 8000c40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c44:	e00a      	b.n	8000c5c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	b2da      	uxtb	r2, r3
 8000c4a:	4908      	ldr	r1, [pc, #32]	; (8000c6c <__NVIC_SetPriority+0x50>)
 8000c4c:	88fb      	ldrh	r3, [r7, #6]
 8000c4e:	f003 030f 	and.w	r3, r3, #15
 8000c52:	3b04      	subs	r3, #4
 8000c54:	0112      	lsls	r2, r2, #4
 8000c56:	b2d2      	uxtb	r2, r2
 8000c58:	440b      	add	r3, r1
 8000c5a:	761a      	strb	r2, [r3, #24]
}
 8000c5c:	bf00      	nop
 8000c5e:	370c      	adds	r7, #12
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr
 8000c68:	e000e100 	.word	0xe000e100
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b089      	sub	sp, #36	; 0x24
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	60f8      	str	r0, [r7, #12]
 8000c78:	60b9      	str	r1, [r7, #8]
 8000c7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	f003 0307 	and.w	r3, r3, #7
 8000c82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c84:	69fb      	ldr	r3, [r7, #28]
 8000c86:	f1c3 0307 	rsb	r3, r3, #7
 8000c8a:	2b04      	cmp	r3, #4
 8000c8c:	bf28      	it	cs
 8000c8e:	2304      	movcs	r3, #4
 8000c90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	3304      	adds	r3, #4
 8000c96:	2b06      	cmp	r3, #6
 8000c98:	d902      	bls.n	8000ca0 <NVIC_EncodePriority+0x30>
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	3b03      	subs	r3, #3
 8000c9e:	e000      	b.n	8000ca2 <NVIC_EncodePriority+0x32>
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ca8:	69bb      	ldr	r3, [r7, #24]
 8000caa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cae:	43da      	mvns	r2, r3
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	401a      	ands	r2, r3
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cb8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc2:	43d9      	mvns	r1, r3
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc8:	4313      	orrs	r3, r2
         );
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3724      	adds	r7, #36	; 0x24
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
	...

08000cd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	3b01      	subs	r3, #1
 8000ce4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ce8:	d301      	bcc.n	8000cee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cea:	2301      	movs	r3, #1
 8000cec:	e00f      	b.n	8000d0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cee:	4a0a      	ldr	r2, [pc, #40]	; (8000d18 <SysTick_Config+0x40>)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	3b01      	subs	r3, #1
 8000cf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cf6:	210f      	movs	r1, #15
 8000cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cfc:	f7ff ff8e 	bl	8000c1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d00:	4b05      	ldr	r3, [pc, #20]	; (8000d18 <SysTick_Config+0x40>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d06:	4b04      	ldr	r3, [pc, #16]	; (8000d18 <SysTick_Config+0x40>)
 8000d08:	2207      	movs	r2, #7
 8000d0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d0c:	2300      	movs	r3, #0
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	e000e010 	.word	0xe000e010

08000d1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d24:	6878      	ldr	r0, [r7, #4]
 8000d26:	f7ff ff47 	bl	8000bb8 <__NVIC_SetPriorityGrouping>
}
 8000d2a:	bf00      	nop
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}

08000d32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d32:	b580      	push	{r7, lr}
 8000d34:	b086      	sub	sp, #24
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	4603      	mov	r3, r0
 8000d3a:	60b9      	str	r1, [r7, #8]
 8000d3c:	607a      	str	r2, [r7, #4]
 8000d3e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d40:	f7ff ff5e 	bl	8000c00 <__NVIC_GetPriorityGrouping>
 8000d44:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d46:	687a      	ldr	r2, [r7, #4]
 8000d48:	68b9      	ldr	r1, [r7, #8]
 8000d4a:	6978      	ldr	r0, [r7, #20]
 8000d4c:	f7ff ff90 	bl	8000c70 <NVIC_EncodePriority>
 8000d50:	4602      	mov	r2, r0
 8000d52:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d56:	4611      	mov	r1, r2
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff ff5f 	bl	8000c1c <__NVIC_SetPriority>
}
 8000d5e:	bf00      	nop
 8000d60:	3718      	adds	r7, #24
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d66:	b580      	push	{r7, lr}
 8000d68:	b082      	sub	sp, #8
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d6e:	6878      	ldr	r0, [r7, #4]
 8000d70:	f7ff ffb2 	bl	8000cd8 <SysTick_Config>
 8000d74:	4603      	mov	r3, r0
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
	...

08000d80 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b089      	sub	sp, #36	; 0x24
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000d8e:	4b89      	ldr	r3, [pc, #548]	; (8000fb4 <HAL_GPIO_Init+0x234>)
 8000d90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000d92:	e194      	b.n	80010be <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	2101      	movs	r1, #1
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000da0:	4013      	ands	r3, r2
 8000da2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000da4:	693b      	ldr	r3, [r7, #16]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	f000 8186 	beq.w	80010b8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	f003 0303 	and.w	r3, r3, #3
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d005      	beq.n	8000dc4 <HAL_GPIO_Init+0x44>
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	f003 0303 	and.w	r3, r3, #3
 8000dc0:	2b02      	cmp	r3, #2
 8000dc2:	d130      	bne.n	8000e26 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	689b      	ldr	r3, [r3, #8]
 8000dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	005b      	lsls	r3, r3, #1
 8000dce:	2203      	movs	r2, #3
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	43db      	mvns	r3, r3
 8000dd6:	69ba      	ldr	r2, [r7, #24]
 8000dd8:	4013      	ands	r3, r2
 8000dda:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	68da      	ldr	r2, [r3, #12]
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	69ba      	ldr	r2, [r7, #24]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	69ba      	ldr	r2, [r7, #24]
 8000df2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	69fb      	ldr	r3, [r7, #28]
 8000dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000e02:	43db      	mvns	r3, r3
 8000e04:	69ba      	ldr	r2, [r7, #24]
 8000e06:	4013      	ands	r3, r2
 8000e08:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	091b      	lsrs	r3, r3, #4
 8000e10:	f003 0201 	and.w	r2, r3, #1
 8000e14:	69fb      	ldr	r3, [r7, #28]
 8000e16:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1a:	69ba      	ldr	r2, [r7, #24]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	69ba      	ldr	r2, [r7, #24]
 8000e24:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	f003 0303 	and.w	r3, r3, #3
 8000e2e:	2b03      	cmp	r3, #3
 8000e30:	d017      	beq.n	8000e62 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	68db      	ldr	r3, [r3, #12]
 8000e36:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	005b      	lsls	r3, r3, #1
 8000e3c:	2203      	movs	r2, #3
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	43db      	mvns	r3, r3
 8000e44:	69ba      	ldr	r2, [r7, #24]
 8000e46:	4013      	ands	r3, r2
 8000e48:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	689a      	ldr	r2, [r3, #8]
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	fa02 f303 	lsl.w	r3, r2, r3
 8000e56:	69ba      	ldr	r2, [r7, #24]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	69ba      	ldr	r2, [r7, #24]
 8000e60:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	f003 0303 	and.w	r3, r3, #3
 8000e6a:	2b02      	cmp	r3, #2
 8000e6c:	d123      	bne.n	8000eb6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	08da      	lsrs	r2, r3, #3
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	3208      	adds	r2, #8
 8000e76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	f003 0307 	and.w	r3, r3, #7
 8000e82:	009b      	lsls	r3, r3, #2
 8000e84:	220f      	movs	r2, #15
 8000e86:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8a:	43db      	mvns	r3, r3
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	4013      	ands	r3, r2
 8000e90:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	691a      	ldr	r2, [r3, #16]
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	f003 0307 	and.w	r3, r3, #7
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	69ba      	ldr	r2, [r7, #24]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	08da      	lsrs	r2, r3, #3
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	3208      	adds	r2, #8
 8000eb0:	69b9      	ldr	r1, [r7, #24]
 8000eb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	2203      	movs	r2, #3
 8000ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec6:	43db      	mvns	r3, r3
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	4013      	ands	r3, r2
 8000ecc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	f003 0203 	and.w	r2, r3, #3
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	005b      	lsls	r3, r3, #1
 8000eda:	fa02 f303 	lsl.w	r3, r2, r3
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	f000 80e0 	beq.w	80010b8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ef8:	4b2f      	ldr	r3, [pc, #188]	; (8000fb8 <HAL_GPIO_Init+0x238>)
 8000efa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000efe:	4a2e      	ldr	r2, [pc, #184]	; (8000fb8 <HAL_GPIO_Init+0x238>)
 8000f00:	f043 0302 	orr.w	r3, r3, #2
 8000f04:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000f08:	4b2b      	ldr	r3, [pc, #172]	; (8000fb8 <HAL_GPIO_Init+0x238>)
 8000f0a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f0e:	f003 0302 	and.w	r3, r3, #2
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f16:	4a29      	ldr	r2, [pc, #164]	; (8000fbc <HAL_GPIO_Init+0x23c>)
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	089b      	lsrs	r3, r3, #2
 8000f1c:	3302      	adds	r3, #2
 8000f1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	f003 0303 	and.w	r3, r3, #3
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	220f      	movs	r2, #15
 8000f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f32:	43db      	mvns	r3, r3
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	4013      	ands	r3, r2
 8000f38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4a20      	ldr	r2, [pc, #128]	; (8000fc0 <HAL_GPIO_Init+0x240>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d052      	beq.n	8000fe8 <HAL_GPIO_Init+0x268>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4a1f      	ldr	r2, [pc, #124]	; (8000fc4 <HAL_GPIO_Init+0x244>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d031      	beq.n	8000fae <HAL_GPIO_Init+0x22e>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4a1e      	ldr	r2, [pc, #120]	; (8000fc8 <HAL_GPIO_Init+0x248>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d02b      	beq.n	8000faa <HAL_GPIO_Init+0x22a>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a1d      	ldr	r2, [pc, #116]	; (8000fcc <HAL_GPIO_Init+0x24c>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d025      	beq.n	8000fa6 <HAL_GPIO_Init+0x226>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a1c      	ldr	r2, [pc, #112]	; (8000fd0 <HAL_GPIO_Init+0x250>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d01f      	beq.n	8000fa2 <HAL_GPIO_Init+0x222>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a1b      	ldr	r2, [pc, #108]	; (8000fd4 <HAL_GPIO_Init+0x254>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d019      	beq.n	8000f9e <HAL_GPIO_Init+0x21e>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a1a      	ldr	r2, [pc, #104]	; (8000fd8 <HAL_GPIO_Init+0x258>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d013      	beq.n	8000f9a <HAL_GPIO_Init+0x21a>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a19      	ldr	r2, [pc, #100]	; (8000fdc <HAL_GPIO_Init+0x25c>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d00d      	beq.n	8000f96 <HAL_GPIO_Init+0x216>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a18      	ldr	r2, [pc, #96]	; (8000fe0 <HAL_GPIO_Init+0x260>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d007      	beq.n	8000f92 <HAL_GPIO_Init+0x212>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a17      	ldr	r2, [pc, #92]	; (8000fe4 <HAL_GPIO_Init+0x264>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d101      	bne.n	8000f8e <HAL_GPIO_Init+0x20e>
 8000f8a:	2309      	movs	r3, #9
 8000f8c:	e02d      	b.n	8000fea <HAL_GPIO_Init+0x26a>
 8000f8e:	230a      	movs	r3, #10
 8000f90:	e02b      	b.n	8000fea <HAL_GPIO_Init+0x26a>
 8000f92:	2308      	movs	r3, #8
 8000f94:	e029      	b.n	8000fea <HAL_GPIO_Init+0x26a>
 8000f96:	2307      	movs	r3, #7
 8000f98:	e027      	b.n	8000fea <HAL_GPIO_Init+0x26a>
 8000f9a:	2306      	movs	r3, #6
 8000f9c:	e025      	b.n	8000fea <HAL_GPIO_Init+0x26a>
 8000f9e:	2305      	movs	r3, #5
 8000fa0:	e023      	b.n	8000fea <HAL_GPIO_Init+0x26a>
 8000fa2:	2304      	movs	r3, #4
 8000fa4:	e021      	b.n	8000fea <HAL_GPIO_Init+0x26a>
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	e01f      	b.n	8000fea <HAL_GPIO_Init+0x26a>
 8000faa:	2302      	movs	r3, #2
 8000fac:	e01d      	b.n	8000fea <HAL_GPIO_Init+0x26a>
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e01b      	b.n	8000fea <HAL_GPIO_Init+0x26a>
 8000fb2:	bf00      	nop
 8000fb4:	58000080 	.word	0x58000080
 8000fb8:	58024400 	.word	0x58024400
 8000fbc:	58000400 	.word	0x58000400
 8000fc0:	58020000 	.word	0x58020000
 8000fc4:	58020400 	.word	0x58020400
 8000fc8:	58020800 	.word	0x58020800
 8000fcc:	58020c00 	.word	0x58020c00
 8000fd0:	58021000 	.word	0x58021000
 8000fd4:	58021400 	.word	0x58021400
 8000fd8:	58021800 	.word	0x58021800
 8000fdc:	58021c00 	.word	0x58021c00
 8000fe0:	58022000 	.word	0x58022000
 8000fe4:	58022400 	.word	0x58022400
 8000fe8:	2300      	movs	r3, #0
 8000fea:	69fa      	ldr	r2, [r7, #28]
 8000fec:	f002 0203 	and.w	r2, r2, #3
 8000ff0:	0092      	lsls	r2, r2, #2
 8000ff2:	4093      	lsls	r3, r2
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ffa:	4938      	ldr	r1, [pc, #224]	; (80010dc <HAL_GPIO_Init+0x35c>)
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	089b      	lsrs	r3, r3, #2
 8001000:	3302      	adds	r3, #2
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001008:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	43db      	mvns	r3, r3
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	4013      	ands	r3, r2
 8001018:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001022:	2b00      	cmp	r3, #0
 8001024:	d003      	beq.n	800102e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	4313      	orrs	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800102e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001032:	69bb      	ldr	r3, [r7, #24]
 8001034:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001036:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	43db      	mvns	r3, r3
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	4013      	ands	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001050:	2b00      	cmp	r3, #0
 8001052:	d003      	beq.n	800105c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	4313      	orrs	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800105c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001060:	69bb      	ldr	r3, [r7, #24]
 8001062:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	43db      	mvns	r3, r3
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	4013      	ands	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800107c:	2b00      	cmp	r3, #0
 800107e:	d003      	beq.n	8001088 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	4313      	orrs	r3, r2
 8001086:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	69ba      	ldr	r2, [r7, #24]
 800108c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	43db      	mvns	r3, r3
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	4013      	ands	r3, r2
 800109c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d003      	beq.n	80010b2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	4313      	orrs	r3, r2
 80010b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	3301      	adds	r3, #1
 80010bc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	fa22 f303 	lsr.w	r3, r2, r3
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	f47f ae63 	bne.w	8000d94 <HAL_GPIO_Init+0x14>
  }
}
 80010ce:	bf00      	nop
 80010d0:	bf00      	nop
 80010d2:	3724      	adds	r7, #36	; 0x24
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr
 80010dc:	58000400 	.word	0x58000400

080010e0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80010e8:	4b19      	ldr	r3, [pc, #100]	; (8001150 <HAL_PWREx_ConfigSupply+0x70>)
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	f003 0304 	and.w	r3, r3, #4
 80010f0:	2b04      	cmp	r3, #4
 80010f2:	d00a      	beq.n	800110a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80010f4:	4b16      	ldr	r3, [pc, #88]	; (8001150 <HAL_PWREx_ConfigSupply+0x70>)
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	f003 0307 	and.w	r3, r3, #7
 80010fc:	687a      	ldr	r2, [r7, #4]
 80010fe:	429a      	cmp	r2, r3
 8001100:	d001      	beq.n	8001106 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	e01f      	b.n	8001146 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001106:	2300      	movs	r3, #0
 8001108:	e01d      	b.n	8001146 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800110a:	4b11      	ldr	r3, [pc, #68]	; (8001150 <HAL_PWREx_ConfigSupply+0x70>)
 800110c:	68db      	ldr	r3, [r3, #12]
 800110e:	f023 0207 	bic.w	r2, r3, #7
 8001112:	490f      	ldr	r1, [pc, #60]	; (8001150 <HAL_PWREx_ConfigSupply+0x70>)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	4313      	orrs	r3, r2
 8001118:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800111a:	f7ff fd35 	bl	8000b88 <HAL_GetTick>
 800111e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001120:	e009      	b.n	8001136 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001122:	f7ff fd31 	bl	8000b88 <HAL_GetTick>
 8001126:	4602      	mov	r2, r0
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	1ad3      	subs	r3, r2, r3
 800112c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001130:	d901      	bls.n	8001136 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e007      	b.n	8001146 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001136:	4b06      	ldr	r3, [pc, #24]	; (8001150 <HAL_PWREx_ConfigSupply+0x70>)
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800113e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001142:	d1ee      	bne.n	8001122 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001144:	2300      	movs	r3, #0
}
 8001146:	4618      	mov	r0, r3
 8001148:	3710      	adds	r7, #16
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	58024800 	.word	0x58024800

08001154 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b08c      	sub	sp, #48	; 0x30
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d102      	bne.n	8001168 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	f000 bc1d 	b.w	80019a2 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f003 0301 	and.w	r3, r3, #1
 8001170:	2b00      	cmp	r3, #0
 8001172:	f000 8087 	beq.w	8001284 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001176:	4b99      	ldr	r3, [pc, #612]	; (80013dc <HAL_RCC_OscConfig+0x288>)
 8001178:	691b      	ldr	r3, [r3, #16]
 800117a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800117e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001180:	4b96      	ldr	r3, [pc, #600]	; (80013dc <HAL_RCC_OscConfig+0x288>)
 8001182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001184:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001188:	2b10      	cmp	r3, #16
 800118a:	d007      	beq.n	800119c <HAL_RCC_OscConfig+0x48>
 800118c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800118e:	2b18      	cmp	r3, #24
 8001190:	d110      	bne.n	80011b4 <HAL_RCC_OscConfig+0x60>
 8001192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001194:	f003 0303 	and.w	r3, r3, #3
 8001198:	2b02      	cmp	r3, #2
 800119a:	d10b      	bne.n	80011b4 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800119c:	4b8f      	ldr	r3, [pc, #572]	; (80013dc <HAL_RCC_OscConfig+0x288>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d06c      	beq.n	8001282 <HAL_RCC_OscConfig+0x12e>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d168      	bne.n	8001282 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80011b0:	2301      	movs	r3, #1
 80011b2:	e3f6      	b.n	80019a2 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011bc:	d106      	bne.n	80011cc <HAL_RCC_OscConfig+0x78>
 80011be:	4b87      	ldr	r3, [pc, #540]	; (80013dc <HAL_RCC_OscConfig+0x288>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a86      	ldr	r2, [pc, #536]	; (80013dc <HAL_RCC_OscConfig+0x288>)
 80011c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011c8:	6013      	str	r3, [r2, #0]
 80011ca:	e02e      	b.n	800122a <HAL_RCC_OscConfig+0xd6>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d10c      	bne.n	80011ee <HAL_RCC_OscConfig+0x9a>
 80011d4:	4b81      	ldr	r3, [pc, #516]	; (80013dc <HAL_RCC_OscConfig+0x288>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a80      	ldr	r2, [pc, #512]	; (80013dc <HAL_RCC_OscConfig+0x288>)
 80011da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011de:	6013      	str	r3, [r2, #0]
 80011e0:	4b7e      	ldr	r3, [pc, #504]	; (80013dc <HAL_RCC_OscConfig+0x288>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a7d      	ldr	r2, [pc, #500]	; (80013dc <HAL_RCC_OscConfig+0x288>)
 80011e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011ea:	6013      	str	r3, [r2, #0]
 80011ec:	e01d      	b.n	800122a <HAL_RCC_OscConfig+0xd6>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011f6:	d10c      	bne.n	8001212 <HAL_RCC_OscConfig+0xbe>
 80011f8:	4b78      	ldr	r3, [pc, #480]	; (80013dc <HAL_RCC_OscConfig+0x288>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a77      	ldr	r2, [pc, #476]	; (80013dc <HAL_RCC_OscConfig+0x288>)
 80011fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001202:	6013      	str	r3, [r2, #0]
 8001204:	4b75      	ldr	r3, [pc, #468]	; (80013dc <HAL_RCC_OscConfig+0x288>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a74      	ldr	r2, [pc, #464]	; (80013dc <HAL_RCC_OscConfig+0x288>)
 800120a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800120e:	6013      	str	r3, [r2, #0]
 8001210:	e00b      	b.n	800122a <HAL_RCC_OscConfig+0xd6>
 8001212:	4b72      	ldr	r3, [pc, #456]	; (80013dc <HAL_RCC_OscConfig+0x288>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a71      	ldr	r2, [pc, #452]	; (80013dc <HAL_RCC_OscConfig+0x288>)
 8001218:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800121c:	6013      	str	r3, [r2, #0]
 800121e:	4b6f      	ldr	r3, [pc, #444]	; (80013dc <HAL_RCC_OscConfig+0x288>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a6e      	ldr	r2, [pc, #440]	; (80013dc <HAL_RCC_OscConfig+0x288>)
 8001224:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001228:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d013      	beq.n	800125a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001232:	f7ff fca9 	bl	8000b88 <HAL_GetTick>
 8001236:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001238:	e008      	b.n	800124c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800123a:	f7ff fca5 	bl	8000b88 <HAL_GetTick>
 800123e:	4602      	mov	r2, r0
 8001240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001242:	1ad3      	subs	r3, r2, r3
 8001244:	2b64      	cmp	r3, #100	; 0x64
 8001246:	d901      	bls.n	800124c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001248:	2303      	movs	r3, #3
 800124a:	e3aa      	b.n	80019a2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800124c:	4b63      	ldr	r3, [pc, #396]	; (80013dc <HAL_RCC_OscConfig+0x288>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001254:	2b00      	cmp	r3, #0
 8001256:	d0f0      	beq.n	800123a <HAL_RCC_OscConfig+0xe6>
 8001258:	e014      	b.n	8001284 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800125a:	f7ff fc95 	bl	8000b88 <HAL_GetTick>
 800125e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001260:	e008      	b.n	8001274 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001262:	f7ff fc91 	bl	8000b88 <HAL_GetTick>
 8001266:	4602      	mov	r2, r0
 8001268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126a:	1ad3      	subs	r3, r2, r3
 800126c:	2b64      	cmp	r3, #100	; 0x64
 800126e:	d901      	bls.n	8001274 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8001270:	2303      	movs	r3, #3
 8001272:	e396      	b.n	80019a2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001274:	4b59      	ldr	r3, [pc, #356]	; (80013dc <HAL_RCC_OscConfig+0x288>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800127c:	2b00      	cmp	r3, #0
 800127e:	d1f0      	bne.n	8001262 <HAL_RCC_OscConfig+0x10e>
 8001280:	e000      	b.n	8001284 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001282:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f003 0302 	and.w	r3, r3, #2
 800128c:	2b00      	cmp	r3, #0
 800128e:	f000 80cb 	beq.w	8001428 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001292:	4b52      	ldr	r3, [pc, #328]	; (80013dc <HAL_RCC_OscConfig+0x288>)
 8001294:	691b      	ldr	r3, [r3, #16]
 8001296:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800129a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800129c:	4b4f      	ldr	r3, [pc, #316]	; (80013dc <HAL_RCC_OscConfig+0x288>)
 800129e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012a0:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80012a2:	6a3b      	ldr	r3, [r7, #32]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d007      	beq.n	80012b8 <HAL_RCC_OscConfig+0x164>
 80012a8:	6a3b      	ldr	r3, [r7, #32]
 80012aa:	2b18      	cmp	r3, #24
 80012ac:	d156      	bne.n	800135c <HAL_RCC_OscConfig+0x208>
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	f003 0303 	and.w	r3, r3, #3
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d151      	bne.n	800135c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012b8:	4b48      	ldr	r3, [pc, #288]	; (80013dc <HAL_RCC_OscConfig+0x288>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f003 0304 	and.w	r3, r3, #4
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d005      	beq.n	80012d0 <HAL_RCC_OscConfig+0x17c>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d101      	bne.n	80012d0 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80012cc:	2301      	movs	r3, #1
 80012ce:	e368      	b.n	80019a2 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80012d0:	4b42      	ldr	r3, [pc, #264]	; (80013dc <HAL_RCC_OscConfig+0x288>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f023 0219 	bic.w	r2, r3, #25
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	493f      	ldr	r1, [pc, #252]	; (80013dc <HAL_RCC_OscConfig+0x288>)
 80012de:	4313      	orrs	r3, r2
 80012e0:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80012e2:	f7ff fc51 	bl	8000b88 <HAL_GetTick>
 80012e6:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80012e8:	e008      	b.n	80012fc <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012ea:	f7ff fc4d 	bl	8000b88 <HAL_GetTick>
 80012ee:	4602      	mov	r2, r0
 80012f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f2:	1ad3      	subs	r3, r2, r3
 80012f4:	2b02      	cmp	r3, #2
 80012f6:	d901      	bls.n	80012fc <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80012f8:	2303      	movs	r3, #3
 80012fa:	e352      	b.n	80019a2 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80012fc:	4b37      	ldr	r3, [pc, #220]	; (80013dc <HAL_RCC_OscConfig+0x288>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f003 0304 	and.w	r3, r3, #4
 8001304:	2b00      	cmp	r3, #0
 8001306:	d0f0      	beq.n	80012ea <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001308:	f7ff fc4a 	bl	8000ba0 <HAL_GetREVID>
 800130c:	4603      	mov	r3, r0
 800130e:	f241 0203 	movw	r2, #4099	; 0x1003
 8001312:	4293      	cmp	r3, r2
 8001314:	d817      	bhi.n	8001346 <HAL_RCC_OscConfig+0x1f2>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	691b      	ldr	r3, [r3, #16]
 800131a:	2b40      	cmp	r3, #64	; 0x40
 800131c:	d108      	bne.n	8001330 <HAL_RCC_OscConfig+0x1dc>
 800131e:	4b2f      	ldr	r3, [pc, #188]	; (80013dc <HAL_RCC_OscConfig+0x288>)
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001326:	4a2d      	ldr	r2, [pc, #180]	; (80013dc <HAL_RCC_OscConfig+0x288>)
 8001328:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800132c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800132e:	e07b      	b.n	8001428 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001330:	4b2a      	ldr	r3, [pc, #168]	; (80013dc <HAL_RCC_OscConfig+0x288>)
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	691b      	ldr	r3, [r3, #16]
 800133c:	031b      	lsls	r3, r3, #12
 800133e:	4927      	ldr	r1, [pc, #156]	; (80013dc <HAL_RCC_OscConfig+0x288>)
 8001340:	4313      	orrs	r3, r2
 8001342:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001344:	e070      	b.n	8001428 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001346:	4b25      	ldr	r3, [pc, #148]	; (80013dc <HAL_RCC_OscConfig+0x288>)
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	691b      	ldr	r3, [r3, #16]
 8001352:	061b      	lsls	r3, r3, #24
 8001354:	4921      	ldr	r1, [pc, #132]	; (80013dc <HAL_RCC_OscConfig+0x288>)
 8001356:	4313      	orrs	r3, r2
 8001358:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800135a:	e065      	b.n	8001428 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d048      	beq.n	80013f6 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001364:	4b1d      	ldr	r3, [pc, #116]	; (80013dc <HAL_RCC_OscConfig+0x288>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f023 0219 	bic.w	r2, r3, #25
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	491a      	ldr	r1, [pc, #104]	; (80013dc <HAL_RCC_OscConfig+0x288>)
 8001372:	4313      	orrs	r3, r2
 8001374:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001376:	f7ff fc07 	bl	8000b88 <HAL_GetTick>
 800137a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800137c:	e008      	b.n	8001390 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800137e:	f7ff fc03 	bl	8000b88 <HAL_GetTick>
 8001382:	4602      	mov	r2, r0
 8001384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001386:	1ad3      	subs	r3, r2, r3
 8001388:	2b02      	cmp	r3, #2
 800138a:	d901      	bls.n	8001390 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 800138c:	2303      	movs	r3, #3
 800138e:	e308      	b.n	80019a2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001390:	4b12      	ldr	r3, [pc, #72]	; (80013dc <HAL_RCC_OscConfig+0x288>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 0304 	and.w	r3, r3, #4
 8001398:	2b00      	cmp	r3, #0
 800139a:	d0f0      	beq.n	800137e <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800139c:	f7ff fc00 	bl	8000ba0 <HAL_GetREVID>
 80013a0:	4603      	mov	r3, r0
 80013a2:	f241 0203 	movw	r2, #4099	; 0x1003
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d81a      	bhi.n	80013e0 <HAL_RCC_OscConfig+0x28c>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	691b      	ldr	r3, [r3, #16]
 80013ae:	2b40      	cmp	r3, #64	; 0x40
 80013b0:	d108      	bne.n	80013c4 <HAL_RCC_OscConfig+0x270>
 80013b2:	4b0a      	ldr	r3, [pc, #40]	; (80013dc <HAL_RCC_OscConfig+0x288>)
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80013ba:	4a08      	ldr	r2, [pc, #32]	; (80013dc <HAL_RCC_OscConfig+0x288>)
 80013bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013c0:	6053      	str	r3, [r2, #4]
 80013c2:	e031      	b.n	8001428 <HAL_RCC_OscConfig+0x2d4>
 80013c4:	4b05      	ldr	r3, [pc, #20]	; (80013dc <HAL_RCC_OscConfig+0x288>)
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	691b      	ldr	r3, [r3, #16]
 80013d0:	031b      	lsls	r3, r3, #12
 80013d2:	4902      	ldr	r1, [pc, #8]	; (80013dc <HAL_RCC_OscConfig+0x288>)
 80013d4:	4313      	orrs	r3, r2
 80013d6:	604b      	str	r3, [r1, #4]
 80013d8:	e026      	b.n	8001428 <HAL_RCC_OscConfig+0x2d4>
 80013da:	bf00      	nop
 80013dc:	58024400 	.word	0x58024400
 80013e0:	4b9a      	ldr	r3, [pc, #616]	; (800164c <HAL_RCC_OscConfig+0x4f8>)
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	691b      	ldr	r3, [r3, #16]
 80013ec:	061b      	lsls	r3, r3, #24
 80013ee:	4997      	ldr	r1, [pc, #604]	; (800164c <HAL_RCC_OscConfig+0x4f8>)
 80013f0:	4313      	orrs	r3, r2
 80013f2:	604b      	str	r3, [r1, #4]
 80013f4:	e018      	b.n	8001428 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013f6:	4b95      	ldr	r3, [pc, #596]	; (800164c <HAL_RCC_OscConfig+0x4f8>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a94      	ldr	r2, [pc, #592]	; (800164c <HAL_RCC_OscConfig+0x4f8>)
 80013fc:	f023 0301 	bic.w	r3, r3, #1
 8001400:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001402:	f7ff fbc1 	bl	8000b88 <HAL_GetTick>
 8001406:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001408:	e008      	b.n	800141c <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800140a:	f7ff fbbd 	bl	8000b88 <HAL_GetTick>
 800140e:	4602      	mov	r2, r0
 8001410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	2b02      	cmp	r3, #2
 8001416:	d901      	bls.n	800141c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001418:	2303      	movs	r3, #3
 800141a:	e2c2      	b.n	80019a2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800141c:	4b8b      	ldr	r3, [pc, #556]	; (800164c <HAL_RCC_OscConfig+0x4f8>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 0304 	and.w	r3, r3, #4
 8001424:	2b00      	cmp	r3, #0
 8001426:	d1f0      	bne.n	800140a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 0310 	and.w	r3, r3, #16
 8001430:	2b00      	cmp	r3, #0
 8001432:	f000 80a9 	beq.w	8001588 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001436:	4b85      	ldr	r3, [pc, #532]	; (800164c <HAL_RCC_OscConfig+0x4f8>)
 8001438:	691b      	ldr	r3, [r3, #16]
 800143a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800143e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001440:	4b82      	ldr	r3, [pc, #520]	; (800164c <HAL_RCC_OscConfig+0x4f8>)
 8001442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001444:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001446:	69bb      	ldr	r3, [r7, #24]
 8001448:	2b08      	cmp	r3, #8
 800144a:	d007      	beq.n	800145c <HAL_RCC_OscConfig+0x308>
 800144c:	69bb      	ldr	r3, [r7, #24]
 800144e:	2b18      	cmp	r3, #24
 8001450:	d13a      	bne.n	80014c8 <HAL_RCC_OscConfig+0x374>
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	f003 0303 	and.w	r3, r3, #3
 8001458:	2b01      	cmp	r3, #1
 800145a:	d135      	bne.n	80014c8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800145c:	4b7b      	ldr	r3, [pc, #492]	; (800164c <HAL_RCC_OscConfig+0x4f8>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001464:	2b00      	cmp	r3, #0
 8001466:	d005      	beq.n	8001474 <HAL_RCC_OscConfig+0x320>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	69db      	ldr	r3, [r3, #28]
 800146c:	2b80      	cmp	r3, #128	; 0x80
 800146e:	d001      	beq.n	8001474 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	e296      	b.n	80019a2 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001474:	f7ff fb94 	bl	8000ba0 <HAL_GetREVID>
 8001478:	4603      	mov	r3, r0
 800147a:	f241 0203 	movw	r2, #4099	; 0x1003
 800147e:	4293      	cmp	r3, r2
 8001480:	d817      	bhi.n	80014b2 <HAL_RCC_OscConfig+0x35e>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6a1b      	ldr	r3, [r3, #32]
 8001486:	2b20      	cmp	r3, #32
 8001488:	d108      	bne.n	800149c <HAL_RCC_OscConfig+0x348>
 800148a:	4b70      	ldr	r3, [pc, #448]	; (800164c <HAL_RCC_OscConfig+0x4f8>)
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001492:	4a6e      	ldr	r2, [pc, #440]	; (800164c <HAL_RCC_OscConfig+0x4f8>)
 8001494:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001498:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800149a:	e075      	b.n	8001588 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800149c:	4b6b      	ldr	r3, [pc, #428]	; (800164c <HAL_RCC_OscConfig+0x4f8>)
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6a1b      	ldr	r3, [r3, #32]
 80014a8:	069b      	lsls	r3, r3, #26
 80014aa:	4968      	ldr	r1, [pc, #416]	; (800164c <HAL_RCC_OscConfig+0x4f8>)
 80014ac:	4313      	orrs	r3, r2
 80014ae:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80014b0:	e06a      	b.n	8001588 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80014b2:	4b66      	ldr	r3, [pc, #408]	; (800164c <HAL_RCC_OscConfig+0x4f8>)
 80014b4:	68db      	ldr	r3, [r3, #12]
 80014b6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6a1b      	ldr	r3, [r3, #32]
 80014be:	061b      	lsls	r3, r3, #24
 80014c0:	4962      	ldr	r1, [pc, #392]	; (800164c <HAL_RCC_OscConfig+0x4f8>)
 80014c2:	4313      	orrs	r3, r2
 80014c4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80014c6:	e05f      	b.n	8001588 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	69db      	ldr	r3, [r3, #28]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d042      	beq.n	8001556 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80014d0:	4b5e      	ldr	r3, [pc, #376]	; (800164c <HAL_RCC_OscConfig+0x4f8>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a5d      	ldr	r2, [pc, #372]	; (800164c <HAL_RCC_OscConfig+0x4f8>)
 80014d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014dc:	f7ff fb54 	bl	8000b88 <HAL_GetTick>
 80014e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80014e2:	e008      	b.n	80014f6 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80014e4:	f7ff fb50 	bl	8000b88 <HAL_GetTick>
 80014e8:	4602      	mov	r2, r0
 80014ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d901      	bls.n	80014f6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e255      	b.n	80019a2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80014f6:	4b55      	ldr	r3, [pc, #340]	; (800164c <HAL_RCC_OscConfig+0x4f8>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d0f0      	beq.n	80014e4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001502:	f7ff fb4d 	bl	8000ba0 <HAL_GetREVID>
 8001506:	4603      	mov	r3, r0
 8001508:	f241 0203 	movw	r2, #4099	; 0x1003
 800150c:	4293      	cmp	r3, r2
 800150e:	d817      	bhi.n	8001540 <HAL_RCC_OscConfig+0x3ec>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6a1b      	ldr	r3, [r3, #32]
 8001514:	2b20      	cmp	r3, #32
 8001516:	d108      	bne.n	800152a <HAL_RCC_OscConfig+0x3d6>
 8001518:	4b4c      	ldr	r3, [pc, #304]	; (800164c <HAL_RCC_OscConfig+0x4f8>)
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001520:	4a4a      	ldr	r2, [pc, #296]	; (800164c <HAL_RCC_OscConfig+0x4f8>)
 8001522:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001526:	6053      	str	r3, [r2, #4]
 8001528:	e02e      	b.n	8001588 <HAL_RCC_OscConfig+0x434>
 800152a:	4b48      	ldr	r3, [pc, #288]	; (800164c <HAL_RCC_OscConfig+0x4f8>)
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6a1b      	ldr	r3, [r3, #32]
 8001536:	069b      	lsls	r3, r3, #26
 8001538:	4944      	ldr	r1, [pc, #272]	; (800164c <HAL_RCC_OscConfig+0x4f8>)
 800153a:	4313      	orrs	r3, r2
 800153c:	604b      	str	r3, [r1, #4]
 800153e:	e023      	b.n	8001588 <HAL_RCC_OscConfig+0x434>
 8001540:	4b42      	ldr	r3, [pc, #264]	; (800164c <HAL_RCC_OscConfig+0x4f8>)
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6a1b      	ldr	r3, [r3, #32]
 800154c:	061b      	lsls	r3, r3, #24
 800154e:	493f      	ldr	r1, [pc, #252]	; (800164c <HAL_RCC_OscConfig+0x4f8>)
 8001550:	4313      	orrs	r3, r2
 8001552:	60cb      	str	r3, [r1, #12]
 8001554:	e018      	b.n	8001588 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001556:	4b3d      	ldr	r3, [pc, #244]	; (800164c <HAL_RCC_OscConfig+0x4f8>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a3c      	ldr	r2, [pc, #240]	; (800164c <HAL_RCC_OscConfig+0x4f8>)
 800155c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001560:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001562:	f7ff fb11 	bl	8000b88 <HAL_GetTick>
 8001566:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001568:	e008      	b.n	800157c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800156a:	f7ff fb0d 	bl	8000b88 <HAL_GetTick>
 800156e:	4602      	mov	r2, r0
 8001570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	2b02      	cmp	r3, #2
 8001576:	d901      	bls.n	800157c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001578:	2303      	movs	r3, #3
 800157a:	e212      	b.n	80019a2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800157c:	4b33      	ldr	r3, [pc, #204]	; (800164c <HAL_RCC_OscConfig+0x4f8>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001584:	2b00      	cmp	r3, #0
 8001586:	d1f0      	bne.n	800156a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 0308 	and.w	r3, r3, #8
 8001590:	2b00      	cmp	r3, #0
 8001592:	d036      	beq.n	8001602 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	695b      	ldr	r3, [r3, #20]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d019      	beq.n	80015d0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800159c:	4b2b      	ldr	r3, [pc, #172]	; (800164c <HAL_RCC_OscConfig+0x4f8>)
 800159e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015a0:	4a2a      	ldr	r2, [pc, #168]	; (800164c <HAL_RCC_OscConfig+0x4f8>)
 80015a2:	f043 0301 	orr.w	r3, r3, #1
 80015a6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015a8:	f7ff faee 	bl	8000b88 <HAL_GetTick>
 80015ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80015ae:	e008      	b.n	80015c2 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015b0:	f7ff faea 	bl	8000b88 <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d901      	bls.n	80015c2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e1ef      	b.n	80019a2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80015c2:	4b22      	ldr	r3, [pc, #136]	; (800164c <HAL_RCC_OscConfig+0x4f8>)
 80015c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d0f0      	beq.n	80015b0 <HAL_RCC_OscConfig+0x45c>
 80015ce:	e018      	b.n	8001602 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015d0:	4b1e      	ldr	r3, [pc, #120]	; (800164c <HAL_RCC_OscConfig+0x4f8>)
 80015d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015d4:	4a1d      	ldr	r2, [pc, #116]	; (800164c <HAL_RCC_OscConfig+0x4f8>)
 80015d6:	f023 0301 	bic.w	r3, r3, #1
 80015da:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015dc:	f7ff fad4 	bl	8000b88 <HAL_GetTick>
 80015e0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80015e2:	e008      	b.n	80015f6 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015e4:	f7ff fad0 	bl	8000b88 <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e1d5      	b.n	80019a2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80015f6:	4b15      	ldr	r3, [pc, #84]	; (800164c <HAL_RCC_OscConfig+0x4f8>)
 80015f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015fa:	f003 0302 	and.w	r3, r3, #2
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d1f0      	bne.n	80015e4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0320 	and.w	r3, r3, #32
 800160a:	2b00      	cmp	r3, #0
 800160c:	d039      	beq.n	8001682 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	699b      	ldr	r3, [r3, #24]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d01c      	beq.n	8001650 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001616:	4b0d      	ldr	r3, [pc, #52]	; (800164c <HAL_RCC_OscConfig+0x4f8>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a0c      	ldr	r2, [pc, #48]	; (800164c <HAL_RCC_OscConfig+0x4f8>)
 800161c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001620:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001622:	f7ff fab1 	bl	8000b88 <HAL_GetTick>
 8001626:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001628:	e008      	b.n	800163c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800162a:	f7ff faad 	bl	8000b88 <HAL_GetTick>
 800162e:	4602      	mov	r2, r0
 8001630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	2b02      	cmp	r3, #2
 8001636:	d901      	bls.n	800163c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001638:	2303      	movs	r3, #3
 800163a:	e1b2      	b.n	80019a2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800163c:	4b03      	ldr	r3, [pc, #12]	; (800164c <HAL_RCC_OscConfig+0x4f8>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001644:	2b00      	cmp	r3, #0
 8001646:	d0f0      	beq.n	800162a <HAL_RCC_OscConfig+0x4d6>
 8001648:	e01b      	b.n	8001682 <HAL_RCC_OscConfig+0x52e>
 800164a:	bf00      	nop
 800164c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001650:	4b9b      	ldr	r3, [pc, #620]	; (80018c0 <HAL_RCC_OscConfig+0x76c>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a9a      	ldr	r2, [pc, #616]	; (80018c0 <HAL_RCC_OscConfig+0x76c>)
 8001656:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800165a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800165c:	f7ff fa94 	bl	8000b88 <HAL_GetTick>
 8001660:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001662:	e008      	b.n	8001676 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001664:	f7ff fa90 	bl	8000b88 <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	2b02      	cmp	r3, #2
 8001670:	d901      	bls.n	8001676 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e195      	b.n	80019a2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001676:	4b92      	ldr	r3, [pc, #584]	; (80018c0 <HAL_RCC_OscConfig+0x76c>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d1f0      	bne.n	8001664 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0304 	and.w	r3, r3, #4
 800168a:	2b00      	cmp	r3, #0
 800168c:	f000 8081 	beq.w	8001792 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001690:	4b8c      	ldr	r3, [pc, #560]	; (80018c4 <HAL_RCC_OscConfig+0x770>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a8b      	ldr	r2, [pc, #556]	; (80018c4 <HAL_RCC_OscConfig+0x770>)
 8001696:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800169a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800169c:	f7ff fa74 	bl	8000b88 <HAL_GetTick>
 80016a0:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80016a2:	e008      	b.n	80016b6 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80016a4:	f7ff fa70 	bl	8000b88 <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	2b64      	cmp	r3, #100	; 0x64
 80016b0:	d901      	bls.n	80016b6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e175      	b.n	80019a2 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80016b6:	4b83      	ldr	r3, [pc, #524]	; (80018c4 <HAL_RCC_OscConfig+0x770>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d0f0      	beq.n	80016a4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d106      	bne.n	80016d8 <HAL_RCC_OscConfig+0x584>
 80016ca:	4b7d      	ldr	r3, [pc, #500]	; (80018c0 <HAL_RCC_OscConfig+0x76c>)
 80016cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ce:	4a7c      	ldr	r2, [pc, #496]	; (80018c0 <HAL_RCC_OscConfig+0x76c>)
 80016d0:	f043 0301 	orr.w	r3, r3, #1
 80016d4:	6713      	str	r3, [r2, #112]	; 0x70
 80016d6:	e02d      	b.n	8001734 <HAL_RCC_OscConfig+0x5e0>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d10c      	bne.n	80016fa <HAL_RCC_OscConfig+0x5a6>
 80016e0:	4b77      	ldr	r3, [pc, #476]	; (80018c0 <HAL_RCC_OscConfig+0x76c>)
 80016e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016e4:	4a76      	ldr	r2, [pc, #472]	; (80018c0 <HAL_RCC_OscConfig+0x76c>)
 80016e6:	f023 0301 	bic.w	r3, r3, #1
 80016ea:	6713      	str	r3, [r2, #112]	; 0x70
 80016ec:	4b74      	ldr	r3, [pc, #464]	; (80018c0 <HAL_RCC_OscConfig+0x76c>)
 80016ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016f0:	4a73      	ldr	r2, [pc, #460]	; (80018c0 <HAL_RCC_OscConfig+0x76c>)
 80016f2:	f023 0304 	bic.w	r3, r3, #4
 80016f6:	6713      	str	r3, [r2, #112]	; 0x70
 80016f8:	e01c      	b.n	8001734 <HAL_RCC_OscConfig+0x5e0>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	2b05      	cmp	r3, #5
 8001700:	d10c      	bne.n	800171c <HAL_RCC_OscConfig+0x5c8>
 8001702:	4b6f      	ldr	r3, [pc, #444]	; (80018c0 <HAL_RCC_OscConfig+0x76c>)
 8001704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001706:	4a6e      	ldr	r2, [pc, #440]	; (80018c0 <HAL_RCC_OscConfig+0x76c>)
 8001708:	f043 0304 	orr.w	r3, r3, #4
 800170c:	6713      	str	r3, [r2, #112]	; 0x70
 800170e:	4b6c      	ldr	r3, [pc, #432]	; (80018c0 <HAL_RCC_OscConfig+0x76c>)
 8001710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001712:	4a6b      	ldr	r2, [pc, #428]	; (80018c0 <HAL_RCC_OscConfig+0x76c>)
 8001714:	f043 0301 	orr.w	r3, r3, #1
 8001718:	6713      	str	r3, [r2, #112]	; 0x70
 800171a:	e00b      	b.n	8001734 <HAL_RCC_OscConfig+0x5e0>
 800171c:	4b68      	ldr	r3, [pc, #416]	; (80018c0 <HAL_RCC_OscConfig+0x76c>)
 800171e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001720:	4a67      	ldr	r2, [pc, #412]	; (80018c0 <HAL_RCC_OscConfig+0x76c>)
 8001722:	f023 0301 	bic.w	r3, r3, #1
 8001726:	6713      	str	r3, [r2, #112]	; 0x70
 8001728:	4b65      	ldr	r3, [pc, #404]	; (80018c0 <HAL_RCC_OscConfig+0x76c>)
 800172a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800172c:	4a64      	ldr	r2, [pc, #400]	; (80018c0 <HAL_RCC_OscConfig+0x76c>)
 800172e:	f023 0304 	bic.w	r3, r3, #4
 8001732:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d015      	beq.n	8001768 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800173c:	f7ff fa24 	bl	8000b88 <HAL_GetTick>
 8001740:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001742:	e00a      	b.n	800175a <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001744:	f7ff fa20 	bl	8000b88 <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001752:	4293      	cmp	r3, r2
 8001754:	d901      	bls.n	800175a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	e123      	b.n	80019a2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800175a:	4b59      	ldr	r3, [pc, #356]	; (80018c0 <HAL_RCC_OscConfig+0x76c>)
 800175c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800175e:	f003 0302 	and.w	r3, r3, #2
 8001762:	2b00      	cmp	r3, #0
 8001764:	d0ee      	beq.n	8001744 <HAL_RCC_OscConfig+0x5f0>
 8001766:	e014      	b.n	8001792 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001768:	f7ff fa0e 	bl	8000b88 <HAL_GetTick>
 800176c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800176e:	e00a      	b.n	8001786 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001770:	f7ff fa0a 	bl	8000b88 <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	f241 3288 	movw	r2, #5000	; 0x1388
 800177e:	4293      	cmp	r3, r2
 8001780:	d901      	bls.n	8001786 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e10d      	b.n	80019a2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001786:	4b4e      	ldr	r3, [pc, #312]	; (80018c0 <HAL_RCC_OscConfig+0x76c>)
 8001788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	2b00      	cmp	r3, #0
 8001790:	d1ee      	bne.n	8001770 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001796:	2b00      	cmp	r3, #0
 8001798:	f000 8102 	beq.w	80019a0 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800179c:	4b48      	ldr	r3, [pc, #288]	; (80018c0 <HAL_RCC_OscConfig+0x76c>)
 800179e:	691b      	ldr	r3, [r3, #16]
 80017a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80017a4:	2b18      	cmp	r3, #24
 80017a6:	f000 80bd 	beq.w	8001924 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	f040 809e 	bne.w	80018f0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017b4:	4b42      	ldr	r3, [pc, #264]	; (80018c0 <HAL_RCC_OscConfig+0x76c>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a41      	ldr	r2, [pc, #260]	; (80018c0 <HAL_RCC_OscConfig+0x76c>)
 80017ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c0:	f7ff f9e2 	bl	8000b88 <HAL_GetTick>
 80017c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80017c6:	e008      	b.n	80017da <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017c8:	f7ff f9de 	bl	8000b88 <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d901      	bls.n	80017da <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e0e3      	b.n	80019a2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80017da:	4b39      	ldr	r3, [pc, #228]	; (80018c0 <HAL_RCC_OscConfig+0x76c>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d1f0      	bne.n	80017c8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017e6:	4b36      	ldr	r3, [pc, #216]	; (80018c0 <HAL_RCC_OscConfig+0x76c>)
 80017e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017ea:	4b37      	ldr	r3, [pc, #220]	; (80018c8 <HAL_RCC_OscConfig+0x774>)
 80017ec:	4013      	ands	r3, r2
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80017f6:	0112      	lsls	r2, r2, #4
 80017f8:	430a      	orrs	r2, r1
 80017fa:	4931      	ldr	r1, [pc, #196]	; (80018c0 <HAL_RCC_OscConfig+0x76c>)
 80017fc:	4313      	orrs	r3, r2
 80017fe:	628b      	str	r3, [r1, #40]	; 0x28
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001804:	3b01      	subs	r3, #1
 8001806:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800180e:	3b01      	subs	r3, #1
 8001810:	025b      	lsls	r3, r3, #9
 8001812:	b29b      	uxth	r3, r3
 8001814:	431a      	orrs	r2, r3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800181a:	3b01      	subs	r3, #1
 800181c:	041b      	lsls	r3, r3, #16
 800181e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001822:	431a      	orrs	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001828:	3b01      	subs	r3, #1
 800182a:	061b      	lsls	r3, r3, #24
 800182c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001830:	4923      	ldr	r1, [pc, #140]	; (80018c0 <HAL_RCC_OscConfig+0x76c>)
 8001832:	4313      	orrs	r3, r2
 8001834:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001836:	4b22      	ldr	r3, [pc, #136]	; (80018c0 <HAL_RCC_OscConfig+0x76c>)
 8001838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800183a:	4a21      	ldr	r2, [pc, #132]	; (80018c0 <HAL_RCC_OscConfig+0x76c>)
 800183c:	f023 0301 	bic.w	r3, r3, #1
 8001840:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001842:	4b1f      	ldr	r3, [pc, #124]	; (80018c0 <HAL_RCC_OscConfig+0x76c>)
 8001844:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001846:	4b21      	ldr	r3, [pc, #132]	; (80018cc <HAL_RCC_OscConfig+0x778>)
 8001848:	4013      	ands	r3, r2
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800184e:	00d2      	lsls	r2, r2, #3
 8001850:	491b      	ldr	r1, [pc, #108]	; (80018c0 <HAL_RCC_OscConfig+0x76c>)
 8001852:	4313      	orrs	r3, r2
 8001854:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001856:	4b1a      	ldr	r3, [pc, #104]	; (80018c0 <HAL_RCC_OscConfig+0x76c>)
 8001858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800185a:	f023 020c 	bic.w	r2, r3, #12
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001862:	4917      	ldr	r1, [pc, #92]	; (80018c0 <HAL_RCC_OscConfig+0x76c>)
 8001864:	4313      	orrs	r3, r2
 8001866:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001868:	4b15      	ldr	r3, [pc, #84]	; (80018c0 <HAL_RCC_OscConfig+0x76c>)
 800186a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800186c:	f023 0202 	bic.w	r2, r3, #2
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001874:	4912      	ldr	r1, [pc, #72]	; (80018c0 <HAL_RCC_OscConfig+0x76c>)
 8001876:	4313      	orrs	r3, r2
 8001878:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800187a:	4b11      	ldr	r3, [pc, #68]	; (80018c0 <HAL_RCC_OscConfig+0x76c>)
 800187c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800187e:	4a10      	ldr	r2, [pc, #64]	; (80018c0 <HAL_RCC_OscConfig+0x76c>)
 8001880:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001884:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001886:	4b0e      	ldr	r3, [pc, #56]	; (80018c0 <HAL_RCC_OscConfig+0x76c>)
 8001888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800188a:	4a0d      	ldr	r2, [pc, #52]	; (80018c0 <HAL_RCC_OscConfig+0x76c>)
 800188c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001890:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001892:	4b0b      	ldr	r3, [pc, #44]	; (80018c0 <HAL_RCC_OscConfig+0x76c>)
 8001894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001896:	4a0a      	ldr	r2, [pc, #40]	; (80018c0 <HAL_RCC_OscConfig+0x76c>)
 8001898:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800189c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800189e:	4b08      	ldr	r3, [pc, #32]	; (80018c0 <HAL_RCC_OscConfig+0x76c>)
 80018a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a2:	4a07      	ldr	r2, [pc, #28]	; (80018c0 <HAL_RCC_OscConfig+0x76c>)
 80018a4:	f043 0301 	orr.w	r3, r3, #1
 80018a8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018aa:	4b05      	ldr	r3, [pc, #20]	; (80018c0 <HAL_RCC_OscConfig+0x76c>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a04      	ldr	r2, [pc, #16]	; (80018c0 <HAL_RCC_OscConfig+0x76c>)
 80018b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b6:	f7ff f967 	bl	8000b88 <HAL_GetTick>
 80018ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80018bc:	e011      	b.n	80018e2 <HAL_RCC_OscConfig+0x78e>
 80018be:	bf00      	nop
 80018c0:	58024400 	.word	0x58024400
 80018c4:	58024800 	.word	0x58024800
 80018c8:	fffffc0c 	.word	0xfffffc0c
 80018cc:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018d0:	f7ff f95a 	bl	8000b88 <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e05f      	b.n	80019a2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80018e2:	4b32      	ldr	r3, [pc, #200]	; (80019ac <HAL_RCC_OscConfig+0x858>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d0f0      	beq.n	80018d0 <HAL_RCC_OscConfig+0x77c>
 80018ee:	e057      	b.n	80019a0 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018f0:	4b2e      	ldr	r3, [pc, #184]	; (80019ac <HAL_RCC_OscConfig+0x858>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a2d      	ldr	r2, [pc, #180]	; (80019ac <HAL_RCC_OscConfig+0x858>)
 80018f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018fc:	f7ff f944 	bl	8000b88 <HAL_GetTick>
 8001900:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001902:	e008      	b.n	8001916 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001904:	f7ff f940 	bl	8000b88 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b02      	cmp	r3, #2
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e045      	b.n	80019a2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001916:	4b25      	ldr	r3, [pc, #148]	; (80019ac <HAL_RCC_OscConfig+0x858>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d1f0      	bne.n	8001904 <HAL_RCC_OscConfig+0x7b0>
 8001922:	e03d      	b.n	80019a0 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001924:	4b21      	ldr	r3, [pc, #132]	; (80019ac <HAL_RCC_OscConfig+0x858>)
 8001926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001928:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800192a:	4b20      	ldr	r3, [pc, #128]	; (80019ac <HAL_RCC_OscConfig+0x858>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001934:	2b01      	cmp	r3, #1
 8001936:	d031      	beq.n	800199c <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	f003 0203 	and.w	r2, r3, #3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001942:	429a      	cmp	r2, r3
 8001944:	d12a      	bne.n	800199c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	091b      	lsrs	r3, r3, #4
 800194a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001952:	429a      	cmp	r2, r3
 8001954:	d122      	bne.n	800199c <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001960:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001962:	429a      	cmp	r2, r3
 8001964:	d11a      	bne.n	800199c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	0a5b      	lsrs	r3, r3, #9
 800196a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001972:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001974:	429a      	cmp	r2, r3
 8001976:	d111      	bne.n	800199c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	0c1b      	lsrs	r3, r3, #16
 800197c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001984:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001986:	429a      	cmp	r2, r3
 8001988:	d108      	bne.n	800199c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	0e1b      	lsrs	r3, r3, #24
 800198e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001996:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001998:	429a      	cmp	r2, r3
 800199a:	d001      	beq.n	80019a0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e000      	b.n	80019a2 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 80019a0:	2300      	movs	r3, #0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3730      	adds	r7, #48	; 0x30
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	58024400 	.word	0x58024400

080019b0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b086      	sub	sp, #24
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d101      	bne.n	80019c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e19c      	b.n	8001cfe <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019c4:	4b8a      	ldr	r3, [pc, #552]	; (8001bf0 <HAL_RCC_ClockConfig+0x240>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 030f 	and.w	r3, r3, #15
 80019cc:	683a      	ldr	r2, [r7, #0]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d910      	bls.n	80019f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019d2:	4b87      	ldr	r3, [pc, #540]	; (8001bf0 <HAL_RCC_ClockConfig+0x240>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f023 020f 	bic.w	r2, r3, #15
 80019da:	4985      	ldr	r1, [pc, #532]	; (8001bf0 <HAL_RCC_ClockConfig+0x240>)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	4313      	orrs	r3, r2
 80019e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019e2:	4b83      	ldr	r3, [pc, #524]	; (8001bf0 <HAL_RCC_ClockConfig+0x240>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 030f 	and.w	r3, r3, #15
 80019ea:	683a      	ldr	r2, [r7, #0]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d001      	beq.n	80019f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e184      	b.n	8001cfe <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0304 	and.w	r3, r3, #4
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d010      	beq.n	8001a22 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	691a      	ldr	r2, [r3, #16]
 8001a04:	4b7b      	ldr	r3, [pc, #492]	; (8001bf4 <HAL_RCC_ClockConfig+0x244>)
 8001a06:	699b      	ldr	r3, [r3, #24]
 8001a08:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d908      	bls.n	8001a22 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001a10:	4b78      	ldr	r3, [pc, #480]	; (8001bf4 <HAL_RCC_ClockConfig+0x244>)
 8001a12:	699b      	ldr	r3, [r3, #24]
 8001a14:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	691b      	ldr	r3, [r3, #16]
 8001a1c:	4975      	ldr	r1, [pc, #468]	; (8001bf4 <HAL_RCC_ClockConfig+0x244>)
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0308 	and.w	r3, r3, #8
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d010      	beq.n	8001a50 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	695a      	ldr	r2, [r3, #20]
 8001a32:	4b70      	ldr	r3, [pc, #448]	; (8001bf4 <HAL_RCC_ClockConfig+0x244>)
 8001a34:	69db      	ldr	r3, [r3, #28]
 8001a36:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d908      	bls.n	8001a50 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001a3e:	4b6d      	ldr	r3, [pc, #436]	; (8001bf4 <HAL_RCC_ClockConfig+0x244>)
 8001a40:	69db      	ldr	r3, [r3, #28]
 8001a42:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	695b      	ldr	r3, [r3, #20]
 8001a4a:	496a      	ldr	r1, [pc, #424]	; (8001bf4 <HAL_RCC_ClockConfig+0x244>)
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0310 	and.w	r3, r3, #16
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d010      	beq.n	8001a7e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	699a      	ldr	r2, [r3, #24]
 8001a60:	4b64      	ldr	r3, [pc, #400]	; (8001bf4 <HAL_RCC_ClockConfig+0x244>)
 8001a62:	69db      	ldr	r3, [r3, #28]
 8001a64:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d908      	bls.n	8001a7e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001a6c:	4b61      	ldr	r3, [pc, #388]	; (8001bf4 <HAL_RCC_ClockConfig+0x244>)
 8001a6e:	69db      	ldr	r3, [r3, #28]
 8001a70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	495e      	ldr	r1, [pc, #376]	; (8001bf4 <HAL_RCC_ClockConfig+0x244>)
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0320 	and.w	r3, r3, #32
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d010      	beq.n	8001aac <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	69da      	ldr	r2, [r3, #28]
 8001a8e:	4b59      	ldr	r3, [pc, #356]	; (8001bf4 <HAL_RCC_ClockConfig+0x244>)
 8001a90:	6a1b      	ldr	r3, [r3, #32]
 8001a92:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d908      	bls.n	8001aac <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001a9a:	4b56      	ldr	r3, [pc, #344]	; (8001bf4 <HAL_RCC_ClockConfig+0x244>)
 8001a9c:	6a1b      	ldr	r3, [r3, #32]
 8001a9e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	69db      	ldr	r3, [r3, #28]
 8001aa6:	4953      	ldr	r1, [pc, #332]	; (8001bf4 <HAL_RCC_ClockConfig+0x244>)
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0302 	and.w	r3, r3, #2
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d010      	beq.n	8001ada <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	68da      	ldr	r2, [r3, #12]
 8001abc:	4b4d      	ldr	r3, [pc, #308]	; (8001bf4 <HAL_RCC_ClockConfig+0x244>)
 8001abe:	699b      	ldr	r3, [r3, #24]
 8001ac0:	f003 030f 	and.w	r3, r3, #15
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d908      	bls.n	8001ada <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ac8:	4b4a      	ldr	r3, [pc, #296]	; (8001bf4 <HAL_RCC_ClockConfig+0x244>)
 8001aca:	699b      	ldr	r3, [r3, #24]
 8001acc:	f023 020f 	bic.w	r2, r3, #15
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	4947      	ldr	r1, [pc, #284]	; (8001bf4 <HAL_RCC_ClockConfig+0x244>)
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d055      	beq.n	8001b92 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001ae6:	4b43      	ldr	r3, [pc, #268]	; (8001bf4 <HAL_RCC_ClockConfig+0x244>)
 8001ae8:	699b      	ldr	r3, [r3, #24]
 8001aea:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	4940      	ldr	r1, [pc, #256]	; (8001bf4 <HAL_RCC_ClockConfig+0x244>)
 8001af4:	4313      	orrs	r3, r2
 8001af6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d107      	bne.n	8001b10 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b00:	4b3c      	ldr	r3, [pc, #240]	; (8001bf4 <HAL_RCC_ClockConfig+0x244>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d121      	bne.n	8001b50 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e0f6      	b.n	8001cfe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	2b03      	cmp	r3, #3
 8001b16:	d107      	bne.n	8001b28 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b18:	4b36      	ldr	r3, [pc, #216]	; (8001bf4 <HAL_RCC_ClockConfig+0x244>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d115      	bne.n	8001b50 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e0ea      	b.n	8001cfe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d107      	bne.n	8001b40 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001b30:	4b30      	ldr	r3, [pc, #192]	; (8001bf4 <HAL_RCC_ClockConfig+0x244>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d109      	bne.n	8001b50 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e0de      	b.n	8001cfe <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b40:	4b2c      	ldr	r3, [pc, #176]	; (8001bf4 <HAL_RCC_ClockConfig+0x244>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0304 	and.w	r3, r3, #4
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d101      	bne.n	8001b50 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e0d6      	b.n	8001cfe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b50:	4b28      	ldr	r3, [pc, #160]	; (8001bf4 <HAL_RCC_ClockConfig+0x244>)
 8001b52:	691b      	ldr	r3, [r3, #16]
 8001b54:	f023 0207 	bic.w	r2, r3, #7
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	4925      	ldr	r1, [pc, #148]	; (8001bf4 <HAL_RCC_ClockConfig+0x244>)
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b62:	f7ff f811 	bl	8000b88 <HAL_GetTick>
 8001b66:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b68:	e00a      	b.n	8001b80 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b6a:	f7ff f80d 	bl	8000b88 <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d901      	bls.n	8001b80 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e0be      	b.n	8001cfe <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b80:	4b1c      	ldr	r3, [pc, #112]	; (8001bf4 <HAL_RCC_ClockConfig+0x244>)
 8001b82:	691b      	ldr	r3, [r3, #16]
 8001b84:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	00db      	lsls	r3, r3, #3
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d1eb      	bne.n	8001b6a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d010      	beq.n	8001bc0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	68da      	ldr	r2, [r3, #12]
 8001ba2:	4b14      	ldr	r3, [pc, #80]	; (8001bf4 <HAL_RCC_ClockConfig+0x244>)
 8001ba4:	699b      	ldr	r3, [r3, #24]
 8001ba6:	f003 030f 	and.w	r3, r3, #15
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d208      	bcs.n	8001bc0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bae:	4b11      	ldr	r3, [pc, #68]	; (8001bf4 <HAL_RCC_ClockConfig+0x244>)
 8001bb0:	699b      	ldr	r3, [r3, #24]
 8001bb2:	f023 020f 	bic.w	r2, r3, #15
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	68db      	ldr	r3, [r3, #12]
 8001bba:	490e      	ldr	r1, [pc, #56]	; (8001bf4 <HAL_RCC_ClockConfig+0x244>)
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bc0:	4b0b      	ldr	r3, [pc, #44]	; (8001bf0 <HAL_RCC_ClockConfig+0x240>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 030f 	and.w	r3, r3, #15
 8001bc8:	683a      	ldr	r2, [r7, #0]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d214      	bcs.n	8001bf8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bce:	4b08      	ldr	r3, [pc, #32]	; (8001bf0 <HAL_RCC_ClockConfig+0x240>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f023 020f 	bic.w	r2, r3, #15
 8001bd6:	4906      	ldr	r1, [pc, #24]	; (8001bf0 <HAL_RCC_ClockConfig+0x240>)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bde:	4b04      	ldr	r3, [pc, #16]	; (8001bf0 <HAL_RCC_ClockConfig+0x240>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 030f 	and.w	r3, r3, #15
 8001be6:	683a      	ldr	r2, [r7, #0]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d005      	beq.n	8001bf8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e086      	b.n	8001cfe <HAL_RCC_ClockConfig+0x34e>
 8001bf0:	52002000 	.word	0x52002000
 8001bf4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0304 	and.w	r3, r3, #4
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d010      	beq.n	8001c26 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	691a      	ldr	r2, [r3, #16]
 8001c08:	4b3f      	ldr	r3, [pc, #252]	; (8001d08 <HAL_RCC_ClockConfig+0x358>)
 8001c0a:	699b      	ldr	r3, [r3, #24]
 8001c0c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d208      	bcs.n	8001c26 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001c14:	4b3c      	ldr	r3, [pc, #240]	; (8001d08 <HAL_RCC_ClockConfig+0x358>)
 8001c16:	699b      	ldr	r3, [r3, #24]
 8001c18:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	691b      	ldr	r3, [r3, #16]
 8001c20:	4939      	ldr	r1, [pc, #228]	; (8001d08 <HAL_RCC_ClockConfig+0x358>)
 8001c22:	4313      	orrs	r3, r2
 8001c24:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0308 	and.w	r3, r3, #8
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d010      	beq.n	8001c54 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	695a      	ldr	r2, [r3, #20]
 8001c36:	4b34      	ldr	r3, [pc, #208]	; (8001d08 <HAL_RCC_ClockConfig+0x358>)
 8001c38:	69db      	ldr	r3, [r3, #28]
 8001c3a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d208      	bcs.n	8001c54 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001c42:	4b31      	ldr	r3, [pc, #196]	; (8001d08 <HAL_RCC_ClockConfig+0x358>)
 8001c44:	69db      	ldr	r3, [r3, #28]
 8001c46:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	695b      	ldr	r3, [r3, #20]
 8001c4e:	492e      	ldr	r1, [pc, #184]	; (8001d08 <HAL_RCC_ClockConfig+0x358>)
 8001c50:	4313      	orrs	r3, r2
 8001c52:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0310 	and.w	r3, r3, #16
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d010      	beq.n	8001c82 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	699a      	ldr	r2, [r3, #24]
 8001c64:	4b28      	ldr	r3, [pc, #160]	; (8001d08 <HAL_RCC_ClockConfig+0x358>)
 8001c66:	69db      	ldr	r3, [r3, #28]
 8001c68:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d208      	bcs.n	8001c82 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001c70:	4b25      	ldr	r3, [pc, #148]	; (8001d08 <HAL_RCC_ClockConfig+0x358>)
 8001c72:	69db      	ldr	r3, [r3, #28]
 8001c74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	4922      	ldr	r1, [pc, #136]	; (8001d08 <HAL_RCC_ClockConfig+0x358>)
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0320 	and.w	r3, r3, #32
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d010      	beq.n	8001cb0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	69da      	ldr	r2, [r3, #28]
 8001c92:	4b1d      	ldr	r3, [pc, #116]	; (8001d08 <HAL_RCC_ClockConfig+0x358>)
 8001c94:	6a1b      	ldr	r3, [r3, #32]
 8001c96:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d208      	bcs.n	8001cb0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001c9e:	4b1a      	ldr	r3, [pc, #104]	; (8001d08 <HAL_RCC_ClockConfig+0x358>)
 8001ca0:	6a1b      	ldr	r3, [r3, #32]
 8001ca2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	69db      	ldr	r3, [r3, #28]
 8001caa:	4917      	ldr	r1, [pc, #92]	; (8001d08 <HAL_RCC_ClockConfig+0x358>)
 8001cac:	4313      	orrs	r3, r2
 8001cae:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001cb0:	f000 f834 	bl	8001d1c <HAL_RCC_GetSysClockFreq>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	4b14      	ldr	r3, [pc, #80]	; (8001d08 <HAL_RCC_ClockConfig+0x358>)
 8001cb8:	699b      	ldr	r3, [r3, #24]
 8001cba:	0a1b      	lsrs	r3, r3, #8
 8001cbc:	f003 030f 	and.w	r3, r3, #15
 8001cc0:	4912      	ldr	r1, [pc, #72]	; (8001d0c <HAL_RCC_ClockConfig+0x35c>)
 8001cc2:	5ccb      	ldrb	r3, [r1, r3]
 8001cc4:	f003 031f 	and.w	r3, r3, #31
 8001cc8:	fa22 f303 	lsr.w	r3, r2, r3
 8001ccc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001cce:	4b0e      	ldr	r3, [pc, #56]	; (8001d08 <HAL_RCC_ClockConfig+0x358>)
 8001cd0:	699b      	ldr	r3, [r3, #24]
 8001cd2:	f003 030f 	and.w	r3, r3, #15
 8001cd6:	4a0d      	ldr	r2, [pc, #52]	; (8001d0c <HAL_RCC_ClockConfig+0x35c>)
 8001cd8:	5cd3      	ldrb	r3, [r2, r3]
 8001cda:	f003 031f 	and.w	r3, r3, #31
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ce4:	4a0a      	ldr	r2, [pc, #40]	; (8001d10 <HAL_RCC_ClockConfig+0x360>)
 8001ce6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001ce8:	4a0a      	ldr	r2, [pc, #40]	; (8001d14 <HAL_RCC_ClockConfig+0x364>)
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8001cee:	4b0a      	ldr	r3, [pc, #40]	; (8001d18 <HAL_RCC_ClockConfig+0x368>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7fe fefe 	bl	8000af4 <HAL_InitTick>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3718      	adds	r7, #24
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	58024400 	.word	0x58024400
 8001d0c:	08004a28 	.word	0x08004a28
 8001d10:	24000004 	.word	0x24000004
 8001d14:	24000000 	.word	0x24000000
 8001d18:	24000008 	.word	0x24000008

08001d1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b089      	sub	sp, #36	; 0x24
 8001d20:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d22:	4bb3      	ldr	r3, [pc, #716]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d24:	691b      	ldr	r3, [r3, #16]
 8001d26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d2a:	2b18      	cmp	r3, #24
 8001d2c:	f200 8155 	bhi.w	8001fda <HAL_RCC_GetSysClockFreq+0x2be>
 8001d30:	a201      	add	r2, pc, #4	; (adr r2, 8001d38 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d36:	bf00      	nop
 8001d38:	08001d9d 	.word	0x08001d9d
 8001d3c:	08001fdb 	.word	0x08001fdb
 8001d40:	08001fdb 	.word	0x08001fdb
 8001d44:	08001fdb 	.word	0x08001fdb
 8001d48:	08001fdb 	.word	0x08001fdb
 8001d4c:	08001fdb 	.word	0x08001fdb
 8001d50:	08001fdb 	.word	0x08001fdb
 8001d54:	08001fdb 	.word	0x08001fdb
 8001d58:	08001dc3 	.word	0x08001dc3
 8001d5c:	08001fdb 	.word	0x08001fdb
 8001d60:	08001fdb 	.word	0x08001fdb
 8001d64:	08001fdb 	.word	0x08001fdb
 8001d68:	08001fdb 	.word	0x08001fdb
 8001d6c:	08001fdb 	.word	0x08001fdb
 8001d70:	08001fdb 	.word	0x08001fdb
 8001d74:	08001fdb 	.word	0x08001fdb
 8001d78:	08001dc9 	.word	0x08001dc9
 8001d7c:	08001fdb 	.word	0x08001fdb
 8001d80:	08001fdb 	.word	0x08001fdb
 8001d84:	08001fdb 	.word	0x08001fdb
 8001d88:	08001fdb 	.word	0x08001fdb
 8001d8c:	08001fdb 	.word	0x08001fdb
 8001d90:	08001fdb 	.word	0x08001fdb
 8001d94:	08001fdb 	.word	0x08001fdb
 8001d98:	08001dcf 	.word	0x08001dcf
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001d9c:	4b94      	ldr	r3, [pc, #592]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0320 	and.w	r3, r3, #32
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d009      	beq.n	8001dbc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001da8:	4b91      	ldr	r3, [pc, #580]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	08db      	lsrs	r3, r3, #3
 8001dae:	f003 0303 	and.w	r3, r3, #3
 8001db2:	4a90      	ldr	r2, [pc, #576]	; (8001ff4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001db4:	fa22 f303 	lsr.w	r3, r2, r3
 8001db8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8001dba:	e111      	b.n	8001fe0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001dbc:	4b8d      	ldr	r3, [pc, #564]	; (8001ff4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001dbe:	61bb      	str	r3, [r7, #24]
    break;
 8001dc0:	e10e      	b.n	8001fe0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8001dc2:	4b8d      	ldr	r3, [pc, #564]	; (8001ff8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001dc4:	61bb      	str	r3, [r7, #24]
    break;
 8001dc6:	e10b      	b.n	8001fe0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8001dc8:	4b8c      	ldr	r3, [pc, #560]	; (8001ffc <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001dca:	61bb      	str	r3, [r7, #24]
    break;
 8001dcc:	e108      	b.n	8001fe0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001dce:	4b88      	ldr	r3, [pc, #544]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dd2:	f003 0303 	and.w	r3, r3, #3
 8001dd6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001dd8:	4b85      	ldr	r3, [pc, #532]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ddc:	091b      	lsrs	r3, r3, #4
 8001dde:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001de2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001de4:	4b82      	ldr	r3, [pc, #520]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de8:	f003 0301 	and.w	r3, r3, #1
 8001dec:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001dee:	4b80      	ldr	r3, [pc, #512]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001df2:	08db      	lsrs	r3, r3, #3
 8001df4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001df8:	68fa      	ldr	r2, [r7, #12]
 8001dfa:	fb02 f303 	mul.w	r3, r2, r3
 8001dfe:	ee07 3a90 	vmov	s15, r3
 8001e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e06:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	f000 80e1 	beq.w	8001fd4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	f000 8083 	beq.w	8001f20 <HAL_RCC_GetSysClockFreq+0x204>
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	f200 80a1 	bhi.w	8001f64 <HAL_RCC_GetSysClockFreq+0x248>
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d003      	beq.n	8001e30 <HAL_RCC_GetSysClockFreq+0x114>
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d056      	beq.n	8001edc <HAL_RCC_GetSysClockFreq+0x1c0>
 8001e2e:	e099      	b.n	8001f64 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001e30:	4b6f      	ldr	r3, [pc, #444]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0320 	and.w	r3, r3, #32
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d02d      	beq.n	8001e98 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001e3c:	4b6c      	ldr	r3, [pc, #432]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	08db      	lsrs	r3, r3, #3
 8001e42:	f003 0303 	and.w	r3, r3, #3
 8001e46:	4a6b      	ldr	r2, [pc, #428]	; (8001ff4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001e48:	fa22 f303 	lsr.w	r3, r2, r3
 8001e4c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	ee07 3a90 	vmov	s15, r3
 8001e54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	ee07 3a90 	vmov	s15, r3
 8001e5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e66:	4b62      	ldr	r3, [pc, #392]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e6e:	ee07 3a90 	vmov	s15, r3
 8001e72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e76:	ed97 6a02 	vldr	s12, [r7, #8]
 8001e7a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002000 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001e7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001e82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001e8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e92:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8001e96:	e087      	b.n	8001fa8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	ee07 3a90 	vmov	s15, r3
 8001e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ea2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002004 <HAL_RCC_GetSysClockFreq+0x2e8>
 8001ea6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001eaa:	4b51      	ldr	r3, [pc, #324]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001eb2:	ee07 3a90 	vmov	s15, r3
 8001eb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001eba:	ed97 6a02 	vldr	s12, [r7, #8]
 8001ebe:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002000 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001ec2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001ec6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001eca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001ece:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ed6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001eda:	e065      	b.n	8001fa8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	ee07 3a90 	vmov	s15, r3
 8001ee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ee6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002008 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001eea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001eee:	4b40      	ldr	r3, [pc, #256]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ef6:	ee07 3a90 	vmov	s15, r3
 8001efa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001efe:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f02:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002000 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001f1e:	e043      	b.n	8001fa8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	ee07 3a90 	vmov	s15, r3
 8001f26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f2a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800200c <HAL_RCC_GetSysClockFreq+0x2f0>
 8001f2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f32:	4b2f      	ldr	r3, [pc, #188]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f3a:	ee07 3a90 	vmov	s15, r3
 8001f3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f42:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f46:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002000 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001f62:	e021      	b.n	8001fa8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	ee07 3a90 	vmov	s15, r3
 8001f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f6e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002008 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001f72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f76:	4b1e      	ldr	r3, [pc, #120]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f7e:	ee07 3a90 	vmov	s15, r3
 8001f82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f86:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f8a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002000 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fa2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001fa6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8001fa8:	4b11      	ldr	r3, [pc, #68]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fac:	0a5b      	lsrs	r3, r3, #9
 8001fae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	ee07 3a90 	vmov	s15, r3
 8001fbc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001fc0:	edd7 6a07 	vldr	s13, [r7, #28]
 8001fc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fcc:	ee17 3a90 	vmov	r3, s15
 8001fd0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8001fd2:	e005      	b.n	8001fe0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	61bb      	str	r3, [r7, #24]
    break;
 8001fd8:	e002      	b.n	8001fe0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8001fda:	4b07      	ldr	r3, [pc, #28]	; (8001ff8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001fdc:	61bb      	str	r3, [r7, #24]
    break;
 8001fde:	bf00      	nop
  }

  return sysclockfreq;
 8001fe0:	69bb      	ldr	r3, [r7, #24]
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3724      	adds	r7, #36	; 0x24
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	58024400 	.word	0x58024400
 8001ff4:	03d09000 	.word	0x03d09000
 8001ff8:	003d0900 	.word	0x003d0900
 8001ffc:	017d7840 	.word	0x017d7840
 8002000:	46000000 	.word	0x46000000
 8002004:	4c742400 	.word	0x4c742400
 8002008:	4a742400 	.word	0x4a742400
 800200c:	4bbebc20 	.word	0x4bbebc20

08002010 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002016:	f7ff fe81 	bl	8001d1c <HAL_RCC_GetSysClockFreq>
 800201a:	4602      	mov	r2, r0
 800201c:	4b10      	ldr	r3, [pc, #64]	; (8002060 <HAL_RCC_GetHCLKFreq+0x50>)
 800201e:	699b      	ldr	r3, [r3, #24]
 8002020:	0a1b      	lsrs	r3, r3, #8
 8002022:	f003 030f 	and.w	r3, r3, #15
 8002026:	490f      	ldr	r1, [pc, #60]	; (8002064 <HAL_RCC_GetHCLKFreq+0x54>)
 8002028:	5ccb      	ldrb	r3, [r1, r3]
 800202a:	f003 031f 	and.w	r3, r3, #31
 800202e:	fa22 f303 	lsr.w	r3, r2, r3
 8002032:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002034:	4b0a      	ldr	r3, [pc, #40]	; (8002060 <HAL_RCC_GetHCLKFreq+0x50>)
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	f003 030f 	and.w	r3, r3, #15
 800203c:	4a09      	ldr	r2, [pc, #36]	; (8002064 <HAL_RCC_GetHCLKFreq+0x54>)
 800203e:	5cd3      	ldrb	r3, [r2, r3]
 8002040:	f003 031f 	and.w	r3, r3, #31
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	fa22 f303 	lsr.w	r3, r2, r3
 800204a:	4a07      	ldr	r2, [pc, #28]	; (8002068 <HAL_RCC_GetHCLKFreq+0x58>)
 800204c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800204e:	4a07      	ldr	r2, [pc, #28]	; (800206c <HAL_RCC_GetHCLKFreq+0x5c>)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002054:	4b04      	ldr	r3, [pc, #16]	; (8002068 <HAL_RCC_GetHCLKFreq+0x58>)
 8002056:	681b      	ldr	r3, [r3, #0]
}
 8002058:	4618      	mov	r0, r3
 800205a:	3708      	adds	r7, #8
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	58024400 	.word	0x58024400
 8002064:	08004a28 	.word	0x08004a28
 8002068:	24000004 	.word	0x24000004
 800206c:	24000000 	.word	0x24000000

08002070 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002074:	f7ff ffcc 	bl	8002010 <HAL_RCC_GetHCLKFreq>
 8002078:	4602      	mov	r2, r0
 800207a:	4b06      	ldr	r3, [pc, #24]	; (8002094 <HAL_RCC_GetPCLK1Freq+0x24>)
 800207c:	69db      	ldr	r3, [r3, #28]
 800207e:	091b      	lsrs	r3, r3, #4
 8002080:	f003 0307 	and.w	r3, r3, #7
 8002084:	4904      	ldr	r1, [pc, #16]	; (8002098 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002086:	5ccb      	ldrb	r3, [r1, r3]
 8002088:	f003 031f 	and.w	r3, r3, #31
 800208c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002090:	4618      	mov	r0, r3
 8002092:	bd80      	pop	{r7, pc}
 8002094:	58024400 	.word	0x58024400
 8002098:	08004a28 	.word	0x08004a28

0800209c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80020a0:	f7ff ffb6 	bl	8002010 <HAL_RCC_GetHCLKFreq>
 80020a4:	4602      	mov	r2, r0
 80020a6:	4b06      	ldr	r3, [pc, #24]	; (80020c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020a8:	69db      	ldr	r3, [r3, #28]
 80020aa:	0a1b      	lsrs	r3, r3, #8
 80020ac:	f003 0307 	and.w	r3, r3, #7
 80020b0:	4904      	ldr	r1, [pc, #16]	; (80020c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80020b2:	5ccb      	ldrb	r3, [r1, r3]
 80020b4:	f003 031f 	and.w	r3, r3, #31
 80020b8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80020bc:	4618      	mov	r0, r3
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	58024400 	.word	0x58024400
 80020c4:	08004a28 	.word	0x08004a28

080020c8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b086      	sub	sp, #24
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80020d0:	2300      	movs	r3, #0
 80020d2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80020d4:	2300      	movs	r3, #0
 80020d6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d03f      	beq.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80020e8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80020ec:	d02a      	beq.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80020ee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80020f2:	d824      	bhi.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80020f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80020f8:	d018      	beq.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80020fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80020fe:	d81e      	bhi.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002100:	2b00      	cmp	r3, #0
 8002102:	d003      	beq.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002104:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002108:	d007      	beq.n	800211a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800210a:	e018      	b.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800210c:	4ba3      	ldr	r3, [pc, #652]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800210e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002110:	4aa2      	ldr	r2, [pc, #648]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002112:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002116:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002118:	e015      	b.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	3304      	adds	r3, #4
 800211e:	2102      	movs	r1, #2
 8002120:	4618      	mov	r0, r3
 8002122:	f001 f9d5 	bl	80034d0 <RCCEx_PLL2_Config>
 8002126:	4603      	mov	r3, r0
 8002128:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800212a:	e00c      	b.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	3324      	adds	r3, #36	; 0x24
 8002130:	2102      	movs	r1, #2
 8002132:	4618      	mov	r0, r3
 8002134:	f001 fa7e 	bl	8003634 <RCCEx_PLL3_Config>
 8002138:	4603      	mov	r3, r0
 800213a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800213c:	e003      	b.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	75fb      	strb	r3, [r7, #23]
      break;
 8002142:	e000      	b.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002144:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002146:	7dfb      	ldrb	r3, [r7, #23]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d109      	bne.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800214c:	4b93      	ldr	r3, [pc, #588]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800214e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002150:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002158:	4990      	ldr	r1, [pc, #576]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800215a:	4313      	orrs	r3, r2
 800215c:	650b      	str	r3, [r1, #80]	; 0x50
 800215e:	e001      	b.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002160:	7dfb      	ldrb	r3, [r7, #23]
 8002162:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800216c:	2b00      	cmp	r3, #0
 800216e:	d03d      	beq.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002174:	2b04      	cmp	r3, #4
 8002176:	d826      	bhi.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002178:	a201      	add	r2, pc, #4	; (adr r2, 8002180 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800217a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800217e:	bf00      	nop
 8002180:	08002195 	.word	0x08002195
 8002184:	080021a3 	.word	0x080021a3
 8002188:	080021b5 	.word	0x080021b5
 800218c:	080021cd 	.word	0x080021cd
 8002190:	080021cd 	.word	0x080021cd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002194:	4b81      	ldr	r3, [pc, #516]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002198:	4a80      	ldr	r2, [pc, #512]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800219a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800219e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80021a0:	e015      	b.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	3304      	adds	r3, #4
 80021a6:	2100      	movs	r1, #0
 80021a8:	4618      	mov	r0, r3
 80021aa:	f001 f991 	bl	80034d0 <RCCEx_PLL2_Config>
 80021ae:	4603      	mov	r3, r0
 80021b0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80021b2:	e00c      	b.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	3324      	adds	r3, #36	; 0x24
 80021b8:	2100      	movs	r1, #0
 80021ba:	4618      	mov	r0, r3
 80021bc:	f001 fa3a 	bl	8003634 <RCCEx_PLL3_Config>
 80021c0:	4603      	mov	r3, r0
 80021c2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80021c4:	e003      	b.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	75fb      	strb	r3, [r7, #23]
      break;
 80021ca:	e000      	b.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80021cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80021ce:	7dfb      	ldrb	r3, [r7, #23]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d109      	bne.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80021d4:	4b71      	ldr	r3, [pc, #452]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80021d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021d8:	f023 0207 	bic.w	r2, r3, #7
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021e0:	496e      	ldr	r1, [pc, #440]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	650b      	str	r3, [r1, #80]	; 0x50
 80021e6:	e001      	b.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021e8:	7dfb      	ldrb	r3, [r7, #23]
 80021ea:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d042      	beq.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002200:	d02b      	beq.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8002202:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002206:	d825      	bhi.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002208:	2bc0      	cmp	r3, #192	; 0xc0
 800220a:	d028      	beq.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x196>
 800220c:	2bc0      	cmp	r3, #192	; 0xc0
 800220e:	d821      	bhi.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002210:	2b80      	cmp	r3, #128	; 0x80
 8002212:	d016      	beq.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8002214:	2b80      	cmp	r3, #128	; 0x80
 8002216:	d81d      	bhi.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002218:	2b00      	cmp	r3, #0
 800221a:	d002      	beq.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800221c:	2b40      	cmp	r3, #64	; 0x40
 800221e:	d007      	beq.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002220:	e018      	b.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002222:	4b5e      	ldr	r3, [pc, #376]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002226:	4a5d      	ldr	r2, [pc, #372]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002228:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800222c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800222e:	e017      	b.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	3304      	adds	r3, #4
 8002234:	2100      	movs	r1, #0
 8002236:	4618      	mov	r0, r3
 8002238:	f001 f94a 	bl	80034d0 <RCCEx_PLL2_Config>
 800223c:	4603      	mov	r3, r0
 800223e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002240:	e00e      	b.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	3324      	adds	r3, #36	; 0x24
 8002246:	2100      	movs	r1, #0
 8002248:	4618      	mov	r0, r3
 800224a:	f001 f9f3 	bl	8003634 <RCCEx_PLL3_Config>
 800224e:	4603      	mov	r3, r0
 8002250:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002252:	e005      	b.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	75fb      	strb	r3, [r7, #23]
      break;
 8002258:	e002      	b.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800225a:	bf00      	nop
 800225c:	e000      	b.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800225e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002260:	7dfb      	ldrb	r3, [r7, #23]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d109      	bne.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002266:	4b4d      	ldr	r3, [pc, #308]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002268:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800226a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002272:	494a      	ldr	r1, [pc, #296]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002274:	4313      	orrs	r3, r2
 8002276:	650b      	str	r3, [r1, #80]	; 0x50
 8002278:	e001      	b.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800227a:	7dfb      	ldrb	r3, [r7, #23]
 800227c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002286:	2b00      	cmp	r3, #0
 8002288:	d049      	beq.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002290:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002294:	d030      	beq.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8002296:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800229a:	d82a      	bhi.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800229c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80022a0:	d02c      	beq.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x234>
 80022a2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80022a6:	d824      	bhi.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80022a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022ac:	d018      	beq.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80022ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022b2:	d81e      	bhi.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d003      	beq.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80022b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80022bc:	d007      	beq.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x206>
 80022be:	e018      	b.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80022c0:	4b36      	ldr	r3, [pc, #216]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80022c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c4:	4a35      	ldr	r2, [pc, #212]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80022c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80022cc:	e017      	b.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	3304      	adds	r3, #4
 80022d2:	2100      	movs	r1, #0
 80022d4:	4618      	mov	r0, r3
 80022d6:	f001 f8fb 	bl	80034d0 <RCCEx_PLL2_Config>
 80022da:	4603      	mov	r3, r0
 80022dc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80022de:	e00e      	b.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	3324      	adds	r3, #36	; 0x24
 80022e4:	2100      	movs	r1, #0
 80022e6:	4618      	mov	r0, r3
 80022e8:	f001 f9a4 	bl	8003634 <RCCEx_PLL3_Config>
 80022ec:	4603      	mov	r3, r0
 80022ee:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80022f0:	e005      	b.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	75fb      	strb	r3, [r7, #23]
      break;
 80022f6:	e002      	b.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80022f8:	bf00      	nop
 80022fa:	e000      	b.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80022fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80022fe:	7dfb      	ldrb	r3, [r7, #23]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d10a      	bne.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002304:	4b25      	ldr	r3, [pc, #148]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002308:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002312:	4922      	ldr	r1, [pc, #136]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002314:	4313      	orrs	r3, r2
 8002316:	658b      	str	r3, [r1, #88]	; 0x58
 8002318:	e001      	b.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800231a:	7dfb      	ldrb	r3, [r7, #23]
 800231c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002326:	2b00      	cmp	r3, #0
 8002328:	d04b      	beq.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002330:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002334:	d030      	beq.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8002336:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800233a:	d82a      	bhi.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800233c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002340:	d02e      	beq.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8002342:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002346:	d824      	bhi.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002348:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800234c:	d018      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800234e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002352:	d81e      	bhi.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002354:	2b00      	cmp	r3, #0
 8002356:	d003      	beq.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002358:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800235c:	d007      	beq.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800235e:	e018      	b.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002360:	4b0e      	ldr	r3, [pc, #56]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002364:	4a0d      	ldr	r2, [pc, #52]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002366:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800236a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800236c:	e019      	b.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	3304      	adds	r3, #4
 8002372:	2100      	movs	r1, #0
 8002374:	4618      	mov	r0, r3
 8002376:	f001 f8ab 	bl	80034d0 <RCCEx_PLL2_Config>
 800237a:	4603      	mov	r3, r0
 800237c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800237e:	e010      	b.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	3324      	adds	r3, #36	; 0x24
 8002384:	2100      	movs	r1, #0
 8002386:	4618      	mov	r0, r3
 8002388:	f001 f954 	bl	8003634 <RCCEx_PLL3_Config>
 800238c:	4603      	mov	r3, r0
 800238e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002390:	e007      	b.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	75fb      	strb	r3, [r7, #23]
      break;
 8002396:	e004      	b.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8002398:	bf00      	nop
 800239a:	e002      	b.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800239c:	58024400 	.word	0x58024400
      break;
 80023a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80023a2:	7dfb      	ldrb	r3, [r7, #23]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d10a      	bne.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80023a8:	4b99      	ldr	r3, [pc, #612]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80023aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ac:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80023b6:	4996      	ldr	r1, [pc, #600]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80023b8:	4313      	orrs	r3, r2
 80023ba:	658b      	str	r3, [r1, #88]	; 0x58
 80023bc:	e001      	b.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023be:	7dfb      	ldrb	r3, [r7, #23]
 80023c0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d032      	beq.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023d2:	2b30      	cmp	r3, #48	; 0x30
 80023d4:	d01c      	beq.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80023d6:	2b30      	cmp	r3, #48	; 0x30
 80023d8:	d817      	bhi.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x342>
 80023da:	2b20      	cmp	r3, #32
 80023dc:	d00c      	beq.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x330>
 80023de:	2b20      	cmp	r3, #32
 80023e0:	d813      	bhi.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x342>
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d016      	beq.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80023e6:	2b10      	cmp	r3, #16
 80023e8:	d10f      	bne.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80023ea:	4b89      	ldr	r3, [pc, #548]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80023ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ee:	4a88      	ldr	r2, [pc, #544]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80023f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023f4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80023f6:	e00e      	b.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	3304      	adds	r3, #4
 80023fc:	2102      	movs	r1, #2
 80023fe:	4618      	mov	r0, r3
 8002400:	f001 f866 	bl	80034d0 <RCCEx_PLL2_Config>
 8002404:	4603      	mov	r3, r0
 8002406:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002408:	e005      	b.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	75fb      	strb	r3, [r7, #23]
      break;
 800240e:	e002      	b.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8002410:	bf00      	nop
 8002412:	e000      	b.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8002414:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002416:	7dfb      	ldrb	r3, [r7, #23]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d109      	bne.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800241c:	4b7c      	ldr	r3, [pc, #496]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800241e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002420:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002428:	4979      	ldr	r1, [pc, #484]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800242a:	4313      	orrs	r3, r2
 800242c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800242e:	e001      	b.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002430:	7dfb      	ldrb	r3, [r7, #23]
 8002432:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d047      	beq.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002444:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002448:	d030      	beq.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800244a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800244e:	d82a      	bhi.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002450:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002454:	d02c      	beq.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002456:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800245a:	d824      	bhi.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800245c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002460:	d018      	beq.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8002462:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002466:	d81e      	bhi.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002468:	2b00      	cmp	r3, #0
 800246a:	d003      	beq.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800246c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002470:	d007      	beq.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8002472:	e018      	b.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002474:	4b66      	ldr	r3, [pc, #408]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002478:	4a65      	ldr	r2, [pc, #404]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800247a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800247e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002480:	e017      	b.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	3304      	adds	r3, #4
 8002486:	2100      	movs	r1, #0
 8002488:	4618      	mov	r0, r3
 800248a:	f001 f821 	bl	80034d0 <RCCEx_PLL2_Config>
 800248e:	4603      	mov	r3, r0
 8002490:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002492:	e00e      	b.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	3324      	adds	r3, #36	; 0x24
 8002498:	2100      	movs	r1, #0
 800249a:	4618      	mov	r0, r3
 800249c:	f001 f8ca 	bl	8003634 <RCCEx_PLL3_Config>
 80024a0:	4603      	mov	r3, r0
 80024a2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80024a4:	e005      	b.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	75fb      	strb	r3, [r7, #23]
      break;
 80024aa:	e002      	b.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80024ac:	bf00      	nop
 80024ae:	e000      	b.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80024b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80024b2:	7dfb      	ldrb	r3, [r7, #23]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d109      	bne.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80024b8:	4b55      	ldr	r3, [pc, #340]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80024ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024bc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024c4:	4952      	ldr	r1, [pc, #328]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80024c6:	4313      	orrs	r3, r2
 80024c8:	650b      	str	r3, [r1, #80]	; 0x50
 80024ca:	e001      	b.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024cc:	7dfb      	ldrb	r3, [r7, #23]
 80024ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d049      	beq.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024e4:	d02e      	beq.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80024e6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024ea:	d828      	bhi.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x476>
 80024ec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80024f0:	d02a      	beq.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x480>
 80024f2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80024f6:	d822      	bhi.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x476>
 80024f8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80024fc:	d026      	beq.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x484>
 80024fe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002502:	d81c      	bhi.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002504:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002508:	d010      	beq.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x464>
 800250a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800250e:	d816      	bhi.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002510:	2b00      	cmp	r3, #0
 8002512:	d01d      	beq.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8002514:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002518:	d111      	bne.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	3304      	adds	r3, #4
 800251e:	2101      	movs	r1, #1
 8002520:	4618      	mov	r0, r3
 8002522:	f000 ffd5 	bl	80034d0 <RCCEx_PLL2_Config>
 8002526:	4603      	mov	r3, r0
 8002528:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800252a:	e012      	b.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	3324      	adds	r3, #36	; 0x24
 8002530:	2101      	movs	r1, #1
 8002532:	4618      	mov	r0, r3
 8002534:	f001 f87e 	bl	8003634 <RCCEx_PLL3_Config>
 8002538:	4603      	mov	r3, r0
 800253a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800253c:	e009      	b.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	75fb      	strb	r3, [r7, #23]
      break;
 8002542:	e006      	b.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002544:	bf00      	nop
 8002546:	e004      	b.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002548:	bf00      	nop
 800254a:	e002      	b.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800254c:	bf00      	nop
 800254e:	e000      	b.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002550:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002552:	7dfb      	ldrb	r3, [r7, #23]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d109      	bne.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002558:	4b2d      	ldr	r3, [pc, #180]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800255a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800255c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002564:	492a      	ldr	r1, [pc, #168]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002566:	4313      	orrs	r3, r2
 8002568:	650b      	str	r3, [r1, #80]	; 0x50
 800256a:	e001      	b.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800256c:	7dfb      	ldrb	r3, [r7, #23]
 800256e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d04d      	beq.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002582:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002586:	d02e      	beq.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8002588:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800258c:	d828      	bhi.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800258e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002592:	d02a      	beq.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x522>
 8002594:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002598:	d822      	bhi.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800259a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800259e:	d026      	beq.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x526>
 80025a0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80025a4:	d81c      	bhi.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80025a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80025aa:	d010      	beq.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x506>
 80025ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80025b0:	d816      	bhi.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d01d      	beq.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80025b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80025ba:	d111      	bne.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	3304      	adds	r3, #4
 80025c0:	2101      	movs	r1, #1
 80025c2:	4618      	mov	r0, r3
 80025c4:	f000 ff84 	bl	80034d0 <RCCEx_PLL2_Config>
 80025c8:	4603      	mov	r3, r0
 80025ca:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80025cc:	e012      	b.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	3324      	adds	r3, #36	; 0x24
 80025d2:	2101      	movs	r1, #1
 80025d4:	4618      	mov	r0, r3
 80025d6:	f001 f82d 	bl	8003634 <RCCEx_PLL3_Config>
 80025da:	4603      	mov	r3, r0
 80025dc:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80025de:	e009      	b.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	75fb      	strb	r3, [r7, #23]
      break;
 80025e4:	e006      	b.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80025e6:	bf00      	nop
 80025e8:	e004      	b.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80025ea:	bf00      	nop
 80025ec:	e002      	b.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80025ee:	bf00      	nop
 80025f0:	e000      	b.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80025f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025f4:	7dfb      	ldrb	r3, [r7, #23]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d10c      	bne.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80025fa:	4b05      	ldr	r3, [pc, #20]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80025fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025fe:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002608:	4901      	ldr	r1, [pc, #4]	; (8002610 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800260a:	4313      	orrs	r3, r2
 800260c:	658b      	str	r3, [r1, #88]	; 0x58
 800260e:	e003      	b.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8002610:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002614:	7dfb      	ldrb	r3, [r7, #23]
 8002616:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d02f      	beq.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002628:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800262c:	d00e      	beq.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x584>
 800262e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002632:	d814      	bhi.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x596>
 8002634:	2b00      	cmp	r3, #0
 8002636:	d015      	beq.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8002638:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800263c:	d10f      	bne.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800263e:	4baf      	ldr	r3, [pc, #700]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002642:	4aae      	ldr	r2, [pc, #696]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002644:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002648:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800264a:	e00c      	b.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	3304      	adds	r3, #4
 8002650:	2101      	movs	r1, #1
 8002652:	4618      	mov	r0, r3
 8002654:	f000 ff3c 	bl	80034d0 <RCCEx_PLL2_Config>
 8002658:	4603      	mov	r3, r0
 800265a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800265c:	e003      	b.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	75fb      	strb	r3, [r7, #23]
      break;
 8002662:	e000      	b.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8002664:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002666:	7dfb      	ldrb	r3, [r7, #23]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d109      	bne.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800266c:	4ba3      	ldr	r3, [pc, #652]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800266e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002670:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002678:	49a0      	ldr	r1, [pc, #640]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800267a:	4313      	orrs	r3, r2
 800267c:	650b      	str	r3, [r1, #80]	; 0x50
 800267e:	e001      	b.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002680:	7dfb      	ldrb	r3, [r7, #23]
 8002682:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d032      	beq.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002694:	2b03      	cmp	r3, #3
 8002696:	d81b      	bhi.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8002698:	a201      	add	r2, pc, #4	; (adr r2, 80026a0 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800269a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800269e:	bf00      	nop
 80026a0:	080026d7 	.word	0x080026d7
 80026a4:	080026b1 	.word	0x080026b1
 80026a8:	080026bf 	.word	0x080026bf
 80026ac:	080026d7 	.word	0x080026d7
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026b0:	4b92      	ldr	r3, [pc, #584]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80026b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b4:	4a91      	ldr	r2, [pc, #580]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80026b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80026bc:	e00c      	b.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	3304      	adds	r3, #4
 80026c2:	2102      	movs	r1, #2
 80026c4:	4618      	mov	r0, r3
 80026c6:	f000 ff03 	bl	80034d0 <RCCEx_PLL2_Config>
 80026ca:	4603      	mov	r3, r0
 80026cc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80026ce:	e003      	b.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	75fb      	strb	r3, [r7, #23]
      break;
 80026d4:	e000      	b.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80026d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026d8:	7dfb      	ldrb	r3, [r7, #23]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d109      	bne.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80026de:	4b87      	ldr	r3, [pc, #540]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80026e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026e2:	f023 0203 	bic.w	r2, r3, #3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ea:	4984      	ldr	r1, [pc, #528]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80026ec:	4313      	orrs	r3, r2
 80026ee:	64cb      	str	r3, [r1, #76]	; 0x4c
 80026f0:	e001      	b.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026f2:	7dfb      	ldrb	r3, [r7, #23]
 80026f4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	f000 8086 	beq.w	8002810 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002704:	4b7e      	ldr	r3, [pc, #504]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a7d      	ldr	r2, [pc, #500]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800270a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800270e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002710:	f7fe fa3a 	bl	8000b88 <HAL_GetTick>
 8002714:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002716:	e009      	b.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002718:	f7fe fa36 	bl	8000b88 <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b64      	cmp	r3, #100	; 0x64
 8002724:	d902      	bls.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	75fb      	strb	r3, [r7, #23]
        break;
 800272a:	e005      	b.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800272c:	4b74      	ldr	r3, [pc, #464]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002734:	2b00      	cmp	r3, #0
 8002736:	d0ef      	beq.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8002738:	7dfb      	ldrb	r3, [r7, #23]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d166      	bne.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800273e:	4b6f      	ldr	r3, [pc, #444]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002740:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002748:	4053      	eors	r3, r2
 800274a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800274e:	2b00      	cmp	r3, #0
 8002750:	d013      	beq.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002752:	4b6a      	ldr	r3, [pc, #424]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002756:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800275a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800275c:	4b67      	ldr	r3, [pc, #412]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800275e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002760:	4a66      	ldr	r2, [pc, #408]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002762:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002766:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002768:	4b64      	ldr	r3, [pc, #400]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800276a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800276c:	4a63      	ldr	r2, [pc, #396]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800276e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002772:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002774:	4a61      	ldr	r2, [pc, #388]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002780:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002784:	d115      	bne.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002786:	f7fe f9ff 	bl	8000b88 <HAL_GetTick>
 800278a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800278c:	e00b      	b.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800278e:	f7fe f9fb 	bl	8000b88 <HAL_GetTick>
 8002792:	4602      	mov	r2, r0
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	f241 3288 	movw	r2, #5000	; 0x1388
 800279c:	4293      	cmp	r3, r2
 800279e:	d902      	bls.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	75fb      	strb	r3, [r7, #23]
            break;
 80027a4:	e005      	b.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80027a6:	4b55      	ldr	r3, [pc, #340]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80027a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d0ed      	beq.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80027b2:	7dfb      	ldrb	r3, [r7, #23]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d126      	bne.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80027be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80027c6:	d10d      	bne.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80027c8:	4b4c      	ldr	r3, [pc, #304]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80027ca:	691b      	ldr	r3, [r3, #16]
 80027cc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80027d6:	0919      	lsrs	r1, r3, #4
 80027d8:	4b4a      	ldr	r3, [pc, #296]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 80027da:	400b      	ands	r3, r1
 80027dc:	4947      	ldr	r1, [pc, #284]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	610b      	str	r3, [r1, #16]
 80027e2:	e005      	b.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80027e4:	4b45      	ldr	r3, [pc, #276]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80027e6:	691b      	ldr	r3, [r3, #16]
 80027e8:	4a44      	ldr	r2, [pc, #272]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80027ea:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80027ee:	6113      	str	r3, [r2, #16]
 80027f0:	4b42      	ldr	r3, [pc, #264]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80027f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80027fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027fe:	493f      	ldr	r1, [pc, #252]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002800:	4313      	orrs	r3, r2
 8002802:	670b      	str	r3, [r1, #112]	; 0x70
 8002804:	e004      	b.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002806:	7dfb      	ldrb	r3, [r7, #23]
 8002808:	75bb      	strb	r3, [r7, #22]
 800280a:	e001      	b.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800280c:	7dfb      	ldrb	r3, [r7, #23]
 800280e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0301 	and.w	r3, r3, #1
 8002818:	2b00      	cmp	r3, #0
 800281a:	f000 8085 	beq.w	8002928 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002822:	2b28      	cmp	r3, #40	; 0x28
 8002824:	d866      	bhi.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8002826:	a201      	add	r2, pc, #4	; (adr r2, 800282c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8002828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800282c:	08002909 	.word	0x08002909
 8002830:	080028f5 	.word	0x080028f5
 8002834:	080028f5 	.word	0x080028f5
 8002838:	080028f5 	.word	0x080028f5
 800283c:	080028f5 	.word	0x080028f5
 8002840:	080028f5 	.word	0x080028f5
 8002844:	080028f5 	.word	0x080028f5
 8002848:	080028f5 	.word	0x080028f5
 800284c:	080028d1 	.word	0x080028d1
 8002850:	080028f5 	.word	0x080028f5
 8002854:	080028f5 	.word	0x080028f5
 8002858:	080028f5 	.word	0x080028f5
 800285c:	080028f5 	.word	0x080028f5
 8002860:	080028f5 	.word	0x080028f5
 8002864:	080028f5 	.word	0x080028f5
 8002868:	080028f5 	.word	0x080028f5
 800286c:	080028e3 	.word	0x080028e3
 8002870:	080028f5 	.word	0x080028f5
 8002874:	080028f5 	.word	0x080028f5
 8002878:	080028f5 	.word	0x080028f5
 800287c:	080028f5 	.word	0x080028f5
 8002880:	080028f5 	.word	0x080028f5
 8002884:	080028f5 	.word	0x080028f5
 8002888:	080028f5 	.word	0x080028f5
 800288c:	08002909 	.word	0x08002909
 8002890:	080028f5 	.word	0x080028f5
 8002894:	080028f5 	.word	0x080028f5
 8002898:	080028f5 	.word	0x080028f5
 800289c:	080028f5 	.word	0x080028f5
 80028a0:	080028f5 	.word	0x080028f5
 80028a4:	080028f5 	.word	0x080028f5
 80028a8:	080028f5 	.word	0x080028f5
 80028ac:	08002909 	.word	0x08002909
 80028b0:	080028f5 	.word	0x080028f5
 80028b4:	080028f5 	.word	0x080028f5
 80028b8:	080028f5 	.word	0x080028f5
 80028bc:	080028f5 	.word	0x080028f5
 80028c0:	080028f5 	.word	0x080028f5
 80028c4:	080028f5 	.word	0x080028f5
 80028c8:	080028f5 	.word	0x080028f5
 80028cc:	08002909 	.word	0x08002909
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	3304      	adds	r3, #4
 80028d4:	2101      	movs	r1, #1
 80028d6:	4618      	mov	r0, r3
 80028d8:	f000 fdfa 	bl	80034d0 <RCCEx_PLL2_Config>
 80028dc:	4603      	mov	r3, r0
 80028de:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80028e0:	e013      	b.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	3324      	adds	r3, #36	; 0x24
 80028e6:	2101      	movs	r1, #1
 80028e8:	4618      	mov	r0, r3
 80028ea:	f000 fea3 	bl	8003634 <RCCEx_PLL3_Config>
 80028ee:	4603      	mov	r3, r0
 80028f0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80028f2:	e00a      	b.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	75fb      	strb	r3, [r7, #23]
      break;
 80028f8:	e007      	b.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80028fa:	bf00      	nop
 80028fc:	58024400 	.word	0x58024400
 8002900:	58024800 	.word	0x58024800
 8002904:	00ffffcf 	.word	0x00ffffcf
      break;
 8002908:	bf00      	nop
    }

    if(ret == HAL_OK)
 800290a:	7dfb      	ldrb	r3, [r7, #23]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d109      	bne.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002910:	4b96      	ldr	r3, [pc, #600]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002914:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800291c:	4993      	ldr	r1, [pc, #588]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800291e:	4313      	orrs	r3, r2
 8002920:	654b      	str	r3, [r1, #84]	; 0x54
 8002922:	e001      	b.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002924:	7dfb      	ldrb	r3, [r7, #23]
 8002926:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0302 	and.w	r3, r3, #2
 8002930:	2b00      	cmp	r3, #0
 8002932:	d038      	beq.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002938:	2b05      	cmp	r3, #5
 800293a:	d821      	bhi.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800293c:	a201      	add	r2, pc, #4	; (adr r2, 8002944 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800293e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002942:	bf00      	nop
 8002944:	08002987 	.word	0x08002987
 8002948:	0800295d 	.word	0x0800295d
 800294c:	0800296f 	.word	0x0800296f
 8002950:	08002987 	.word	0x08002987
 8002954:	08002987 	.word	0x08002987
 8002958:	08002987 	.word	0x08002987
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	3304      	adds	r3, #4
 8002960:	2101      	movs	r1, #1
 8002962:	4618      	mov	r0, r3
 8002964:	f000 fdb4 	bl	80034d0 <RCCEx_PLL2_Config>
 8002968:	4603      	mov	r3, r0
 800296a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800296c:	e00c      	b.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	3324      	adds	r3, #36	; 0x24
 8002972:	2101      	movs	r1, #1
 8002974:	4618      	mov	r0, r3
 8002976:	f000 fe5d 	bl	8003634 <RCCEx_PLL3_Config>
 800297a:	4603      	mov	r3, r0
 800297c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800297e:	e003      	b.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	75fb      	strb	r3, [r7, #23]
      break;
 8002984:	e000      	b.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8002986:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002988:	7dfb      	ldrb	r3, [r7, #23]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d109      	bne.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800298e:	4b77      	ldr	r3, [pc, #476]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002992:	f023 0207 	bic.w	r2, r3, #7
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800299a:	4974      	ldr	r1, [pc, #464]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800299c:	4313      	orrs	r3, r2
 800299e:	654b      	str	r3, [r1, #84]	; 0x54
 80029a0:	e001      	b.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029a2:	7dfb      	ldrb	r3, [r7, #23]
 80029a4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0304 	and.w	r3, r3, #4
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d03a      	beq.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029b8:	2b05      	cmp	r3, #5
 80029ba:	d821      	bhi.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x938>
 80029bc:	a201      	add	r2, pc, #4	; (adr r2, 80029c4 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 80029be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029c2:	bf00      	nop
 80029c4:	08002a07 	.word	0x08002a07
 80029c8:	080029dd 	.word	0x080029dd
 80029cc:	080029ef 	.word	0x080029ef
 80029d0:	08002a07 	.word	0x08002a07
 80029d4:	08002a07 	.word	0x08002a07
 80029d8:	08002a07 	.word	0x08002a07
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	3304      	adds	r3, #4
 80029e0:	2101      	movs	r1, #1
 80029e2:	4618      	mov	r0, r3
 80029e4:	f000 fd74 	bl	80034d0 <RCCEx_PLL2_Config>
 80029e8:	4603      	mov	r3, r0
 80029ea:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80029ec:	e00c      	b.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	3324      	adds	r3, #36	; 0x24
 80029f2:	2101      	movs	r1, #1
 80029f4:	4618      	mov	r0, r3
 80029f6:	f000 fe1d 	bl	8003634 <RCCEx_PLL3_Config>
 80029fa:	4603      	mov	r3, r0
 80029fc:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80029fe:	e003      	b.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	75fb      	strb	r3, [r7, #23]
      break;
 8002a04:	e000      	b.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8002a06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a08:	7dfb      	ldrb	r3, [r7, #23]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d10a      	bne.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a0e:	4b57      	ldr	r3, [pc, #348]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a12:	f023 0207 	bic.w	r2, r3, #7
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a1c:	4953      	ldr	r1, [pc, #332]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	658b      	str	r3, [r1, #88]	; 0x58
 8002a22:	e001      	b.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a24:	7dfb      	ldrb	r3, [r7, #23]
 8002a26:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0320 	and.w	r3, r3, #32
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d04b      	beq.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a3e:	d02e      	beq.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8002a40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a44:	d828      	bhi.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8002a46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a4a:	d02a      	beq.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8002a4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a50:	d822      	bhi.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8002a52:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002a56:	d026      	beq.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8002a58:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002a5c:	d81c      	bhi.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8002a5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a62:	d010      	beq.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8002a64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a68:	d816      	bhi.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d01d      	beq.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8002a6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a72:	d111      	bne.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	3304      	adds	r3, #4
 8002a78:	2100      	movs	r1, #0
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f000 fd28 	bl	80034d0 <RCCEx_PLL2_Config>
 8002a80:	4603      	mov	r3, r0
 8002a82:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002a84:	e012      	b.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	3324      	adds	r3, #36	; 0x24
 8002a8a:	2102      	movs	r1, #2
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f000 fdd1 	bl	8003634 <RCCEx_PLL3_Config>
 8002a92:	4603      	mov	r3, r0
 8002a94:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002a96:	e009      	b.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	75fb      	strb	r3, [r7, #23]
      break;
 8002a9c:	e006      	b.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8002a9e:	bf00      	nop
 8002aa0:	e004      	b.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8002aa2:	bf00      	nop
 8002aa4:	e002      	b.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8002aa6:	bf00      	nop
 8002aa8:	e000      	b.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8002aaa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002aac:	7dfb      	ldrb	r3, [r7, #23]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d10a      	bne.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ab2:	4b2e      	ldr	r3, [pc, #184]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002ab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ab6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ac0:	492a      	ldr	r1, [pc, #168]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	654b      	str	r3, [r1, #84]	; 0x54
 8002ac6:	e001      	b.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ac8:	7dfb      	ldrb	r3, [r7, #23]
 8002aca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d04d      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ade:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002ae2:	d02e      	beq.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8002ae4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002ae8:	d828      	bhi.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8002aea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002aee:	d02a      	beq.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8002af0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002af4:	d822      	bhi.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8002af6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002afa:	d026      	beq.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8002afc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002b00:	d81c      	bhi.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8002b02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b06:	d010      	beq.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8002b08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b0c:	d816      	bhi.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d01d      	beq.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8002b12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b16:	d111      	bne.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	3304      	adds	r3, #4
 8002b1c:	2100      	movs	r1, #0
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f000 fcd6 	bl	80034d0 <RCCEx_PLL2_Config>
 8002b24:	4603      	mov	r3, r0
 8002b26:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002b28:	e012      	b.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	3324      	adds	r3, #36	; 0x24
 8002b2e:	2102      	movs	r1, #2
 8002b30:	4618      	mov	r0, r3
 8002b32:	f000 fd7f 	bl	8003634 <RCCEx_PLL3_Config>
 8002b36:	4603      	mov	r3, r0
 8002b38:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002b3a:	e009      	b.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	75fb      	strb	r3, [r7, #23]
      break;
 8002b40:	e006      	b.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8002b42:	bf00      	nop
 8002b44:	e004      	b.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8002b46:	bf00      	nop
 8002b48:	e002      	b.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8002b4a:	bf00      	nop
 8002b4c:	e000      	b.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8002b4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b50:	7dfb      	ldrb	r3, [r7, #23]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d10c      	bne.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002b56:	4b05      	ldr	r3, [pc, #20]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b5a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b64:	4901      	ldr	r1, [pc, #4]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	658b      	str	r3, [r1, #88]	; 0x58
 8002b6a:	e003      	b.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8002b6c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b70:	7dfb      	ldrb	r3, [r7, #23]
 8002b72:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d04b      	beq.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b86:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002b8a:	d02e      	beq.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8002b8c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002b90:	d828      	bhi.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8002b92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b96:	d02a      	beq.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8002b98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b9c:	d822      	bhi.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8002b9e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002ba2:	d026      	beq.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8002ba4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002ba8:	d81c      	bhi.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8002baa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002bae:	d010      	beq.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8002bb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002bb4:	d816      	bhi.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d01d      	beq.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8002bba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bbe:	d111      	bne.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	3304      	adds	r3, #4
 8002bc4:	2100      	movs	r1, #0
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f000 fc82 	bl	80034d0 <RCCEx_PLL2_Config>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002bd0:	e012      	b.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	3324      	adds	r3, #36	; 0x24
 8002bd6:	2102      	movs	r1, #2
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f000 fd2b 	bl	8003634 <RCCEx_PLL3_Config>
 8002bde:	4603      	mov	r3, r0
 8002be0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002be2:	e009      	b.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	75fb      	strb	r3, [r7, #23]
      break;
 8002be8:	e006      	b.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8002bea:	bf00      	nop
 8002bec:	e004      	b.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8002bee:	bf00      	nop
 8002bf0:	e002      	b.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8002bf2:	bf00      	nop
 8002bf4:	e000      	b.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8002bf6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bf8:	7dfb      	ldrb	r3, [r7, #23]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d10a      	bne.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8002bfe:	4b9d      	ldr	r3, [pc, #628]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002c0c:	4999      	ldr	r1, [pc, #612]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	658b      	str	r3, [r1, #88]	; 0x58
 8002c12:	e001      	b.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c14:	7dfb      	ldrb	r3, [r7, #23]
 8002c16:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0308 	and.w	r3, r3, #8
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d01a      	beq.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c2e:	d10a      	bne.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	3324      	adds	r3, #36	; 0x24
 8002c34:	2102      	movs	r1, #2
 8002c36:	4618      	mov	r0, r3
 8002c38:	f000 fcfc 	bl	8003634 <RCCEx_PLL3_Config>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8002c46:	4b8b      	ldr	r3, [pc, #556]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c4a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c54:	4987      	ldr	r1, [pc, #540]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0310 	and.w	r3, r3, #16
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d01a      	beq.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c70:	d10a      	bne.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	3324      	adds	r3, #36	; 0x24
 8002c76:	2102      	movs	r1, #2
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f000 fcdb 	bl	8003634 <RCCEx_PLL3_Config>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d001      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002c88:	4b7a      	ldr	r3, [pc, #488]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002c8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c96:	4977      	ldr	r1, [pc, #476]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d034      	beq.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002cae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002cb2:	d01d      	beq.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8002cb4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002cb8:	d817      	bhi.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d003      	beq.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8002cbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cc2:	d009      	beq.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8002cc4:	e011      	b.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	3304      	adds	r3, #4
 8002cca:	2100      	movs	r1, #0
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f000 fbff 	bl	80034d0 <RCCEx_PLL2_Config>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8002cd6:	e00c      	b.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	3324      	adds	r3, #36	; 0x24
 8002cdc:	2102      	movs	r1, #2
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f000 fca8 	bl	8003634 <RCCEx_PLL3_Config>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8002ce8:	e003      	b.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	75fb      	strb	r3, [r7, #23]
      break;
 8002cee:	e000      	b.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8002cf0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002cf2:	7dfb      	ldrb	r3, [r7, #23]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d10a      	bne.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002cf8:	4b5e      	ldr	r3, [pc, #376]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cfc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002d06:	495b      	ldr	r1, [pc, #364]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	658b      	str	r3, [r1, #88]	; 0x58
 8002d0c:	e001      	b.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d0e:	7dfb      	ldrb	r3, [r7, #23]
 8002d10:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d033      	beq.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d24:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002d28:	d01c      	beq.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8002d2a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002d2e:	d816      	bhi.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8002d30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d34:	d003      	beq.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8002d36:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d3a:	d007      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8002d3c:	e00f      	b.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d3e:	4b4d      	ldr	r3, [pc, #308]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d42:	4a4c      	ldr	r2, [pc, #304]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002d44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d48:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8002d4a:	e00c      	b.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	3324      	adds	r3, #36	; 0x24
 8002d50:	2101      	movs	r1, #1
 8002d52:	4618      	mov	r0, r3
 8002d54:	f000 fc6e 	bl	8003634 <RCCEx_PLL3_Config>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8002d5c:	e003      	b.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	75fb      	strb	r3, [r7, #23]
      break;
 8002d62:	e000      	b.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8002d64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d66:	7dfb      	ldrb	r3, [r7, #23]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d10a      	bne.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d6c:	4b41      	ldr	r3, [pc, #260]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002d6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d70:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d7a:	493e      	ldr	r1, [pc, #248]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	654b      	str	r3, [r1, #84]	; 0x54
 8002d80:	e001      	b.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d82:	7dfb      	ldrb	r3, [r7, #23]
 8002d84:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d029      	beq.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d003      	beq.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8002d9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d9e:	d007      	beq.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8002da0:	e00f      	b.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002da2:	4b34      	ldr	r3, [pc, #208]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da6:	4a33      	ldr	r2, [pc, #204]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002da8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8002dae:	e00b      	b.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	3304      	adds	r3, #4
 8002db4:	2102      	movs	r1, #2
 8002db6:	4618      	mov	r0, r3
 8002db8:	f000 fb8a 	bl	80034d0 <RCCEx_PLL2_Config>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8002dc0:	e002      	b.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	75fb      	strb	r3, [r7, #23]
      break;
 8002dc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002dc8:	7dfb      	ldrb	r3, [r7, #23]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d109      	bne.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8002dce:	4b29      	ldr	r3, [pc, #164]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dd2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dda:	4926      	ldr	r1, [pc, #152]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002de0:	e001      	b.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002de2:	7dfb      	ldrb	r3, [r7, #23]
 8002de4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d00a      	beq.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	3324      	adds	r3, #36	; 0x24
 8002df6:	2102      	movs	r1, #2
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f000 fc1b 	bl	8003634 <RCCEx_PLL3_Config>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d001      	beq.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d033      	beq.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e1c:	d017      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8002e1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e22:	d811      	bhi.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8002e24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e28:	d013      	beq.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8002e2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e2e:	d80b      	bhi.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d010      	beq.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8002e34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e38:	d106      	bne.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e3a:	4b0e      	ldr	r3, [pc, #56]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e3e:	4a0d      	ldr	r2, [pc, #52]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002e40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e44:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8002e46:	e007      	b.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	75fb      	strb	r3, [r7, #23]
      break;
 8002e4c:	e004      	b.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8002e4e:	bf00      	nop
 8002e50:	e002      	b.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8002e52:	bf00      	nop
 8002e54:	e000      	b.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8002e56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e58:	7dfb      	ldrb	r3, [r7, #23]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d10c      	bne.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002e5e:	4b05      	ldr	r3, [pc, #20]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e62:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e6a:	4902      	ldr	r1, [pc, #8]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	654b      	str	r3, [r1, #84]	; 0x54
 8002e70:	e004      	b.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8002e72:	bf00      	nop
 8002e74:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e78:	7dfb      	ldrb	r3, [r7, #23]
 8002e7a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d008      	beq.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002e88:	4b31      	ldr	r3, [pc, #196]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8002e8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e8c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e94:	492e      	ldr	r1, [pc, #184]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d009      	beq.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8002ea6:	4b2a      	ldr	r3, [pc, #168]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8002ea8:	691b      	ldr	r3, [r3, #16]
 8002eaa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002eb4:	4926      	ldr	r1, [pc, #152]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d008      	beq.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002ec6:	4b22      	ldr	r3, [pc, #136]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8002ec8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002eca:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ed2:	491f      	ldr	r1, [pc, #124]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d00d      	beq.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002ee4:	4b1a      	ldr	r3, [pc, #104]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8002ee6:	691b      	ldr	r3, [r3, #16]
 8002ee8:	4a19      	ldr	r2, [pc, #100]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8002eea:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002eee:	6113      	str	r3, [r2, #16]
 8002ef0:	4b17      	ldr	r3, [pc, #92]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8002ef2:	691a      	ldr	r2, [r3, #16]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002efa:	4915      	ldr	r1, [pc, #84]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	da08      	bge.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8002f08:	4b11      	ldr	r3, [pc, #68]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8002f0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f0c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f14:	490e      	ldr	r1, [pc, #56]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8002f16:	4313      	orrs	r3, r2
 8002f18:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d009      	beq.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002f26:	4b0a      	ldr	r3, [pc, #40]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8002f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f2a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f34:	4906      	ldr	r1, [pc, #24]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8002f36:	4313      	orrs	r3, r2
 8002f38:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8002f3a:	7dbb      	ldrb	r3, [r7, #22]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d101      	bne.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8002f40:	2300      	movs	r3, #0
 8002f42:	e000      	b.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3718      	adds	r7, #24
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	58024400 	.word	0x58024400

08002f54 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8002f58:	f7ff f85a 	bl	8002010 <HAL_RCC_GetHCLKFreq>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	4b06      	ldr	r3, [pc, #24]	; (8002f78 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8002f60:	6a1b      	ldr	r3, [r3, #32]
 8002f62:	091b      	lsrs	r3, r3, #4
 8002f64:	f003 0307 	and.w	r3, r3, #7
 8002f68:	4904      	ldr	r1, [pc, #16]	; (8002f7c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8002f6a:	5ccb      	ldrb	r3, [r1, r3]
 8002f6c:	f003 031f 	and.w	r3, r3, #31
 8002f70:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	58024400 	.word	0x58024400
 8002f7c:	08004a28 	.word	0x08004a28

08002f80 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b089      	sub	sp, #36	; 0x24
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002f88:	4ba1      	ldr	r3, [pc, #644]	; (8003210 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f8c:	f003 0303 	and.w	r3, r3, #3
 8002f90:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8002f92:	4b9f      	ldr	r3, [pc, #636]	; (8003210 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f96:	0b1b      	lsrs	r3, r3, #12
 8002f98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f9c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8002f9e:	4b9c      	ldr	r3, [pc, #624]	; (8003210 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa2:	091b      	lsrs	r3, r3, #4
 8002fa4:	f003 0301 	and.w	r3, r3, #1
 8002fa8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8002faa:	4b99      	ldr	r3, [pc, #612]	; (8003210 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fae:	08db      	lsrs	r3, r3, #3
 8002fb0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002fb4:	693a      	ldr	r2, [r7, #16]
 8002fb6:	fb02 f303 	mul.w	r3, r2, r3
 8002fba:	ee07 3a90 	vmov	s15, r3
 8002fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fc2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	f000 8111 	beq.w	80031f0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	f000 8083 	beq.w	80030dc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	f200 80a1 	bhi.w	8003120 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8002fde:	69bb      	ldr	r3, [r7, #24]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d003      	beq.n	8002fec <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d056      	beq.n	8003098 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8002fea:	e099      	b.n	8003120 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002fec:	4b88      	ldr	r3, [pc, #544]	; (8003210 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0320 	and.w	r3, r3, #32
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d02d      	beq.n	8003054 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002ff8:	4b85      	ldr	r3, [pc, #532]	; (8003210 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	08db      	lsrs	r3, r3, #3
 8002ffe:	f003 0303 	and.w	r3, r3, #3
 8003002:	4a84      	ldr	r2, [pc, #528]	; (8003214 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003004:	fa22 f303 	lsr.w	r3, r2, r3
 8003008:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	ee07 3a90 	vmov	s15, r3
 8003010:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	ee07 3a90 	vmov	s15, r3
 800301a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800301e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003022:	4b7b      	ldr	r3, [pc, #492]	; (8003210 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003026:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800302a:	ee07 3a90 	vmov	s15, r3
 800302e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003032:	ed97 6a03 	vldr	s12, [r7, #12]
 8003036:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003218 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800303a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800303e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003042:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003046:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800304a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800304e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003052:	e087      	b.n	8003164 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	ee07 3a90 	vmov	s15, r3
 800305a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800305e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800321c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003062:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003066:	4b6a      	ldr	r3, [pc, #424]	; (8003210 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800306a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800306e:	ee07 3a90 	vmov	s15, r3
 8003072:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003076:	ed97 6a03 	vldr	s12, [r7, #12]
 800307a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003218 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800307e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003082:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003086:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800308a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800308e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003092:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003096:	e065      	b.n	8003164 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	ee07 3a90 	vmov	s15, r3
 800309e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030a2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003220 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80030a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030aa:	4b59      	ldr	r3, [pc, #356]	; (8003210 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80030ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030b2:	ee07 3a90 	vmov	s15, r3
 80030b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80030be:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003218 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80030c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80030ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80030da:	e043      	b.n	8003164 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	ee07 3a90 	vmov	s15, r3
 80030e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030e6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003224 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80030ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030ee:	4b48      	ldr	r3, [pc, #288]	; (8003210 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80030f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030f6:	ee07 3a90 	vmov	s15, r3
 80030fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8003102:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003218 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003106:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800310a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800310e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003112:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003116:	ee67 7a27 	vmul.f32	s15, s14, s15
 800311a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800311e:	e021      	b.n	8003164 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	ee07 3a90 	vmov	s15, r3
 8003126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800312a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003220 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800312e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003132:	4b37      	ldr	r3, [pc, #220]	; (8003210 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003136:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800313a:	ee07 3a90 	vmov	s15, r3
 800313e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003142:	ed97 6a03 	vldr	s12, [r7, #12]
 8003146:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003218 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800314a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800314e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003152:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003156:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800315a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800315e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003162:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8003164:	4b2a      	ldr	r3, [pc, #168]	; (8003210 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003168:	0a5b      	lsrs	r3, r3, #9
 800316a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800316e:	ee07 3a90 	vmov	s15, r3
 8003172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003176:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800317a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800317e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003182:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003186:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800318a:	ee17 2a90 	vmov	r2, s15
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8003192:	4b1f      	ldr	r3, [pc, #124]	; (8003210 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003196:	0c1b      	lsrs	r3, r3, #16
 8003198:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800319c:	ee07 3a90 	vmov	s15, r3
 80031a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80031a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80031ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80031b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80031b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031b8:	ee17 2a90 	vmov	r2, s15
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80031c0:	4b13      	ldr	r3, [pc, #76]	; (8003210 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80031c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c4:	0e1b      	lsrs	r3, r3, #24
 80031c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031ca:	ee07 3a90 	vmov	s15, r3
 80031ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80031d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80031da:	edd7 6a07 	vldr	s13, [r7, #28]
 80031de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80031e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031e6:	ee17 2a90 	vmov	r2, s15
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80031ee:	e008      	b.n	8003202 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	609a      	str	r2, [r3, #8]
}
 8003202:	bf00      	nop
 8003204:	3724      	adds	r7, #36	; 0x24
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr
 800320e:	bf00      	nop
 8003210:	58024400 	.word	0x58024400
 8003214:	03d09000 	.word	0x03d09000
 8003218:	46000000 	.word	0x46000000
 800321c:	4c742400 	.word	0x4c742400
 8003220:	4a742400 	.word	0x4a742400
 8003224:	4bbebc20 	.word	0x4bbebc20

08003228 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8003228:	b480      	push	{r7}
 800322a:	b089      	sub	sp, #36	; 0x24
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003230:	4ba1      	ldr	r3, [pc, #644]	; (80034b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003234:	f003 0303 	and.w	r3, r3, #3
 8003238:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800323a:	4b9f      	ldr	r3, [pc, #636]	; (80034b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800323c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800323e:	0d1b      	lsrs	r3, r3, #20
 8003240:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003244:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003246:	4b9c      	ldr	r3, [pc, #624]	; (80034b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800324a:	0a1b      	lsrs	r3, r3, #8
 800324c:	f003 0301 	and.w	r3, r3, #1
 8003250:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8003252:	4b99      	ldr	r3, [pc, #612]	; (80034b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003256:	08db      	lsrs	r3, r3, #3
 8003258:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800325c:	693a      	ldr	r2, [r7, #16]
 800325e:	fb02 f303 	mul.w	r3, r2, r3
 8003262:	ee07 3a90 	vmov	s15, r3
 8003266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800326a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	2b00      	cmp	r3, #0
 8003272:	f000 8111 	beq.w	8003498 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003276:	69bb      	ldr	r3, [r7, #24]
 8003278:	2b02      	cmp	r3, #2
 800327a:	f000 8083 	beq.w	8003384 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800327e:	69bb      	ldr	r3, [r7, #24]
 8003280:	2b02      	cmp	r3, #2
 8003282:	f200 80a1 	bhi.w	80033c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003286:	69bb      	ldr	r3, [r7, #24]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d003      	beq.n	8003294 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	2b01      	cmp	r3, #1
 8003290:	d056      	beq.n	8003340 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003292:	e099      	b.n	80033c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003294:	4b88      	ldr	r3, [pc, #544]	; (80034b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0320 	and.w	r3, r3, #32
 800329c:	2b00      	cmp	r3, #0
 800329e:	d02d      	beq.n	80032fc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80032a0:	4b85      	ldr	r3, [pc, #532]	; (80034b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	08db      	lsrs	r3, r3, #3
 80032a6:	f003 0303 	and.w	r3, r3, #3
 80032aa:	4a84      	ldr	r2, [pc, #528]	; (80034bc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80032ac:	fa22 f303 	lsr.w	r3, r2, r3
 80032b0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	ee07 3a90 	vmov	s15, r3
 80032b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	ee07 3a90 	vmov	s15, r3
 80032c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032ca:	4b7b      	ldr	r3, [pc, #492]	; (80034b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80032cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032d2:	ee07 3a90 	vmov	s15, r3
 80032d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032da:	ed97 6a03 	vldr	s12, [r7, #12]
 80032de:	eddf 5a78 	vldr	s11, [pc, #480]	; 80034c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80032e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032f6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80032fa:	e087      	b.n	800340c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	ee07 3a90 	vmov	s15, r3
 8003302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003306:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80034c4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800330a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800330e:	4b6a      	ldr	r3, [pc, #424]	; (80034b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003312:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003316:	ee07 3a90 	vmov	s15, r3
 800331a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800331e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003322:	eddf 5a67 	vldr	s11, [pc, #412]	; 80034c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003326:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800332a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800332e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003332:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003336:	ee67 7a27 	vmul.f32	s15, s14, s15
 800333a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800333e:	e065      	b.n	800340c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	ee07 3a90 	vmov	s15, r3
 8003346:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800334a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80034c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800334e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003352:	4b59      	ldr	r3, [pc, #356]	; (80034b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003356:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800335a:	ee07 3a90 	vmov	s15, r3
 800335e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003362:	ed97 6a03 	vldr	s12, [r7, #12]
 8003366:	eddf 5a56 	vldr	s11, [pc, #344]	; 80034c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800336a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800336e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003372:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003376:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800337a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800337e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003382:	e043      	b.n	800340c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	ee07 3a90 	vmov	s15, r3
 800338a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800338e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80034cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003392:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003396:	4b48      	ldr	r3, [pc, #288]	; (80034b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800339e:	ee07 3a90 	vmov	s15, r3
 80033a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80033aa:	eddf 5a45 	vldr	s11, [pc, #276]	; 80034c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80033ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80033c6:	e021      	b.n	800340c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	ee07 3a90 	vmov	s15, r3
 80033ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033d2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80034c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80033d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033da:	4b37      	ldr	r3, [pc, #220]	; (80034b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80033dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033e2:	ee07 3a90 	vmov	s15, r3
 80033e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80033ee:	eddf 5a34 	vldr	s11, [pc, #208]	; 80034c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80033f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003402:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003406:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800340a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800340c:	4b2a      	ldr	r3, [pc, #168]	; (80034b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800340e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003410:	0a5b      	lsrs	r3, r3, #9
 8003412:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003416:	ee07 3a90 	vmov	s15, r3
 800341a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800341e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003422:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003426:	edd7 6a07 	vldr	s13, [r7, #28]
 800342a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800342e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003432:	ee17 2a90 	vmov	r2, s15
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800343a:	4b1f      	ldr	r3, [pc, #124]	; (80034b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800343c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343e:	0c1b      	lsrs	r3, r3, #16
 8003440:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003444:	ee07 3a90 	vmov	s15, r3
 8003448:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800344c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003450:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003454:	edd7 6a07 	vldr	s13, [r7, #28]
 8003458:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800345c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003460:	ee17 2a90 	vmov	r2, s15
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8003468:	4b13      	ldr	r3, [pc, #76]	; (80034b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800346a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346c:	0e1b      	lsrs	r3, r3, #24
 800346e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003472:	ee07 3a90 	vmov	s15, r3
 8003476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800347a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800347e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003482:	edd7 6a07 	vldr	s13, [r7, #28]
 8003486:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800348a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800348e:	ee17 2a90 	vmov	r2, s15
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003496:	e008      	b.n	80034aa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	609a      	str	r2, [r3, #8]
}
 80034aa:	bf00      	nop
 80034ac:	3724      	adds	r7, #36	; 0x24
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	58024400 	.word	0x58024400
 80034bc:	03d09000 	.word	0x03d09000
 80034c0:	46000000 	.word	0x46000000
 80034c4:	4c742400 	.word	0x4c742400
 80034c8:	4a742400 	.word	0x4a742400
 80034cc:	4bbebc20 	.word	0x4bbebc20

080034d0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80034da:	2300      	movs	r3, #0
 80034dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80034de:	4b53      	ldr	r3, [pc, #332]	; (800362c <RCCEx_PLL2_Config+0x15c>)
 80034e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e2:	f003 0303 	and.w	r3, r3, #3
 80034e6:	2b03      	cmp	r3, #3
 80034e8:	d101      	bne.n	80034ee <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e099      	b.n	8003622 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80034ee:	4b4f      	ldr	r3, [pc, #316]	; (800362c <RCCEx_PLL2_Config+0x15c>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a4e      	ldr	r2, [pc, #312]	; (800362c <RCCEx_PLL2_Config+0x15c>)
 80034f4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80034f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034fa:	f7fd fb45 	bl	8000b88 <HAL_GetTick>
 80034fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003500:	e008      	b.n	8003514 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003502:	f7fd fb41 	bl	8000b88 <HAL_GetTick>
 8003506:	4602      	mov	r2, r0
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	2b02      	cmp	r3, #2
 800350e:	d901      	bls.n	8003514 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003510:	2303      	movs	r3, #3
 8003512:	e086      	b.n	8003622 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003514:	4b45      	ldr	r3, [pc, #276]	; (800362c <RCCEx_PLL2_Config+0x15c>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d1f0      	bne.n	8003502 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003520:	4b42      	ldr	r3, [pc, #264]	; (800362c <RCCEx_PLL2_Config+0x15c>)
 8003522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003524:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	031b      	lsls	r3, r3, #12
 800352e:	493f      	ldr	r1, [pc, #252]	; (800362c <RCCEx_PLL2_Config+0x15c>)
 8003530:	4313      	orrs	r3, r2
 8003532:	628b      	str	r3, [r1, #40]	; 0x28
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	3b01      	subs	r3, #1
 800353a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	3b01      	subs	r3, #1
 8003544:	025b      	lsls	r3, r3, #9
 8003546:	b29b      	uxth	r3, r3
 8003548:	431a      	orrs	r2, r3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	3b01      	subs	r3, #1
 8003550:	041b      	lsls	r3, r3, #16
 8003552:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003556:	431a      	orrs	r2, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	691b      	ldr	r3, [r3, #16]
 800355c:	3b01      	subs	r3, #1
 800355e:	061b      	lsls	r3, r3, #24
 8003560:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003564:	4931      	ldr	r1, [pc, #196]	; (800362c <RCCEx_PLL2_Config+0x15c>)
 8003566:	4313      	orrs	r3, r2
 8003568:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800356a:	4b30      	ldr	r3, [pc, #192]	; (800362c <RCCEx_PLL2_Config+0x15c>)
 800356c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800356e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	695b      	ldr	r3, [r3, #20]
 8003576:	492d      	ldr	r1, [pc, #180]	; (800362c <RCCEx_PLL2_Config+0x15c>)
 8003578:	4313      	orrs	r3, r2
 800357a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800357c:	4b2b      	ldr	r3, [pc, #172]	; (800362c <RCCEx_PLL2_Config+0x15c>)
 800357e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003580:	f023 0220 	bic.w	r2, r3, #32
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	699b      	ldr	r3, [r3, #24]
 8003588:	4928      	ldr	r1, [pc, #160]	; (800362c <RCCEx_PLL2_Config+0x15c>)
 800358a:	4313      	orrs	r3, r2
 800358c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800358e:	4b27      	ldr	r3, [pc, #156]	; (800362c <RCCEx_PLL2_Config+0x15c>)
 8003590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003592:	4a26      	ldr	r2, [pc, #152]	; (800362c <RCCEx_PLL2_Config+0x15c>)
 8003594:	f023 0310 	bic.w	r3, r3, #16
 8003598:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800359a:	4b24      	ldr	r3, [pc, #144]	; (800362c <RCCEx_PLL2_Config+0x15c>)
 800359c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800359e:	4b24      	ldr	r3, [pc, #144]	; (8003630 <RCCEx_PLL2_Config+0x160>)
 80035a0:	4013      	ands	r3, r2
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	69d2      	ldr	r2, [r2, #28]
 80035a6:	00d2      	lsls	r2, r2, #3
 80035a8:	4920      	ldr	r1, [pc, #128]	; (800362c <RCCEx_PLL2_Config+0x15c>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80035ae:	4b1f      	ldr	r3, [pc, #124]	; (800362c <RCCEx_PLL2_Config+0x15c>)
 80035b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b2:	4a1e      	ldr	r2, [pc, #120]	; (800362c <RCCEx_PLL2_Config+0x15c>)
 80035b4:	f043 0310 	orr.w	r3, r3, #16
 80035b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d106      	bne.n	80035ce <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80035c0:	4b1a      	ldr	r3, [pc, #104]	; (800362c <RCCEx_PLL2_Config+0x15c>)
 80035c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c4:	4a19      	ldr	r2, [pc, #100]	; (800362c <RCCEx_PLL2_Config+0x15c>)
 80035c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80035ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 80035cc:	e00f      	b.n	80035ee <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d106      	bne.n	80035e2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80035d4:	4b15      	ldr	r3, [pc, #84]	; (800362c <RCCEx_PLL2_Config+0x15c>)
 80035d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d8:	4a14      	ldr	r2, [pc, #80]	; (800362c <RCCEx_PLL2_Config+0x15c>)
 80035da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035de:	62d3      	str	r3, [r2, #44]	; 0x2c
 80035e0:	e005      	b.n	80035ee <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80035e2:	4b12      	ldr	r3, [pc, #72]	; (800362c <RCCEx_PLL2_Config+0x15c>)
 80035e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e6:	4a11      	ldr	r2, [pc, #68]	; (800362c <RCCEx_PLL2_Config+0x15c>)
 80035e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80035ec:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80035ee:	4b0f      	ldr	r3, [pc, #60]	; (800362c <RCCEx_PLL2_Config+0x15c>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a0e      	ldr	r2, [pc, #56]	; (800362c <RCCEx_PLL2_Config+0x15c>)
 80035f4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80035f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035fa:	f7fd fac5 	bl	8000b88 <HAL_GetTick>
 80035fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003600:	e008      	b.n	8003614 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003602:	f7fd fac1 	bl	8000b88 <HAL_GetTick>
 8003606:	4602      	mov	r2, r0
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	2b02      	cmp	r3, #2
 800360e:	d901      	bls.n	8003614 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003610:	2303      	movs	r3, #3
 8003612:	e006      	b.n	8003622 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003614:	4b05      	ldr	r3, [pc, #20]	; (800362c <RCCEx_PLL2_Config+0x15c>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d0f0      	beq.n	8003602 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003620:	7bfb      	ldrb	r3, [r7, #15]
}
 8003622:	4618      	mov	r0, r3
 8003624:	3710      	adds	r7, #16
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	58024400 	.word	0x58024400
 8003630:	ffff0007 	.word	0xffff0007

08003634 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800363e:	2300      	movs	r3, #0
 8003640:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003642:	4b53      	ldr	r3, [pc, #332]	; (8003790 <RCCEx_PLL3_Config+0x15c>)
 8003644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003646:	f003 0303 	and.w	r3, r3, #3
 800364a:	2b03      	cmp	r3, #3
 800364c:	d101      	bne.n	8003652 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e099      	b.n	8003786 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003652:	4b4f      	ldr	r3, [pc, #316]	; (8003790 <RCCEx_PLL3_Config+0x15c>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a4e      	ldr	r2, [pc, #312]	; (8003790 <RCCEx_PLL3_Config+0x15c>)
 8003658:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800365c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800365e:	f7fd fa93 	bl	8000b88 <HAL_GetTick>
 8003662:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003664:	e008      	b.n	8003678 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003666:	f7fd fa8f 	bl	8000b88 <HAL_GetTick>
 800366a:	4602      	mov	r2, r0
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	2b02      	cmp	r3, #2
 8003672:	d901      	bls.n	8003678 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003674:	2303      	movs	r3, #3
 8003676:	e086      	b.n	8003786 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003678:	4b45      	ldr	r3, [pc, #276]	; (8003790 <RCCEx_PLL3_Config+0x15c>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003680:	2b00      	cmp	r3, #0
 8003682:	d1f0      	bne.n	8003666 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003684:	4b42      	ldr	r3, [pc, #264]	; (8003790 <RCCEx_PLL3_Config+0x15c>)
 8003686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003688:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	051b      	lsls	r3, r3, #20
 8003692:	493f      	ldr	r1, [pc, #252]	; (8003790 <RCCEx_PLL3_Config+0x15c>)
 8003694:	4313      	orrs	r3, r2
 8003696:	628b      	str	r3, [r1, #40]	; 0x28
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	3b01      	subs	r3, #1
 800369e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	3b01      	subs	r3, #1
 80036a8:	025b      	lsls	r3, r3, #9
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	431a      	orrs	r2, r3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	3b01      	subs	r3, #1
 80036b4:	041b      	lsls	r3, r3, #16
 80036b6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80036ba:	431a      	orrs	r2, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	691b      	ldr	r3, [r3, #16]
 80036c0:	3b01      	subs	r3, #1
 80036c2:	061b      	lsls	r3, r3, #24
 80036c4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80036c8:	4931      	ldr	r1, [pc, #196]	; (8003790 <RCCEx_PLL3_Config+0x15c>)
 80036ca:	4313      	orrs	r3, r2
 80036cc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80036ce:	4b30      	ldr	r3, [pc, #192]	; (8003790 <RCCEx_PLL3_Config+0x15c>)
 80036d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	695b      	ldr	r3, [r3, #20]
 80036da:	492d      	ldr	r1, [pc, #180]	; (8003790 <RCCEx_PLL3_Config+0x15c>)
 80036dc:	4313      	orrs	r3, r2
 80036de:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80036e0:	4b2b      	ldr	r3, [pc, #172]	; (8003790 <RCCEx_PLL3_Config+0x15c>)
 80036e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	699b      	ldr	r3, [r3, #24]
 80036ec:	4928      	ldr	r1, [pc, #160]	; (8003790 <RCCEx_PLL3_Config+0x15c>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80036f2:	4b27      	ldr	r3, [pc, #156]	; (8003790 <RCCEx_PLL3_Config+0x15c>)
 80036f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f6:	4a26      	ldr	r2, [pc, #152]	; (8003790 <RCCEx_PLL3_Config+0x15c>)
 80036f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036fc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80036fe:	4b24      	ldr	r3, [pc, #144]	; (8003790 <RCCEx_PLL3_Config+0x15c>)
 8003700:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003702:	4b24      	ldr	r3, [pc, #144]	; (8003794 <RCCEx_PLL3_Config+0x160>)
 8003704:	4013      	ands	r3, r2
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	69d2      	ldr	r2, [r2, #28]
 800370a:	00d2      	lsls	r2, r2, #3
 800370c:	4920      	ldr	r1, [pc, #128]	; (8003790 <RCCEx_PLL3_Config+0x15c>)
 800370e:	4313      	orrs	r3, r2
 8003710:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003712:	4b1f      	ldr	r3, [pc, #124]	; (8003790 <RCCEx_PLL3_Config+0x15c>)
 8003714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003716:	4a1e      	ldr	r2, [pc, #120]	; (8003790 <RCCEx_PLL3_Config+0x15c>)
 8003718:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800371c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d106      	bne.n	8003732 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003724:	4b1a      	ldr	r3, [pc, #104]	; (8003790 <RCCEx_PLL3_Config+0x15c>)
 8003726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003728:	4a19      	ldr	r2, [pc, #100]	; (8003790 <RCCEx_PLL3_Config+0x15c>)
 800372a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800372e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003730:	e00f      	b.n	8003752 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	2b01      	cmp	r3, #1
 8003736:	d106      	bne.n	8003746 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003738:	4b15      	ldr	r3, [pc, #84]	; (8003790 <RCCEx_PLL3_Config+0x15c>)
 800373a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800373c:	4a14      	ldr	r2, [pc, #80]	; (8003790 <RCCEx_PLL3_Config+0x15c>)
 800373e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003742:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003744:	e005      	b.n	8003752 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003746:	4b12      	ldr	r3, [pc, #72]	; (8003790 <RCCEx_PLL3_Config+0x15c>)
 8003748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800374a:	4a11      	ldr	r2, [pc, #68]	; (8003790 <RCCEx_PLL3_Config+0x15c>)
 800374c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003750:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003752:	4b0f      	ldr	r3, [pc, #60]	; (8003790 <RCCEx_PLL3_Config+0x15c>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a0e      	ldr	r2, [pc, #56]	; (8003790 <RCCEx_PLL3_Config+0x15c>)
 8003758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800375c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800375e:	f7fd fa13 	bl	8000b88 <HAL_GetTick>
 8003762:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003764:	e008      	b.n	8003778 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003766:	f7fd fa0f 	bl	8000b88 <HAL_GetTick>
 800376a:	4602      	mov	r2, r0
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	2b02      	cmp	r3, #2
 8003772:	d901      	bls.n	8003778 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e006      	b.n	8003786 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003778:	4b05      	ldr	r3, [pc, #20]	; (8003790 <RCCEx_PLL3_Config+0x15c>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d0f0      	beq.n	8003766 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003784:	7bfb      	ldrb	r3, [r7, #15]
}
 8003786:	4618      	mov	r0, r3
 8003788:	3710      	adds	r7, #16
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	58024400 	.word	0x58024400
 8003794:	ffff0007 	.word	0xffff0007

08003798 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d101      	bne.n	80037aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e042      	b.n	8003830 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d106      	bne.n	80037c2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f7fd f81b 	bl	80007f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2224      	movs	r2, #36	; 0x24
 80037c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f022 0201 	bic.w	r2, r2, #1
 80037d8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 f8c2 	bl	8003964 <UART_SetConfig>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d101      	bne.n	80037ea <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e022      	b.n	8003830 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d002      	beq.n	80037f8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 fe1e 	bl	8004434 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	685a      	ldr	r2, [r3, #4]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003806:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	689a      	ldr	r2, [r3, #8]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003816:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f042 0201 	orr.w	r2, r2, #1
 8003826:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f000 fea5 	bl	8004578 <UART_CheckIdleState>
 800382e:	4603      	mov	r3, r0
}
 8003830:	4618      	mov	r0, r3
 8003832:	3708      	adds	r7, #8
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b08a      	sub	sp, #40	; 0x28
 800383c:	af02      	add	r7, sp, #8
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	60b9      	str	r1, [r7, #8]
 8003842:	603b      	str	r3, [r7, #0]
 8003844:	4613      	mov	r3, r2
 8003846:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800384e:	2b20      	cmp	r3, #32
 8003850:	f040 8083 	bne.w	800395a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d002      	beq.n	8003860 <HAL_UART_Transmit+0x28>
 800385a:	88fb      	ldrh	r3, [r7, #6]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d101      	bne.n	8003864 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e07b      	b.n	800395c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800386a:	2b01      	cmp	r3, #1
 800386c:	d101      	bne.n	8003872 <HAL_UART_Transmit+0x3a>
 800386e:	2302      	movs	r3, #2
 8003870:	e074      	b.n	800395c <HAL_UART_Transmit+0x124>
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2201      	movs	r2, #1
 8003876:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2200      	movs	r2, #0
 800387e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2221      	movs	r2, #33	; 0x21
 8003886:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800388a:	f7fd f97d 	bl	8000b88 <HAL_GetTick>
 800388e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	88fa      	ldrh	r2, [r7, #6]
 8003894:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	88fa      	ldrh	r2, [r7, #6]
 800389c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038a8:	d108      	bne.n	80038bc <HAL_UART_Transmit+0x84>
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	691b      	ldr	r3, [r3, #16]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d104      	bne.n	80038bc <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80038b2:	2300      	movs	r3, #0
 80038b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	61bb      	str	r3, [r7, #24]
 80038ba:	e003      	b.n	80038c4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038c0:	2300      	movs	r3, #0
 80038c2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80038cc:	e02c      	b.n	8003928 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	9300      	str	r3, [sp, #0]
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	2200      	movs	r2, #0
 80038d6:	2180      	movs	r1, #128	; 0x80
 80038d8:	68f8      	ldr	r0, [r7, #12]
 80038da:	f000 fe98 	bl	800460e <UART_WaitOnFlagUntilTimeout>
 80038de:	4603      	mov	r3, r0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d001      	beq.n	80038e8 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e039      	b.n	800395c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d10b      	bne.n	8003906 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	881b      	ldrh	r3, [r3, #0]
 80038f2:	461a      	mov	r2, r3
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038fc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80038fe:	69bb      	ldr	r3, [r7, #24]
 8003900:	3302      	adds	r3, #2
 8003902:	61bb      	str	r3, [r7, #24]
 8003904:	e007      	b.n	8003916 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	781a      	ldrb	r2, [r3, #0]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	3301      	adds	r3, #1
 8003914:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800391c:	b29b      	uxth	r3, r3
 800391e:	3b01      	subs	r3, #1
 8003920:	b29a      	uxth	r2, r3
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800392e:	b29b      	uxth	r3, r3
 8003930:	2b00      	cmp	r3, #0
 8003932:	d1cc      	bne.n	80038ce <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	9300      	str	r3, [sp, #0]
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	2200      	movs	r2, #0
 800393c:	2140      	movs	r1, #64	; 0x40
 800393e:	68f8      	ldr	r0, [r7, #12]
 8003940:	f000 fe65 	bl	800460e <UART_WaitOnFlagUntilTimeout>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d001      	beq.n	800394e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e006      	b.n	800395c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2220      	movs	r2, #32
 8003952:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8003956:	2300      	movs	r3, #0
 8003958:	e000      	b.n	800395c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800395a:	2302      	movs	r3, #2
  }
}
 800395c:	4618      	mov	r0, r3
 800395e:	3720      	adds	r7, #32
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003964:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003968:	b092      	sub	sp, #72	; 0x48
 800396a:	af00      	add	r7, sp, #0
 800396c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800396e:	2300      	movs	r3, #0
 8003970:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	689a      	ldr	r2, [r3, #8]
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	691b      	ldr	r3, [r3, #16]
 800397c:	431a      	orrs	r2, r3
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	695b      	ldr	r3, [r3, #20]
 8003982:	431a      	orrs	r2, r3
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	69db      	ldr	r3, [r3, #28]
 8003988:	4313      	orrs	r3, r2
 800398a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	4bbe      	ldr	r3, [pc, #760]	; (8003c8c <UART_SetConfig+0x328>)
 8003994:	4013      	ands	r3, r2
 8003996:	697a      	ldr	r2, [r7, #20]
 8003998:	6812      	ldr	r2, [r2, #0]
 800399a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800399c:	430b      	orrs	r3, r1
 800399e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	68da      	ldr	r2, [r3, #12]
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	430a      	orrs	r2, r1
 80039b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	699b      	ldr	r3, [r3, #24]
 80039ba:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4ab3      	ldr	r2, [pc, #716]	; (8003c90 <UART_SetConfig+0x32c>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d004      	beq.n	80039d0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	6a1b      	ldr	r3, [r3, #32]
 80039ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80039cc:	4313      	orrs	r3, r2
 80039ce:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	689a      	ldr	r2, [r3, #8]
 80039d6:	4baf      	ldr	r3, [pc, #700]	; (8003c94 <UART_SetConfig+0x330>)
 80039d8:	4013      	ands	r3, r2
 80039da:	697a      	ldr	r2, [r7, #20]
 80039dc:	6812      	ldr	r2, [r2, #0]
 80039de:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80039e0:	430b      	orrs	r3, r1
 80039e2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ea:	f023 010f 	bic.w	r1, r3, #15
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	430a      	orrs	r2, r1
 80039f8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4aa6      	ldr	r2, [pc, #664]	; (8003c98 <UART_SetConfig+0x334>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d177      	bne.n	8003af4 <UART_SetConfig+0x190>
 8003a04:	4ba5      	ldr	r3, [pc, #660]	; (8003c9c <UART_SetConfig+0x338>)
 8003a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a08:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a0c:	2b28      	cmp	r3, #40	; 0x28
 8003a0e:	d86d      	bhi.n	8003aec <UART_SetConfig+0x188>
 8003a10:	a201      	add	r2, pc, #4	; (adr r2, 8003a18 <UART_SetConfig+0xb4>)
 8003a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a16:	bf00      	nop
 8003a18:	08003abd 	.word	0x08003abd
 8003a1c:	08003aed 	.word	0x08003aed
 8003a20:	08003aed 	.word	0x08003aed
 8003a24:	08003aed 	.word	0x08003aed
 8003a28:	08003aed 	.word	0x08003aed
 8003a2c:	08003aed 	.word	0x08003aed
 8003a30:	08003aed 	.word	0x08003aed
 8003a34:	08003aed 	.word	0x08003aed
 8003a38:	08003ac5 	.word	0x08003ac5
 8003a3c:	08003aed 	.word	0x08003aed
 8003a40:	08003aed 	.word	0x08003aed
 8003a44:	08003aed 	.word	0x08003aed
 8003a48:	08003aed 	.word	0x08003aed
 8003a4c:	08003aed 	.word	0x08003aed
 8003a50:	08003aed 	.word	0x08003aed
 8003a54:	08003aed 	.word	0x08003aed
 8003a58:	08003acd 	.word	0x08003acd
 8003a5c:	08003aed 	.word	0x08003aed
 8003a60:	08003aed 	.word	0x08003aed
 8003a64:	08003aed 	.word	0x08003aed
 8003a68:	08003aed 	.word	0x08003aed
 8003a6c:	08003aed 	.word	0x08003aed
 8003a70:	08003aed 	.word	0x08003aed
 8003a74:	08003aed 	.word	0x08003aed
 8003a78:	08003ad5 	.word	0x08003ad5
 8003a7c:	08003aed 	.word	0x08003aed
 8003a80:	08003aed 	.word	0x08003aed
 8003a84:	08003aed 	.word	0x08003aed
 8003a88:	08003aed 	.word	0x08003aed
 8003a8c:	08003aed 	.word	0x08003aed
 8003a90:	08003aed 	.word	0x08003aed
 8003a94:	08003aed 	.word	0x08003aed
 8003a98:	08003add 	.word	0x08003add
 8003a9c:	08003aed 	.word	0x08003aed
 8003aa0:	08003aed 	.word	0x08003aed
 8003aa4:	08003aed 	.word	0x08003aed
 8003aa8:	08003aed 	.word	0x08003aed
 8003aac:	08003aed 	.word	0x08003aed
 8003ab0:	08003aed 	.word	0x08003aed
 8003ab4:	08003aed 	.word	0x08003aed
 8003ab8:	08003ae5 	.word	0x08003ae5
 8003abc:	2301      	movs	r3, #1
 8003abe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003ac2:	e222      	b.n	8003f0a <UART_SetConfig+0x5a6>
 8003ac4:	2304      	movs	r3, #4
 8003ac6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003aca:	e21e      	b.n	8003f0a <UART_SetConfig+0x5a6>
 8003acc:	2308      	movs	r3, #8
 8003ace:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003ad2:	e21a      	b.n	8003f0a <UART_SetConfig+0x5a6>
 8003ad4:	2310      	movs	r3, #16
 8003ad6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003ada:	e216      	b.n	8003f0a <UART_SetConfig+0x5a6>
 8003adc:	2320      	movs	r3, #32
 8003ade:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003ae2:	e212      	b.n	8003f0a <UART_SetConfig+0x5a6>
 8003ae4:	2340      	movs	r3, #64	; 0x40
 8003ae6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003aea:	e20e      	b.n	8003f0a <UART_SetConfig+0x5a6>
 8003aec:	2380      	movs	r3, #128	; 0x80
 8003aee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003af2:	e20a      	b.n	8003f0a <UART_SetConfig+0x5a6>
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a69      	ldr	r2, [pc, #420]	; (8003ca0 <UART_SetConfig+0x33c>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d130      	bne.n	8003b60 <UART_SetConfig+0x1fc>
 8003afe:	4b67      	ldr	r3, [pc, #412]	; (8003c9c <UART_SetConfig+0x338>)
 8003b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b02:	f003 0307 	and.w	r3, r3, #7
 8003b06:	2b05      	cmp	r3, #5
 8003b08:	d826      	bhi.n	8003b58 <UART_SetConfig+0x1f4>
 8003b0a:	a201      	add	r2, pc, #4	; (adr r2, 8003b10 <UART_SetConfig+0x1ac>)
 8003b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b10:	08003b29 	.word	0x08003b29
 8003b14:	08003b31 	.word	0x08003b31
 8003b18:	08003b39 	.word	0x08003b39
 8003b1c:	08003b41 	.word	0x08003b41
 8003b20:	08003b49 	.word	0x08003b49
 8003b24:	08003b51 	.word	0x08003b51
 8003b28:	2300      	movs	r3, #0
 8003b2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003b2e:	e1ec      	b.n	8003f0a <UART_SetConfig+0x5a6>
 8003b30:	2304      	movs	r3, #4
 8003b32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003b36:	e1e8      	b.n	8003f0a <UART_SetConfig+0x5a6>
 8003b38:	2308      	movs	r3, #8
 8003b3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003b3e:	e1e4      	b.n	8003f0a <UART_SetConfig+0x5a6>
 8003b40:	2310      	movs	r3, #16
 8003b42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003b46:	e1e0      	b.n	8003f0a <UART_SetConfig+0x5a6>
 8003b48:	2320      	movs	r3, #32
 8003b4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003b4e:	e1dc      	b.n	8003f0a <UART_SetConfig+0x5a6>
 8003b50:	2340      	movs	r3, #64	; 0x40
 8003b52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003b56:	e1d8      	b.n	8003f0a <UART_SetConfig+0x5a6>
 8003b58:	2380      	movs	r3, #128	; 0x80
 8003b5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003b5e:	e1d4      	b.n	8003f0a <UART_SetConfig+0x5a6>
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a4f      	ldr	r2, [pc, #316]	; (8003ca4 <UART_SetConfig+0x340>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d130      	bne.n	8003bcc <UART_SetConfig+0x268>
 8003b6a:	4b4c      	ldr	r3, [pc, #304]	; (8003c9c <UART_SetConfig+0x338>)
 8003b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b6e:	f003 0307 	and.w	r3, r3, #7
 8003b72:	2b05      	cmp	r3, #5
 8003b74:	d826      	bhi.n	8003bc4 <UART_SetConfig+0x260>
 8003b76:	a201      	add	r2, pc, #4	; (adr r2, 8003b7c <UART_SetConfig+0x218>)
 8003b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b7c:	08003b95 	.word	0x08003b95
 8003b80:	08003b9d 	.word	0x08003b9d
 8003b84:	08003ba5 	.word	0x08003ba5
 8003b88:	08003bad 	.word	0x08003bad
 8003b8c:	08003bb5 	.word	0x08003bb5
 8003b90:	08003bbd 	.word	0x08003bbd
 8003b94:	2300      	movs	r3, #0
 8003b96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003b9a:	e1b6      	b.n	8003f0a <UART_SetConfig+0x5a6>
 8003b9c:	2304      	movs	r3, #4
 8003b9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003ba2:	e1b2      	b.n	8003f0a <UART_SetConfig+0x5a6>
 8003ba4:	2308      	movs	r3, #8
 8003ba6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003baa:	e1ae      	b.n	8003f0a <UART_SetConfig+0x5a6>
 8003bac:	2310      	movs	r3, #16
 8003bae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003bb2:	e1aa      	b.n	8003f0a <UART_SetConfig+0x5a6>
 8003bb4:	2320      	movs	r3, #32
 8003bb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003bba:	e1a6      	b.n	8003f0a <UART_SetConfig+0x5a6>
 8003bbc:	2340      	movs	r3, #64	; 0x40
 8003bbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003bc2:	e1a2      	b.n	8003f0a <UART_SetConfig+0x5a6>
 8003bc4:	2380      	movs	r3, #128	; 0x80
 8003bc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003bca:	e19e      	b.n	8003f0a <UART_SetConfig+0x5a6>
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a35      	ldr	r2, [pc, #212]	; (8003ca8 <UART_SetConfig+0x344>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d130      	bne.n	8003c38 <UART_SetConfig+0x2d4>
 8003bd6:	4b31      	ldr	r3, [pc, #196]	; (8003c9c <UART_SetConfig+0x338>)
 8003bd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bda:	f003 0307 	and.w	r3, r3, #7
 8003bde:	2b05      	cmp	r3, #5
 8003be0:	d826      	bhi.n	8003c30 <UART_SetConfig+0x2cc>
 8003be2:	a201      	add	r2, pc, #4	; (adr r2, 8003be8 <UART_SetConfig+0x284>)
 8003be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003be8:	08003c01 	.word	0x08003c01
 8003bec:	08003c09 	.word	0x08003c09
 8003bf0:	08003c11 	.word	0x08003c11
 8003bf4:	08003c19 	.word	0x08003c19
 8003bf8:	08003c21 	.word	0x08003c21
 8003bfc:	08003c29 	.word	0x08003c29
 8003c00:	2300      	movs	r3, #0
 8003c02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003c06:	e180      	b.n	8003f0a <UART_SetConfig+0x5a6>
 8003c08:	2304      	movs	r3, #4
 8003c0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003c0e:	e17c      	b.n	8003f0a <UART_SetConfig+0x5a6>
 8003c10:	2308      	movs	r3, #8
 8003c12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003c16:	e178      	b.n	8003f0a <UART_SetConfig+0x5a6>
 8003c18:	2310      	movs	r3, #16
 8003c1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003c1e:	e174      	b.n	8003f0a <UART_SetConfig+0x5a6>
 8003c20:	2320      	movs	r3, #32
 8003c22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003c26:	e170      	b.n	8003f0a <UART_SetConfig+0x5a6>
 8003c28:	2340      	movs	r3, #64	; 0x40
 8003c2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003c2e:	e16c      	b.n	8003f0a <UART_SetConfig+0x5a6>
 8003c30:	2380      	movs	r3, #128	; 0x80
 8003c32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003c36:	e168      	b.n	8003f0a <UART_SetConfig+0x5a6>
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a1b      	ldr	r2, [pc, #108]	; (8003cac <UART_SetConfig+0x348>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d142      	bne.n	8003cc8 <UART_SetConfig+0x364>
 8003c42:	4b16      	ldr	r3, [pc, #88]	; (8003c9c <UART_SetConfig+0x338>)
 8003c44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c46:	f003 0307 	and.w	r3, r3, #7
 8003c4a:	2b05      	cmp	r3, #5
 8003c4c:	d838      	bhi.n	8003cc0 <UART_SetConfig+0x35c>
 8003c4e:	a201      	add	r2, pc, #4	; (adr r2, 8003c54 <UART_SetConfig+0x2f0>)
 8003c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c54:	08003c6d 	.word	0x08003c6d
 8003c58:	08003c75 	.word	0x08003c75
 8003c5c:	08003c7d 	.word	0x08003c7d
 8003c60:	08003c85 	.word	0x08003c85
 8003c64:	08003cb1 	.word	0x08003cb1
 8003c68:	08003cb9 	.word	0x08003cb9
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003c72:	e14a      	b.n	8003f0a <UART_SetConfig+0x5a6>
 8003c74:	2304      	movs	r3, #4
 8003c76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003c7a:	e146      	b.n	8003f0a <UART_SetConfig+0x5a6>
 8003c7c:	2308      	movs	r3, #8
 8003c7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003c82:	e142      	b.n	8003f0a <UART_SetConfig+0x5a6>
 8003c84:	2310      	movs	r3, #16
 8003c86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003c8a:	e13e      	b.n	8003f0a <UART_SetConfig+0x5a6>
 8003c8c:	cfff69f3 	.word	0xcfff69f3
 8003c90:	58000c00 	.word	0x58000c00
 8003c94:	11fff4ff 	.word	0x11fff4ff
 8003c98:	40011000 	.word	0x40011000
 8003c9c:	58024400 	.word	0x58024400
 8003ca0:	40004400 	.word	0x40004400
 8003ca4:	40004800 	.word	0x40004800
 8003ca8:	40004c00 	.word	0x40004c00
 8003cac:	40005000 	.word	0x40005000
 8003cb0:	2320      	movs	r3, #32
 8003cb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003cb6:	e128      	b.n	8003f0a <UART_SetConfig+0x5a6>
 8003cb8:	2340      	movs	r3, #64	; 0x40
 8003cba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003cbe:	e124      	b.n	8003f0a <UART_SetConfig+0x5a6>
 8003cc0:	2380      	movs	r3, #128	; 0x80
 8003cc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003cc6:	e120      	b.n	8003f0a <UART_SetConfig+0x5a6>
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4acb      	ldr	r2, [pc, #812]	; (8003ffc <UART_SetConfig+0x698>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d176      	bne.n	8003dc0 <UART_SetConfig+0x45c>
 8003cd2:	4bcb      	ldr	r3, [pc, #812]	; (8004000 <UART_SetConfig+0x69c>)
 8003cd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cd6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003cda:	2b28      	cmp	r3, #40	; 0x28
 8003cdc:	d86c      	bhi.n	8003db8 <UART_SetConfig+0x454>
 8003cde:	a201      	add	r2, pc, #4	; (adr r2, 8003ce4 <UART_SetConfig+0x380>)
 8003ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ce4:	08003d89 	.word	0x08003d89
 8003ce8:	08003db9 	.word	0x08003db9
 8003cec:	08003db9 	.word	0x08003db9
 8003cf0:	08003db9 	.word	0x08003db9
 8003cf4:	08003db9 	.word	0x08003db9
 8003cf8:	08003db9 	.word	0x08003db9
 8003cfc:	08003db9 	.word	0x08003db9
 8003d00:	08003db9 	.word	0x08003db9
 8003d04:	08003d91 	.word	0x08003d91
 8003d08:	08003db9 	.word	0x08003db9
 8003d0c:	08003db9 	.word	0x08003db9
 8003d10:	08003db9 	.word	0x08003db9
 8003d14:	08003db9 	.word	0x08003db9
 8003d18:	08003db9 	.word	0x08003db9
 8003d1c:	08003db9 	.word	0x08003db9
 8003d20:	08003db9 	.word	0x08003db9
 8003d24:	08003d99 	.word	0x08003d99
 8003d28:	08003db9 	.word	0x08003db9
 8003d2c:	08003db9 	.word	0x08003db9
 8003d30:	08003db9 	.word	0x08003db9
 8003d34:	08003db9 	.word	0x08003db9
 8003d38:	08003db9 	.word	0x08003db9
 8003d3c:	08003db9 	.word	0x08003db9
 8003d40:	08003db9 	.word	0x08003db9
 8003d44:	08003da1 	.word	0x08003da1
 8003d48:	08003db9 	.word	0x08003db9
 8003d4c:	08003db9 	.word	0x08003db9
 8003d50:	08003db9 	.word	0x08003db9
 8003d54:	08003db9 	.word	0x08003db9
 8003d58:	08003db9 	.word	0x08003db9
 8003d5c:	08003db9 	.word	0x08003db9
 8003d60:	08003db9 	.word	0x08003db9
 8003d64:	08003da9 	.word	0x08003da9
 8003d68:	08003db9 	.word	0x08003db9
 8003d6c:	08003db9 	.word	0x08003db9
 8003d70:	08003db9 	.word	0x08003db9
 8003d74:	08003db9 	.word	0x08003db9
 8003d78:	08003db9 	.word	0x08003db9
 8003d7c:	08003db9 	.word	0x08003db9
 8003d80:	08003db9 	.word	0x08003db9
 8003d84:	08003db1 	.word	0x08003db1
 8003d88:	2301      	movs	r3, #1
 8003d8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003d8e:	e0bc      	b.n	8003f0a <UART_SetConfig+0x5a6>
 8003d90:	2304      	movs	r3, #4
 8003d92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003d96:	e0b8      	b.n	8003f0a <UART_SetConfig+0x5a6>
 8003d98:	2308      	movs	r3, #8
 8003d9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003d9e:	e0b4      	b.n	8003f0a <UART_SetConfig+0x5a6>
 8003da0:	2310      	movs	r3, #16
 8003da2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003da6:	e0b0      	b.n	8003f0a <UART_SetConfig+0x5a6>
 8003da8:	2320      	movs	r3, #32
 8003daa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003dae:	e0ac      	b.n	8003f0a <UART_SetConfig+0x5a6>
 8003db0:	2340      	movs	r3, #64	; 0x40
 8003db2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003db6:	e0a8      	b.n	8003f0a <UART_SetConfig+0x5a6>
 8003db8:	2380      	movs	r3, #128	; 0x80
 8003dba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003dbe:	e0a4      	b.n	8003f0a <UART_SetConfig+0x5a6>
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a8f      	ldr	r2, [pc, #572]	; (8004004 <UART_SetConfig+0x6a0>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d130      	bne.n	8003e2c <UART_SetConfig+0x4c8>
 8003dca:	4b8d      	ldr	r3, [pc, #564]	; (8004000 <UART_SetConfig+0x69c>)
 8003dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dce:	f003 0307 	and.w	r3, r3, #7
 8003dd2:	2b05      	cmp	r3, #5
 8003dd4:	d826      	bhi.n	8003e24 <UART_SetConfig+0x4c0>
 8003dd6:	a201      	add	r2, pc, #4	; (adr r2, 8003ddc <UART_SetConfig+0x478>)
 8003dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ddc:	08003df5 	.word	0x08003df5
 8003de0:	08003dfd 	.word	0x08003dfd
 8003de4:	08003e05 	.word	0x08003e05
 8003de8:	08003e0d 	.word	0x08003e0d
 8003dec:	08003e15 	.word	0x08003e15
 8003df0:	08003e1d 	.word	0x08003e1d
 8003df4:	2300      	movs	r3, #0
 8003df6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003dfa:	e086      	b.n	8003f0a <UART_SetConfig+0x5a6>
 8003dfc:	2304      	movs	r3, #4
 8003dfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003e02:	e082      	b.n	8003f0a <UART_SetConfig+0x5a6>
 8003e04:	2308      	movs	r3, #8
 8003e06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003e0a:	e07e      	b.n	8003f0a <UART_SetConfig+0x5a6>
 8003e0c:	2310      	movs	r3, #16
 8003e0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003e12:	e07a      	b.n	8003f0a <UART_SetConfig+0x5a6>
 8003e14:	2320      	movs	r3, #32
 8003e16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003e1a:	e076      	b.n	8003f0a <UART_SetConfig+0x5a6>
 8003e1c:	2340      	movs	r3, #64	; 0x40
 8003e1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003e22:	e072      	b.n	8003f0a <UART_SetConfig+0x5a6>
 8003e24:	2380      	movs	r3, #128	; 0x80
 8003e26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003e2a:	e06e      	b.n	8003f0a <UART_SetConfig+0x5a6>
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a75      	ldr	r2, [pc, #468]	; (8004008 <UART_SetConfig+0x6a4>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d130      	bne.n	8003e98 <UART_SetConfig+0x534>
 8003e36:	4b72      	ldr	r3, [pc, #456]	; (8004000 <UART_SetConfig+0x69c>)
 8003e38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e3a:	f003 0307 	and.w	r3, r3, #7
 8003e3e:	2b05      	cmp	r3, #5
 8003e40:	d826      	bhi.n	8003e90 <UART_SetConfig+0x52c>
 8003e42:	a201      	add	r2, pc, #4	; (adr r2, 8003e48 <UART_SetConfig+0x4e4>)
 8003e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e48:	08003e61 	.word	0x08003e61
 8003e4c:	08003e69 	.word	0x08003e69
 8003e50:	08003e71 	.word	0x08003e71
 8003e54:	08003e79 	.word	0x08003e79
 8003e58:	08003e81 	.word	0x08003e81
 8003e5c:	08003e89 	.word	0x08003e89
 8003e60:	2300      	movs	r3, #0
 8003e62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003e66:	e050      	b.n	8003f0a <UART_SetConfig+0x5a6>
 8003e68:	2304      	movs	r3, #4
 8003e6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003e6e:	e04c      	b.n	8003f0a <UART_SetConfig+0x5a6>
 8003e70:	2308      	movs	r3, #8
 8003e72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003e76:	e048      	b.n	8003f0a <UART_SetConfig+0x5a6>
 8003e78:	2310      	movs	r3, #16
 8003e7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003e7e:	e044      	b.n	8003f0a <UART_SetConfig+0x5a6>
 8003e80:	2320      	movs	r3, #32
 8003e82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003e86:	e040      	b.n	8003f0a <UART_SetConfig+0x5a6>
 8003e88:	2340      	movs	r3, #64	; 0x40
 8003e8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003e8e:	e03c      	b.n	8003f0a <UART_SetConfig+0x5a6>
 8003e90:	2380      	movs	r3, #128	; 0x80
 8003e92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003e96:	e038      	b.n	8003f0a <UART_SetConfig+0x5a6>
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a5b      	ldr	r2, [pc, #364]	; (800400c <UART_SetConfig+0x6a8>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d130      	bne.n	8003f04 <UART_SetConfig+0x5a0>
 8003ea2:	4b57      	ldr	r3, [pc, #348]	; (8004000 <UART_SetConfig+0x69c>)
 8003ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ea6:	f003 0307 	and.w	r3, r3, #7
 8003eaa:	2b05      	cmp	r3, #5
 8003eac:	d826      	bhi.n	8003efc <UART_SetConfig+0x598>
 8003eae:	a201      	add	r2, pc, #4	; (adr r2, 8003eb4 <UART_SetConfig+0x550>)
 8003eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eb4:	08003ecd 	.word	0x08003ecd
 8003eb8:	08003ed5 	.word	0x08003ed5
 8003ebc:	08003edd 	.word	0x08003edd
 8003ec0:	08003ee5 	.word	0x08003ee5
 8003ec4:	08003eed 	.word	0x08003eed
 8003ec8:	08003ef5 	.word	0x08003ef5
 8003ecc:	2302      	movs	r3, #2
 8003ece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003ed2:	e01a      	b.n	8003f0a <UART_SetConfig+0x5a6>
 8003ed4:	2304      	movs	r3, #4
 8003ed6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003eda:	e016      	b.n	8003f0a <UART_SetConfig+0x5a6>
 8003edc:	2308      	movs	r3, #8
 8003ede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003ee2:	e012      	b.n	8003f0a <UART_SetConfig+0x5a6>
 8003ee4:	2310      	movs	r3, #16
 8003ee6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003eea:	e00e      	b.n	8003f0a <UART_SetConfig+0x5a6>
 8003eec:	2320      	movs	r3, #32
 8003eee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003ef2:	e00a      	b.n	8003f0a <UART_SetConfig+0x5a6>
 8003ef4:	2340      	movs	r3, #64	; 0x40
 8003ef6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003efa:	e006      	b.n	8003f0a <UART_SetConfig+0x5a6>
 8003efc:	2380      	movs	r3, #128	; 0x80
 8003efe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8003f02:	e002      	b.n	8003f0a <UART_SetConfig+0x5a6>
 8003f04:	2380      	movs	r3, #128	; 0x80
 8003f06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a3f      	ldr	r2, [pc, #252]	; (800400c <UART_SetConfig+0x6a8>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	f040 80f8 	bne.w	8004106 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003f16:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8003f1a:	2b20      	cmp	r3, #32
 8003f1c:	dc46      	bgt.n	8003fac <UART_SetConfig+0x648>
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	f2c0 8082 	blt.w	8004028 <UART_SetConfig+0x6c4>
 8003f24:	3b02      	subs	r3, #2
 8003f26:	2b1e      	cmp	r3, #30
 8003f28:	d87e      	bhi.n	8004028 <UART_SetConfig+0x6c4>
 8003f2a:	a201      	add	r2, pc, #4	; (adr r2, 8003f30 <UART_SetConfig+0x5cc>)
 8003f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f30:	08003fb3 	.word	0x08003fb3
 8003f34:	08004029 	.word	0x08004029
 8003f38:	08003fbb 	.word	0x08003fbb
 8003f3c:	08004029 	.word	0x08004029
 8003f40:	08004029 	.word	0x08004029
 8003f44:	08004029 	.word	0x08004029
 8003f48:	08003fcb 	.word	0x08003fcb
 8003f4c:	08004029 	.word	0x08004029
 8003f50:	08004029 	.word	0x08004029
 8003f54:	08004029 	.word	0x08004029
 8003f58:	08004029 	.word	0x08004029
 8003f5c:	08004029 	.word	0x08004029
 8003f60:	08004029 	.word	0x08004029
 8003f64:	08004029 	.word	0x08004029
 8003f68:	08003fdb 	.word	0x08003fdb
 8003f6c:	08004029 	.word	0x08004029
 8003f70:	08004029 	.word	0x08004029
 8003f74:	08004029 	.word	0x08004029
 8003f78:	08004029 	.word	0x08004029
 8003f7c:	08004029 	.word	0x08004029
 8003f80:	08004029 	.word	0x08004029
 8003f84:	08004029 	.word	0x08004029
 8003f88:	08004029 	.word	0x08004029
 8003f8c:	08004029 	.word	0x08004029
 8003f90:	08004029 	.word	0x08004029
 8003f94:	08004029 	.word	0x08004029
 8003f98:	08004029 	.word	0x08004029
 8003f9c:	08004029 	.word	0x08004029
 8003fa0:	08004029 	.word	0x08004029
 8003fa4:	08004029 	.word	0x08004029
 8003fa8:	0800401b 	.word	0x0800401b
 8003fac:	2b40      	cmp	r3, #64	; 0x40
 8003fae:	d037      	beq.n	8004020 <UART_SetConfig+0x6bc>
 8003fb0:	e03a      	b.n	8004028 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8003fb2:	f7fe ffcf 	bl	8002f54 <HAL_RCCEx_GetD3PCLK1Freq>
 8003fb6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8003fb8:	e03c      	b.n	8004034 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003fba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f7fe ffde 	bl	8002f80 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8003fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003fc8:	e034      	b.n	8004034 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003fca:	f107 0318 	add.w	r3, r7, #24
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f7ff f92a 	bl	8003228 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003fd8:	e02c      	b.n	8004034 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003fda:	4b09      	ldr	r3, [pc, #36]	; (8004000 <UART_SetConfig+0x69c>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0320 	and.w	r3, r3, #32
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d016      	beq.n	8004014 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8003fe6:	4b06      	ldr	r3, [pc, #24]	; (8004000 <UART_SetConfig+0x69c>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	08db      	lsrs	r3, r3, #3
 8003fec:	f003 0303 	and.w	r3, r3, #3
 8003ff0:	4a07      	ldr	r2, [pc, #28]	; (8004010 <UART_SetConfig+0x6ac>)
 8003ff2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003ff8:	e01c      	b.n	8004034 <UART_SetConfig+0x6d0>
 8003ffa:	bf00      	nop
 8003ffc:	40011400 	.word	0x40011400
 8004000:	58024400 	.word	0x58024400
 8004004:	40007800 	.word	0x40007800
 8004008:	40007c00 	.word	0x40007c00
 800400c:	58000c00 	.word	0x58000c00
 8004010:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8004014:	4b9d      	ldr	r3, [pc, #628]	; (800428c <UART_SetConfig+0x928>)
 8004016:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004018:	e00c      	b.n	8004034 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800401a:	4b9d      	ldr	r3, [pc, #628]	; (8004290 <UART_SetConfig+0x92c>)
 800401c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800401e:	e009      	b.n	8004034 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004020:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004024:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004026:	e005      	b.n	8004034 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8004028:	2300      	movs	r3, #0
 800402a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004032:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004034:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004036:	2b00      	cmp	r3, #0
 8004038:	f000 81de 	beq.w	80043f8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004040:	4a94      	ldr	r2, [pc, #592]	; (8004294 <UART_SetConfig+0x930>)
 8004042:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004046:	461a      	mov	r2, r3
 8004048:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800404a:	fbb3 f3f2 	udiv	r3, r3, r2
 800404e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	685a      	ldr	r2, [r3, #4]
 8004054:	4613      	mov	r3, r2
 8004056:	005b      	lsls	r3, r3, #1
 8004058:	4413      	add	r3, r2
 800405a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800405c:	429a      	cmp	r2, r3
 800405e:	d305      	bcc.n	800406c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004066:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004068:	429a      	cmp	r2, r3
 800406a:	d903      	bls.n	8004074 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004072:	e1c1      	b.n	80043f8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004074:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004076:	2200      	movs	r2, #0
 8004078:	60bb      	str	r3, [r7, #8]
 800407a:	60fa      	str	r2, [r7, #12]
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004080:	4a84      	ldr	r2, [pc, #528]	; (8004294 <UART_SetConfig+0x930>)
 8004082:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004086:	b29b      	uxth	r3, r3
 8004088:	2200      	movs	r2, #0
 800408a:	603b      	str	r3, [r7, #0]
 800408c:	607a      	str	r2, [r7, #4]
 800408e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004092:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004096:	f7fc f91f 	bl	80002d8 <__aeabi_uldivmod>
 800409a:	4602      	mov	r2, r0
 800409c:	460b      	mov	r3, r1
 800409e:	4610      	mov	r0, r2
 80040a0:	4619      	mov	r1, r3
 80040a2:	f04f 0200 	mov.w	r2, #0
 80040a6:	f04f 0300 	mov.w	r3, #0
 80040aa:	020b      	lsls	r3, r1, #8
 80040ac:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80040b0:	0202      	lsls	r2, r0, #8
 80040b2:	6979      	ldr	r1, [r7, #20]
 80040b4:	6849      	ldr	r1, [r1, #4]
 80040b6:	0849      	lsrs	r1, r1, #1
 80040b8:	2000      	movs	r0, #0
 80040ba:	460c      	mov	r4, r1
 80040bc:	4605      	mov	r5, r0
 80040be:	eb12 0804 	adds.w	r8, r2, r4
 80040c2:	eb43 0905 	adc.w	r9, r3, r5
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	469a      	mov	sl, r3
 80040ce:	4693      	mov	fp, r2
 80040d0:	4652      	mov	r2, sl
 80040d2:	465b      	mov	r3, fp
 80040d4:	4640      	mov	r0, r8
 80040d6:	4649      	mov	r1, r9
 80040d8:	f7fc f8fe 	bl	80002d8 <__aeabi_uldivmod>
 80040dc:	4602      	mov	r2, r0
 80040de:	460b      	mov	r3, r1
 80040e0:	4613      	mov	r3, r2
 80040e2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80040e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040ea:	d308      	bcc.n	80040fe <UART_SetConfig+0x79a>
 80040ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040f2:	d204      	bcs.n	80040fe <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80040fa:	60da      	str	r2, [r3, #12]
 80040fc:	e17c      	b.n	80043f8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004104:	e178      	b.n	80043f8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	69db      	ldr	r3, [r3, #28]
 800410a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800410e:	f040 80c5 	bne.w	800429c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8004112:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004116:	2b20      	cmp	r3, #32
 8004118:	dc48      	bgt.n	80041ac <UART_SetConfig+0x848>
 800411a:	2b00      	cmp	r3, #0
 800411c:	db7b      	blt.n	8004216 <UART_SetConfig+0x8b2>
 800411e:	2b20      	cmp	r3, #32
 8004120:	d879      	bhi.n	8004216 <UART_SetConfig+0x8b2>
 8004122:	a201      	add	r2, pc, #4	; (adr r2, 8004128 <UART_SetConfig+0x7c4>)
 8004124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004128:	080041b3 	.word	0x080041b3
 800412c:	080041bb 	.word	0x080041bb
 8004130:	08004217 	.word	0x08004217
 8004134:	08004217 	.word	0x08004217
 8004138:	080041c3 	.word	0x080041c3
 800413c:	08004217 	.word	0x08004217
 8004140:	08004217 	.word	0x08004217
 8004144:	08004217 	.word	0x08004217
 8004148:	080041d3 	.word	0x080041d3
 800414c:	08004217 	.word	0x08004217
 8004150:	08004217 	.word	0x08004217
 8004154:	08004217 	.word	0x08004217
 8004158:	08004217 	.word	0x08004217
 800415c:	08004217 	.word	0x08004217
 8004160:	08004217 	.word	0x08004217
 8004164:	08004217 	.word	0x08004217
 8004168:	080041e3 	.word	0x080041e3
 800416c:	08004217 	.word	0x08004217
 8004170:	08004217 	.word	0x08004217
 8004174:	08004217 	.word	0x08004217
 8004178:	08004217 	.word	0x08004217
 800417c:	08004217 	.word	0x08004217
 8004180:	08004217 	.word	0x08004217
 8004184:	08004217 	.word	0x08004217
 8004188:	08004217 	.word	0x08004217
 800418c:	08004217 	.word	0x08004217
 8004190:	08004217 	.word	0x08004217
 8004194:	08004217 	.word	0x08004217
 8004198:	08004217 	.word	0x08004217
 800419c:	08004217 	.word	0x08004217
 80041a0:	08004217 	.word	0x08004217
 80041a4:	08004217 	.word	0x08004217
 80041a8:	08004209 	.word	0x08004209
 80041ac:	2b40      	cmp	r3, #64	; 0x40
 80041ae:	d02e      	beq.n	800420e <UART_SetConfig+0x8aa>
 80041b0:	e031      	b.n	8004216 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041b2:	f7fd ff5d 	bl	8002070 <HAL_RCC_GetPCLK1Freq>
 80041b6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80041b8:	e033      	b.n	8004222 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041ba:	f7fd ff6f 	bl	800209c <HAL_RCC_GetPCLK2Freq>
 80041be:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80041c0:	e02f      	b.n	8004222 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80041c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041c6:	4618      	mov	r0, r3
 80041c8:	f7fe feda 	bl	8002f80 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80041cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80041d0:	e027      	b.n	8004222 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80041d2:	f107 0318 	add.w	r3, r7, #24
 80041d6:	4618      	mov	r0, r3
 80041d8:	f7ff f826 	bl	8003228 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80041dc:	69fb      	ldr	r3, [r7, #28]
 80041de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80041e0:	e01f      	b.n	8004222 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80041e2:	4b2d      	ldr	r3, [pc, #180]	; (8004298 <UART_SetConfig+0x934>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0320 	and.w	r3, r3, #32
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d009      	beq.n	8004202 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80041ee:	4b2a      	ldr	r3, [pc, #168]	; (8004298 <UART_SetConfig+0x934>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	08db      	lsrs	r3, r3, #3
 80041f4:	f003 0303 	and.w	r3, r3, #3
 80041f8:	4a24      	ldr	r2, [pc, #144]	; (800428c <UART_SetConfig+0x928>)
 80041fa:	fa22 f303 	lsr.w	r3, r2, r3
 80041fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004200:	e00f      	b.n	8004222 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8004202:	4b22      	ldr	r3, [pc, #136]	; (800428c <UART_SetConfig+0x928>)
 8004204:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004206:	e00c      	b.n	8004222 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004208:	4b21      	ldr	r3, [pc, #132]	; (8004290 <UART_SetConfig+0x92c>)
 800420a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800420c:	e009      	b.n	8004222 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800420e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004212:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004214:	e005      	b.n	8004222 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8004216:	2300      	movs	r3, #0
 8004218:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004220:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004222:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004224:	2b00      	cmp	r3, #0
 8004226:	f000 80e7 	beq.w	80043f8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422e:	4a19      	ldr	r2, [pc, #100]	; (8004294 <UART_SetConfig+0x930>)
 8004230:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004234:	461a      	mov	r2, r3
 8004236:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004238:	fbb3 f3f2 	udiv	r3, r3, r2
 800423c:	005a      	lsls	r2, r3, #1
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	085b      	lsrs	r3, r3, #1
 8004244:	441a      	add	r2, r3
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	fbb2 f3f3 	udiv	r3, r2, r3
 800424e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004252:	2b0f      	cmp	r3, #15
 8004254:	d916      	bls.n	8004284 <UART_SetConfig+0x920>
 8004256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004258:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800425c:	d212      	bcs.n	8004284 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800425e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004260:	b29b      	uxth	r3, r3
 8004262:	f023 030f 	bic.w	r3, r3, #15
 8004266:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800426a:	085b      	lsrs	r3, r3, #1
 800426c:	b29b      	uxth	r3, r3
 800426e:	f003 0307 	and.w	r3, r3, #7
 8004272:	b29a      	uxth	r2, r3
 8004274:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004276:	4313      	orrs	r3, r2
 8004278:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004280:	60da      	str	r2, [r3, #12]
 8004282:	e0b9      	b.n	80043f8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800428a:	e0b5      	b.n	80043f8 <UART_SetConfig+0xa94>
 800428c:	03d09000 	.word	0x03d09000
 8004290:	003d0900 	.word	0x003d0900
 8004294:	08004a38 	.word	0x08004a38
 8004298:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800429c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80042a0:	2b20      	cmp	r3, #32
 80042a2:	dc49      	bgt.n	8004338 <UART_SetConfig+0x9d4>
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	db7c      	blt.n	80043a2 <UART_SetConfig+0xa3e>
 80042a8:	2b20      	cmp	r3, #32
 80042aa:	d87a      	bhi.n	80043a2 <UART_SetConfig+0xa3e>
 80042ac:	a201      	add	r2, pc, #4	; (adr r2, 80042b4 <UART_SetConfig+0x950>)
 80042ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042b2:	bf00      	nop
 80042b4:	0800433f 	.word	0x0800433f
 80042b8:	08004347 	.word	0x08004347
 80042bc:	080043a3 	.word	0x080043a3
 80042c0:	080043a3 	.word	0x080043a3
 80042c4:	0800434f 	.word	0x0800434f
 80042c8:	080043a3 	.word	0x080043a3
 80042cc:	080043a3 	.word	0x080043a3
 80042d0:	080043a3 	.word	0x080043a3
 80042d4:	0800435f 	.word	0x0800435f
 80042d8:	080043a3 	.word	0x080043a3
 80042dc:	080043a3 	.word	0x080043a3
 80042e0:	080043a3 	.word	0x080043a3
 80042e4:	080043a3 	.word	0x080043a3
 80042e8:	080043a3 	.word	0x080043a3
 80042ec:	080043a3 	.word	0x080043a3
 80042f0:	080043a3 	.word	0x080043a3
 80042f4:	0800436f 	.word	0x0800436f
 80042f8:	080043a3 	.word	0x080043a3
 80042fc:	080043a3 	.word	0x080043a3
 8004300:	080043a3 	.word	0x080043a3
 8004304:	080043a3 	.word	0x080043a3
 8004308:	080043a3 	.word	0x080043a3
 800430c:	080043a3 	.word	0x080043a3
 8004310:	080043a3 	.word	0x080043a3
 8004314:	080043a3 	.word	0x080043a3
 8004318:	080043a3 	.word	0x080043a3
 800431c:	080043a3 	.word	0x080043a3
 8004320:	080043a3 	.word	0x080043a3
 8004324:	080043a3 	.word	0x080043a3
 8004328:	080043a3 	.word	0x080043a3
 800432c:	080043a3 	.word	0x080043a3
 8004330:	080043a3 	.word	0x080043a3
 8004334:	08004395 	.word	0x08004395
 8004338:	2b40      	cmp	r3, #64	; 0x40
 800433a:	d02e      	beq.n	800439a <UART_SetConfig+0xa36>
 800433c:	e031      	b.n	80043a2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800433e:	f7fd fe97 	bl	8002070 <HAL_RCC_GetPCLK1Freq>
 8004342:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004344:	e033      	b.n	80043ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004346:	f7fd fea9 	bl	800209c <HAL_RCC_GetPCLK2Freq>
 800434a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800434c:	e02f      	b.n	80043ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800434e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004352:	4618      	mov	r0, r3
 8004354:	f7fe fe14 	bl	8002f80 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800435a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800435c:	e027      	b.n	80043ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800435e:	f107 0318 	add.w	r3, r7, #24
 8004362:	4618      	mov	r0, r3
 8004364:	f7fe ff60 	bl	8003228 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004368:	69fb      	ldr	r3, [r7, #28]
 800436a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800436c:	e01f      	b.n	80043ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800436e:	4b2d      	ldr	r3, [pc, #180]	; (8004424 <UART_SetConfig+0xac0>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0320 	and.w	r3, r3, #32
 8004376:	2b00      	cmp	r3, #0
 8004378:	d009      	beq.n	800438e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800437a:	4b2a      	ldr	r3, [pc, #168]	; (8004424 <UART_SetConfig+0xac0>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	08db      	lsrs	r3, r3, #3
 8004380:	f003 0303 	and.w	r3, r3, #3
 8004384:	4a28      	ldr	r2, [pc, #160]	; (8004428 <UART_SetConfig+0xac4>)
 8004386:	fa22 f303 	lsr.w	r3, r2, r3
 800438a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800438c:	e00f      	b.n	80043ae <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800438e:	4b26      	ldr	r3, [pc, #152]	; (8004428 <UART_SetConfig+0xac4>)
 8004390:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004392:	e00c      	b.n	80043ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004394:	4b25      	ldr	r3, [pc, #148]	; (800442c <UART_SetConfig+0xac8>)
 8004396:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004398:	e009      	b.n	80043ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800439a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800439e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80043a0:	e005      	b.n	80043ae <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80043a2:	2300      	movs	r3, #0
 80043a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80043ac:	bf00      	nop
    }

    if (pclk != 0U)
 80043ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d021      	beq.n	80043f8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b8:	4a1d      	ldr	r2, [pc, #116]	; (8004430 <UART_SetConfig+0xacc>)
 80043ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80043be:	461a      	mov	r2, r3
 80043c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043c2:	fbb3 f2f2 	udiv	r2, r3, r2
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	085b      	lsrs	r3, r3, #1
 80043cc:	441a      	add	r2, r3
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80043d6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043da:	2b0f      	cmp	r3, #15
 80043dc:	d909      	bls.n	80043f2 <UART_SetConfig+0xa8e>
 80043de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043e4:	d205      	bcs.n	80043f2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80043e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043e8:	b29a      	uxth	r2, r3
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	60da      	str	r2, [r3, #12]
 80043f0:	e002      	b.n	80043f8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	2201      	movs	r2, #1
 8004404:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	2200      	movs	r2, #0
 800440c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	2200      	movs	r2, #0
 8004412:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004414:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8004418:	4618      	mov	r0, r3
 800441a:	3748      	adds	r7, #72	; 0x48
 800441c:	46bd      	mov	sp, r7
 800441e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004422:	bf00      	nop
 8004424:	58024400 	.word	0x58024400
 8004428:	03d09000 	.word	0x03d09000
 800442c:	003d0900 	.word	0x003d0900
 8004430:	08004a38 	.word	0x08004a38

08004434 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004440:	f003 0301 	and.w	r3, r3, #1
 8004444:	2b00      	cmp	r3, #0
 8004446:	d00a      	beq.n	800445e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	430a      	orrs	r2, r1
 800445c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004462:	f003 0302 	and.w	r3, r3, #2
 8004466:	2b00      	cmp	r3, #0
 8004468:	d00a      	beq.n	8004480 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	430a      	orrs	r2, r1
 800447e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004484:	f003 0304 	and.w	r3, r3, #4
 8004488:	2b00      	cmp	r3, #0
 800448a:	d00a      	beq.n	80044a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	430a      	orrs	r2, r1
 80044a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a6:	f003 0308 	and.w	r3, r3, #8
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d00a      	beq.n	80044c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	430a      	orrs	r2, r1
 80044c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c8:	f003 0310 	and.w	r3, r3, #16
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d00a      	beq.n	80044e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	430a      	orrs	r2, r1
 80044e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ea:	f003 0320 	and.w	r3, r3, #32
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d00a      	beq.n	8004508 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	430a      	orrs	r2, r1
 8004506:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800450c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004510:	2b00      	cmp	r3, #0
 8004512:	d01a      	beq.n	800454a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	430a      	orrs	r2, r1
 8004528:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800452e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004532:	d10a      	bne.n	800454a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	430a      	orrs	r2, r1
 8004548:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800454e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004552:	2b00      	cmp	r3, #0
 8004554:	d00a      	beq.n	800456c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	430a      	orrs	r2, r1
 800456a:	605a      	str	r2, [r3, #4]
  }
}
 800456c:	bf00      	nop
 800456e:	370c      	adds	r7, #12
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr

08004578 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b086      	sub	sp, #24
 800457c:	af02      	add	r7, sp, #8
 800457e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004588:	f7fc fafe 	bl	8000b88 <HAL_GetTick>
 800458c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 0308 	and.w	r3, r3, #8
 8004598:	2b08      	cmp	r3, #8
 800459a:	d10e      	bne.n	80045ba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800459c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80045a0:	9300      	str	r3, [sp, #0]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2200      	movs	r2, #0
 80045a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 f82f 	bl	800460e <UART_WaitOnFlagUntilTimeout>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d001      	beq.n	80045ba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045b6:	2303      	movs	r3, #3
 80045b8:	e025      	b.n	8004606 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0304 	and.w	r3, r3, #4
 80045c4:	2b04      	cmp	r3, #4
 80045c6:	d10e      	bne.n	80045e6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80045cc:	9300      	str	r3, [sp, #0]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2200      	movs	r2, #0
 80045d2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f000 f819 	bl	800460e <UART_WaitOnFlagUntilTimeout>
 80045dc:	4603      	mov	r3, r0
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d001      	beq.n	80045e6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	e00f      	b.n	8004606 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2220      	movs	r2, #32
 80045ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2220      	movs	r2, #32
 80045f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004604:	2300      	movs	r3, #0
}
 8004606:	4618      	mov	r0, r3
 8004608:	3710      	adds	r7, #16
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}

0800460e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800460e:	b580      	push	{r7, lr}
 8004610:	b09c      	sub	sp, #112	; 0x70
 8004612:	af00      	add	r7, sp, #0
 8004614:	60f8      	str	r0, [r7, #12]
 8004616:	60b9      	str	r1, [r7, #8]
 8004618:	603b      	str	r3, [r7, #0]
 800461a:	4613      	mov	r3, r2
 800461c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800461e:	e0a9      	b.n	8004774 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004620:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004622:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004626:	f000 80a5 	beq.w	8004774 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800462a:	f7fc faad 	bl	8000b88 <HAL_GetTick>
 800462e:	4602      	mov	r2, r0
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	1ad3      	subs	r3, r2, r3
 8004634:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004636:	429a      	cmp	r2, r3
 8004638:	d302      	bcc.n	8004640 <UART_WaitOnFlagUntilTimeout+0x32>
 800463a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800463c:	2b00      	cmp	r3, #0
 800463e:	d140      	bne.n	80046c2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004646:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004648:	e853 3f00 	ldrex	r3, [r3]
 800464c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800464e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004650:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004654:	667b      	str	r3, [r7, #100]	; 0x64
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	461a      	mov	r2, r3
 800465c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800465e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004660:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004662:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004664:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004666:	e841 2300 	strex	r3, r2, [r1]
 800466a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800466c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800466e:	2b00      	cmp	r3, #0
 8004670:	d1e6      	bne.n	8004640 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	3308      	adds	r3, #8
 8004678:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800467a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800467c:	e853 3f00 	ldrex	r3, [r3]
 8004680:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004684:	f023 0301 	bic.w	r3, r3, #1
 8004688:	663b      	str	r3, [r7, #96]	; 0x60
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	3308      	adds	r3, #8
 8004690:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004692:	64ba      	str	r2, [r7, #72]	; 0x48
 8004694:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004696:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004698:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800469a:	e841 2300 	strex	r3, r2, [r1]
 800469e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80046a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d1e5      	bne.n	8004672 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2220      	movs	r2, #32
 80046aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2220      	movs	r2, #32
 80046b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2200      	movs	r2, #0
 80046ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	e069      	b.n	8004796 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 0304 	and.w	r3, r3, #4
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d051      	beq.n	8004774 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	69db      	ldr	r3, [r3, #28]
 80046d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046de:	d149      	bne.n	8004774 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80046e8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f2:	e853 3f00 	ldrex	r3, [r3]
 80046f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80046f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80046fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	461a      	mov	r2, r3
 8004706:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004708:	637b      	str	r3, [r7, #52]	; 0x34
 800470a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800470c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800470e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004710:	e841 2300 	strex	r3, r2, [r1]
 8004714:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004718:	2b00      	cmp	r3, #0
 800471a:	d1e6      	bne.n	80046ea <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	3308      	adds	r3, #8
 8004722:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	e853 3f00 	ldrex	r3, [r3]
 800472a:	613b      	str	r3, [r7, #16]
   return(result);
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	f023 0301 	bic.w	r3, r3, #1
 8004732:	66bb      	str	r3, [r7, #104]	; 0x68
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	3308      	adds	r3, #8
 800473a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800473c:	623a      	str	r2, [r7, #32]
 800473e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004740:	69f9      	ldr	r1, [r7, #28]
 8004742:	6a3a      	ldr	r2, [r7, #32]
 8004744:	e841 2300 	strex	r3, r2, [r1]
 8004748:	61bb      	str	r3, [r7, #24]
   return(result);
 800474a:	69bb      	ldr	r3, [r7, #24]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d1e5      	bne.n	800471c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2220      	movs	r2, #32
 8004754:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2220      	movs	r2, #32
 800475c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2220      	movs	r2, #32
 8004764:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2200      	movs	r2, #0
 800476c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004770:	2303      	movs	r3, #3
 8004772:	e010      	b.n	8004796 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	69da      	ldr	r2, [r3, #28]
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	4013      	ands	r3, r2
 800477e:	68ba      	ldr	r2, [r7, #8]
 8004780:	429a      	cmp	r2, r3
 8004782:	bf0c      	ite	eq
 8004784:	2301      	moveq	r3, #1
 8004786:	2300      	movne	r3, #0
 8004788:	b2db      	uxtb	r3, r3
 800478a:	461a      	mov	r2, r3
 800478c:	79fb      	ldrb	r3, [r7, #7]
 800478e:	429a      	cmp	r2, r3
 8004790:	f43f af46 	beq.w	8004620 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004794:	2300      	movs	r3, #0
}
 8004796:	4618      	mov	r0, r3
 8004798:	3770      	adds	r7, #112	; 0x70
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}

0800479e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800479e:	b480      	push	{r7}
 80047a0:	b085      	sub	sp, #20
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d101      	bne.n	80047b4 <HAL_UARTEx_DisableFifoMode+0x16>
 80047b0:	2302      	movs	r3, #2
 80047b2:	e027      	b.n	8004804 <HAL_UARTEx_DisableFifoMode+0x66>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2224      	movs	r2, #36	; 0x24
 80047c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f022 0201 	bic.w	r2, r2, #1
 80047da:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80047e2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2200      	movs	r2, #0
 80047e8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	68fa      	ldr	r2, [r7, #12]
 80047f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2220      	movs	r2, #32
 80047f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004802:	2300      	movs	r3, #0
}
 8004804:	4618      	mov	r0, r3
 8004806:	3714      	adds	r7, #20
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr

08004810 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004820:	2b01      	cmp	r3, #1
 8004822:	d101      	bne.n	8004828 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004824:	2302      	movs	r3, #2
 8004826:	e02d      	b.n	8004884 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2224      	movs	r2, #36	; 0x24
 8004834:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f022 0201 	bic.w	r2, r2, #1
 800484e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	683a      	ldr	r2, [r7, #0]
 8004860:	430a      	orrs	r2, r1
 8004862:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f000 f84f 	bl	8004908 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	68fa      	ldr	r2, [r7, #12]
 8004870:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2220      	movs	r2, #32
 8004876:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004882:	2300      	movs	r3, #0
}
 8004884:	4618      	mov	r0, r3
 8004886:	3710      	adds	r7, #16
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b084      	sub	sp, #16
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800489c:	2b01      	cmp	r3, #1
 800489e:	d101      	bne.n	80048a4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80048a0:	2302      	movs	r3, #2
 80048a2:	e02d      	b.n	8004900 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2224      	movs	r2, #36	; 0x24
 80048b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f022 0201 	bic.w	r2, r2, #1
 80048ca:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	683a      	ldr	r2, [r7, #0]
 80048dc:	430a      	orrs	r2, r1
 80048de:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f000 f811 	bl	8004908 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	68fa      	ldr	r2, [r7, #12]
 80048ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2220      	movs	r2, #32
 80048f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	3710      	adds	r7, #16
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}

08004908 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004908:	b480      	push	{r7}
 800490a:	b085      	sub	sp, #20
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004914:	2b00      	cmp	r3, #0
 8004916:	d108      	bne.n	800492a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004928:	e031      	b.n	800498e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800492a:	2310      	movs	r3, #16
 800492c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800492e:	2310      	movs	r3, #16
 8004930:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	0e5b      	lsrs	r3, r3, #25
 800493a:	b2db      	uxtb	r3, r3
 800493c:	f003 0307 	and.w	r3, r3, #7
 8004940:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	0f5b      	lsrs	r3, r3, #29
 800494a:	b2db      	uxtb	r3, r3
 800494c:	f003 0307 	and.w	r3, r3, #7
 8004950:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004952:	7bbb      	ldrb	r3, [r7, #14]
 8004954:	7b3a      	ldrb	r2, [r7, #12]
 8004956:	4911      	ldr	r1, [pc, #68]	; (800499c <UARTEx_SetNbDataToProcess+0x94>)
 8004958:	5c8a      	ldrb	r2, [r1, r2]
 800495a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800495e:	7b3a      	ldrb	r2, [r7, #12]
 8004960:	490f      	ldr	r1, [pc, #60]	; (80049a0 <UARTEx_SetNbDataToProcess+0x98>)
 8004962:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004964:	fb93 f3f2 	sdiv	r3, r3, r2
 8004968:	b29a      	uxth	r2, r3
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004970:	7bfb      	ldrb	r3, [r7, #15]
 8004972:	7b7a      	ldrb	r2, [r7, #13]
 8004974:	4909      	ldr	r1, [pc, #36]	; (800499c <UARTEx_SetNbDataToProcess+0x94>)
 8004976:	5c8a      	ldrb	r2, [r1, r2]
 8004978:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800497c:	7b7a      	ldrb	r2, [r7, #13]
 800497e:	4908      	ldr	r1, [pc, #32]	; (80049a0 <UARTEx_SetNbDataToProcess+0x98>)
 8004980:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004982:	fb93 f3f2 	sdiv	r3, r3, r2
 8004986:	b29a      	uxth	r2, r3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800498e:	bf00      	nop
 8004990:	3714      	adds	r7, #20
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr
 800499a:	bf00      	nop
 800499c:	08004a50 	.word	0x08004a50
 80049a0:	08004a58 	.word	0x08004a58

080049a4 <__libc_init_array>:
 80049a4:	b570      	push	{r4, r5, r6, lr}
 80049a6:	4d0d      	ldr	r5, [pc, #52]	; (80049dc <__libc_init_array+0x38>)
 80049a8:	4c0d      	ldr	r4, [pc, #52]	; (80049e0 <__libc_init_array+0x3c>)
 80049aa:	1b64      	subs	r4, r4, r5
 80049ac:	10a4      	asrs	r4, r4, #2
 80049ae:	2600      	movs	r6, #0
 80049b0:	42a6      	cmp	r6, r4
 80049b2:	d109      	bne.n	80049c8 <__libc_init_array+0x24>
 80049b4:	4d0b      	ldr	r5, [pc, #44]	; (80049e4 <__libc_init_array+0x40>)
 80049b6:	4c0c      	ldr	r4, [pc, #48]	; (80049e8 <__libc_init_array+0x44>)
 80049b8:	f000 f820 	bl	80049fc <_init>
 80049bc:	1b64      	subs	r4, r4, r5
 80049be:	10a4      	asrs	r4, r4, #2
 80049c0:	2600      	movs	r6, #0
 80049c2:	42a6      	cmp	r6, r4
 80049c4:	d105      	bne.n	80049d2 <__libc_init_array+0x2e>
 80049c6:	bd70      	pop	{r4, r5, r6, pc}
 80049c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80049cc:	4798      	blx	r3
 80049ce:	3601      	adds	r6, #1
 80049d0:	e7ee      	b.n	80049b0 <__libc_init_array+0xc>
 80049d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80049d6:	4798      	blx	r3
 80049d8:	3601      	adds	r6, #1
 80049da:	e7f2      	b.n	80049c2 <__libc_init_array+0x1e>
 80049dc:	08004a68 	.word	0x08004a68
 80049e0:	08004a68 	.word	0x08004a68
 80049e4:	08004a68 	.word	0x08004a68
 80049e8:	08004a6c 	.word	0x08004a6c

080049ec <memset>:
 80049ec:	4402      	add	r2, r0
 80049ee:	4603      	mov	r3, r0
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d100      	bne.n	80049f6 <memset+0xa>
 80049f4:	4770      	bx	lr
 80049f6:	f803 1b01 	strb.w	r1, [r3], #1
 80049fa:	e7f9      	b.n	80049f0 <memset+0x4>

080049fc <_init>:
 80049fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049fe:	bf00      	nop
 8004a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a02:	bc08      	pop	{r3}
 8004a04:	469e      	mov	lr, r3
 8004a06:	4770      	bx	lr

08004a08 <_fini>:
 8004a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a0a:	bf00      	nop
 8004a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a0e:	bc08      	pop	{r3}
 8004a10:	469e      	mov	lr, r3
 8004a12:	4770      	bx	lr
